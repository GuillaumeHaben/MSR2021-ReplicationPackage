[
    {
        "Body": "{\n    org.springframework.web.context.WebApplicationContext applicationContext = org.springframework.web.context.ContextLoader.getCurrentWebApplicationContext();\n    org.togglz.spring.test.SpringEarlyFeatureUsageService service = applicationContext.getBean(org.togglz.spring.test.SpringEarlyFeatureUsageService.class);\n    org.junit.Assert.assertEquals(false, service.isFeature1Active());\n    org.junit.Assert.assertEquals(false, service.isFeature2Active());\n}",
        "ClassName": "SpringEarlyFeatureUsageTest",
        "Label": 1,
        "MethodName": "testEarlyFeatureUsage",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    org.togglz.core.manager.FeatureManager featureManager = org.togglz.core.context.FeatureContext.getFeatureManagerOrNull();\n    assertThat(featureManager).isNotNull();\n    assertThat(featureManager.getFeatures()).containsExactly(org.togglz.guice.GuiceFeatures.FEATURE1, org.togglz.guice.GuiceFeatures.FEATURE2);\n}",
        "ClassName": "GuiceIntegrationTest",
        "Label": 1,
        "MethodName": "testGuiceIntegration",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    org.togglz.spring.test.proxy.SomeService someService = ((org.togglz.spring.test.proxy.SomeService) (getSpringBean(\"someServiceAutoDetectProxyType\")));\n    org.junit.Assert.assertNotNull(someService);\n    org.togglz.core.context.FeatureContext.getFeatureManager().setFeatureState(new org.togglz.core.repository.FeatureState(org.togglz.spring.test.proxy.ProxyFeatures.SERVICE_TOGGLE, false));\n    org.junit.Assert.assertEquals(\"I'm SomeServiceInactive\", someService.whoAreYou());\n    org.togglz.core.context.FeatureContext.getFeatureManager().setFeatureState(new org.togglz.core.repository.FeatureState(org.togglz.spring.test.proxy.ProxyFeatures.SERVICE_TOGGLE, true));\n    org.junit.Assert.assertEquals(\"I'm SomeServiceActive\", someService.whoAreYou());\n}",
        "ClassName": "FeatureProxyTest",
        "Label": 1,
        "MethodName": "testProxyWithAutoDetectedProxyType",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    com.gargoylesoftware.htmlunit.WebClient client = new com.gargoylesoftware.htmlunit.WebClient();\n    com.gargoylesoftware.htmlunit.TextPage page = client.getPage(url + \"features\");\n    org.junit.Assert.assertTrue(page.getContent().contains(\"FEATURE1 = false\"));\n    org.junit.Assert.assertTrue(page.getContent().contains(\"FEATURE2 = true\"));\n}",
        "ClassName": "CDIBasicOperationTest",
        "Label": 1,
        "MethodName": "testCDIBasicFeatures",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    com.gargoylesoftware.htmlunit.WebClient client = new com.gargoylesoftware.htmlunit.WebClient();\n    com.gargoylesoftware.htmlunit.html.HtmlPage page = client.getPage(url + \"index.jsf\");\n    org.junit.Assert.assertTrue(page.asText().contains(\"Text for ENABLED feature!\"));\n    org.junit.Assert.assertFalse(page.asText().contains(\"Text for DISABLED feature!\"));\n    org.junit.Assert.assertNotNull(page.getElementById(\"enabledDiv\"));\n    org.junit.Assert.assertNull(page.getElementById(\"disabledDiv\"));\n}",
        "ClassName": "JSFMapTest",
        "Label": 1,
        "MethodName": "testJSFFeatureMap",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    com.gargoylesoftware.htmlunit.WebClient client = new com.gargoylesoftware.htmlunit.WebClient();\n    com.gargoylesoftware.htmlunit.TextPage beforeLogin = client.getPage(url + \"user\");\n    org.junit.Assert.assertTrue(beforeLogin.getContent().contains(\"USER = null\"));\n    org.junit.Assert.assertTrue(beforeLogin.getContent().contains(\"ADMIN = null\"));\n    com.gargoylesoftware.htmlunit.TextPage loginPage = client.getPage(url + \"login?user=ck\");\n    org.junit.Assert.assertTrue(loginPage.getContent().contains(\"SUCCESS\"));\n    com.gargoylesoftware.htmlunit.TextPage afterLogin = client.getPage(url + \"user\");\n    org.junit.Assert.assertTrue(afterLogin.getContent().contains(\"USER = ck\"));\n    org.junit.Assert.assertTrue(afterLogin.getContent().contains(\"ADMIN = true\"));\n    com.gargoylesoftware.htmlunit.TextPage logoutPage = client.getPage(url + \"logout\");\n    org.junit.Assert.assertTrue(logoutPage.getContent().contains(\"SUCCESS\"));\n    com.gargoylesoftware.htmlunit.TextPage afterLogout = client.getPage(url + \"user\");\n    org.junit.Assert.assertTrue(afterLogout.getContent().contains(\"USER = null\"));\n    org.junit.Assert.assertTrue(afterLogout.getContent().contains(\"ADMIN = null\"));\n}",
        "ClassName": "ShiroUsersTest",
        "Label": 1,
        "MethodName": "testShiroLoginAsFeatureAdmin",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    java.lang.String url = (baseUrl + org.togglz.servlet.test.util.HttpServletRequestHolderServlet.URL_PATTERN) + \"?number=42\";\n    com.gargoylesoftware.htmlunit.TextPage page = new com.gargoylesoftware.htmlunit.WebClient().getPage(url);\n    assertThat(page.getWebResponse().getStatusCode()).isEqualTo(200);\n    assertThat(page.getContent()).contains(\"number=42\");\n}",
        "ClassName": "HttpServletRequestHolderTest",
        "Label": 1,
        "MethodName": "testRequestIsBoundToHolder",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    com.gargoylesoftware.htmlunit.WebClient client = new com.gargoylesoftware.htmlunit.WebClient();\n    com.gargoylesoftware.htmlunit.TextPage page = client.getPage(url + \"features\");\n    org.junit.Assert.assertTrue(page.getContent().contains(\"FEATURE1 = false\"));\n    org.junit.Assert.assertTrue(page.getContent().contains(\"FEATURE2 = true\"));\n}",
        "ClassName": "SpringBasicOperationTest",
        "Label": 1,
        "MethodName": "testSpringBasicFeatures",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    org.togglz.core.repository.FeatureState savedFeatureState = new org.togglz.core.repository.FeatureState(org.togglz.cassandra.CassandraStateRepositoryTest.TestFeature.FEATURE);\n    savedFeatureState.setStrategyId(org.togglz.core.activation.UsernameActivationStrategy.ID);\n    savedFeatureState.setParameter(org.togglz.core.activation.UsernameActivationStrategy.PARAM_USERS, \"user1, user2, user3\");\n    stateRepository.setFeatureState(savedFeatureState);\n    org.togglz.core.repository.FeatureState loadedFeatureState = stateRepository.getFeatureState(org.togglz.cassandra.CassandraStateRepositoryTest.TestFeature.FEATURE);\n    org.junit.Assert.assertThat(reflectionEquals(savedFeatureState, loadedFeatureState), org.hamcrest.CoreMatchers.is(true));\n    org.togglz.core.repository.FeatureState featureStateWithoutStrategy = new org.togglz.core.repository.FeatureState(org.togglz.cassandra.CassandraStateRepositoryTest.TestFeature.FEATURE);\n    stateRepository.setFeatureState(featureStateWithoutStrategy);\n    loadedFeatureState = stateRepository.getFeatureState(org.togglz.cassandra.CassandraStateRepositoryTest.TestFeature.FEATURE);\n    org.junit.Assert.assertThat(reflectionEquals(featureStateWithoutStrategy, loadedFeatureState), org.hamcrest.CoreMatchers.is(true));\n}",
        "ClassName": "CassandraStateRepositoryTest",
        "Label": 1,
        "MethodName": "testRemovingOfActivationStrategy",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(\"I'm managed by Spring\", org.togglz.core.context.FeatureContext.getFeatureManager().getName());\n}",
        "ClassName": "ManagedFeatureManagerTest",
        "Label": 1,
        "MethodName": "containerManagedFeatureManagerShouldBeUsedIfAvailable",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    setupTestWithEmptyDatastore();\n    org.togglz.core.repository.FeatureState savedFeatureState = new org.togglz.core.repository.FeatureState(org.togglz.zookeeper.ZookeeperStateRepositoryTest.TestFeature.FEATURE);\n    savedFeatureState.setStrategyId(org.togglz.core.activation.UsernameActivationStrategy.ID);\n    savedFeatureState.setParameter(org.togglz.core.activation.UsernameActivationStrategy.PARAM_USERS, \"user1, user2, user3\");\n    stateRepository.setFeatureState(savedFeatureState);\n    org.togglz.core.repository.FeatureState loadedFeatureState = stateRepository.getFeatureState(org.togglz.zookeeper.ZookeeperStateRepositoryTest.TestFeature.FEATURE);\n    org.junit.Assert.assertThat(reflectionEquals(savedFeatureState, loadedFeatureState), org.hamcrest.CoreMatchers.is(true));\n    org.togglz.zookeeper.FeatureStateStorageWrapper externallySetStateWrapper = new org.togglz.zookeeper.FeatureStateStorageWrapper();\n    org.togglz.core.repository.FeatureState externallySetState = new org.togglz.core.repository.FeatureState(org.togglz.zookeeper.ZookeeperStateRepositoryTest.TestFeature.FEATURE);\n    com.fasterxml.jackson.databind.ObjectMapper objectMapper = new com.fasterxml.jackson.databind.ObjectMapper();\n    final java.lang.String json = objectMapper.writeValueAsString(externallySetStateWrapper);\n    final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1);\n    new java.lang.Thread(new java.lang.Runnable() {\n        @java.lang.Override\n        public void run() {\n            try {\n                serverClientPair.client.setData().forPath(org.togglz.zookeeper.ZookeeperStateRepositoryTest.TEST_ZNODE + \"/FEATURE\", json.getBytes(\"UTF-8\"));\n                latch.countDown();\n            } catch (java.lang.Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }).start();\n    latch.await(2, java.util.concurrent.TimeUnit.SECONDS);\n    java.lang.Thread.sleep(25);\n    loadedFeatureState = stateRepository.getFeatureState(org.togglz.zookeeper.ZookeeperStateRepositoryTest.TestFeature.FEATURE);\n    org.junit.Assert.assertThat(reflectionEquals(externallySetState, loadedFeatureState), org.hamcrest.CoreMatchers.is(true));\n}",
        "ClassName": "ZookeeperStateRepositoryTest",
        "Label": 1,
        "MethodName": "testZkNodeChangesUpdateFeatureState",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    com.gargoylesoftware.htmlunit.WebClient client = new com.gargoylesoftware.htmlunit.WebClient();\n    com.gargoylesoftware.htmlunit.TextPage page = client.getPage(url + \"features?user=ck\");\n    org.junit.Assert.assertTrue(page.getContent().contains(\"DISABLED = false\"));\n}",
        "ClassName": "ThreadBasedUsersTest",
        "Label": 1,
        "MethodName": "testDisabledForAllUsers",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    com.gargoylesoftware.htmlunit.WebClient client = new com.gargoylesoftware.htmlunit.WebClient();\n    long start = java.lang.System.currentTimeMillis();\n    for (int i = 0; i < 10; i++) {\n        com.gargoylesoftware.htmlunit.TextPage page = client.getPage(url + \"features?user=ck\");\n        org.junit.Assert.assertTrue(page.getContent().contains(\"F1 = false\"));\n    }\n    long duration = java.lang.System.currentTimeMillis() - start;\n    org.junit.Assert.assertTrue(duration < 4000);\n}",
        "ClassName": "CacheRepositoryTest",
        "Label": 1,
        "MethodName": "testCachingOfFeatureState",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    org.junit.Assert.assertFalse(strategy.isActive(state, user));\n}",
        "ClassName": "SystemPropertyActivationStrategyTest",
        "Label": 1,
        "MethodName": "shouldBeFalseIfPropertyDoesNotExist",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    org.togglz.core.repository.FeatureState savedFeatureState = new org.togglz.core.repository.FeatureState(org.togglz.cassandra.CassandraStateRepositoryTest.TestFeature.FEATURE).enable();\n    stateRepository.setFeatureState(savedFeatureState);\n    org.togglz.core.repository.FeatureState loadedFeatureState = stateRepository.getFeatureState(org.togglz.cassandra.CassandraStateRepositoryTest.TestFeature.FEATURE);\n    org.junit.Assert.assertThat(loadedFeatureState.isEnabled(), org.hamcrest.CoreMatchers.is(true));\n    stateRepository.setFeatureState(savedFeatureState.disable());\n    loadedFeatureState = stateRepository.getFeatureState(org.togglz.cassandra.CassandraStateRepositoryTest.TestFeature.FEATURE);\n    org.junit.Assert.assertThat(loadedFeatureState.isEnabled(), org.hamcrest.CoreMatchers.is(false));\n}",
        "ClassName": "CassandraStateRepositoryTest",
        "Label": 1,
        "MethodName": "testEnabledStateSavingAndLoading",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    org.togglz.core.manager.FeatureManager featureManager = org.togglz.core.context.FeatureContext.getFeatureManager();\n    org.junit.Assert.assertNotNull(featureManager);\n    org.junit.Assert.assertNotNull(dataSource);\n    org.togglz.core.repository.FeatureState stateNoEntry = featureManager.getFeatureState(org.togglz.servlet.test.repository.jdbc.JDBCFeatures.F1);\n    org.junit.Assert.assertEquals(false, stateNoEntry.isEnabled());\n    org.junit.Assert.assertEquals(null, stateNoEntry.getStrategyId());\n    org.junit.Assert.assertEquals(0, stateNoEntry.getParameterNames().size());\n    int inserted = executeUpdate(\"INSERT INTO MYTABLE \" + (\"(FEATURE_NAME, FEATURE_ENABLED, STRATEGY_ID, STRATEGY_PARAMS) \" + \"VALUES ('F1', 1, 'SomeStrategy', 'param=foobar')\"));\n    org.junit.Assert.assertEquals(1, inserted);\n    org.togglz.core.repository.FeatureState stateEnabled = featureManager.getFeatureState(org.togglz.servlet.test.repository.jdbc.JDBCFeatures.F1);\n    org.junit.Assert.assertEquals(true, stateEnabled.isEnabled());\n    org.junit.Assert.assertEquals(\"SomeStrategy\", stateEnabled.getStrategyId());\n    org.junit.Assert.assertEquals(1, stateEnabled.getParameterNames().size());\n    org.junit.Assert.assertEquals(\"foobar\", stateEnabled.getParameter(\"param\"));\n    executeUpdate(\"UPDATE MYTABLE \" + (\"SET FEATURE_ENABLED = 0, STRATEGY_ID = NULL, STRATEGY_PARAMS = NULL \" + \"WHERE FEATURE_NAME = 'F1'\"));\n    org.togglz.core.repository.FeatureState stateDisabled = featureManager.getFeatureState(org.togglz.servlet.test.repository.jdbc.JDBCFeatures.F1);\n    org.junit.Assert.assertEquals(false, stateDisabled.isEnabled());\n    org.junit.Assert.assertEquals(null, stateDisabled.getStrategyId());\n    org.junit.Assert.assertEquals(0, stateDisabled.getParameterNames().size());\n}",
        "ClassName": "JDBCRepositoryTest",
        "Label": 1,
        "MethodName": "testGetFeatureStateFromJDBCRepository",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    org.junit.Assert.assertNull(stateRepository.getFeatureState(org.togglz.cassandra.CassandraStateRepositoryTest.TestFeature.FEATURE));\n    stateRepository.setFeatureState(new org.togglz.core.repository.FeatureState(org.togglz.cassandra.CassandraStateRepositoryTest.TestFeature.FEATURE));\n    org.junit.Assert.assertNotNull(stateRepository.getFeatureState(org.togglz.cassandra.CassandraStateRepositoryTest.TestFeature.FEATURE));\n}",
        "ClassName": "CassandraStateRepositoryTest",
        "Label": 1,
        "MethodName": "testFeatureSavingAndLoading",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    org.togglz.core.repository.FeatureState savedFeatureState = new org.togglz.core.repository.FeatureState(org.togglz.cassandra.CassandraStateRepositoryTest.TestFeature.FEATURE);\n    savedFeatureState.setStrategyId(org.togglz.core.activation.UsernameActivationStrategy.ID);\n    savedFeatureState.setParameter(org.togglz.core.activation.UsernameActivationStrategy.PARAM_USERS, \"user1, user2, user3\");\n    stateRepository.setFeatureState(savedFeatureState);\n    org.togglz.core.repository.FeatureState loadedFeatureState = stateRepository.getFeatureState(org.togglz.cassandra.CassandraStateRepositoryTest.TestFeature.FEATURE);\n    org.junit.Assert.assertThat(reflectionEquals(savedFeatureState, loadedFeatureState), org.hamcrest.CoreMatchers.is(true));\n}",
        "ClassName": "CassandraStateRepositoryTest",
        "Label": 1,
        "MethodName": "testActivationStrategySavingAndLoading",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    java.lang.String columnFamilyName = \"I_dont_exist\";\n    com.netflix.astyanax.Keyspace keyspace = new org.togglz.cassandra.KeyspaceBuilder(\"Test Cluster\", \"TogglzTest\").setThriftPort(9171).build();\n    org.junit.Assert.assertNull(keyspace.describeKeyspace().getColumnFamily(columnFamilyName));\n    org.togglz.cassandra.CassandraStateRepository.newBuilder(keyspace).autoCreateColumnFamily(true).columnFamily(columnFamilyName).build();\n    org.junit.Assert.assertNotNull(keyspace.describeKeyspace().getColumnFamily(columnFamilyName));\n}",
        "ClassName": "CassandraStateRepositoryTest",
        "Label": 1,
        "MethodName": "testAutomaticCreationOfColumnFamily",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    com.gargoylesoftware.htmlunit.WebClient client = new com.gargoylesoftware.htmlunit.WebClient();\n    com.gargoylesoftware.htmlunit.TextPage page = client.getPage(url + \"features\");\n    org.junit.Assert.assertTrue(page.getContent().contains(\"FEATURE1 = false\"));\n    org.junit.Assert.assertTrue(page.getContent().contains(\"FEATURE2 = true\"));\n}",
        "ClassName": "ServletBasicOperationTest",
        "Label": 1,
        "MethodName": "testSerlvetBasicFeatures",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/togglz"
    },
    {
        "Body": "{\n    java.net.InetSocketAddress address = start();\n    this.connpool.setDefaultMaxPerRoute(3);\n    this.connpool.setMaxTotal(3);\n    java.lang.String pattern = org.apache.http.nio.protocol.RndTestPatternGenerator.generateText();\n    int count = org.apache.http.nio.protocol.RndTestPatternGenerator.generateCount(1000);\n    java.lang.StringBuilder buffer = new java.lang.StringBuilder();\n    for (int i = 0; i < count; i++) {\n        buffer.append(pattern);\n    }\n    java.lang.String expectedPattern = buffer.toString();\n    org.apache.http.HttpHost target = new org.apache.http.HttpHost(\"localhost\", address.getPort());\n    java.util.Queue<java.util.concurrent.Future<org.apache.http.HttpResponse>> queue = new java.util.concurrent.ConcurrentLinkedQueue<java.util.concurrent.Future<org.apache.http.HttpResponse>>();\n    for (int i = 0; i < 30; i++) {\n        org.apache.http.message.BasicHttpEntityEnclosingRequest request = new org.apache.http.message.BasicHttpEntityEnclosingRequest(\"POST\", (pattern + \"x\") + count, org.apache.http.HttpVersion.HTTP_1_0);\n        org.apache.http.nio.entity.NStringEntity entity = org.apache.http.nio.entity.NStringEntity.create(expectedPattern, org.apache.http.entity.ContentType.DEFAULT_TEXT);\n        request.setEntity(entity);\n        java.util.concurrent.Future<org.apache.http.HttpResponse> future = this.executor.execute(new org.apache.http.nio.protocol.BasicAsyncRequestProducer(target, request), new org.apache.http.nio.protocol.BasicAsyncResponseConsumer(), this.connpool);\n        queue.add(future);\n    }\n    org.junit.Assert.assertEquals(\"Test client status\", org.apache.http.nio.reactor.IOReactorStatus.ACTIVE, this.client.getStatus());\n    while (!queue.isEmpty()) {\n        java.util.concurrent.Future<org.apache.http.HttpResponse> future = queue.remove();\n        org.apache.http.HttpResponse response = future.get();\n        org.junit.Assert.assertNotNull(response);\n        org.junit.Assert.assertEquals(expectedPattern, org.apache.http.util.EntityUtils.toString(response.getEntity()));\n    } \n}",
        "ClassName": "TestHttpAsyncHandlers",
        "Label": 1,
        "MethodName": "testHttpPostsHTTP10",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/httpcore"
    },
    {
        "Body": "{\n    org.apache.http.pool.TestConnPool.LocalConnFactory connFactory = org.mockito.Mockito.mock(org.apache.http.pool.TestConnPool.LocalConnFactory.class);\n    org.apache.http.HttpConnection conn1 = org.mockito.Mockito.mock(org.apache.http.HttpConnection.class);\n    org.apache.http.HttpConnection conn2 = org.mockito.Mockito.mock(org.apache.http.HttpConnection.class);\n    org.apache.http.HttpConnection conn3 = org.mockito.Mockito.mock(org.apache.http.HttpConnection.class);\n    org.mockito.Mockito.when(connFactory.create(org.mockito.Mockito.eq(\"somehost\"))).thenReturn(conn1, conn2, conn3);\n    org.apache.http.pool.TestConnPool.LocalConnPool pool = new org.apache.http.pool.TestConnPool.LocalConnPool(connFactory, 2, 10);\n    pool.setMaxPerRoute(\"somehost\", 2);\n    pool.setMaxTotal(2);\n    java.util.concurrent.Future<org.apache.http.pool.TestConnPool.LocalPoolEntry> future1 = pool.lease(\"somehost\", null);\n    org.apache.http.pool.TestConnPool.GetPoolEntryThread t1 = new org.apache.http.pool.TestConnPool.GetPoolEntryThread(future1);\n    t1.start();\n    java.util.concurrent.Future<org.apache.http.pool.TestConnPool.LocalPoolEntry> future2 = pool.lease(\"somehost\", null);\n    org.apache.http.pool.TestConnPool.GetPoolEntryThread t2 = new org.apache.http.pool.TestConnPool.GetPoolEntryThread(future2);\n    t2.start();\n    t1.join(org.apache.http.pool.TestConnPool.GRACE_PERIOD);\n    junit.framework.Assert.assertTrue(future1.isDone());\n    org.apache.http.pool.TestConnPool.LocalPoolEntry entry1 = t1.getEntry();\n    junit.framework.Assert.assertNotNull(entry1);\n    t2.join(org.apache.http.pool.TestConnPool.GRACE_PERIOD);\n    junit.framework.Assert.assertTrue(future2.isDone());\n    org.apache.http.pool.TestConnPool.LocalPoolEntry entry2 = t2.getEntry();\n    junit.framework.Assert.assertNotNull(entry2);\n    org.apache.http.pool.PoolStats totals = pool.getTotalStats();\n    junit.framework.Assert.assertEquals(0, totals.getAvailable());\n    junit.framework.Assert.assertEquals(2, totals.getLeased());\n    junit.framework.Assert.assertEquals(0, totals.getPending());\n    entry1.setState(\"some-stuff\");\n    pool.release(entry1, true);\n    entry2.setState(\"some-stuff\");\n    pool.release(entry2, true);\n    org.mockito.Mockito.verify(connFactory, org.mockito.Mockito.times(2)).create(org.mockito.Mockito.eq(\"somehost\"));\n    java.util.concurrent.Future<org.apache.http.pool.TestConnPool.LocalPoolEntry> future3 = pool.lease(\"somehost\", \"some-other-stuff\");\n    org.apache.http.pool.TestConnPool.GetPoolEntryThread t3 = new org.apache.http.pool.TestConnPool.GetPoolEntryThread(future3);\n    t3.start();\n    t3.join(org.apache.http.pool.TestConnPool.GRACE_PERIOD);\n    junit.framework.Assert.assertTrue(future3.isDone());\n    org.apache.http.pool.TestConnPool.LocalPoolEntry entry3 = t3.getEntry();\n    junit.framework.Assert.assertNotNull(entry3);\n    org.mockito.Mockito.verify(connFactory, org.mockito.Mockito.times(3)).create(org.mockito.Mockito.eq(\"somehost\"));\n    org.mockito.Mockito.verify(conn1).close();\n    org.mockito.Mockito.verify(conn2, org.mockito.Mockito.never()).close();\n    totals = pool.getTotalStats();\n    junit.framework.Assert.assertEquals(1, totals.getAvailable());\n    junit.framework.Assert.assertEquals(1, totals.getLeased());\n}",
        "ClassName": "TestConnPool",
        "Label": 1,
        "MethodName": "testStatefulConnectionRedistributionOnPerRouteMaxLimit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/httpcore"
    },
    {
        "Body": "{\n    com.ea.orbit.actors.OrbitStage stage = createStage();\n    com.ea.orbit.actors.OrbitStage client = createClient();\n    com.ea.orbit.actors.test.actors.ISomeMatch match = com.ea.orbit.actors.IActor.getReference(com.ea.orbit.actors.test.actors.ISomeMatch.class, \"1000\");\n    com.ea.orbit.actors.test.actors.ISomePlayer player = com.ea.orbit.actors.IActor.getReference(com.ea.orbit.actors.test.actors.ISomePlayer.class, \"101\");\n    match.addPlayer(player).get();\n    int machEventCount = player.getMatchEventCount().get();\n    clock.incrementTimeMillis(java.util.concurrent.TimeUnit.MINUTES.toMillis(60));\n    org.junit.Assert.assertEquals(machEventCount, player.getMatchEventCount().get().intValue());\n    stage.cleanup(true);\n    assertNotEquals(machEventCount, player.getMatchEventCount().get().intValue());\n}",
        "ClassName": "LifeCycleTest",
        "Label": 1,
        "MethodName": "deactivationTest",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/orbit"
    },
    {
        "Body": "{\n    com.ea.orbit.actors.OrbitStage stage1 = createStage();\n    final com.ea.orbit.actors.test.ExceptionalTest.IExceptionalThing ref = stage1.getReference(com.ea.orbit.actors.test.ExceptionalTest.IExceptionalThing.class, \"0\");\n    final com.ea.orbit.concurrent.Task<java.lang.String> fut = ref.justThrowAnException();\n    final java.lang.Throwable ex = fut.handle(( r, e) -> e.getCause()).join();\n    org.junit.Assert.assertTrue(fut.isCompletedExceptionally());\n    org.junit.Assert.assertTrue(ex instanceof java.lang.RuntimeException);\n    org.junit.Assert.assertEquals(\"exception!\", ex.getMessage());\n}",
        "ClassName": "ExceptionalTest",
        "Label": 1,
        "MethodName": "checkingTheException",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/orbit"
    },
    {
        "Body": "{\n    com.ea.orbit.actors.OrbitStage stage1 = createStage();\n    com.ea.orbit.actors.OrbitStage frontend = createClient();\n    com.ea.orbit.actors.test.actors.ISomeChatRoom chatRoom = com.ea.orbit.actors.IActor.getReference(com.ea.orbit.actors.test.actors.ISomeChatRoom.class, \"1\");\n    com.ea.orbit.actors.test.TimerTest.SomeChatObserver observer = new com.ea.orbit.actors.test.TimerTest.SomeChatObserver();\n    chatRoom.join(observer).get();\n    chatRoom.startCountdown(5, \"counting\").get();\n    org.junit.Assert.assertNotNull(\"counting 5\", observer.messagesReceived.poll(20, java.util.concurrent.TimeUnit.SECONDS).getRight());\n    long start = java.lang.System.currentTimeMillis();\n    org.junit.Assert.assertNotNull(\"counting 4\", observer.messagesReceived.poll(2000, java.util.concurrent.TimeUnit.SECONDS).getRight());\n    org.junit.Assert.assertNotNull(\"counting 3\", observer.messagesReceived.poll(5, java.util.concurrent.TimeUnit.SECONDS).getRight());\n    org.junit.Assert.assertNotNull(\"counting 2\", observer.messagesReceived.poll(5, java.util.concurrent.TimeUnit.SECONDS).getRight());\n    org.junit.Assert.assertNotNull(\"counting 1\", observer.messagesReceived.poll(5, java.util.concurrent.TimeUnit.SECONDS).getRight());\n    org.junit.Assert.assertTrue((java.lang.System.currentTimeMillis() - start) > 10);\n    junit.framework.Assert.assertNull(observer.messagesReceived.poll(10, java.util.concurrent.TimeUnit.MILLISECONDS));\n}",
        "ClassName": "TimerTest",
        "Label": 1,
        "MethodName": "timerTest",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/orbit"
    },
    {
        "Body": "{\n    com.ea.orbit.actors.OrbitStage stage1 = createStage();\n    com.ea.orbit.actors.test.ObserverTest.SomeChatObserver observer1 = new com.ea.orbit.actors.test.ObserverTest.SomeChatObserver();\n    final com.ea.orbit.actors.test.actors.ISomeChatObserver ref1 = stage1.getObserverReference(observer1);\n    ref1.receiveMessage(null, \"hello\").join();\n    observer1 = null;\n    java.lang.System.gc();\n    expectException(() -> ref1.receiveMessage(null, \"hello\").join());\n}",
        "ClassName": "ObserverTest",
        "Label": 1,
        "MethodName": "observerGarbageCollection",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/orbit"
    },
    {
        "Body": "{\n    com.ea.orbit.actors.OrbitStage stage1 = createStage();\n    com.ea.orbit.actors.OrbitStage frontend = createClient();\n    com.ea.orbit.actors.test.ReminderTest.IReminderTestActor actor = com.ea.orbit.actors.IActor.getReference(com.ea.orbit.actors.test.ReminderTest.IReminderTestActor.class, \"1\");\n    frontend.bind();\n    actor.addReminder(\"bla\", 0, 20, java.util.concurrent.TimeUnit.MILLISECONDS).join();\n    org.junit.Assert.assertEquals(\"bla\", com.ea.orbit.actors.test.ReminderTest.remindersReceived.poll(5, java.util.concurrent.TimeUnit.SECONDS));\n    stage1.stop().join();\n    com.ea.orbit.actors.test.ReminderTest.remindersReceived.clear();\n    junit.framework.Assert.assertNull(com.ea.orbit.actors.test.ReminderTest.remindersReceived.poll(5, java.util.concurrent.TimeUnit.MILLISECONDS));\n    com.ea.orbit.actors.OrbitStage stage2 = createStage();\n    org.junit.Assert.assertEquals(\"bla\", com.ea.orbit.actors.test.ReminderTest.remindersReceived.poll(5, java.util.concurrent.TimeUnit.SECONDS));\n}",
        "ClassName": "ReminderTest",
        "Label": 1,
        "MethodName": "persistedTimerTest",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/orbit"
    },
    {
        "Body": "{\n    com.ea.orbit.actors.OrbitStage stage1 = createStage();\n    com.ea.orbit.actors.OrbitStage client = createClient();\n    com.ea.orbit.actors.test.actors.IStatelessThing actor5 = com.ea.orbit.actors.IActor.getReference(com.ea.orbit.actors.test.actors.IStatelessThing.class, \"1000\");\n    final java.util.Set<java.util.UUID> set1 = new java.util.HashSet<>();\n    {\n        final java.util.List<java.util.concurrent.Future<java.util.UUID>> futures = new java.util.ArrayList<>();\n        for (int i = 0; i < 100; i++) {\n            futures.add(actor5.getUniqueActivationId(5000));\n        }\n        for (java.util.concurrent.Future<java.util.UUID> f : futures) {\n            set1.add(f.get(10, java.util.concurrent.TimeUnit.SECONDS));\n        }\n    }\n    org.junit.Assert.assertTrue(set1.size() > 1);\n    org.junit.Assert.assertTrue(set1.size() <= 100);\n    awaitFor(() -> isIdle(stage1));\n    clock.incrementTimeMillis(java.util.concurrent.TimeUnit.MINUTES.toMillis(8));\n    java.util.UUID theSurviving = actor5.getUniqueActivationId().get();\n    awaitFor(() -> isIdle(stage1));\n    clock.incrementTimeMillis(java.util.concurrent.TimeUnit.MINUTES.toMillis(8));\n    awaitFor(() -> isIdle(stage1));\n    stage1.cleanup(true);\n    final java.util.Set<java.util.UUID> set2 = new java.util.HashSet<>();\n    {\n        final java.util.List<java.util.concurrent.Future<java.util.UUID>> futures = new java.util.ArrayList<>();\n        for (int i = 0; i < 25; i++) {\n            futures.add(actor5.getUniqueActivationId(1000));\n        }\n        for (java.util.concurrent.Future<java.util.UUID> f : futures) {\n            set2.add(f.get(10, java.util.concurrent.TimeUnit.SECONDS));\n        }\n    }\n    org.junit.Assert.assertTrue(set2.size() > 1);\n    org.junit.Assert.assertTrue(set2.size() <= 100);\n    org.junit.Assert.assertTrue(set2.contains(theSurviving));\n    set2.retainAll(set1);\n    org.junit.Assert.assertEquals(1, set2.size());\n}",
        "ClassName": "DeactivationTest",
        "Label": 1,
        "MethodName": "statelessWorkerDeactivationTest",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/orbit"
    },
    {
        "Body": "{\n    com.ea.orbit.actors.OrbitStage stage = createStage();\n    com.ea.orbit.actors.OrbitStage client = createClient();\n    com.ea.orbit.actors.test.actors.ISomeActor actor1 = com.ea.orbit.actors.IActor.getReference(com.ea.orbit.actors.test.actors.ISomeActor.class, \"1000\");\n    final java.util.Set<java.util.UUID> set = new java.util.HashSet<>();\n    client.bind();\n    for (int i = 0; i < 25; i++) {\n        set.add(actor1.getUniqueActivationId().join());\n    }\n    org.junit.Assert.assertEquals(1, set.size());\n    stage.cleanup(true);\n    client.bind();\n    set.add(actor1.getUniqueActivationId().join());\n    org.junit.Assert.assertEquals(1, set.size());\n    clock.incrementTimeMillis(java.util.concurrent.TimeUnit.MINUTES.toMillis(20));\n    stage.cleanup(true);\n    client.bind();\n    set.add(actor1.getUniqueActivationId().join());\n    org.junit.Assert.assertEquals(2, set.size());\n}",
        "ClassName": "DeactivationTest",
        "Label": 1,
        "MethodName": "cleanupTest",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/orbit"
    },
    {
        "Body": "{\n    if (!org.apache.commons.exec.OS.isFamilyUnix()) {\n        java.lang.System.err.println(\"The test 'testSyncInvocationOfBackgroundProcess' does not support the following OS : \" + java.lang.System.getProperty(\"os.name\"));\n        return;\n    }\n    final org.apache.commons.exec.CommandLine cmdLine = new org.apache.commons.exec.CommandLine(\"sh\").addArgument(\"-c\").addArgument(testDir + \"/invoker.sh\", false);\n    final org.apache.commons.exec.DefaultExecutor executor = new org.apache.commons.exec.DefaultExecutor();\n    final org.apache.commons.exec.PumpStreamHandler pumpStreamHandler = new org.apache.commons.exec.PumpStreamHandler(java.lang.System.out, java.lang.System.err);\n    pumpStreamHandler.setStopTimeout(2000);\n    executor.setStreamHandler(pumpStreamHandler);\n    final long startTime = java.lang.System.currentTimeMillis();\n    java.lang.System.out.println(\"Executing \" + cmdLine);\n    try {\n        executor.execute(cmdLine);\n    } catch (final org.apache.commons.exec.ExecuteException e) {\n        final long duration = java.lang.System.currentTimeMillis() - startTime;\n        java.lang.System.out.println((\"Process completed in \" + duration) + \" millis; above is its output\");\n        return;\n    }\n    org.junit.Assert.fail(\"Expecting an ExecuteException\");\n}",
        "ClassName": "Exec57Test",
        "Label": 1,
        "MethodName": "testExec_57",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/commons-exec"
    },
    {
        "Body": "{\n    final int start = 0;\n    final int seconds = 1;\n    final int offsetMultiplier = 1;\n    final int maxRetries = 180;\n    int processTerminatedCounter = 0;\n    int watchdogKilledProcessCounter = 0;\n    final org.apache.commons.exec.CommandLine cmdLine = new org.apache.commons.exec.CommandLine(pingScript);\n    cmdLine.addArgument(java.lang.Integer.toString(seconds + 1));\n    final long startTime = java.lang.System.currentTimeMillis();\n    for (int offset = start; offset <= maxRetries; offset++) {\n        final org.apache.commons.exec.ExecuteWatchdog watchdog = new org.apache.commons.exec.ExecuteWatchdog((seconds * 1000) + (offset * offsetMultiplier));\n        exec.setWatchdog(watchdog);\n        try {\n            exec.execute(cmdLine);\n            processTerminatedCounter++;\n            if (processTerminatedCounter > 5) {\n                break;\n            }\n        } catch (final org.apache.commons.exec.ExecuteException ex) {\n            org.junit.Assert.assertTrue(\"Watchdog killed the process\", watchdog.killedProcess());\n            watchdogKilledProcessCounter++;\n        }\n    }\n    final long avg = (java.lang.System.currentTimeMillis() - startTime) / (watchdogKilledProcessCounter + processTerminatedCounter);\n    java.lang.System.out.println(((((((((\"Processes terminated: \" + processTerminatedCounter) + \" killed: \") + watchdogKilledProcessCounter) + \" Multiplier: \") + offsetMultiplier) + \" MaxRetries: \") + maxRetries) + \" Elapsed (avg ms): \") + avg);\n    org.junit.Assert.assertTrue(\"Not a single process terminated on its own\", processTerminatedCounter > 0);\n    org.junit.Assert.assertTrue(\"Not a single process was killed by the watch dog\", watchdogKilledProcessCounter > 0);\n}",
        "ClassName": "Exec60Test",
        "Label": 1,
        "MethodName": "testExec_60",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/commons-exec"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.UUID uuid = com.datastax.driver.core.utils.UUIDs.timeBased();\n    scriptExecutor.executeScriptTemplate(\"EntityWithStaticColumn/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"uuid\", uuid));\n    manager.dsl().updateStatic().fromBaseTable().staticCol_Set(\"updated_static\").where().id_Eq(id).ifStaticCol_Eq(\"static_val\").execute();\n    final com.datastax.driver.core.Row actual = session.execute(\"SELECT static_col FROM entitywithstaticcolumn WHERE id = \" + id).one();\n    assertThat(actual).isNotNull();\n    assertThat(actual.getString(\"static_col\")).isEqualTo(\"updated_static\");\n}",
        "ClassName": "TestEntityWithStaticColumn",
        "Label": 1,
        "MethodName": "should_dsl_update_static",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    final java.util.concurrent.atomic.AtomicBoolean success = new java.util.concurrent.atomic.AtomicBoolean(false);\n    final info.archinnov.achilles.type.lightweighttransaction.LWTResultListener lwtResultListener = new info.archinnov.achilles.type.lightweighttransaction.LWTResultListener() {\n        @java.lang.Override\n        public void onSuccess() {\n            success.getAndSet(true);\n        }\n\n        @java.lang.Override\n        public void onError(info.archinnov.achilles.type.lightweighttransaction.LWTResultListener.LWTResult lwtResult) {\n        }\n    };\n    manager.dsl().delete().allColumns_FromBaseTable().where().id_Eq(id).date_Eq(date).ifConsistencyList_NotEq(java.util.Arrays.asList(info.archinnov.achilles.it.ALL)).withLwtResultListener(lwtResultListener).execute();\n    final com.datastax.driver.core.Row row = session.execute(\"SELECT * FROM simple WHERE id = \" + id).one();\n    assertThat(row).isNull();\n    assertThat(success.get()).isTrue();\n}",
        "ClassName": "TestCRUDSimpleEntity",
        "Label": 1,
        "MethodName": "should_delete_with_not_equal_condition",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    final info.archinnov.achilles.internals.entities.SimpleEntity entity = new info.archinnov.achilles.internals.entities.SimpleEntity(id, date, \"value\");\n    final info.archinnov.achilles.it.utils.CassandraLogAsserter logAsserter = new info.archinnov.achilles.it.utils.CassandraLogAsserter();\n    logAsserter.prepareLogLevelForDriverConnection();\n    manager.crud().insert(entity).withConsistencyLevel(info.archinnov.achilles.it.TWO).withRetryPolicy(DowngradingConsistencyRetryPolicy.INSTANCE).execute();\n    final com.datastax.driver.core.Row row = session.execute(\"SELECT * FROM simple WHERE id = \" + id).one();\n    assertThat(row).isNotNull();\n    logAsserter.assertConsistencyLevels(info.archinnov.achilles.it.TWO, info.archinnov.achilles.it.ONE);\n}",
        "ClassName": "TestCRUDSimpleEntity",
        "Label": 1,
        "MethodName": "should_insert_with_downgrading_consistency",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    final info.archinnov.achilles.it.utils.CassandraLogAsserter logAsserter = new info.archinnov.achilles.it.utils.CassandraLogAsserter();\n    logAsserter.prepareLogLevelForDriverConnection();\n    manager.dsl().update().fromBaseTable().value_Set(\"new value\").where().id_Eq(id).date_Eq(date).withConsistencyLevel(info.archinnov.achilles.it.THREE).withRetryPolicy(DowngradingConsistencyRetryPolicy.INSTANCE).withTracing().execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT value FROM simple WHERE id = \" + id).one();\n    assertThat(row).isNotNull();\n    assertThat(row.getString(\"value\")).isEqualTo(\"new value\");\n    logAsserter.assertConsistencyLevels(info.archinnov.achilles.it.THREE, info.archinnov.achilles.it.ONE);\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_with_options",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = new java.util.Date();\n    final info.archinnov.achilles.internals.entities.SimpleEntity entity = new info.archinnov.achilles.internals.entities.SimpleEntity(id, date, \"value\");\n    entity.setConsistencyList(java.util.Arrays.asList(ConsistencyLevel.EACH_QUORUM, ConsistencyLevel.LOCAL_QUORUM));\n    entity.setSimpleSet(com.google.common.collect.Sets.newHashSet(10.0, 11.0));\n    entity.setSimpleMap(com.google.common.collect.ImmutableMap.of(1, \"one\", 2, \"two\"));\n    manager.crud().insert(entity).execute();\n    final java.util.List<com.datastax.driver.core.Row> rows = session.execute(\"SELECT * FROM simple WHERE id = \" + id).all();\n    assertThat(rows).hasSize(1);\n    final com.datastax.driver.core.Row row = rows.get(0);\n    assertThat(row.getLong(\"id\")).isEqualTo(id);\n    assertThat(row.getTimestamp(\"date\")).isEqualTo(date);\n    assertThat(row.getString(\"value\")).isEqualTo(\"value\");\n    assertThat(row.getList(\"consistencylist\", java.lang.String.class)).containsExactly(\"EACH_QUORUM\", \"LOCAL_QUORUM\");\n    assertThat(row.getSet(\"simpleset\", java.lang.Double.class)).containsOnly(10.0, 11.0);\n    assertThat(row.getMap(\"simplemap\", java.lang.Integer.class, java.lang.String.class)).containsEntry(1, \"one\");\n    assertThat(row.getMap(\"simplemap\", java.lang.Integer.class, java.lang.String.class)).containsEntry(2, \"two\");\n}",
        "ClassName": "TestCRUDSimpleEntity",
        "Label": 1,
        "MethodName": "should_insert",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final info.archinnov.achilles.it.RegularStatement statement = session.newSimpleStatement(\"SELECT * FROM entity_with_clusterings WHERE id = :id\");\n    exception.expect(info.archinnov.achilles.exception.AchillesException.class);\n    exception.expectMessage(\"The typed query [select * from entity_with_clusterings where id = :id] should contain the table name 'simple' if the entity type is 'info.archinnov.achilles.internals.entities.SimpleEntity'\");\n    manager.query().typedQueryForSelect(statement).getList();\n}",
        "ClassName": "TestTypedQueries",
        "Label": 1,
        "MethodName": "should_fail_regular_typed_query_if_table_not_correspond",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    final java.util.concurrent.atomic.AtomicBoolean success = new java.util.concurrent.atomic.AtomicBoolean(false);\n    final info.archinnov.achilles.type.lightweighttransaction.LWTResultListener lwtResultListener = new info.archinnov.achilles.type.lightweighttransaction.LWTResultListener() {\n        @java.lang.Override\n        public void onSuccess() {\n            success.getAndSet(true);\n        }\n\n        @java.lang.Override\n        public void onError(info.archinnov.achilles.type.lightweighttransaction.LWTResultListener.LWTResult lwtResult) {\n        }\n    };\n    manager.dsl().delete().allColumns_FromBaseTable().where().id_Eq(id).date_Eq(date).ifValue_Lt(\"_\").withLwtResultListener(lwtResultListener).execute();\n    final com.datastax.driver.core.Row row = session.execute(\"SELECT * FROM simple WHERE id = \" + id).one();\n    assertThat(row).isNull();\n    assertThat(success.get()).isTrue();\n}",
        "ClassName": "TestCRUDSimpleEntity",
        "Label": 1,
        "MethodName": "should_delete_with_inequal_condition",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final java.lang.String tableName = \"simple_insert_with_schema_name\";\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/create_simple_mirror_table.cql\", com.google.common.collect.ImmutableMap.of(\"table\", tableName));\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    final info.archinnov.achilles.internals.entities.SimpleEntity entity = new info.archinnov.achilles.internals.entities.SimpleEntity(id, date, \"value_tenant3\");\n    final info.archinnov.achilles.type.SchemaNameProvider provider = new info.archinnov.achilles.type.SchemaNameProvider() {\n        @java.lang.Override\n        public <T> java.lang.String keyspaceFor(java.lang.Class<T> entityClass) {\n            return info.archinnov.achilles.embedded.CassandraEmbeddedConfigParameters.DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME;\n        }\n\n        @java.lang.Override\n        public <T> java.lang.String tableNameFor(java.lang.Class<T> entityClass) {\n            return tableName;\n        }\n    };\n    manager.crud().insert(entity).withSchemaNameProvider(provider).execute();\n    final com.datastax.driver.core.Row row = session.execute(((\"SELECT * FROM \" + tableName) + \" WHERE id = \") + id).one();\n    assertThat(row).isNotNull();\n    assertThat(row.getString(\"value\")).isEqualTo(\"value_tenant3\");\n}",
        "ClassName": "TestCRUDSimpleEntity",
        "Label": 1,
        "MethodName": "should_insert_with_schema_name_provider",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().simpleSet_Set(com.google.common.collect.Sets.newHashSet(3.0)).where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT simpleset FROM simple WHERE id = \" + id).one();\n    assertThat(row.getSet(\"simpleset\", java.lang.Double.class)).containsExactly(3.0);\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_set_setValue",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    final info.archinnov.achilles.internals.entities.SimpleEntity entity = new info.archinnov.achilles.internals.entities.SimpleEntity(id, date, \"value\");\n    manager.crud().insert(entity).usingTimeToLive(1).execute();\n    java.lang.Thread.sleep(1001);\n    final com.datastax.driver.core.Row row = session.execute(\"SELECT * FROM simple WHERE id = \" + id).one();\n    assertThat(row).isNull();\n}",
        "ClassName": "TestCRUDSimpleEntity",
        "Label": 1,
        "MethodName": "should_insert_with_ttl",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().simpleMap_RemoveByKey(20).where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT simplemap FROM simple WHERE id = \" + id).one();\n    assertThat(row.getMap(\"simplemap\", java.lang.Integer.class, java.lang.String.class)).containsEntry(10, \"ten\");\n    assertThat(row.getMap(\"simplemap\", java.lang.Integer.class, java.lang.String.class)).doesNotContainEntry(20, \"twenty\");\n    assertThat(row.getMap(\"simplemap\", java.lang.Integer.class, java.lang.String.class)).hasSize(1);\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_map_removeByKey",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().simpleSet_RemoveFrom(1.0).where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT simpleset FROM simple WHERE id = \" + id).one();\n    assertThat(row.getSet(\"simpleset\", java.lang.Double.class)).containsExactly(2.0);\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_set_remove",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().simpleSet_AddTo(3.0).where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT simpleset FROM simple WHERE id = \" + id).one();\n    assertThat(row.getSet(\"simpleset\", java.lang.Double.class)).containsExactly(1.0, 2.0, 3.0);\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_set_add",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final info.archinnov.achilles.internals.entities.EntityWithStaticColumn entity = new info.archinnov.achilles.internals.entities.EntityWithStaticColumn(id, null, \"static_val\", \"val\");\n    manager.crud().insertStatic(entity).execute();\n    final com.datastax.driver.core.Row actual = session.execute(\"SELECT * FROM entitywithstaticcolumn WHERE id = \" + id).one();\n    assertThat(actual).isNotNull();\n    assertThat(actual.getString(\"static_col\")).isEqualTo(\"static_val\");\n    assertThat(actual.isNull(\"value\")).isTrue();\n}",
        "ClassName": "TestEntityWithStaticColumn",
        "Label": 1,
        "MethodName": "should_insert_static",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final info.archinnov.achilles.internals.entities.EntityWithStaticColumn entity1 = new info.archinnov.achilles.internals.entities.EntityWithStaticColumn(id, null, \"static_val1\", \"another_static_val1\", null);\n    final info.archinnov.achilles.internals.entities.EntityWithStaticColumn entity2 = new info.archinnov.achilles.internals.entities.EntityWithStaticColumn(id, null, null, \"another_static_val2\", null);\n    manager.crud().insertStatic(entity1).execute();\n    manager.crud().insertStatic(entity2).withInsertStrategy(info.archinnov.achilles.type.strategy.InsertStrategy.NOT_NULL_FIELDS).execute();\n    final com.datastax.driver.core.Row actual = session.execute(\"SELECT * FROM entitywithstaticcolumn WHERE id = \" + id).one();\n    assertThat(actual).isNotNull();\n    assertThat(actual.getString(\"static_col\")).isEqualTo(\"static_val1\");\n    assertThat(actual.getString(\"another_static_col\")).isEqualTo(\"another_static_val2\");\n}",
        "ClassName": "TestEntityWithStaticColumn",
        "Label": 1,
        "MethodName": "should_insert_static_with_insert_strategy",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.UUID uuid = com.datastax.driver.core.utils.UUIDs.timeBased();\n    scriptExecutor.executeScriptTemplate(\"EntityWithStaticColumn/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"uuid\", uuid));\n    manager.dsl().deleteStatic().staticCol().fromBaseTable().where().id_Eq(id).execute();\n    final com.datastax.driver.core.Row actual = session.execute(\"SELECT static_col FROM entitywithstaticcolumn WHERE id = \" + id).one();\n    assertThat(actual).isNotNull();\n    assertThat(actual.isNull(\"static_col\")).isTrue();\n}",
        "ClassName": "TestEntityWithStaticColumn",
        "Label": 1,
        "MethodName": "should_dsl_delete_static",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = 200L;\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_2_rows_same_partition.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id));\n    manager.crud().deleteByPartitionKeys(id).execute();\n    final java.util.List<com.datastax.driver.core.Row> rows = session.execute(\"SELECT * FROM simple WHERE id = \" + id).all();\n    assertThat(rows).isEmpty();\n}",
        "ClassName": "TestCRUDSimpleEntity",
        "Label": 1,
        "MethodName": "should_delete_by_partition",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    final info.archinnov.achilles.internals.entities.SimpleEntity entity = new info.archinnov.achilles.internals.entities.SimpleEntity(id, date, null);\n    manager.crud().insert(entity).withInsertStrategy(info.archinnov.achilles.type.strategy.InsertStrategy.NOT_NULL_FIELDS).execute();\n    final com.datastax.driver.core.Row row = session.execute(\"SELECT value FROM simple WHERE id = \" + id).one();\n    assertThat(row).isNotNull();\n    assertThat(row.getString(\"value\")).isEqualTo(\"0 AM\");\n}",
        "ClassName": "TestCRUDSimpleEntity",
        "Label": 1,
        "MethodName": "should_insert_with_insert_strategy_non_null_fields",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.UUID uuid = com.datastax.driver.core.utils.UUIDs.timeBased();\n    final long codecCount = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    manager.dsl().update().fromBaseTable().counterWithCodec_Incr(codecCount + \"\").where().id_Eq(id).uuid_Eq(uuid).execute();\n    final com.datastax.driver.core.Row actual = session.execute(((\"SELECT codec_count FROM entity_complex_counters WHERE id = \" + id) + \" AND uuid = \") + uuid).one();\n    assertThat(actual).isNotNull();\n    assertThat(actual.getLong(\"codec_count\")).isEqualTo(codecCount);\n}",
        "ClassName": "TestEntityWithComplexCounter",
        "Label": 1,
        "MethodName": "should_dsl_update_codec_counter",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0, java.lang.Long.MAX_VALUE);\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    final java.util.Date date = buildDateKey();\n    final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1);\n    final info.archinnov.achilles.it.utils.CassandraLogAsserter logAsserter = new info.archinnov.achilles.it.utils.CassandraLogAsserter();\n    logAsserter.prepareLogLevel(info.archinnov.achilles.it.TestAsyncCRUDSimpleEntity.ASYNC_LOGGER_STRING, \"%msg - [%thread]%n\");\n    final java.util.concurrent.CompletableFuture<info.archinnov.achilles.type.tuples.Tuple2<info.archinnov.achilles.internals.entities.SimpleEntity, com.datastax.driver.core.ExecutionInfo>> tuple2 = manager.crud().findById(id, date).withResultSetAsyncListener(( rs) -> {\n        info.archinnov.achilles.it.TestAsyncCRUDSimpleEntity.LOGGER.info(info.archinnov.achilles.it.TestAsyncCRUDSimpleEntity.CALLED);\n        latch.countDown();\n        return rs;\n    }).getAsyncWithStats();\n    latch.await();\n    final info.archinnov.achilles.internals.entities.SimpleEntity actual = tuple2.get()._1();\n    final com.datastax.driver.core.ExecutionInfo executionInfo = tuple2.get()._2();\n    assertThat(actual).isNotNull();\n    assertThat(actual.getConsistencyList()).containsExactly(ConsistencyLevel.QUORUM, ConsistencyLevel.LOCAL_ONE);\n    assertThat(executionInfo.getQueriedHost().isUp()).isTrue();\n    logAsserter.assertContains(\"Called - [achilles-default-executor\");\n}",
        "ClassName": "TestAsyncCRUDSimpleEntity",
        "Label": 1,
        "MethodName": "should_find_by_id_async",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().simpleMap_AddAllTo(com.google.common.collect.ImmutableMap.of(20, \"new_twenty\", 30, \"thirty\")).where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT simplemap FROM simple WHERE id = \" + id).one();\n    assertThat(row.getMap(\"simplemap\", java.lang.Integer.class, java.lang.String.class)).containsEntry(10, \"ten\");\n    assertThat(row.getMap(\"simplemap\", java.lang.Integer.class, java.lang.String.class)).containsEntry(20, \"new_twenty\");\n    assertThat(row.getMap(\"simplemap\", java.lang.Integer.class, java.lang.String.class)).containsEntry(30, \"thirty\");\n    assertThat(row.getMap(\"simplemap\", java.lang.Integer.class, java.lang.String.class)).hasSize(3);\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_map_addAll",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().simpleMap_PutTo(30, \"thirty\").where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT simplemap FROM simple WHERE id = \" + id).one();\n    assertThat(row.getMap(\"simplemap\", java.lang.Integer.class, java.lang.String.class)).containsEntry(10, \"ten\");\n    assertThat(row.getMap(\"simplemap\", java.lang.Integer.class, java.lang.String.class)).containsEntry(20, \"twenty\");\n    assertThat(row.getMap(\"simplemap\", java.lang.Integer.class, java.lang.String.class)).containsEntry(30, \"thirty\");\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_map_put",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().simpleSet_AddAllTo(com.google.common.collect.Sets.newHashSet(3.0, 4.0)).where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT simpleset FROM simple WHERE id = \" + id).one();\n    assertThat(row.getSet(\"simpleset\", java.lang.Double.class)).containsExactly(1.0, 2.0, 3.0, 4.0);\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_set_addAll",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    scriptExecutor.executeScriptTemplate(\"EntityAsChild/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().anotherValue().Set(\"another_child_val\").where().id().Eq(id).execute();\n    final com.datastax.driver.core.Row row = session.execute(\"SELECT child_value FROM entity_child WHERE id = \" + id).one();\n    assertThat(row).isNotNull();\n    assertThat(row.getString(\"child_value\")).isEqualTo(\"another_child_val\");\n}",
        "ClassName": "TestALLEntityAsChild",
        "Label": 1,
        "MethodName": "should_dsl_update_child_value",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    scriptExecutor.execute((\"UPDATE simple SET consistencylist = consistencylist + ['QUORUM', 'QUORUM'] WHERE id = \" + id) + \"AND date = '2015-10-01 00:00:00+0000'\");\n    manager.dsl().update().fromBaseTable().consistencyList_RemoveFrom(info.archinnov.achilles.it.QUORUM).where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT consistencylist FROM simple WHERE id = \" + id).one();\n    assertThat(row.getList(\"consistencylist\", java.lang.String.class)).containsExactly(\"LOCAL_ONE\");\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_list_remove_single",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().delete().consistencyList().simpleMap().fromBaseTable().where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT * FROM simple WHERE id = \" + id).one();\n    assertThat(row).isNotNull();\n    assertThat(row.isNull(\"consistencylist\")).isTrue();\n    assertThat(row.isNull(\"simplemap\")).isTrue();\n    assertThat(row.getSet(\"simpleset\", java.lang.Double.class)).containsOnly(1.0, 2.0);\n    assertThat(row.getString(\"value\")).isEqualTo(\"0 AM\");\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_delete",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    final java.lang.String tableName = \"simple_delete_with_schema_name\";\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/create_simple_mirror_table.cql\", com.google.common.collect.ImmutableMap.of(\"table\", tableName));\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", tableName));\n    final info.archinnov.achilles.type.SchemaNameProvider provider = new info.archinnov.achilles.type.SchemaNameProvider() {\n        @java.lang.Override\n        public <T> java.lang.String keyspaceFor(java.lang.Class<T> entityClass) {\n            return info.archinnov.achilles.embedded.CassandraEmbeddedConfigParameters.DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME;\n        }\n\n        @java.lang.Override\n        public <T> java.lang.String tableNameFor(java.lang.Class<T> entityClass) {\n            return tableName;\n        }\n    };\n    manager.crud().deleteById(id, date).withSchemaNameProvider(provider).execute();\n    final com.datastax.driver.core.Row row = session.execute(((\"SELECT * FROM \" + tableName) + \" WHERE id = \") + id).one();\n    assertThat(row).isNull();\n}",
        "ClassName": "TestCRUDSimpleEntity",
        "Label": 1,
        "MethodName": "should_delete_with_schema_name_provider",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    final java.util.concurrent.atomic.AtomicBoolean error = new java.util.concurrent.atomic.AtomicBoolean(false);\n    manager.dsl().update().fromBaseTable().value_Set(\"new value\").where().id_Eq(id).date_Eq(date).ifExists().withLwtResultListener(new info.archinnov.achilles.type.lightweighttransaction.LWTResultListener() {\n        @java.lang.Override\n        public void onSuccess() {\n        }\n\n        @java.lang.Override\n        public void onError(info.archinnov.achilles.type.lightweighttransaction.LWTResultListener.LWTResult lwtResult) {\n            error.getAndSet(true);\n        }\n    }).withResultSetAsyncListener(( rs) -> {\n        assertThat(rs.wasApplied()).isFalse();\n        return rs;\n    }).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT simplemap FROM simple WHERE id = \" + id).one();\n    assertThat(row).isNull();\n    assertThat(error.get()).isTrue();\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_value_if_exists",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final long incr = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    scriptExecutor.executeScriptTemplate(\"EntityWithCounterColumn/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"incr\", incr));\n    manager.dsl().delete().allColumns_FromBaseTable().where().id().Eq(id).execute();\n    final com.datastax.driver.core.Row actual = session.execute(\"SELECT * FROM entity_counter WHERE id = \" + id).one();\n    assertThat(actual).isNull();\n}",
        "ClassName": "TestEntityWithCounterColumn",
        "Label": 1,
        "MethodName": "should_dsl_delete",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().simpleMap_Set(com.google.common.collect.ImmutableMap.of(20, \"new_twenty\", 30, \"thirty\")).where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT simplemap FROM simple WHERE id = \" + id).one();\n    assertThat(row.getMap(\"simplemap\", java.lang.Integer.class, java.lang.String.class)).doesNotContainEntry(10, \"ten\");\n    assertThat(row.getMap(\"simplemap\", java.lang.Integer.class, java.lang.String.class)).containsEntry(20, \"new_twenty\");\n    assertThat(row.getMap(\"simplemap\", java.lang.Integer.class, java.lang.String.class)).containsEntry(30, \"thirty\");\n    assertThat(row.getMap(\"simplemap\", java.lang.Integer.class, java.lang.String.class)).hasSize(2);\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_map_set",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().consistencyList_PrependAllTo(java.util.Arrays.asList(info.archinnov.achilles.it.TWO, info.archinnov.achilles.it.THREE)).where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT consistencylist FROM simple WHERE id = \" + id).one();\n    assertThat(row.getList(\"consistencylist\", java.lang.String.class)).containsExactly(\"TWO\", \"THREE\", \"QUORUM\", \"LOCAL_ONE\");\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_list_prependAll",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.crud().deleteById(id, date).execute();\n    final java.util.List<com.datastax.driver.core.Row> rows = session.execute(\"SELECT * FROM simple WHERE id = \" + id).all();\n    assertThat(rows).isEmpty();\n}",
        "ClassName": "TestCRUDSimpleEntity",
        "Label": 1,
        "MethodName": "should_delete_by_id",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    final info.archinnov.achilles.it.utils.CassandraLogAsserter logAsserter = new info.archinnov.achilles.it.utils.CassandraLogAsserter();\n    logAsserter.prepareLogLevelForDriverConnection();\n    manager.dsl().delete().value().fromBaseTable().where().id_Eq(id).date_Eq(date).withConsistencyLevel(info.archinnov.achilles.it.QUORUM).withRetryPolicy(DowngradingConsistencyRetryPolicy.INSTANCE).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT value FROM simple WHERE id = \" + id).one();\n    assertThat(row).isNotNull();\n    assertThat(row.isNull(\"value\")).isTrue();\n    logAsserter.assertConsistencyLevels(info.archinnov.achilles.it.QUORUM);\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_delete_with_options",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    scriptExecutor.execute((\"UPDATE simple SET simpleset = simpleset + {3} WHERE id = \" + id) + \"AND date = '2015-10-01 00:00:00+0000'\");\n    manager.dsl().update().fromBaseTable().simpleSet_RemoveAllFrom(com.google.common.collect.Sets.newHashSet(1.0, 2.0)).where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT simpleset FROM simple WHERE id = \" + id).one();\n    assertThat(row.getSet(\"simpleset\", java.lang.Double.class)).containsExactly(3.0);\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_set_removeAll",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().consistencyList_AppendTo(info.archinnov.achilles.it.ALL).where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT consistencylist FROM simple WHERE id = \" + id).one();\n    assertThat(row.getList(\"consistencylist\", java.lang.String.class)).containsExactly(\"QUORUM\", \"LOCAL_ONE\", \"ALL\");\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_list_append",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    scriptExecutor.executeScriptTemplate(\"EntityAsChild/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().delete().anotherValue().fromBaseTable().where().id().Eq(id).execute();\n    final com.datastax.driver.core.Row row = session.execute(\"SELECT * FROM entity_child WHERE id = \" + id).one();\n    assertThat(row).isNotNull();\n    assertThat(row.isNull(\"child_value\")).isTrue();\n    assertThat(row.getString(\"value\")).isEqualTo(\"val\");\n}",
        "ClassName": "TestALLEntityAsChild",
        "Label": 1,
        "MethodName": "should_dsl_delete",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final java.lang.Long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    final info.archinnov.achilles.it.BoundStatement boundStatement = session.prepare(\"SELECT * FROM simple WHERE id = :id\").bind(id);\n    final info.archinnov.achilles.internals.entities.SimpleEntity actual = manager.query().typedQueryForSelect(boundStatement).getOne();\n    assertThat(actual).isNotNull();\n    assertThat(actual.getValue()).contains(\"0 AM\");\n}",
        "ClassName": "TestTypedQueries",
        "Label": 1,
        "MethodName": "should_perform_bound_statement_typed_query",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().value().Set(\"new value\").consistencyList().consistencyList_Set(java.util.Arrays.asList(ConsistencyLevel.ALL)).where().id().Eq(id).date().Eq(date).usingTimeToLive(1).usingTimestamp(new java.util.Date().getTime()).execute();\n    java.lang.Thread.sleep(2000);\n    com.datastax.driver.core.Row row = session.execute((\"SELECT * FROM simple WHERE id = \" + id) + \" AND date = '2015-10-01 00:00:00.000+0000'\").one();\n    assertThat(row).isNotNull();\n    assertThat(row.getList(\"consistencylist\", java.lang.String.class)).hasSize(2).containsExactly(\"QUORUM\", \"LOCAL_ONE\");\n    assertThat(row.getString(\"value\")).isEqualTo(\"0 AM\");\n}",
        "ClassName": "TestDSLUpdateWithTTLAndTimestamp",
        "Label": 1,
        "MethodName": "should_dsl_update_with_ttl",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    final java.lang.String tableName = \"update_dsl_with_schema_name\";\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/create_simple_mirror_table.cql\", com.google.common.collect.ImmutableMap.of(\"table\", tableName));\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", tableName));\n    manager.dsl().update().from(new info.archinnov.achilles.type.SchemaNameProvider() {\n        @java.lang.Override\n        public <T> java.lang.String keyspaceFor(java.lang.Class<T> entityClass) {\n            return info.archinnov.achilles.embedded.CassandraEmbeddedConfigParameters.DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME;\n        }\n\n        @java.lang.Override\n        public <T> java.lang.String tableNameFor(java.lang.Class<T> entityClass) {\n            return tableName;\n        }\n    }).value_Set(\"new value\").where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(((\"SELECT value FROM \" + tableName) + \" WHERE id = \") + id).one();\n    assertThat(row.getString(\"value\")).isEqualTo(\"new value\");\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_with_schema_name",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    final info.archinnov.achilles.internals.entities.SimpleEntity entity = new info.archinnov.achilles.internals.entities.SimpleEntity(id, date, \"value\");\n    manager.crud().insert(entity).usingTimestamp(1000L).execute();\n    final com.datastax.driver.core.Row row = session.execute(\"SELECT writetime(value) as wt FROM simple WHERE id = \" + id).one();\n    assertThat(row).isNotNull();\n    assertThat(row.getLong(\"wt\")).isEqualTo(1000L);\n}",
        "ClassName": "TestCRUDSimpleEntity",
        "Label": 1,
        "MethodName": "should_insert_with_timestamp",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final long incr = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    scriptExecutor.executeScriptTemplate(\"EntityWithCounterColumn/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"incr\", incr));\n    manager.crud().deleteById(id).execute();\n    final com.datastax.driver.core.Row actual = session.execute(\"SELECT * FROM entity_counter WHERE id = \" + id).one();\n    assertThat(actual).isNull();\n}",
        "ClassName": "TestEntityWithCounterColumn",
        "Label": 1,
        "MethodName": "should_delete_by_id",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    final info.archinnov.achilles.internals.entities.SimpleEntity entity = new info.archinnov.achilles.internals.entities.SimpleEntity(id, date, \"value\");\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1);\n    final info.archinnov.achilles.it.utils.CassandraLogAsserter logAsserter = new info.archinnov.achilles.it.utils.CassandraLogAsserter();\n    logAsserter.prepareLogLevel(info.archinnov.achilles.it.TestAsyncCRUDSimpleEntity.ASYNC_LOGGER_STRING, \"%msg - [%thread]%n\");\n    final java.util.concurrent.CompletableFuture<com.datastax.driver.core.ExecutionInfo> future = manager.crud().delete(entity).withResultSetAsyncListener(( rs) -> {\n        info.archinnov.achilles.it.TestAsyncCRUDSimpleEntity.LOGGER.info(info.archinnov.achilles.it.TestAsyncCRUDSimpleEntity.CALLED);\n        latch.countDown();\n        return rs;\n    }).executeAsyncWithStats();\n    latch.await();\n    logAsserter.assertContains(\"Called\");\n    final java.util.List<com.datastax.driver.core.Row> rows = session.execute(\"SELECT * FROM simple WHERE id = \" + id).all();\n    assertThat(rows).isEmpty();\n    final com.datastax.driver.core.ExecutionInfo executionInfo = future.get();\n    assertThat(executionInfo.getQueriedHost().isUp()).isTrue();\n}",
        "ClassName": "TestAsyncCRUDSimpleEntity",
        "Label": 1,
        "MethodName": "should_delete_instance_async",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().consistencyList_RemoveAllFrom(java.util.Arrays.asList(info.archinnov.achilles.it.LOCAL_ONE, info.archinnov.achilles.it.QUORUM)).where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT consistencylist FROM simple WHERE id = \" + id).one();\n    assertThat(row.isNull(\"consistencylist\")).isTrue();\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_list_removeAll",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final info.archinnov.achilles.type.tuples.Tuple2<java.lang.Integer, java.util.Map<java.lang.Integer, java.util.List<java.lang.String>>> tuple = info.archinnov.achilles.type.tuples.Tuple2.of(10, com.google.common.collect.ImmutableMap.of(20, java.util.Arrays.asList(\"10\", \"20\")));\n    final info.archinnov.achilles.internals.entities.EntityWithComplexTuple entity = new info.archinnov.achilles.internals.entities.EntityWithComplexTuple(id, tuple);\n    manager.crud().insert(entity).execute();\n    final com.datastax.driver.core.Row actual = session.execute(\"SELECT * FROM complex_tuple WHERE id = \" + id).one();\n    assertThat(actual).isNotNull();\n    final com.datastax.driver.core.TupleValue tupleValue = actual.getTupleValue(\"tuple\");\n    assertThat(tupleValue.getInt(0)).isEqualTo(10);\n    final java.util.Map<java.lang.Integer, java.util.List<java.lang.String>> map = tupleValue.getMap(1, new com.google.common.reflect.TypeToken<java.lang.Integer>() {}, new com.google.common.reflect.TypeToken<java.util.List<java.lang.String>>() {});\n    assertThat(map).containsEntry(20, java.util.Arrays.asList(\"10\", \"20\"));\n}",
        "ClassName": "TestEntityWithComplexTuple",
        "Label": 1,
        "MethodName": "should_insert",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    scriptExecutor.executeScriptTemplate(\"EntityAsChild/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.crud().deleteById(id).execute();\n    final java.util.List<com.datastax.driver.core.Row> rows = session.execute(\"SELECT * FROM entity_child WHERE id = \" + id).all();\n    assertThat(rows).isEmpty();\n}",
        "ClassName": "TestALLEntityAsChild",
        "Label": 1,
        "MethodName": "should_delete_by_id",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    scriptExecutor.executeScriptTemplate(\"EntityWithStaticAnnotations/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id));\n    final info.archinnov.achilles.internals.entities.EntityWithStaticAnnotations entity = new info.archinnov.achilles.internals.entities.EntityWithStaticAnnotations(id, \"new_val\", null);\n    final info.archinnov.achilles.it.utils.CassandraLogAsserter logAsserter = new info.archinnov.achilles.it.utils.CassandraLogAsserter();\n    logAsserter.prepareLogLevelForDriverConnection();\n    manager.crud().insert(entity).usingTimeToLive(1000).execute();\n    com.datastax.driver.core.Row actual = session.execute(\"SELECT * FROM entity_static_annotations WHERE partition_key = \" + id).one();\n    assertThat(actual).isNotNull();\n    assertThat(actual.getString(\"value\")).isEqualTo(\"new_val\");\n    assertThat(actual.getString(\"overriden\")).isEqualTo(\"overriden_val\");\n    logAsserter.assertConsistencyLevels(com.datastax.driver.core.ConsistencyLevel.LOCAL_ONE);\n}",
        "ClassName": "TestEntityWithStaticAnnotations",
        "Label": 1,
        "MethodName": "should_insert_using_static_strategy_an_consistency_level",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    final java.util.concurrent.atomic.AtomicBoolean success = new java.util.concurrent.atomic.AtomicBoolean(false);\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    final info.archinnov.achilles.it.utils.CassandraLogAsserter logAsserter = new info.archinnov.achilles.it.utils.CassandraLogAsserter();\n    logAsserter.prepareLogLevelForDriverConnection();\n    manager.dsl().update().fromBaseTable().value_Set(\"new value\").where().id_Eq(id).date_Eq(date).ifValue_Eq(\"0 AM\").withLwtResultListener(new info.archinnov.achilles.type.lightweighttransaction.LWTResultListener() {\n        @java.lang.Override\n        public void onSuccess() {\n            success.getAndSet(true);\n        }\n\n        @java.lang.Override\n        public void onError(info.archinnov.achilles.type.lightweighttransaction.LWTResultListener.LWTResult lwtResult) {\n        }\n    }).withResultSetAsyncListener(( rs) -> {\n        assertThat(rs.wasApplied()).isTrue();\n        return rs;\n    }).withSerialConsistencyLevel(info.archinnov.achilles.it.SERIAL).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT value FROM simple WHERE id = \" + id).one();\n    assertThat(row).isNotNull();\n    assertThat(row.getString(\"value\")).isEqualTo(\"new value\");\n    assertThat(success.get()).isTrue();\n    logAsserter.assertSerialConsistencyLevels(info.archinnov.achilles.it.SERIAL);\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_value_if_equal",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().consistencyList().consistencyList_RemoveAtIndex(0).where().id().Eq(id).date().Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT consistencylist FROM simple WHERE id = \" + id).one();\n    assertThat(row.getList(\"consistencylist\", java.lang.String.class)).containsExactly(\"LOCAL_ONE\");\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_list_removeAtIndex",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().consistencyList_PrependTo(info.archinnov.achilles.it.ALL).where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT consistencylist FROM simple WHERE id = \" + id).one();\n    assertThat(row.getList(\"consistencylist\", java.lang.String.class)).containsExactly(\"ALL\", \"QUORUM\", \"LOCAL_ONE\");\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_list_prepend",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final long incr = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    manager.dsl().update().fromBaseTable().count().count_Incr(incr).where().id().Eq(id).execute();\n    final com.datastax.driver.core.Row actual = session.execute(\"SELECT count FROM entity_counter WHERE id = \" + id).one();\n    assertThat(actual).isNotNull();\n    assertThat(actual.getLong(\"count\")).isEqualTo(incr);\n}",
        "ClassName": "TestEntityWithCounterColumn",
        "Label": 1,
        "MethodName": "should_dsl_update",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.UUID uuid = new java.util.UUID(1L, 1L);\n    final info.archinnov.achilles.internals.entities.EntityWithCompositePartitionKey entity = new info.archinnov.achilles.internals.entities.EntityWithCompositePartitionKey(id, uuid, \"val\");\n    manager.crud().insert(entity).execute();\n    final java.util.List<com.datastax.driver.core.Row> rows = session.execute(((\"SELECT * FROM entity_composite_pk WHERE id = \" + id) + \" AND uuid = \") + uuid).all();\n    assertThat(rows).hasSize(1);\n    final com.datastax.driver.core.Row row = rows.get(0);\n    assertThat(row.getLong(\"id\")).isEqualTo(id);\n    assertThat(row.getUUID(\"uuid\")).isEqualTo(uuid);\n    assertThat(row.getString(\"value\")).isEqualTo(\"val\");\n}",
        "ClassName": "TestEntityWithCompositePartitionKey",
        "Label": 1,
        "MethodName": "should_insert",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    final java.lang.String tableName = \"dsl_delete_with_schema\";\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/create_simple_mirror_table.cql\", com.google.common.collect.ImmutableMap.of(\"table\", tableName));\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", tableName));\n    final info.archinnov.achilles.type.SchemaNameProvider provider = new info.archinnov.achilles.type.SchemaNameProvider() {\n        @java.lang.Override\n        public <T> java.lang.String keyspaceFor(java.lang.Class<T> entityClass) {\n            return info.archinnov.achilles.embedded.CassandraEmbeddedConfigParameters.DEFAULT_CASSANDRA_EMBEDDED_KEYSPACE_NAME;\n        }\n\n        @java.lang.Override\n        public <T> java.lang.String tableNameFor(java.lang.Class<T> entityClass) {\n            return tableName;\n        }\n    };\n    manager.dsl().delete().allColumns_From(provider).where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT * FROM simple WHERE id = \" + id).one();\n    assertThat(row).isNull();\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_delete_with_schema_name",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final info.archinnov.achilles.internals.entities.EntityAsChild entity = new info.archinnov.achilles.internals.entities.EntityAsChild(id, \"val\", \"child_val\");\n    manager.crud().insert(entity).execute();\n    final com.datastax.driver.core.Row row = session.execute(\"SELECT * FROM entity_child\").one();\n    assertThat(row.getLong(\"id\")).isEqualTo(id);\n    assertThat(row.getString(\"value\")).isEqualTo(\"val\");\n    assertThat(row.getString(\"child_value\")).isEqualTo(\"child_val\");\n}",
        "ClassName": "TestALLEntityAsChild",
        "Label": 1,
        "MethodName": "should_insert",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final long incr = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final info.archinnov.achilles.internals.entities.EntityWithCounterColumn entity = new info.archinnov.achilles.internals.entities.EntityWithCounterColumn(id, incr);\n    manager.crud().delete(entity).execute();\n    final com.datastax.driver.core.Row actual = session.execute(\"SELECT * FROM entity_counter WHERE id = \" + id).one();\n    assertThat(actual).isNull();\n}",
        "ClassName": "TestEntityWithCounterColumn",
        "Label": 1,
        "MethodName": "should_delete_instance",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().consistencyList_Set(java.util.Arrays.asList(info.archinnov.achilles.it.TWO, info.archinnov.achilles.it.THREE)).where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT consistencylist FROM simple WHERE id = \" + id).one();\n    assertThat(row.getList(\"consistencylist\", java.lang.String.class)).containsExactly(\"TWO\", \"THREE\");\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_list_set",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final java.lang.Long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    final info.archinnov.achilles.it.PreparedStatement preparedStatement = session.prepare(\"SELECT * FROM simple WHERE id = :id\");\n    final info.archinnov.achilles.internals.entities.SimpleEntity actual = manager.query().typedQueryForSelect(preparedStatement, id).getOne();\n    assertThat(actual).isNotNull();\n    assertThat(actual.getValue()).contains(\"0 AM\");\n}",
        "ClassName": "TestTypedQueries",
        "Label": 1,
        "MethodName": "should_perform_prepared_typed_query",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().consistencyList_SetAtIndex(0, info.archinnov.achilles.it.ONE).consistencyList_SetAtIndex(1, info.archinnov.achilles.it.TWO).where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT consistencylist FROM simple WHERE id = \" + id).one();\n    assertThat(row.getList(\"consistencylist\", java.lang.String.class)).containsExactly(\"ONE\", \"TWO\");\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_list_setAtIndex",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = new java.util.Date();\n    final info.archinnov.achilles.internals.entities.SimpleEntity entity = new info.archinnov.achilles.internals.entities.SimpleEntity(id, date, \"value\");\n    manager.crud().insert(entity).execute();\n    assertThat(entity.getValue()).isEqualTo(\"postInsert_preInsert_value\");\n    final java.util.List<com.datastax.driver.core.Row> rows = session.execute(\"SELECT * FROM simple WHERE id = \" + id).all();\n    assertThat(rows).hasSize(1);\n    final com.datastax.driver.core.Row row = rows.get(0);\n    assertThat(row.getString(\"value\")).isEqualTo(\"preInsert_value\");\n}",
        "ClassName": "TestInterceptorsSimpleEntity",
        "Label": 1,
        "MethodName": "should_trigger_for_insert",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = new java.util.Date();\n    final info.archinnov.achilles.internals.entities.SimpleEntity entity = new info.archinnov.achilles.internals.entities.SimpleEntity(id, date, \"value\");\n    final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1);\n    final info.archinnov.achilles.it.utils.CassandraLogAsserter logAsserter = new info.archinnov.achilles.it.utils.CassandraLogAsserter();\n    logAsserter.prepareLogLevel(info.archinnov.achilles.it.TestAsyncCRUDSimpleEntity.ASYNC_LOGGER_STRING, \"%msg - [%thread]%n\");\n    manager.crud().insert(entity).withResultSetAsyncListener(( rs) -> {\n        info.archinnov.achilles.it.TestAsyncCRUDSimpleEntity.LOGGER.info(info.archinnov.achilles.it.TestAsyncCRUDSimpleEntity.CALLED);\n        latch.countDown();\n        return rs;\n    }).executeAsync();\n    latch.await();\n    logAsserter.assertContains(\"Called - [achilles-default-executor\");\n    final java.util.List<com.datastax.driver.core.Row> rows = session.execute(\"SELECT * FROM simple WHERE id = \" + id).all();\n    assertThat(rows).hasSize(1);\n    final com.datastax.driver.core.Row row = rows.get(0);\n    assertThat(row.getLong(\"id\")).isEqualTo(id);\n    assertThat(row.getTimestamp(\"date\")).isEqualTo(date);\n    assertThat(row.getString(\"value\")).isEqualTo(\"value\");\n}",
        "ClassName": "TestAsyncCRUDSimpleEntity",
        "Label": 1,
        "MethodName": "should_insert_async",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    final java.util.concurrent.atomic.AtomicBoolean success = new java.util.concurrent.atomic.AtomicBoolean(false);\n    final info.archinnov.achilles.type.lightweighttransaction.LWTResultListener lwtResultListener = new info.archinnov.achilles.type.lightweighttransaction.LWTResultListener() {\n        @java.lang.Override\n        public void onSuccess() {\n            success.getAndSet(true);\n        }\n\n        @java.lang.Override\n        public void onError(info.archinnov.achilles.type.lightweighttransaction.LWTResultListener.LWTResult lwtResult) {\n        }\n    };\n    manager.dsl().delete().allColumns_FromBaseTable().where().id_Eq(id).date_Eq(date).ifSimpleSet_Eq(com.google.common.collect.Sets.newHashSet(1.0, 2.0)).withLwtResultListener(lwtResultListener).execute();\n    final com.datastax.driver.core.Row row = session.execute(\"SELECT * FROM simple WHERE id = \" + id).one();\n    assertThat(row).isNull();\n    assertThat(success.get()).isTrue();\n}",
        "ClassName": "TestCRUDSimpleEntity",
        "Label": 1,
        "MethodName": "should_delete_with_equal_condition",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.UUID uuid = com.datastax.driver.core.utils.UUIDs.timeBased();\n    final info.archinnov.achilles.internals.entities.EntityWithStaticColumn entity = new info.archinnov.achilles.internals.entities.EntityWithStaticColumn(id, uuid, \"static_val\", \"val\");\n    manager.crud().insert(entity).execute();\n    final com.datastax.driver.core.Row actual = session.execute(((\"SELECT * FROM entitywithstaticcolumn WHERE id = \" + id) + \" AND uuid = \") + uuid).one();\n    assertThat(actual).isNotNull();\n    assertThat(actual.getString(\"static_col\")).isEqualTo(\"static_val\");\n    assertThat(actual.getString(\"value\")).isEqualTo(\"val\");\n}",
        "ClassName": "TestEntityWithStaticColumn",
        "Label": 1,
        "MethodName": "should_insert",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    final long id = org.apache.commons.lang3.RandomUtils.nextLong(0L, java.lang.Long.MAX_VALUE);\n    final java.util.Date date = buildDateKey();\n    scriptExecutor.executeScriptTemplate(\"SimpleEntity/insert_single_row.cql\", com.google.common.collect.ImmutableMap.of(\"id\", id, \"table\", \"simple\"));\n    manager.dsl().update().fromBaseTable().consistencyList_AppendAllTo(java.util.Arrays.asList(info.archinnov.achilles.it.TWO, info.archinnov.achilles.it.THREE)).where().id_Eq(id).date_Eq(date).execute();\n    final info.archinnov.achilles.it.Row row = session.execute(\"SELECT consistencylist FROM simple WHERE id = \" + id).one();\n    assertThat(row.getList(\"consistencylist\", java.lang.String.class)).containsExactly(\"QUORUM\", \"LOCAL_ONE\", \"TWO\", \"THREE\");\n}",
        "ClassName": "TestDSLSimpleEntity",
        "Label": 1,
        "MethodName": "should_dsl_update_list_appendAll",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/achilles"
    },
    {
        "Body": "{\n    org.apache.oozie.util.ParamChecker.notEmpty(\"value\", \"name\");\n    try {\n        org.apache.oozie.util.ParamChecker.notEmpty(null, \"name\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n    }\n    try {\n        org.apache.oozie.util.ParamChecker.notEmpty(\"\", \"name\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n    }\n}",
        "ClassName": "TestParamChecker",
        "Label": 1,
        "MethodName": "testNotEmpty",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.servlet.MyJsonRestServlet.PARAMS_REQUIRED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"\", \"required=true\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"\", \"required=true&optional=true\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"GET\", \"\", \"optional=true\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestJsonRestServlet",
        "Label": 1,
        "MethodName": "testParamsRequired",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration(false);\n    org.apache.oozie.action.hadoop.LauncherMapper.setupMainClass(conf, \"\");\n    junit.framework.Assert.assertNull(conf.get(\"oozie.launcher.action.main.class\"));\n    conf = new org.apache.hadoop.conf.Configuration(false);\n    org.apache.oozie.action.hadoop.LauncherMapper.setupMainClass(conf, \"org.blah.myclass1\");\n    junit.framework.Assert.assertEquals(conf.get(\"oozie.launcher.action.main.class\"), \"org.blah.myclass1\");\n    conf = new org.apache.hadoop.conf.Configuration(false);\n    conf.set(\"oozie.launcher.action.main.class\", \"org.blah.myclass2\");\n    org.apache.oozie.action.hadoop.LauncherMapper.setupMainClass(conf, \"\");\n    junit.framework.Assert.assertEquals(conf.get(\"oozie.launcher.action.main.class\"), \"org.blah.myclass2\");\n    conf = new org.apache.hadoop.conf.Configuration(false);\n    conf.set(\"oozie.launcher.action.main.class\", \"org.blah.myclass2\");\n    org.apache.oozie.action.hadoop.LauncherMapper.setupMainClass(conf, \"org.blah.myclass1\");\n    junit.framework.Assert.assertEquals(conf.get(\"oozie.launcher.action.main.class\"), \"org.blah.myclass1\");\n}",
        "ClassName": "TestLauncher",
        "Label": 1,
        "MethodName": "testSetupMainClass",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"one\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.AsynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"end\" }))).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, job.getStatus());\n    job.signal(\"/a/\", \"\");\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.FAILED, job.getStatus());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testInvalidExecutionPath",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testCoordRecoveryService-C\";\n    final int actionNum = 1;\n    final java.lang.String actionId = (jobId + \"@\") + actionNum;\n    final org.apache.oozie.CoordinatorEngine ce = new org.apache.oozie.CoordinatorEngine(org.apache.oozie.test.XTestCase.getTestUser(), \"UNIT_TESTING\");\n    org.apache.oozie.store.CoordinatorStore store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store.beginTrx();\n    try {\n        createTestCaseSubDir(\"no-op\");\n        createTestCaseSubDir(\"no-op/lib\");\n        createTestCaseSubDir(\"workflows\");\n        createTestCaseSubDir(\"in\");\n        addRecordToJobTable(jobId, store, getTestCaseDir());\n        addRecordToActionTable(jobId, actionNum, actionId, store, getTestCaseDir());\n        store.commitTrx();\n    } finally {\n        store.closeTrx();\n    }\n    sleep(3000);\n    java.lang.Runnable recoveryRunnable = new org.apache.oozie.service.RecoveryService.RecoveryRunnable(0, 1, 1);\n    recoveryRunnable.run();\n    waitFor(10000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorActionBean bean = ce.getCoordAction(actionId);\n            return (bean.getStatus() == org.apache.oozie.client.CoordinatorAction.Status.RUNNING) || (bean.getStatus() == org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n        }\n    });\n    org.apache.oozie.store.CoordinatorStore store2 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store2.beginTrx();\n    org.apache.oozie.CoordinatorActionBean action = store2.getCoordinatorAction(actionId, false);\n    if ((action.getStatus() == org.apache.oozie.client.CoordinatorAction.Status.RUNNING) || (action.getStatus() == org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED)) {\n    } else {\n        junit.framework.Assert.fail();\n    }\n    store2.commitTrx();\n    store2.closeTrx();\n}",
        "ClassName": "TestRecoveryService",
        "Label": 1,
        "MethodName": "testCoordActionRecoveryServiceForSubmitted",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean jobA = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.CoordinatorActionBean actionA1 = addRecordToCoordActionTable(jobA.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean actionA2 = addRecordToCoordActionTable(jobA.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.CoordinatorJobBean jobB = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.CoordinatorActionBean actionB1 = addRecordToCoordActionTable(jobB.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean actionB2 = addRecordToCoordActionTable(jobB.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.CoordinatorJobBean jobC = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.CoordinatorActionBean actionC1 = addRecordToCoordActionTable(jobC.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean actionC2 = addRecordToCoordActionTable(jobC.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.util.List<java.lang.String> deleteList = new java.util.ArrayList<java.lang.String>();\n    deleteList.add(jobA.getId());\n    deleteList.add(jobB.getId());\n    deleteList.add(jobC.getId());\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsDeleteJPAExecutor(deleteList));\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(jobA.getId()));\n        junit.framework.Assert.fail(\"Coordinator Job A should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(actionA1.getId()));\n        junit.framework.Assert.fail(\"Coordinator Action A1 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(actionA2.getId()));\n        junit.framework.Assert.fail(\"Coordinator Action A2 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(jobB.getId()));\n        junit.framework.Assert.fail(\"Coordinator Job B should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(actionB1.getId()));\n        junit.framework.Assert.fail(\"Coordinator Action B1 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(actionB2.getId()));\n        junit.framework.Assert.fail(\"Coordinator Action B2 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(jobC.getId()));\n        junit.framework.Assert.fail(\"Coordinator Job C should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(actionC1.getId()));\n        junit.framework.Assert.fail(\"Coordinator Action C1 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(actionC2.getId()));\n        junit.framework.Assert.fail(\"Coordinator Action C2 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n}",
        "ClassName": "TestCoordJobsDeleteJPAExecutor",
        "Label": 1,
        "MethodName": "testDeleteCoords",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            int wfCount = org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT;\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            java.util.Properties conf = wc.createConfiguration();\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\")).close();\n            conf.setProperty(org.apache.oozie.client.OozieClient.APP_PATH, appPath.toString());\n            junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + wfCount) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, wc.submit(conf));\n            junit.framework.Assert.assertFalse(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testSubmit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(false, true);\n    services.setService(org.apache.oozie.service.ForTestAuthorizationService.class);\n    org.apache.oozie.service.AuthorizationService as = services.get(org.apache.oozie.service.AuthorizationService.class);\n    org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration();\n    org.apache.oozie.service.HadoopAccessorService has = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HadoopAccessorService.class);\n    java.net.URI uri = getFileSystem().getUri();\n    org.apache.hadoop.conf.Configuration fsConf = has.createJobConf(uri.getAuthority());\n    org.apache.hadoop.fs.FileSystem fileSystem = has.createFileSystem(org.apache.oozie.test.XTestCase.getTestUser(), uri, fsConf);\n    try {\n        as.authorizeForGroup(org.apache.oozie.test.XTestCase.getTestUser3(), org.apache.oozie.test.XTestCase.getTestGroup());\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.service.AuthorizationException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0502, ex.getErrorCode());\n    }\n    try {\n        as.authorizeForAdmin(org.apache.oozie.test.XTestCase.getTestUser(), true);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.service.AuthorizationException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0503, ex.getErrorCode());\n    }\n    try {\n        org.apache.hadoop.fs.Path app = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"w\");\n        as.authorizeForApp(org.apache.oozie.test.XTestCase.getTestUser(), org.apache.oozie.test.XTestCase.getTestGroup(), app.toString(), conf);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.service.AuthorizationException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0504, ex.getErrorCode());\n    }\n    try {\n        org.apache.hadoop.fs.Path app = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"w\");\n        fileSystem.mkdirs(app);\n        as.authorizeForApp(org.apache.oozie.test.XTestCase.getTestUser(), org.apache.oozie.test.XTestCase.getTestGroup(), app.toString(), conf);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.service.AuthorizationException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0505, ex.getErrorCode());\n    }\n    try {\n        org.apache.hadoop.fs.Path app = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"w\");\n        org.apache.hadoop.fs.Path wf = new org.apache.hadoop.fs.Path(app, \"workflow.xml\");\n        fileSystem.mkdirs(wf);\n        as.authorizeForApp(org.apache.oozie.test.XTestCase.getTestUser(), org.apache.oozie.test.XTestCase.getTestGroup(), app.toString(), conf);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.service.AuthorizationException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0506, ex.getErrorCode());\n    }\n    try {\n        org.apache.hadoop.fs.Path app = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"ww\");\n        fileSystem.mkdirs(app);\n        org.apache.hadoop.fs.Path wf = new org.apache.hadoop.fs.Path(app, \"workflow.xml\");\n        fileSystem.create(wf).close();\n        org.apache.hadoop.fs.permission.FsPermission fsPermission = new org.apache.hadoop.fs.permission.FsPermission(org.apache.hadoop.fs.permission.FsAction.READ, org.apache.hadoop.fs.permission.FsAction.NONE, org.apache.hadoop.fs.permission.FsAction.NONE);\n        fileSystem.setPermission(app, fsPermission);\n        as.authorizeForApp(org.apache.oozie.test.XTestCase.getTestUser2(), org.apache.oozie.test.XTestCase.getTestGroup() + \"-invalid\", app.toString(), conf);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.service.AuthorizationException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0507, ex.getErrorCode());\n    }\n    try {\n        as.authorizeForJob(org.apache.oozie.test.XTestCase.getTestUser(), \"1\", true);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.service.AuthorizationException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, ex.getErrorCode());\n    }\n    org.apache.oozie.WorkflowJobBean job = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    try {\n        as.authorizeForJob(org.apache.oozie.test.XTestCase.getTestUser3(), job.getId(), true);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.service.AuthorizationException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0508, ex.getErrorCode());\n    }\n}",
        "ClassName": "TestAuthorizationService",
        "Label": 1,
        "MethodName": "testErrors",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String actionXml = ((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<main-class>\") + org.apache.oozie.action.hadoop.LauncherMainTester.class.getName()) + \"</main-class>\") + \"<arg>exit0</arg>\") + \"</java>\";\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml, null);\n    final org.apache.hadoop.mapred.RunningJob runningJob = submitAction(context);\n    waitFor(60 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return runningJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(runningJob.isSuccessful());\n    org.apache.oozie.action.ActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    ae.check(context, context.getAction());\n    junit.framework.Assert.assertTrue(ae.isCompleted(context.getAction().getExternalStatus()));\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", context.getAction().getExternalStatus());\n    junit.framework.Assert.assertNull(context.getAction().getData());\n    ae.end(context, context.getAction());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, context.getAction().getStatus());\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testExit0SubmitOK",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String jobId = (\"00000-\" + new java.util.Date().getTime()) + \"-TestCoordinatorStore-C\";\n    java.lang.String actionId = jobId + \"_1\";\n    try {\n        _testInsertJob(jobId);\n        _testGetJob(jobId);\n        _testGetMatJobLists();\n        _testUpdateCoordJob(jobId);\n        _testInsertAction(jobId, actionId);\n        _testGetAction(jobId, actionId);\n        _testGetActionForJob(jobId, actionId);\n        _testGetActionForJobInExecOrder(jobId, actionId);\n        _testGetActionForJobInLastOnly(jobId, actionId);\n        _testGetActionRunningCount(actionId);\n        _testGetRecoveryActionsGroupByJobId(jobId);\n        _testUpdateCoordAction(actionId);\n        _testUpdateCoordActionMin(actionId);\n    } finally {\n    }\n}",
        "ClassName": "TestCoordinatorStore",
        "Label": 1,
        "MethodName": "testCoordStore",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String logs = \"/tmp/oozie/logs\";\n    setSystemProperty(org.apache.oozie.service.XLogService.OOZIE_LOG_DIR, logs);\n    org.apache.oozie.service.XLogService ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertEquals(logs, java.lang.System.getProperty(org.apache.oozie.service.XLogService.OOZIE_LOG_DIR));\n    ls.destroy();\n}",
        "ClassName": "TestXLogService",
        "Label": 1,
        "MethodName": "testCustomLogsDir",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.client.HeaderTestingVersionServlet.OOZIE_HEADERS.clear();\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"admin\", \"-queuedump\", \"-oozie\", oozieUrl };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testAdminQueueDump",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.CoordinatorJobBean coordJobA = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.CoordinatorJobBean coordJobB = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.WorkflowJobBean wfJobA1 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJobA2 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJobB = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfActionA1 = addRecordToWfActionTable(wfJobA1.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfActionA2 = addRecordToWfActionTable(wfJobA2.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfActionB = addRecordToWfActionTable(wfJobB.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordActionA1 = addRecordToCoordActionTable(coordJobA.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJobA1.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordActionA2 = addRecordToCoordActionTable(coordJobA.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJobA2.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordActionB = addRecordToCoordActionTable(coordJobB.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJobB.getId(), \"SUCCEEDED\", 0);\n    java.util.List<java.lang.String> children = new java.util.ArrayList<java.lang.String>();\n    children.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobsGetFromParentIdJPAExecutor(coordJobA.getId(), 10)));\n    checkChildren(children, wfJobA1.getId(), wfJobA2.getId());\n    children = new java.util.ArrayList<java.lang.String>();\n    children.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobsGetFromParentIdJPAExecutor(coordJobB.getId(), 10)));\n    checkChildren(children, wfJobB.getId());\n}",
        "ClassName": "TestWorkflowJobsGetFromParentIdJPAExecutor",
        "Label": 1,
        "MethodName": "testGetCoordinatorParent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"testWf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"one\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"f\", \"end\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"four\", \"three\", \"two\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"two\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"three\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"four\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"f2\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f2\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"five\", \"six\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"five\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j2\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"six\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j2\", \"k\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"j2\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j2\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"k\")).addNode(new org.apache.oozie.workflow.lite.KillNodeDef(\"k\", \"kill\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class)).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    try {\n        invokeForkJoin(parser, def);\n        junit.framework.Assert.fail(\"Expected to catch an exception but did not encounter any\");\n    } catch (java.lang.Exception ex) {\n        org.apache.oozie.workflow.WorkflowException we = ((org.apache.oozie.workflow.WorkflowException) (ex.getCause()));\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0742, we.getErrorCode());\n        junit.framework.Assert.assertTrue(we.getMessage().contains(\"[j2]\"));\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testNestedForkJoinFailure",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-data\");\n    java.lang.String expr = \"${coord:dataOutPartitions('ABC')}\";\n    eval.setVariable(\"oozie.dataname.ABC\", \"data-out\");\n    junit.framework.Assert.assertEquals(\"${coord:dataOutPartitions('ABC')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:dataOutPartitions('ABCD')}\";\n    try {\n        junit.framework.Assert.assertEquals(\"${coord:dataOutPartitions('ABCD')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n        junit.framework.Assert.fail(\"should throw exception because Data-in is not defiend\");\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestHCatELFunctions",
        "Label": 1,
        "MethodName": "testDataOutPartitionsPh1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T01:00Z\");\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-02T23:59Z\");\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.KILLED, start, end, false, false, 1);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    final java.lang.String wfJobId = wfJob.getId();\n    addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.KILLED, \"coord-action-get.xml\", wfJobId, \"RUNNING\", 1);\n    sleep(3000);\n    java.lang.Runnable recoveryRunnable = new org.apache.oozie.service.RecoveryService.RecoveryRunnable(0, 1, 1);\n    recoveryRunnable.run();\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    waitFor(10000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJobId);\n            org.apache.oozie.WorkflowJobBean ret = jpaService.execute(wfGetCmd);\n            return ret.getStatus() == org.apache.oozie.client.WorkflowJob.Status.KILLED;\n        }\n    });\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJobId);\n    org.apache.oozie.WorkflowJobBean ret = jpaService.execute(wfGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.KILLED, ret.getStatus());\n}",
        "ClassName": "TestRecoveryService",
        "Label": 1,
        "MethodName": "testCoordActionRecoveryServiceForKilled",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-action-start\");\n    eval.setVariable(\".datain.ABC\", \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=12;region=us,\" + (\"hcat://hcat.server.com:5080/mydb/clicks/datastamp=13;region=us,\" + \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=10;region=us\"));\n    eval.setVariable(\".datain.ABC.unresolved\", java.lang.Boolean.FALSE);\n    java.lang.String expr = \"${coord:dataInPartitionMin('ABC','datastamp')}\";\n    java.lang.String res = org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr);\n    junit.framework.Assert.assertTrue(res.equals(\"10\"));\n}",
        "ClassName": "TestHCatELFunctions",
        "Label": 1,
        "MethodName": "testDataInPartitionMin",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration srcConf = new org.apache.hadoop.conf.Configuration(false);\n    org.apache.hadoop.conf.Configuration targetConf = new org.apache.hadoop.conf.Configuration(false);\n    srcConf.set(\"testParameter1\", \"valueFromSource\");\n    srcConf.set(\"testParameter2\", \"valueFromSource\");\n    targetConf.set(\"testParameter2\", \"valueFromTarget\");\n    targetConf.set(\"testParameter3\", \"valueFromTarget\");\n    org.apache.oozie.util.XConfiguration.copy(srcConf, targetConf);\n    junit.framework.Assert.assertEquals(targetConf.get(\"testParameter1\"), \"valueFromSource\");\n    junit.framework.Assert.assertEquals(targetConf.get(\"testParameter2\"), \"valueFromSource\");\n    junit.framework.Assert.assertEquals(targetConf.get(\"testParameter3\"), \"valueFromTarget\");\n}",
        "ClassName": "TestXConfiguration",
        "Label": 1,
        "MethodName": "testCopy",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"one\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestRootContextHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"end\" }))).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    job.setVar(\"a\", \"A\");\n    job.setTransientVar(\"ta\", \"AA\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, job.getStatus());\n    junit.framework.Assert.assertEquals(\"B\", job.getVar(\"b\"));\n    junit.framework.Assert.assertEquals(\"BB\", job.getTransientVar(\"tb\"));\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.size());\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.exits.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.kills.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.fails.size());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testNodeContext",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.BundleJobBean bundleJobBean = xDataTestCase.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    runTest(\"/v1/job/*\", org.apache.oozie.servlet.V1JobServlet.class, org.apache.oozie.servlet.TestV1JobServletBundleEngine.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockCoordinatorEngineService.reset();\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_SHOW_LOG);\n            final java.lang.String id = bundleJobBean.getId();\n            java.net.URL url = createURL(id, params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1JobServletBundleEngine",
        "Label": 1,
        "MethodName": "testBundleEngineStreamLog",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    long currTime = java.lang.System.currentTimeMillis();\n    org.apache.oozie.util.XLogStreamer.Filter.reset();\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"USER\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"GROUP\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"TOKEN\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"APP\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"JOB\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"ACTION\");\n    org.apache.oozie.util.XLogStreamer.Filter xf = new org.apache.oozie.util.XLogStreamer.Filter();\n    xf.setParameter(\"JOB\", \"14-200904160239--example-forkjoinwf\");\n    xf.setLogLevel(\"DEBUG|INFO\");\n    java.io.FileWriter fw1 = new java.io.FileWriter(getTestCaseDir() + \"/oozie.log\");\n    java.lang.StringBuilder sb1 = new java.lang.StringBuilder();\n    sb1.append((\"2009-06-24 02:43:13,958 DEBUG _L1_:323 -\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"End workflow state change\");\n    sb1.append(((\"\\n2009-06-24 02:43:13,961 INFO _L2_:317 -\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"[org.apache.oozie.core.command.WorkflowRunnerCallable] \") + \"released lock\");\n    fw1.write(sb1.toString());\n    fw1.close();\n    java.io.File f1 = new java.io.File(getTestCaseDir() + \"/oozie.log\");\n    f1.setLastModified(currTime - (9 * 3600000));\n    java.io.FileWriter fw2 = new java.io.FileWriter(getTestCaseDir() + \"/oozie.log.1\");\n    java.lang.StringBuilder sb2 = new java.lang.StringBuilder();\n    sb2.append(((((((\"\\n2009-06-24 02:43:13,986 WARN _L3_:539 -\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"Use GenericOptionsParser for parsing \") + \"the \") + \"arguments. \") + \"\\n\") + \"_L3A_Applications \") + \"should implement Tool for the same. \\n_L3B_Multi line test\");\n    sb2.append((((\"\\n2009-06-24 02:43:14,431 INFO _L4_:661 -\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"No job jar file set. User classes \") + \"may not be found. \") + \"See JobConf(Class) or JobConf#setJar(String).\");\n    fw2.write(sb2.toString());\n    fw2.close();\n    java.io.File f2 = new java.io.File(getTestCaseDir() + \"/oozie.log.1\");\n    f2.setLastModified(currTime - (8 * 3600000));\n    java.io.FileWriter fw3 = new java.io.FileWriter(getTestCaseDir() + \"/oozie.log.2\");\n    java.lang.StringBuilder sb3 = new java.lang.StringBuilder();\n    sb3.append(\"\\n2009-06-24 02:43:14,505 INFO _L5_:317 - USER[oozie] GROUP[oozie] TOKEN[-] APP[-] JOB[-] \" + \"ACTION[-] Released Lock\");\n    sb3.append(\"\\n2009-06-24 02:43:19,344 DEBUG _L6_:323 - USER[oozie] GROUP[oozie] TOKEN[MYtoken] APP[-] JOB[-] \" + \"ACTION[-] Number of pending signals to check [0]\");\n    sb3.append((\"\\n2009-06-24 02:43:29,151 DEBUG _L7_:323 -\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"Number of pending actions [0] \");\n    fw3.write(sb3.toString());\n    fw3.close();\n    java.io.File f3 = new java.io.File(getTestCaseDir() + \"/oozie.log.2\");\n    f3.setLastModified(currTime);\n    java.io.FileWriter fwerr = new java.io.FileWriter(getTestCaseDir() + \"/testerr.log\");\n    java.lang.StringBuilder sberr = new java.lang.StringBuilder();\n    sberr.append((\"2009-06-24 02:43:13,958 WARN _L1_:323 -\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"End workflow state change\");\n    sberr.append(((\"\\n2009-06-24 02:43:13,961 INFO _L2_:317 -\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"[org.apache.oozie.core.command.WorkflowRunnerCallable] \") + \"released lock\");\n    fwerr.write(sberr.toString());\n    fwerr.close();\n    java.io.File ferr = new java.io.File(getTestCaseDir() + \"/testerr.log\");\n    ferr.setLastModified(currTime - (8 * 3600000));\n    java.lang.String outFilename = (\"oozie.log-\" + org.apache.oozie.util.TestLogStreamer.filenameDateFormatter.format(new java.util.Date(currTime - (6 * 3600000)))) + \".gz\";\n    java.io.File f = new java.io.File((getTestCaseDir() + \"/\") + outFilename);\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    sb.append((\"\\n2009-06-24 02:43:13,958 DEBUG _L8_:323 -\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"End workflow state change\");\n    sb.append((((\"\\n2009-06-24 02:43:13,961 INFO _L9_:317 -\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"[org.apache.oozie.core.\") + \"command.WorkflowRunnerCallable] \") + \"released lock\");\n    writeToGZFile(f, sb);\n    outFilename = \"oozie.log.gz\";\n    f = new java.io.File((getTestCaseDir() + \"/\") + outFilename);\n    sb = new java.lang.StringBuilder();\n    sb.append((\"\\n2009-06-24 02:43:13,958 DEBUG _L10_:323 -\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"End workflow state change\");\n    sb.append((((\"\\n2009-06-24 02:43:13,961 INFO _L11_:317 -\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"[org.apache.oozie.core.\") + \"command.WorkflowRunnerCallable] \") + \"released lock\");\n    writeToGZFile(f, sb);\n    outFilename = \"oozie.log-2011-12-03-15.bz2.gz\";\n    f = new java.io.File((getTestCaseDir() + \"/\") + outFilename);\n    sb = new java.lang.StringBuilder();\n    sb.append((\"\\n2009-06-24 02:43:13,958 DEBUG _L12_:323 -\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"End workflow state change\");\n    sb.append((((\"\\n2009-06-24 02:43:13,961 INFO _L13_:317 -\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"[org.apache.oozie.core.\") + \"command.WorkflowRunnerCallable] \") + \"released lock\");\n    writeToGZFile(f, sb);\n    java.io.StringWriter sw = new java.io.StringWriter();\n    org.apache.oozie.util.XLogStreamer str = new org.apache.oozie.util.XLogStreamer(xf, sw, getTestCaseDir(), \"oozie.log\", 1);\n    str.streamLog(new java.util.Date(currTime - (10 * 3600000)), new java.util.Date(currTime - (5 * 3600000)));\n    java.lang.String[] out = sw.toString().split(\"\\n\");\n    junit.framework.Assert.assertEquals(7, out.length);\n    junit.framework.Assert.assertEquals(true, out[0].contains(\"_L10_\"));\n    junit.framework.Assert.assertEquals(true, out[1].contains(\"_L11_\"));\n    junit.framework.Assert.assertEquals(true, out[2].contains(\"_L1_\"));\n    junit.framework.Assert.assertEquals(true, out[3].contains(\"_L2_\"));\n    junit.framework.Assert.assertEquals(true, out[4].contains(\"_L4_\"));\n    junit.framework.Assert.assertEquals(true, out[5].contains(\"_L8_\"));\n    junit.framework.Assert.assertEquals(true, out[6].contains(\"_L9_\"));\n    java.io.StringWriter sw1 = new java.io.StringWriter();\n    org.apache.oozie.util.XLogStreamer str1 = new org.apache.oozie.util.XLogStreamer(xf, sw1, getTestCaseDir(), \"oozie.log\", 1);\n    str1.streamLog(null, null);\n    out = sw1.toString().split(\"\\n\");\n    junit.framework.Assert.assertEquals(8, out.length);\n    junit.framework.Assert.assertEquals(true, out[0].contains(\"_L10\"));\n    junit.framework.Assert.assertEquals(true, out[1].contains(\"_L11_\"));\n    junit.framework.Assert.assertEquals(true, out[2].contains(\"_L1_\"));\n    junit.framework.Assert.assertEquals(true, out[3].contains(\"_L2_\"));\n    junit.framework.Assert.assertEquals(true, out[4].contains(\"_L4_\"));\n    junit.framework.Assert.assertEquals(true, out[5].contains(\"_L8_\"));\n    junit.framework.Assert.assertEquals(true, out[6].contains(\"_L9_\"));\n    junit.framework.Assert.assertEquals(true, out[7].contains(\"_L7_\"));\n}",
        "ClassName": "TestLogStreamer",
        "Label": 1,
        "MethodName": "testStreamLog",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testNonTransient(\"end.non-transient\", org.apache.oozie.client.WorkflowAction.Status.END_MANUAL, \"end\");\n    junit.framework.Assert.assertTrue(true);\n}",
        "ClassName": "TestActionErrors",
        "Label": 1,
        "MethodName": "testEndNonTransient",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    if (createJobConf().get(\"yarn.resourcemanager.address\") != null) {\n        return;\n    }\n    services.destroy();\n    setSystemProperty(\"oozie.service.ActionCheckerService.action.check.interval\", \"10\");\n    setSystemProperty(\"oozie.service.ActionCheckerService.action.check.delay\", \"20\");\n    final int maxRetries = 2;\n    setSystemProperty(\"oozie.action.retries.max\", java.lang.Integer.toString(maxRetries));\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.WorkflowJobBean job0 = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    final java.lang.String jobId = job0.getId();\n    org.apache.oozie.WorkflowActionBean action0 = this.addRecordToWfActionTable(jobId, \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    final java.lang.String actionId = action0.getId();\n    final org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(actionId);\n    new org.apache.oozie.command.wf.ActionStartXCommand(actionId, \"map-reduce\").call();\n    final org.apache.oozie.WorkflowActionBean action1 = jpaService.execute(wfActionGetCmd);\n    java.lang.String originalLauncherId = action1.getExternalId();\n    org.apache.oozie.command.wf.ActionXCommand.ActionExecutorContext context = new org.apache.oozie.command.wf.ActionXCommand.ActionExecutorContext(job0, action1, false, false);\n    org.apache.oozie.action.hadoop.MapReduceActionExecutor actionExecutor = new org.apache.oozie.action.hadoop.MapReduceActionExecutor();\n    org.apache.hadoop.mapred.JobConf conf = actionExecutor.createBaseHadoopConf(context, org.apache.oozie.util.XmlUtils.parseXml(action1.getConf()));\n    java.lang.String user = conf.get(\"user.name\");\n    org.apache.hadoop.mapred.JobClient jobClient = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HadoopAccessorService.class).createJobClient(user, conf);\n    final org.apache.hadoop.mapred.RunningJob launcherJob = jobClient.getJob(org.apache.hadoop.mapred.JobID.forName(originalLauncherId));\n    waitFor(120 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return launcherJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(launcherJob.isSuccessful());\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.hasIdSwap(launcherJob));\n    new org.apache.oozie.command.wf.ActionCheckXCommand(action1.getId()).call();\n    org.apache.oozie.WorkflowActionBean action2 = jpaService.execute(wfActionGetCmd);\n    java.lang.String originalMapperId = action2.getExternalId();\n    junit.framework.Assert.assertFalse(originalLauncherId.equals(originalMapperId));\n    executeWhileJobTrackerIsShutdown(new org.apache.oozie.test.XTestCase.ShutdownJobTrackerExecutable() {\n        @java.lang.Override\n        public void execute() throws java.lang.Exception {\n            junit.framework.Assert.assertEquals(0, action1.getRetries());\n            new org.apache.oozie.command.wf.ActionCheckXCommand(actionId).call();\n            waitFor(30 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n                @java.lang.Override\n                public boolean evaluate() throws java.lang.Exception {\n                    org.apache.oozie.WorkflowActionBean action1a = jpaService.execute(wfActionGetCmd);\n                    return action1a.getRetries() > 0;\n                }\n            });\n            waitFor(180 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n                @java.lang.Override\n                public boolean evaluate() throws java.lang.Exception {\n                    org.apache.oozie.WorkflowActionBean action1a = jpaService.execute(wfActionGetCmd);\n                    return action1a.getRetries() == 0;\n                }\n            });\n            org.apache.oozie.WorkflowActionBean action1b = jpaService.execute(wfActionGetCmd);\n            junit.framework.Assert.assertEquals(0, action1b.getRetries());\n            junit.framework.Assert.assertEquals(\"START_MANUAL\", action1b.getStatusStr());\n            org.apache.oozie.WorkflowJobBean job1 = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(jobId));\n            junit.framework.Assert.assertEquals(\"SUSPENDED\", job1.getStatusStr());\n        }\n    });\n    new org.apache.oozie.command.wf.ResumeXCommand(jobId).call();\n    org.apache.oozie.WorkflowJobBean job2 = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(jobId));\n    junit.framework.Assert.assertEquals(\"RUNNING\", job2.getStatusStr());\n    sleep(500);\n    new org.apache.oozie.command.wf.ActionCheckXCommand(actionId).call();\n    org.apache.oozie.WorkflowActionBean action3 = jpaService.execute(wfActionGetCmd);\n    java.lang.String launcherId = action3.getExternalId();\n    junit.framework.Assert.assertFalse(originalLauncherId.equals(launcherId));\n    junit.framework.Assert.assertFalse(originalMapperId.equals(launcherId));\n    final org.apache.hadoop.mapred.RunningJob launcherJob2 = jobClient.getJob(org.apache.hadoop.mapred.JobID.forName(launcherId));\n    waitFor(120 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return launcherJob2.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(launcherJob2.isSuccessful());\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.hasIdSwap(launcherJob2));\n    new org.apache.oozie.command.wf.ActionCheckXCommand(actionId).call();\n    org.apache.oozie.WorkflowActionBean action4 = jpaService.execute(wfActionGetCmd);\n    java.lang.String mapperId = action4.getExternalId();\n    junit.framework.Assert.assertFalse(originalMapperId.equals(mapperId));\n    junit.framework.Assert.assertFalse(launcherId.equals(mapperId));\n    final org.apache.hadoop.mapred.RunningJob mrJob = jobClient.getJob(org.apache.hadoop.mapred.JobID.forName(mapperId));\n    waitFor(120 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return mrJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(mrJob.isSuccessful());\n    new org.apache.oozie.command.wf.ActionCheckXCommand(actionId).call();\n    org.apache.oozie.WorkflowActionBean action5 = jpaService.execute(wfActionGetCmd);\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", action5.getExternalStatus());\n}",
        "ClassName": "TestActionCheckXCommand",
        "Label": 1,
        "MethodName": "testActionCheckTransientDuringMRAction",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"one\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.AsynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"end\" }))).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.PREP, job.getStatus());\n    job.kill();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.KILLED, job.getStatus());\n    job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    job.fail(\"one\");\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.FAILED, job.getStatus());\n    job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    try {\n        job.suspend();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n    }\n    try {\n        job.resume();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n    }\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, job.getStatus());\n    try {\n        job.resume();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n    }\n    try {\n        job.start();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n    }\n    job.suspend();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.SUSPENDED, job.getStatus());\n    try {\n        job.suspend();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n    }\n    try {\n        job.start();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n    }\n    job.resume();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, job.getStatus());\n    try {\n        job.resume();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n    }\n    try {\n        job.start();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n    }\n    job.kill();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.KILLED, job.getStatus());\n    try {\n        job.kill();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n    }\n    try {\n        job.suspend();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n    }\n    try {\n        job.resume();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n    }\n    try {\n        job.start();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n    }\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testWorkflowStates",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        org.apache.oozie.service.HCatAccessorService hcatService = services.get(org.apache.oozie.service.HCatAccessorService.class);\n        org.apache.oozie.service.JMSAccessorService jmsService = services.get(org.apache.oozie.service.JMSAccessorService.class);\n        java.lang.String server = \"hcat.server.com:5080\";\n        java.lang.String topic = \"hcat.mydb.mytable\";\n        org.apache.oozie.jms.JMSConnectionInfo connInfo = hcatService.getJMSConnectionInfo(new java.net.URI(\"hcat://hcat.server.com:8020\"));\n        jmsService.registerForNotification(connInfo, topic, new org.apache.oozie.dependency.hcat.HCatMessageHandler(server));\n        org.apache.oozie.jms.MessageReceiver receiver1 = jmsService.getMessageReceiver(connInfo, topic);\n        jmsService.registerForNotification(connInfo, topic, new org.apache.oozie.dependency.hcat.HCatMessageHandler(server));\n        org.apache.oozie.jms.MessageReceiver receiver2 = jmsService.getMessageReceiver(connInfo, topic);\n        junit.framework.Assert.assertEquals(receiver1, receiver2);\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Exception encountered : \" + e);\n    }\n}",
        "ClassName": "TestJMSAccessorService",
        "Label": 1,
        "MethodName": "testRegisterSingleConsumerPerTopic",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path actionDir = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path newDir = new org.apache.hadoop.fs.Path(actionDir, \"newDir\");\n    org.apache.hadoop.mapred.JobConf jobConf = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HadoopAccessorService.class).createJobConf(new java.net.URI(getNameNodeUri()).getAuthority());\n    jobConf.set(\"user.name\", org.apache.oozie.test.XTestCase.getTestUser());\n    jobConf.set(\"fs.default.name\", getNameNodeUri());\n    org.apache.oozie.action.hadoop.LauncherMapper lm = new org.apache.oozie.action.hadoop.LauncherMapper();\n    org.apache.hadoop.conf.Configuration actionConf = new org.apache.oozie.util.XConfiguration();\n    actionConf.set(\"mapreduce.job.cache.files\", \"a.jar,aa.jar#aa.jar\");\n    lm.setupLauncherInfo(jobConf, \"1\", \"1@a\", actionDir, \"1@a-0\", actionConf, \"\");\n    junit.framework.Assert.assertFalse(jobConf.getBoolean(\"oozie.hadoop-2.0.2-alpha.workaround.for.distributed.cache\", false));\n    junit.framework.Assert.assertEquals(\"a.jar,aa.jar#aa.jar\", actionConf.get(\"mapreduce.job.cache.files\"));\n    org.apache.oozie.service.Services.get().getConf().setBoolean(\"oozie.hadoop-2.0.2-alpha.workaround.for.distributed.cache\", true);\n    lm = new org.apache.oozie.action.hadoop.LauncherMapper();\n    actionConf = new org.apache.oozie.util.XConfiguration();\n    actionConf.set(\"mapreduce.job.cache.files\", \"a.jar,aa.jar#aa.jar\");\n    lm.setupLauncherInfo(jobConf, \"1\", \"1@a\", actionDir, \"1@a-0\", actionConf, \"\");\n    junit.framework.Assert.assertTrue(jobConf.getBoolean(\"oozie.hadoop-2.0.2-alpha.workaround.for.distributed.cache\", false));\n    junit.framework.Assert.assertEquals(\"aa.jar#aa.jar\", actionConf.get(\"mapreduce.job.cache.files\"));\n}",
        "ClassName": "TestLauncher",
        "Label": 1,
        "MethodName": "testSetupLauncherInfoHadoop2_0_2_alphaWorkaround",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTableForWaiting(\"coord-job-for-action-input-check.xml\", org.apache.oozie.client.Job.Status.RUNNING, false, true);\n        org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"coord\");\n        java.lang.String actionXml = getCoordActionXml(appPath, \"coord-action-for-action-input-check.xml\");\n        org.apache.oozie.CoordinatorActionBean actionBean = createCoordinatorActionBean(job);\n        java.lang.String db = \"default\";\n        java.lang.String table = \"tablename\";\n        java.lang.String hcatDependency = getPushMissingDependencies(db, table);\n        actionBean.setPushMissingDependencies(hcatDependency);\n        org.jdom.Element eAction = createActionElement(actionXml);\n        java.lang.String newactionXml = org.apache.oozie.command.coord.CoordCommandUtils.dryRunCoord(eAction, actionBean);\n        eAction = org.apache.oozie.util.XmlUtils.parseXml(newactionXml);\n        org.jdom.Element configElem = eAction.getChild(\"action\", eAction.getNamespace()).getChild(\"workflow\", eAction.getNamespace()).getChild(\"configuration\", eAction.getNamespace());\n        java.util.List<?> elementList = configElem.getChildren(\"property\", configElem.getNamespace());\n        org.jdom.Element e1 = ((org.jdom.Element) (elementList.get(0)));\n        org.jdom.Element e2 = ((org.jdom.Element) (elementList.get(1)));\n        junit.framework.Assert.assertEquals(\"${coord:dataIn('A')}\", e1.getChild(\"value\", e1.getNamespace()).getValue());\n        junit.framework.Assert.assertEquals(\"${coord:dataOut('LOCAL_A')}\", e2.getChild(\"value\", e2.getNamespace()).getValue());\n        populateTable(db, table);\n        newactionXml = org.apache.oozie.command.coord.CoordCommandUtils.dryRunCoord(eAction, actionBean);\n        eAction = org.apache.oozie.util.XmlUtils.parseXml(newactionXml);\n        configElem = eAction.getChild(\"action\", eAction.getNamespace()).getChild(\"workflow\", eAction.getNamespace()).getChild(\"configuration\", eAction.getNamespace());\n        elementList = configElem.getChildren(\"property\", configElem.getNamespace());\n        e1 = ((org.jdom.Element) (elementList.get(0)));\n        e2 = ((org.jdom.Element) (elementList.get(1)));\n        junit.framework.Assert.assertEquals(\"file://,testDir/2009/29,file://,testDir/2009/22,file://,testDir/2009/15,file://,testDir/2009/08\", e1.getChild(\"value\", e1.getNamespace()).getValue());\n        junit.framework.Assert.assertEquals(\"file://,testDir/2009/29\", e2.getChild(\"value\", e1.getNamespace()).getValue());\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestCoordCommandUtils",
        "Label": 1,
        "MethodName": "testDryRunPushDependencies",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            org.apache.oozie.client.WorkflowJob wf = wc.getJobInfo((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END);\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO, org.apache.oozie.servlet.MockDagEngineService.did);\n            junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, wf.getId());\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testJobStatus",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.TestCallableQueueService.EXEC_ORDER = new java.util.concurrent.atomic.AtomicLong();\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable1 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"TestConcurrency\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable2 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"TestConcurrency\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable3 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"TestConcurrency\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable4 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"TestConcurrency\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable5 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"TestConcurrency\", 0, 100);\n    java.util.List<org.apache.oozie.service.TestCallableQueueService.MyCallable> callables = java.util.Arrays.asList(callable1, callable2, callable3, callable4, callable5);\n    org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    for (org.apache.oozie.service.TestCallableQueueService.MyCallable c : callables) {\n        queueservice.queue(c);\n    }\n    waitFor(3000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return ((((callable1.executed != 0) && (callable2.executed != 0)) && (callable3.executed != 0)) && (callable4.executed != 0)) && (callable5.executed != 0);\n        }\n    });\n    long first = java.lang.Long.MAX_VALUE;\n    for (org.apache.oozie.service.TestCallableQueueService.MyCallable c : callables) {\n        junit.framework.Assert.assertTrue(c.executed != 0);\n        first = java.lang.Math.min(first, c.executed);\n    }\n    int secondBatch = 0;\n    for (org.apache.oozie.service.TestCallableQueueService.MyCallable c : callables) {\n        if ((c.executed - first) > 0) {\n            secondBatch++;\n        }\n    }\n    junit.framework.Assert.assertTrue(secondBatch >= 2);\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testConcurrency",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    answer = 1;\n    check = true;\n    org.apache.oozie.client.TestOozieClientWithFakeServlet.FakeOozieClient client = new org.apache.oozie.client.TestOozieClientWithFakeServlet.FakeOozieClient(\"http://url\");\n    java.lang.Void answer = client.reRunBundle(\"jobId\", \"\", \"\", true, true);\n    org.junit.Assert.assertNull(answer);\n}",
        "ClassName": "TestOozieClientWithFakeServlet",
        "Label": 1,
        "MethodName": "testBundleRerun",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setSystemProperty(org.apache.oozie.service.WorkflowAppService.CONFG_MAX_WF_LENGTH, \"100\");\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    try {\n        services.init();\n        java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-schema-valid.xml\", -1);\n        java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n        org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n        org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n        org.apache.oozie.service.WorkflowAppService wps = services.get(org.apache.oozie.service.WorkflowAppService.class);\n        wps.readDefinition(((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\", org.apache.oozie.test.XTestCase.getTestUser(), \"authToken\", conf);\n        junit.framework.Assert.fail(\"an exception should be thrown as the definition exceeds the given maximum\");\n    } catch (org.apache.oozie.workflow.WorkflowException wfe) {\n        junit.framework.Assert.assertEquals(wfe.getErrorCode(), org.apache.oozie.ErrorCode.E0736);\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestLiteWorkflowAppService",
        "Label": 1,
        "MethodName": "testMaxWfDefinition",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    _testCoordActionUpdateStatus(action);\n}",
        "ClassName": "TestCoordActionUpdateStatusJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionUpdateStatus",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testNonTransientWithCoordActionUpdate(\"start.non-transient\", org.apache.oozie.client.WorkflowAction.Status.START_MANUAL, \"start\");\n    junit.framework.Assert.assertTrue(true);\n}",
        "ClassName": "TestActionErrors",
        "Label": 1,
        "MethodName": "testStartNonTransientWithCoordActionUpdate",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String wfApp = \"<workflow-app xmlns='uri:oozie:workflow:0.1' name='test-wf'>\" + ((\"    <start to='end'/>\" + \"    <end name='end'/>\") + \"</workflow-app>\");\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n    fs.mkdirs(appPath);\n    fs.mkdirs(new org.apache.hadoop.fs.Path(appPath, \"lib\"));\n    java.io.Writer writer = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\")));\n    writer.write(wfApp);\n    writer.close();\n    try {\n        org.apache.oozie.local.LocalOozie.start();\n        final org.apache.oozie.client.OozieClient wc = org.apache.oozie.local.LocalOozie.getClient();\n        java.util.Properties conf = wc.createConfiguration();\n        conf.setProperty(org.apache.oozie.client.OozieClient.APP_PATH, (appPath.toString() + java.io.File.separator) + \"workflow.xml\");\n        conf.setProperty(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n        conf.setProperty(org.apache.oozie.client.OozieClient.GROUP_NAME, org.apache.oozie.test.XTestCase.getTestGroup());\n        final java.lang.String jobId = wc.submit(conf);\n        junit.framework.Assert.assertNotNull(jobId);\n        org.apache.oozie.client.WorkflowJob wf = wc.getJobInfo(jobId);\n        junit.framework.Assert.assertNotNull(wf);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.PREP, wf.getStatus());\n        wc.start(jobId);\n        waitFor(1000, new org.apache.oozie.test.XTestCase.Predicate() {\n            public boolean evaluate() throws java.lang.Exception {\n                org.apache.oozie.client.WorkflowJob wf = wc.getJobInfo(jobId);\n                return wf.getStatus() == org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED;\n            }\n        });\n        wf = wc.getJobInfo(jobId);\n        junit.framework.Assert.assertNotNull(wf);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wf.getStatus());\n    } finally {\n        org.apache.oozie.local.LocalOozie.stop();\n    }\n}",
        "ClassName": "TestLocalOozie",
        "Label": 1,
        "MethodName": "testWorkflowRun",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String jobId = _testSubmitJob(appPath);\n    java.util.Date createDate = new java.util.Date();\n    _testTimeout(jobId, createDate);\n}",
        "ClassName": "TestFutureActionsTimeOut",
        "Label": 1,
        "MethodName": "testEngine",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        services.destroy();\n        services = super.setupServicesForHCatalog();\n        org.apache.hadoop.conf.Configuration conf = services.getConf();\n        java.lang.String jmsURL = \"hcat://${1}.${2}.server.com:8020=java.naming.factory.initial#\" + ((\"org.apache.activemq.jndi.ActiveMQInitialContextFactory\" + \";java.naming.provider.url#vm://localhost?broker.persistent=false;\") + \"connectionFactoryNames#dynamicFactories/hcat.prod.${1}\");\n        conf.set(org.apache.oozie.service.HCatAccessorService.JMS_CONNECTIONS_PROPERTIES, jmsURL);\n        services.init();\n        org.apache.oozie.service.HCatAccessorService hcatService = services.get(org.apache.oozie.service.HCatAccessorService.class);\n        org.apache.oozie.jms.JMSConnectionInfo connInfo = hcatService.getJMSConnectionInfo(new java.net.URI(\"hcat://hcatserver.blue.server.com:8020\"));\n        junit.framework.Assert.assertEquals(\"java.naming.factory.initial#org.apache.activemq.jndi.ActiveMQInitialContextFactory;java.naming.provider.url#\" + \"vm://localhost?broker.persistent=false;connectionFactoryNames#dynamicFactories/hcat.prod.hcatserver\", connInfo.getJNDIPropertiesString());\n        org.apache.oozie.jms.ConnectionContext ctx1 = new org.apache.oozie.jms.DefaultConnectionContext();\n        ctx1.createConnection(connInfo.getJNDIProperties());\n        org.apache.activemq.broker.BrokerService broker = new org.apache.activemq.broker.BrokerService();\n        broker.stop();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Unexpected exception \" + e);\n    }\n}",
        "ClassName": "TestJMSAccessorService",
        "Label": 1,
        "MethodName": "testConnectionContext",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.test.TestXTestCase.MyXTestCase testcase = new org.apache.oozie.test.TestXTestCase.MyXTestCase();\n    testcase.setName(getName());\n    testcase.setUp();\n    testcase.testWaitFor();\n    testcase.tearDown();\n    testcase.setName(getName() + \"A\");\n    testcase.setUp();\n    testcase.testWaitForTimeOut();\n    testcase.tearDown();\n}",
        "ClassName": "TestXTestCase",
        "Label": 1,
        "MethodName": "testWaitFor",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.XLog.Info logInfo = new org.apache.oozie.util.XLog.Info();\n    org.apache.oozie.util.XLog.Info.defineParameter(\"A\");\n    junit.framework.Assert.assertEquals(\"A[-]\", logInfo.createPrefix());\n    org.apache.oozie.util.XLog.Info.reset();\n    junit.framework.Assert.assertEquals(\"\", logInfo.createPrefix());\n}",
        "ClassName": "TestXLog",
        "Label": 1,
        "MethodName": "testInfoReset",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.BundleJobBean bundleJob = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    org.apache.oozie.CoordinatorJobBean coordJob1 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.CoordinatorJobBean coordJob2 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    coordJob2.setAppName(\"coord2\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob2));\n    org.apache.oozie.CoordinatorJobBean coordJob3 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    coordJob3.setAppName(\"coord3\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob3));\n    org.apache.oozie.CoordinatorJobBean coordJob4 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    coordJob4.setAppName(\"coord4\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob4));\n    org.apache.oozie.CoordinatorJobBean coordJob5 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    coordJob5.setAppName(\"coord5\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob5));\n    org.apache.oozie.WorkflowJobBean wfJob1 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJob2 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJob3 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJob4 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJob5 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction1 = addRecordToWfActionTable(wfJob1.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction2 = addRecordToWfActionTable(wfJob2.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction3 = addRecordToWfActionTable(wfJob3.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction4 = addRecordToWfActionTable(wfJob4.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction5 = addRecordToWfActionTable(wfJob5.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordAction1 = addRecordToCoordActionTable(coordJob1.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob1.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction2 = addRecordToCoordActionTable(coordJob2.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob2.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction3 = addRecordToCoordActionTable(coordJob3.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob3.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction4 = addRecordToCoordActionTable(coordJob4.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob4.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction5 = addRecordToCoordActionTable(coordJob5.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob5.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.BundleActionBean bundleAction1 = addRecordToBundleActionTable(bundleJob.getId(), coordJob1.getId(), coordJob1.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean bundleAction2 = addRecordToBundleActionTable(bundleJob.getId(), coordJob2.getId(), coordJob2.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean bundleAction3 = addRecordToBundleActionTable(bundleJob.getId(), coordJob3.getId(), coordJob3.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean bundleAction4 = addRecordToBundleActionTable(bundleJob.getId(), coordJob4.getId(), coordJob4.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean bundleAction5 = addRecordToBundleActionTable(bundleJob.getId(), coordJob5.getId(), coordJob5.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob1GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob1.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob2GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob2.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob3GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob3.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob4GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob4.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob5GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob5.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction1GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction1.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction2GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction2.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction3GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction3.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction4GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction4.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction5GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction5.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJob1GetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob1.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJob2GetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob2.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJob3GetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob3.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJob4GetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob4.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJob5GetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob5.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction1GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction1.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction2GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction2.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction3GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction3.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction4GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction4.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction5GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction5.getId());\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleJob.getId());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleAction1GetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJob.getId(), coordJob1.getAppName());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleAction2GetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJob.getId(), coordJob2.getAppName());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleAction3GetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJob.getId(), coordJob3.getAppName());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleAction4GetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJob.getId(), coordJob4.getAppName());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleAction5GetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJob.getId(), coordJob5.getAppName());\n    wfJob1 = jpaService.execute(wfJob1GetCmd);\n    wfJob2 = jpaService.execute(wfJob2GetCmd);\n    wfJob3 = jpaService.execute(wfJob3GetCmd);\n    wfJob4 = jpaService.execute(wfJob4GetCmd);\n    wfJob5 = jpaService.execute(wfJob5GetCmd);\n    wfAction1 = jpaService.execute(wfAction1GetCmd);\n    wfAction2 = jpaService.execute(wfAction2GetCmd);\n    wfAction3 = jpaService.execute(wfAction3GetCmd);\n    wfAction4 = jpaService.execute(wfAction4GetCmd);\n    wfAction5 = jpaService.execute(wfAction5GetCmd);\n    coordJob1 = jpaService.execute(coordJob1GetCmd);\n    coordJob2 = jpaService.execute(coordJob2GetCmd);\n    coordJob3 = jpaService.execute(coordJob3GetCmd);\n    coordJob4 = jpaService.execute(coordJob4GetCmd);\n    coordJob5 = jpaService.execute(coordJob5GetCmd);\n    coordAction1 = jpaService.execute(coordAction1GetCmd);\n    coordAction2 = jpaService.execute(coordAction2GetCmd);\n    coordAction3 = jpaService.execute(coordAction3GetCmd);\n    coordAction4 = jpaService.execute(coordAction4GetCmd);\n    coordAction5 = jpaService.execute(coordAction5GetCmd);\n    bundleJob = jpaService.execute(bundleJobGetCmd);\n    bundleAction1 = jpaService.execute(bundleAction1GetCmd);\n    bundleAction2 = jpaService.execute(bundleAction2GetCmd);\n    bundleAction3 = jpaService.execute(bundleAction3GetCmd);\n    bundleAction4 = jpaService.execute(bundleAction4GetCmd);\n    bundleAction5 = jpaService.execute(bundleAction5GetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob5.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction5.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob5.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction5.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleAction1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleAction2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleAction3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleAction4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleAction5.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(7, 7, 7, 10).call();\n    try {\n        jpaService.execute(bundleJobGetCmd);\n        junit.framework.Assert.fail(\"Bundle Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(bundleAction1GetCmd);\n        junit.framework.Assert.fail(\"Bundle Action 1 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(bundleAction2GetCmd);\n        junit.framework.Assert.fail(\"Bundle Action 2 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(bundleAction3GetCmd);\n        junit.framework.Assert.fail(\"Bundle Action 3 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(bundleAction4GetCmd);\n        junit.framework.Assert.fail(\"Bundle Action 4 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(bundleAction5GetCmd);\n        junit.framework.Assert.fail(\"Bundle Action 5 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordJob1GetCmd);\n        junit.framework.Assert.fail(\"Coordinator Job 1 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordJob2GetCmd);\n        junit.framework.Assert.fail(\"Coordinator Job 2 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordJob3GetCmd);\n        junit.framework.Assert.fail(\"Coordinator Job 3 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordJob4GetCmd);\n        junit.framework.Assert.fail(\"Coordinator Job 4 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordJob5GetCmd);\n        junit.framework.Assert.fail(\"Coordinator Job 5 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordAction1GetCmd);\n        junit.framework.Assert.fail(\"Coordinator Action 1 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordAction2GetCmd);\n        junit.framework.Assert.fail(\"Coordinator Action 2 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordAction3GetCmd);\n        junit.framework.Assert.fail(\"Coordinator Action 3 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordAction4GetCmd);\n        junit.framework.Assert.fail(\"Coordinator Action 4 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordAction5GetCmd);\n        junit.framework.Assert.fail(\"Coordinator Action 5 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfJob1GetCmd);\n        junit.framework.Assert.fail(\"Workflow Job 1 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfJob2GetCmd);\n        junit.framework.Assert.fail(\"Workflow Job 2 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfJob3GetCmd);\n        junit.framework.Assert.fail(\"Workflow Job 3 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfJob4GetCmd);\n        junit.framework.Assert.fail(\"Workflow Job 4 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfJob5GetCmd);\n        junit.framework.Assert.fail(\"Workflow Job 5 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfAction1GetCmd);\n        junit.framework.Assert.fail(\"Workflow Action 1 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfAction2GetCmd);\n        junit.framework.Assert.fail(\"Workflow Action 2 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfAction3GetCmd);\n        junit.framework.Assert.fail(\"Workflow Action 3 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfAction4GetCmd);\n        junit.framework.Assert.fail(\"Workflow Action 4 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfAction5GetCmd);\n        junit.framework.Assert.fail(\"Workflow Action 5 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeBundleWithCoordChildWithWFChild3MoreThanLimit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"name\", \"def\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"one\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"two\", \"three\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"two\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"end\", \"end\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"three\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"end\", \"end\")).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    try {\n        invokeForkJoin(parser, def);\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Unexpected Exception\");\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testWfNoForkJoin",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertTrue(org.apache.oozie.util.ParamChecker.isValidIdentifier(\"a\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.util.ParamChecker.isValidIdentifier(\"a1\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.util.ParamChecker.isValidIdentifier(\"a_\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.util.ParamChecker.isValidIdentifier(\"_\"));\n    junit.framework.Assert.assertFalse(org.apache.oozie.util.ParamChecker.isValidIdentifier(\"!\"));\n    junit.framework.Assert.assertFalse(org.apache.oozie.util.ParamChecker.isValidIdentifier(\"1\"));\n}",
        "ClassName": "TestParamChecker",
        "Label": 1,
        "MethodName": "testValidIdentifier",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.oozie.SubWorkflowActionExecutor subWorkflow = new org.apache.oozie.action.oozie.SubWorkflowActionExecutor();\n    junit.framework.Assert.assertEquals(org.apache.oozie.action.oozie.SubWorkflowActionExecutor.ACTION_TYPE, subWorkflow.getType());\n}",
        "ClassName": "TestSubWorkflowActionExecutor",
        "Label": 1,
        "MethodName": "testType",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    org.apache.oozie.WorkflowActionBean action = this.addRecordToWfActionTable(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action.getId());\n    job = jpaService.execute(wfJobGetCmd);\n    action = jpaService.execute(wfActionGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.WorkflowJob.Status.RUNNING);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.workflow.WorkflowInstance wfInstance = job.getWorkflowInstance();\n    junit.framework.Assert.assertEquals(wfInstance.getStatus(), org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    new org.apache.oozie.command.wf.KillXCommand(job.getId()).call();\n    job = jpaService.execute(wfJobGetCmd);\n    action = jpaService.execute(wfActionGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.WorkflowJob.Status.KILLED);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.WorkflowAction.Status.KILLED);\n    wfInstance = job.getWorkflowInstance();\n    junit.framework.Assert.assertEquals(wfInstance.getStatus(), org.apache.oozie.workflow.WorkflowInstance.Status.KILLED);\n}",
        "ClassName": "TestWorkflowKillXCommand",
        "Label": 1,
        "MethodName": "testWfKillSuccess1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.XLogService ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    org.apache.oozie.util.XLog.Info.get().clear();\n    junit.framework.Assert.assertEquals(\"USER[-] GROUP[-]\", org.apache.oozie.util.XLog.Info.get().createPrefix());\n    ls.destroy();\n}",
        "ClassName": "TestXLogService",
        "Label": 1,
        "MethodName": "testInfoParameters",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v0/jobs\", org.apache.oozie.servlet.V0JobsServlet.class, org.apache.oozie.servlet.TestJobsServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            java.lang.String appPath = getFsTestCaseDir().toString() + \"/app\";\n            org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n            org.apache.hadoop.fs.Path jobXmlPath = new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\");\n            fs.create(jobXmlPath);\n            int wfCount = org.apache.oozie.servlet.MockDagEngineService.workflows.size();\n            org.apache.hadoop.conf.Configuration jobConf = new org.apache.oozie.util.XConfiguration();\n            jobConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n            jobConf.set(org.apache.oozie.client.OozieClient.APP_PATH, appPath);\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            java.net.URL url = createURL(\"\", params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"content-type\", org.apache.oozie.client.rest.RestConstants.XML_CONTENT_TYPE);\n            conn.setDoOutput(true);\n            jobConf.writeXml(conn.getOutputStream());\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_CREATED, conn.getResponseCode());\n            org.json.simple.JSONObject obj = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + wfCount) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, obj.get(org.apache.oozie.client.rest.JsonTags.JOB_ID));\n            junit.framework.Assert.assertFalse(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            wfCount++;\n            jobConf = new org.apache.oozie.util.XConfiguration();\n            jobConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n            jobConf.set(org.apache.oozie.client.OozieClient.APP_PATH, appPath);\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ACTION_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_ACTION_START);\n            url = createURL(\"\", params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"content-type\", org.apache.oozie.client.rest.RestConstants.XML_CONTENT_TYPE);\n            conn.setDoOutput(true);\n            jobConf.writeXml(conn.getOutputStream());\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_CREATED, conn.getResponseCode());\n            obj = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + wfCount) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, obj.get(org.apache.oozie.client.rest.JsonTags.JOB_ID));\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            org.apache.oozie.service.Services services = org.apache.oozie.service.Services.get();\n            org.apache.oozie.DagEngine de = services.get(org.apache.oozie.service.DagEngineService.class).getDagEngine(org.apache.oozie.test.XTestCase.getTestUser(), \"undef\");\n            java.io.StringReader sr = new java.io.StringReader(de.getJob(org.apache.oozie.servlet.MockDagEngineService.JOB_ID + wfCount).getConf());\n            org.apache.hadoop.conf.Configuration conf1 = new org.apache.oozie.util.XConfiguration(sr);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestJobsServlet",
        "Label": 1,
        "MethodName": "testSubmit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = (((((((((\"<coordinator-app name=\\\"NAME\\\" frequency=\\\"${coord:days(1)}\\\" start=\\\"2009-02-01T01:00Z\\\" end=\\\"2009-02-01T02:00Z\\\" timezone=\\\"UTC\\\" \" + (((\"xmlns=\\\"uri:oozie:coordinator:0.1\\\"> <controls> <timeout>10</timeout> <concurrency>2</concurrency> \" + \"<execution>LIFO</execution> </controls> <datasets> \") + \"<dataset name=\\\"local_a\\\" frequency=\\\"${coord:days(1)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file://\")) + getTestCaseDir()) + \"/workflows/${YEAR}/${MONTH}/${DAY}</uri-template> \") + \"<done-flag></done-flag> </dataset>\") + \"</datasets> <input-events> \") + \"<data-in name=\\\"A\\\" dataset=\\\"local_a\\\"> <instance>${coord:current(0)}</instance> </data-in>  \") + \"</input-events> \") + \"<action> <workflow> <app-path>hdfs:///tmp/workflows2/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>${coord:dataIn('A')}</value> </property> \") + \"</configuration> </workflow> </action> </coordinator-app>\";\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    final org.apache.oozie.CoordinatorEngine ce = new org.apache.oozie.CoordinatorEngine(org.apache.oozie.test.XTestCase.getTestUser(), \"UNIT_TESTING\");\n    final java.lang.String jobId = ce.submitJob(conf, true);\n    waitFor(5000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            try {\n                java.util.List<org.apache.oozie.client.CoordinatorAction> actions = ce.getCoordJob(jobId).getActions();\n                for (org.apache.oozie.client.CoordinatorAction action : actions) {\n                    org.apache.oozie.client.CoordinatorAction.Status actionStatus = action.getStatus();\n                    if (actionStatus == org.apache.oozie.client.CoordinatorAction.Status.WAITING) {\n                        return true;\n                    }\n                }\n            } catch (java.lang.Exception ex) {\n                return false;\n            }\n            return false;\n        }\n    });\n    java.util.List<org.apache.oozie.client.CoordinatorAction> actions = ce.getCoordJob(jobId).getActions();\n    junit.framework.Assert.assertTrue(actions.size() > 0);\n    org.apache.oozie.client.CoordinatorAction action = actions.get(0);\n    java.lang.String missingDeps = action.getMissingDependencies();\n    java.lang.System.out.println(\"..Missing deps=\" + missingDeps);\n    junit.framework.Assert.assertEquals((\"file://\" + getTestCaseDir()) + \"/workflows/2009/02/01\", missingDeps);\n}",
        "ClassName": "TestCoordinatorEngine",
        "Label": 1,
        "MethodName": "testEmptyDoneFlag",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.servlet.MyJsonRestServlet.RESOURCE_GET_POST_PARAM_GET, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"\", \"param=true\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"POST\", \"\", \"param=true\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"GET\", \"\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"POST\", \"\", \"\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestJsonRestServlet",
        "Label": 1,
        "MethodName": "testResourceGetPostParamGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    long currTime = java.lang.System.currentTimeMillis();\n    org.apache.oozie.util.XLogStreamer.Filter.reset();\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"USER\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"GROUP\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"TOKEN\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"APP\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"JOB\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"ACTION\");\n    org.apache.oozie.util.XLogStreamer.Filter xf = new org.apache.oozie.util.XLogStreamer.Filter();\n    xf.setParameter(\"JOB\", \"14-200904160239--example-forkjoinwf\");\n    xf.setLogLevel(\"DEBUG|INFO\");\n    java.io.FileWriter fw1 = new java.io.FileWriter(getTestCaseDir() + \"/oozie.log\");\n    java.lang.StringBuilder sb1 = new java.lang.StringBuilder();\n    sb1.append((\"2009-06-24 02:43:13,958 DEBUG _L1_:323 -\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"End workflow state change\\n\");\n    sb1.append((\"2009-06-24 02:43:13,958 DEBUG _L2_:323 +\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"End workflow state change\\n\");\n    sb1.append((\"2009-06-24 02:43:13,958 DEBUG _L3_:323\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"End workflow state change\\n\");\n    sb1.append((\"2009-06-24 02:43:13,958 DEBUG _L4_:323 ABC\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"End workflow state change\\n\");\n    sb1.append((\"2009-06-24 02:43:13,958 DEBUG _L5_:323 !@#$%^&*() blah blah\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"End workflow state change\\n\");\n    sb1.append((\"2009-06-24 02:43:13,958 WARN _L6_:323 -\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"End workflow state change\\n\");\n    sb1.append((\"2009-06-24 02:43:13,958 WARN _L7_:323 +\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"End workflow state change\\n\");\n    sb1.append((\"2009-06-24 02:43:13,958 WARN _L8_:323\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"End workflow state change\\n\");\n    sb1.append((\"2009-06-24 02:43:13,958 WARN _L9_:323 ABC\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"End workflow state change\\n\");\n    sb1.append((\"2009-06-24 02:43:13,958 WARN _L10_:323 !@#$%^&*() blah blah\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"End workflow state change\\n\");\n    fw1.write(sb1.toString());\n    fw1.close();\n    java.io.File f1 = new java.io.File(getTestCaseDir() + \"/oozie.log\");\n    f1.setLastModified(currTime);\n    java.io.StringWriter sw = new java.io.StringWriter();\n    org.apache.oozie.util.XLogStreamer str = new org.apache.oozie.util.XLogStreamer(xf, sw, getTestCaseDir(), \"oozie.log\", 1);\n    str.streamLog(new java.util.Date(currTime - 5000), new java.util.Date(currTime + 5000));\n    java.lang.String[] out = sw.toString().split(\"\\n\");\n    junit.framework.Assert.assertEquals(5, out.length);\n    junit.framework.Assert.assertEquals(true, out[0].contains(\"_L1_\"));\n    junit.framework.Assert.assertEquals(true, out[1].contains(\"_L2_\"));\n    junit.framework.Assert.assertEquals(true, out[2].contains(\"_L3_\"));\n    junit.framework.Assert.assertEquals(true, out[3].contains(\"_L4_\"));\n    junit.framework.Assert.assertEquals(true, out[4].contains(\"_L5_\"));\n}",
        "ClassName": "TestLogStreamer",
        "Label": 1,
        "MethodName": "testStreamLogNoDash",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String request = ((\"bundle=\" + bundleName) + \";actionstatus=FAILED,KILLED;\") + \"startcreatedtime=2012-07-21T00:00Z;endcreatedtime=2012-07-22T02:00Z\";\n    java.util.List<org.apache.oozie.client.rest.BulkResponseImpl> brList = _execQuery(request);\n    junit.framework.Assert.assertEquals(3, brList.size());\n    java.util.List<java.lang.String> possibleStatus = new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(\"KILLED\", \"FAILED\"));\n    java.util.List<java.lang.String> resultStatus = new java.util.ArrayList<java.lang.String>();\n    resultStatus.add(brList.get(0).getAction().getStatus().toString());\n    resultStatus.add(brList.get(1).getAction().getStatus().toString());\n    junit.framework.Assert.assertEquals(possibleStatus, resultStatus);\n}",
        "ClassName": "TestBulkMonitorJPAExecutor",
        "Label": 1,
        "MethodName": "testMultipleRecords",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path path = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"dir\");\n    org.apache.hadoop.fs.Path child = new org.apache.hadoop.fs.Path(path, \"child\");\n    org.apache.hadoop.fs.Path grandchild = new org.apache.hadoop.fs.Path(child, \"grandchild\");\n    fs.mkdirs(grandchild);\n    java.lang.String testUser = org.apache.oozie.test.XTestCase.getTestUser();\n    java.lang.String testGroup = org.apache.oozie.test.XTestCase.getTestGroup();\n    java.lang.String testGroup2 = org.apache.oozie.test.XTestCase.getTestGroup2();\n    fs.setOwner(path, testUser, testGroup);\n    fs.setOwner(child, testUser, testGroup);\n    fs.setOwner(grandchild, testUser, testGroup);\n    junit.framework.Assert.assertEquals(testGroup, fs.getFileStatus(path).getGroup().toString());\n    junit.framework.Assert.assertEquals(testGroup, fs.getFileStatus(child).getGroup().toString());\n    junit.framework.Assert.assertEquals(testGroup, fs.getFileStatus(grandchild).getGroup().toString());\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(\"<fs/>\");\n    ae.chgrp(context, null, null, path, testUser, testGroup2, false, false);\n    junit.framework.Assert.assertEquals(testGroup2, fs.getFileStatus(path).getGroup().toString());\n    junit.framework.Assert.assertEquals(testGroup, fs.getFileStatus(child).getGroup().toString());\n    junit.framework.Assert.assertEquals(testGroup, fs.getFileStatus(grandchild).getGroup().toString());\n    fs.setOwner(path, testUser, testGroup);\n    fs.setOwner(child, testUser, testGroup);\n    fs.setOwner(grandchild, testUser, testGroup);\n    ae.chgrp(context, null, null, path, testUser, testGroup2, true, false);\n    junit.framework.Assert.assertEquals(testGroup2, fs.getFileStatus(path).getGroup().toString());\n    junit.framework.Assert.assertEquals(testGroup2, fs.getFileStatus(child).getGroup().toString());\n    junit.framework.Assert.assertEquals(testGroup, fs.getFileStatus(grandchild).getGroup().toString());\n    fs.setOwner(path, testUser, testGroup);\n    fs.setOwner(child, testUser, testGroup);\n    fs.setOwner(grandchild, testUser, testGroup);\n    ae.chgrp(context, null, null, path, testUser, testGroup2, true, true);\n    junit.framework.Assert.assertEquals(testGroup2, fs.getFileStatus(path).getGroup().toString());\n    junit.framework.Assert.assertEquals(testGroup2, fs.getFileStatus(child).getGroup().toString());\n    junit.framework.Assert.assertEquals(testGroup2, fs.getFileStatus(grandchild).getGroup().toString());\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testChgrp",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.test.TestXTestCase.testBaseDir = java.lang.System.getProperty(org.apache.oozie.test.XTestCase.OOZIE_TEST_DIR);\n    try {\n        org.apache.oozie.test.TestXTestCase.MyXTestCase testcase = new org.apache.oozie.test.TestXTestCase.MyXTestCase();\n        testcase.setName(getName());\n        testcase.setUp();\n        testcase.testBaseDir();\n        testcase.tearDown();\n    } finally {\n        if (org.apache.oozie.test.TestXTestCase.testBaseDir != null) {\n            java.lang.System.getProperties().setProperty(org.apache.oozie.test.XTestCase.OOZIE_TEST_DIR, org.apache.oozie.test.TestXTestCase.testBaseDir);\n        }\n    }\n}",
        "ClassName": "TestXTestCase",
        "Label": 1,
        "MethodName": "testBaseDir",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.CoordinatorJobBean bean = new org.apache.oozie.CoordinatorJobBean();\n    set(bean);\n    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();\n    java.io.DataOutputStream dos = new java.io.DataOutputStream(baos);\n    bean.write(dos);\n    dos.close();\n    final org.apache.oozie.CoordinatorJobBean bean2 = new org.apache.oozie.CoordinatorJobBean();\n    bean2.readFields(new java.io.DataInputStream(new java.io.ByteArrayInputStream(baos.toByteArray())));\n    _testGet(bean2, false);\n}",
        "ClassName": "TestCoordinatorJobBean",
        "Label": 1,
        "MethodName": "testSerialization",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUSPENDED, false);\n    this.addRecordToBundleActionTable(job.getId(), \"action1\", 0, org.apache.oozie.client.Job.Status.SUSPENDED);\n    this.addRecordToBundleActionTable(job.getId(), \"action2\", 0, org.apache.oozie.client.Job.Status.SUSPENDED);\n    addRecordToCoordJobTable(\"action1\", org.apache.oozie.client.Job.Status.SUSPENDED, false, false);\n    addRecordToCoordJobTable(\"action2\", org.apache.oozie.client.Job.Status.SUSPENDED, false, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDED, job.getStatus());\n    new org.apache.oozie.command.bundle.BundleRerunXCommand(job.getId(), \"action2\", null, false, true).call();\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, job.getStatus());\n}",
        "ClassName": "TestBundleRerunXCommand",
        "Label": 1,
        "MethodName": "testBundleRerunInSuspended",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean bundle = new org.apache.oozie.BundleJobBean();\n    bundle.setId(\"00002-12345-B\");\n    bundle.setAppName(bundleName);\n    bundle.setStatus(org.apache.oozie.client.Job.Status.RUNNING);\n    bundle.setStartTime(new java.util.Date());\n    org.apache.oozie.executor.jpa.BundleJobInsertJPAExecutor bundleInsert = new org.apache.oozie.executor.jpa.BundleJobInsertJPAExecutor(bundle);\n    jpaService.execute(bundleInsert);\n    runTest(\"/v1/jobs\", org.apache.oozie.servlet.V1JobsServlet.class, false, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String bulkRequest = \"bundle=\" + bundleName;\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOBS_BULK_PARAM, bulkRequest);\n            params.put(org.apache.oozie.client.rest.RestConstants.OFFSET_PARAM, \"1\");\n            params.put(org.apache.oozie.client.rest.RestConstants.LEN_PARAM, \"5\");\n            java.net.URL url = createURL(\"\", params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode());\n            return null;\n        }\n    });\n}",
        "ClassName": "TestBulkMonitorWebServiceAPI",
        "Label": 1,
        "MethodName": "testMultipleBundleIdsForName",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String missingDeps = \"nofs:///dirx/filex\";\n    java.lang.String actionId = addInitRecords(missingDeps, null, TZ);\n    try {\n        new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(actionId, actionId.substring(0, actionId.indexOf(\"@\"))).call();\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception e) {\n        junit.framework.Assert.assertTrue(e.getMessage().contains(\"No FileSystem for scheme\"));\n    }\n    long timeOutCreationTime = java.lang.System.currentTimeMillis() - ((12 * 60) * 1000);\n    setCoordActionCreationTime(actionId, timeOutCreationTime);\n    try {\n        new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(actionId, actionId.substring(0, actionId.indexOf(\"@\"))).call();\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception e) {\n        junit.framework.Assert.assertTrue(e.getMessage().contains(\"No FileSystem for scheme\"));\n    }\n    java.lang.Thread.sleep(100);\n    checkCoordAction(actionId, missingDeps, org.apache.oozie.client.CoordinatorAction.Status.TIMEDOUT);\n}",
        "ClassName": "TestCoordActionInputCheckXCommand",
        "Label": 1,
        "MethodName": "testTimeoutWithException",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"one\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.AsynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"end\" }))).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, job.getStatus());\n    job.signal(\"/\", \"\");\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, job.getStatus());\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.size());\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.exits.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.kills.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.fails.size());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testAsynchSimple",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setSystemProperty(org.apache.oozie.service.UUIDService.CONF_GENERATOR, \"counter\");\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    services.init();\n    services.destroy();\n    setSystemProperty(org.apache.oozie.service.UUIDService.CONF_GENERATOR, \"random\");\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    services.destroy();\n    try {\n        setSystemProperty(org.apache.oozie.service.UUIDService.CONF_GENERATOR, \"x\");\n        services = new org.apache.oozie.service.Services();\n        services.init();\n        services.destroy();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.service.ServiceException ex) {\n    }\n}",
        "ClassName": "TestUUIDService",
        "Label": 1,
        "MethodName": "testConfiguration",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.Instrumentation inst = new org.apache.oozie.util.Instrumentation();\n    inst.addVariable(\"a\", \"1\", new org.apache.oozie.util.Instrumentation.Variable<java.lang.Long>() {\n        private long counter = 0;\n\n        public java.lang.Long getValue() {\n            return counter++;\n        }\n    });\n    junit.framework.Assert.assertEquals(1, inst.getVariables().size());\n    junit.framework.Assert.assertEquals(1, inst.getVariables().get(\"a\").size());\n    inst.addVariable(\"a\", \"2\", new org.apache.oozie.util.Instrumentation.Variable<java.lang.Long>() {\n        private long counter = 1;\n\n        public java.lang.Long getValue() {\n            return counter++;\n        }\n    });\n    junit.framework.Assert.assertEquals(1, inst.getVariables().size());\n    junit.framework.Assert.assertEquals(2, inst.getVariables().get(\"a\").size());\n    inst.addVariable(\"b\", \"1\", new org.apache.oozie.util.Instrumentation.Variable<java.lang.Long>() {\n        private long counter = 2;\n\n        public java.lang.Long getValue() {\n            return counter++;\n        }\n    });\n    junit.framework.Assert.assertEquals(2, inst.getVariables().size());\n    junit.framework.Assert.assertEquals(2, inst.getVariables().get(\"a\").size());\n    junit.framework.Assert.assertEquals(1, inst.getVariables().get(\"b\").size());\n    junit.framework.Assert.assertEquals(new java.lang.Long(0), ((org.apache.oozie.util.Instrumentation.Variable) (inst.getVariables().get(\"a\").get(\"1\"))).getValue());\n    junit.framework.Assert.assertEquals(new java.lang.Long(1), ((org.apache.oozie.util.Instrumentation.Variable) (inst.getVariables().get(\"a\").get(\"2\"))).getValue());\n    junit.framework.Assert.assertEquals(new java.lang.Long(2), ((org.apache.oozie.util.Instrumentation.Variable) (inst.getVariables().get(\"b\").get(\"1\"))).getValue());\n    junit.framework.Assert.assertEquals(new java.lang.Long(1), ((org.apache.oozie.util.Instrumentation.Variable) (inst.getVariables().get(\"a\").get(\"1\"))).getValue());\n    junit.framework.Assert.assertEquals(new java.lang.Long(2), ((org.apache.oozie.util.Instrumentation.Variable) (inst.getVariables().get(\"a\").get(\"2\"))).getValue());\n    junit.framework.Assert.assertEquals(new java.lang.Long(3), ((org.apache.oozie.util.Instrumentation.Variable) (inst.getVariables().get(\"b\").get(\"1\"))).getValue());\n}",
        "ClassName": "TestInstrumentation",
        "Label": 1,
        "MethodName": "testVariables",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.SLAEventBean bean = new org.apache.oozie.SLAEventBean();\n    set(bean);\n    org.jdom.Element el = bean.toXml();\n    java.lang.String actualXml = org.apache.oozie.util.XmlUtils.prettyPrint(el).toString();\n    junit.framework.Assert.assertEquals(\"<event>\\r\\n\" + ((((((((((\"  <sequence-id>1</sequence-id>\\r\\n\" + \"  <status>\\r\\n\") + \"    <sla-id>si</sla-id>\\r\\n\") + \"    <status-timestamp>1970-01-01T00:00Z</status-timestamp>\\r\\n\") + \"    <job-status>STARTED</job-status>\\r\\n\") + \"    <job-data>jd</job-data>\\r\\n\") + \"    <user>u</user>\\r\\n\") + \"    <group>gn</group>\\r\\n\") + \"    <app-name>an</app-name>\\r\\n\") + \"  </status>\\r\\n\") + \"</event>\"), actualXml);\n}",
        "ClassName": "TestSLAEventBean",
        "Label": 1,
        "MethodName": "testToXmlStatusEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    this.addRecordToBundleActionTable(job.getId(), \"action1\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    this.addRecordToBundleActionTable(job.getId(), \"action2\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, job.getStatus());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionGetExecutor1 = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(job.getId(), \"action1\");\n    org.apache.oozie.BundleActionBean action1 = jpaService.execute(bundleActionGetExecutor1);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, action1.getStatus());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionGetExecutor2 = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(job.getId(), \"action2\");\n    org.apache.oozie.BundleActionBean action2 = jpaService.execute(bundleActionGetExecutor2);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, action2.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(1, 1, 7, 10).call();\n    try {\n        jpaService.execute(bundleJobGetExecutor);\n        junit.framework.Assert.fail(\"Bundle Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(bundleActionGetExecutor1);\n        junit.framework.Assert.fail(\"Bundle Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(bundleActionGetExecutor2);\n        junit.framework.Assert.fail(\"Bundle Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testSucBundlePurgeXCommand",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-info\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"0\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO, org.apache.oozie.servlet.MockDagEngineService.did);\n            args = new java.lang.String[]{ \"job\", \"-localtime\", \"-oozie\", oozieUrl, \"-info\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO, org.apache.oozie.servlet.MockDagEngineService.did);\n            args = new java.lang.String[]{ \"job\", \"-timezone\", \"PST\", \"-oozie\", oozieUrl, \"-info\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO, org.apache.oozie.servlet.MockDagEngineService.did);\n            args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-info\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"2\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO, org.apache.oozie.servlet.MockDagEngineService.did);\n            args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-info\", org.apache.oozie.servlet.MockDagEngineService.JOB_ID + (org.apache.oozie.servlet.MockDagEngineService.workflows.size() + 1) };\n            junit.framework.Assert.assertEquals(-1, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testJobStatus",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    services.destroy();\n    services = super.setupServicesForHCatalog();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    java.lang.String server1 = \"default=java.naming.factory.initial#org.apache.activemq.jndi.ActiveMQInitialContextFactory;\" + \"java.naming.provider.url#vm://localhost?broker.persistent=false\";\n    java.lang.String server2 = \"hcat://${1}.${2}.server.com:8020=java.naming.factory.initial#Dummy.Factory;\" + \"java.naming.provider.url#tcp://broker.${2}:61616\";\n    java.lang.String server3 = \"hcat://xyz.corp.dummy.com=java.naming.factory.initial#Dummy.Factory;\" + \"java.naming.provider.url#tcp:localhost:61616\";\n    java.lang.String jmsConnectionURL = (((server1 + \",\") + server2) + \",\") + server3;\n    conf.set(org.apache.oozie.service.HCatAccessorService.JMS_CONNECTIONS_PROPERTIES, jmsConnectionURL);\n    services.init();\n    org.apache.oozie.service.HCatAccessorService hcatService = services.get(org.apache.oozie.service.HCatAccessorService.class);\n    org.apache.oozie.jms.JMSConnectionInfo connInfo = hcatService.getJMSConnectionInfo(new java.net.URI(\"hcat://hcatserver.blue.server.com:8020\"));\n    junit.framework.Assert.assertEquals(\"java.naming.factory.initial#Dummy.Factory;java.naming.provider.url#tcp://broker.blue:61616\", connInfo.getJNDIPropertiesString());\n    connInfo = hcatService.getJMSConnectionInfo(new java.net.URI(\"http://unknown:9999/fs\"));\n    junit.framework.Assert.assertEquals(\"java.naming.factory.initial#org.apache.activemq.jndi.ActiveMQInitialContextFactory;\" + \"java.naming.provider.url#vm://localhost?broker.persistent=false\", connInfo.getJNDIPropertiesString());\n    connInfo = hcatService.getJMSConnectionInfo(new java.net.URI(\"hcat://xyz.corp.dummy.com\"));\n    junit.framework.Assert.assertEquals(\"java.naming.factory.initial#Dummy.Factory;java.naming.provider.url#tcp:localhost:61616\", connInfo.getJNDIPropertiesString());\n}",
        "ClassName": "TestHCatAccessorService",
        "Label": 1,
        "MethodName": "testGetJMSConnectionInfo",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setSystemProperty(\"aa\", \"foo\");\n    org.apache.oozie.util.XConfiguration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(\"a\", \"A\");\n    conf.set(\"b\", \"${a}\");\n    conf.set(\"c\", \"${aa}\");\n    conf.set(\"d\", \"${aaa}\");\n    junit.framework.Assert.assertEquals(\"A\", conf.getRaw(\"a\"));\n    junit.framework.Assert.assertEquals(\"${a}\", conf.getRaw(\"b\"));\n    junit.framework.Assert.assertEquals(\"${aa}\", conf.getRaw(\"c\"));\n    junit.framework.Assert.assertEquals(\"A\", conf.get(\"a\"));\n    junit.framework.Assert.assertEquals(\"A\", conf.get(\"b\"));\n    junit.framework.Assert.assertEquals(\"foo\", conf.get(\"c\"));\n    junit.framework.Assert.assertEquals(\"${aaa}\", conf.get(\"d\"));\n    conf.set(\"un\", \"${user.name}\");\n    junit.framework.Assert.assertEquals(java.lang.System.getProperty(\"user.name\"), conf.get(\"un\"));\n    setSystemProperty(\"user.name\", \"foo\");\n    junit.framework.Assert.assertEquals(\"foo\", conf.get(\"un\"));\n}",
        "ClassName": "TestXConfiguration",
        "Label": 1,
        "MethodName": "testVarResolutionAndSysProps",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleEngine be = new org.apache.oozie.BundleEngine();\n    try {\n        org.apache.oozie.client.CoordinatorJob cj = be.getCoordJob(\"foo\", \"filter\", 0, 1);\n        junit.framework.Assert.fail(\"Expected BundleEngineException was not thrown.\");\n    } catch (org.apache.oozie.BundleEngineException bee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0301, bee.getErrorCode());\n    }\n}",
        "ClassName": "TestBundleEngineSimple",
        "Label": 1,
        "MethodName": "testGetCoordJob4",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action1 = createWorkflowAction(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action2 = createWorkflowAction(job.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    job.setStatus(org.apache.oozie.client.WorkflowJob.Status.RUNNING);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> insertList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    insertList.add(action1);\n    insertList.add(action2);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> updateList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    updateList.add(job);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BulkUpdateInsertJPAExecutor wfUpdateCmd1 = new org.apache.oozie.executor.jpa.BulkUpdateInsertJPAExecutor(updateList, insertList);\n    setSystemProperty(org.apache.oozie.FaultInjection.FAULT_INJECTION, \"true\");\n    setSystemProperty(org.apache.oozie.command.SkipCommitFaultInjection.ACTION_FAILOVER_FAULT_INJECTION, \"true\");\n    try {\n        jpaService.execute(wfUpdateCmd1);\n        junit.framework.Assert.fail(\"Expected exception due to commit failure but didn't get any\");\n    } catch (java.lang.Exception e) {\n    }\n    org.apache.oozie.FaultInjection.deactivate(\"org.apache.oozie.command.SkipCommitFaultInjection\");\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId());\n    org.apache.oozie.WorkflowJobBean wfBean = jpaService.execute(wfGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", wfBean.getStatusStr());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action1.getId());\n    try {\n        action1 = jpaService.execute(actionGetCmd);\n        junit.framework.Assert.fail(\"Expected exception but didnt get any\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException jpaee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, jpaee.getErrorCode());\n    }\n    actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action2.getId());\n    try {\n        action2 = jpaService.execute(actionGetCmd);\n        junit.framework.Assert.fail(\"Expected exception but didnt get any\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException jpaee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, jpaee.getErrorCode());\n    }\n}",
        "ClassName": "TestBulkUpdateInsertJPAExecutor",
        "Label": 1,
        "MethodName": "testBulkInsertUpdatesRollback",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-freq\");\n    java.lang.String expr = \"${coord:months(1)}\";\n    junit.framework.Assert.assertEquals(\"1\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    junit.framework.Assert.assertEquals(org.apache.oozie.coord.TimeUnit.MONTH, ((org.apache.oozie.coord.TimeUnit) (eval.getVariable(\"timeunit\"))));\n    expr = \"${coord:months(1) + 7}\";\n    junit.framework.Assert.assertEquals(\"8\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    junit.framework.Assert.assertEquals(org.apache.oozie.coord.TimeUnit.MONTH, ((org.apache.oozie.coord.TimeUnit) (eval.getVariable(\"timeunit\"))));\n    expr = \"${coord:months(256)}\";\n    junit.framework.Assert.assertEquals(\"256\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    junit.framework.Assert.assertEquals(org.apache.oozie.coord.TimeUnit.MONTH, ((org.apache.oozie.coord.TimeUnit) (eval.getVariable(\"timeunit\"))));\n    expr = \"${coord:months(coord:months(7))}\";\n    junit.framework.Assert.assertEquals(\"7\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    junit.framework.Assert.assertEquals(org.apache.oozie.coord.TimeUnit.MONTH, ((org.apache.oozie.coord.TimeUnit) (eval.getVariable(\"timeunit\"))));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testMonth",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.MapReduceActionExecutor ae = new org.apache.oozie.action.hadoop.MapReduceActionExecutor();\n    junit.framework.Assert.assertEquals(\"map-reduce\", ae.getType());\n    junit.framework.Assert.assertEquals(\"map-reduce-launcher.jar\", ae.getLauncherJarName());\n    java.util.List<java.lang.Class> classes = new java.util.ArrayList<java.lang.Class>();\n    classes.add(org.apache.oozie.action.hadoop.LauncherMapper.class);\n    classes.add(org.apache.oozie.action.hadoop.LauncherSecurityManager.class);\n    classes.add(org.apache.oozie.action.hadoop.LauncherException.class);\n    classes.add(org.apache.oozie.action.hadoop.LauncherMainException.class);\n    classes.add(org.apache.oozie.action.hadoop.PrepareActionsDriver.class);\n    classes.addAll(org.apache.oozie.service.Services.get().get(org.apache.oozie.service.URIHandlerService.class).getClassesForLauncher());\n    classes.add(org.apache.oozie.action.hadoop.ActionStats.class);\n    classes.add(org.apache.oozie.action.hadoop.ActionType.class);\n    classes.add(org.apache.oozie.action.hadoop.LauncherMain.class);\n    classes.add(org.apache.oozie.action.hadoop.MapReduceMain.class);\n    classes.add(org.apache.oozie.action.hadoop.PipesMain.class);\n    junit.framework.Assert.assertEquals(classes, ae.getLauncherClasses());\n    org.jdom.Element actionXml = org.apache.oozie.util.XmlUtils.parseXml(((((((((((\"<map-reduce>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<configuration>\") + \"<property><name>mapred.input.dir</name><value>IN</value></property>\") + \"<property><name>mapred.output.dir</name><value>OUT</value></property>\") + \"</configuration>\") + \"</map-reduce>\");\n    org.apache.oozie.util.XConfiguration protoConf = new org.apache.oozie.util.XConfiguration();\n    protoConf.set(org.apache.oozie.service.WorkflowAppService.HADOOP_USER, org.apache.oozie.test.XTestCase.getTestUser());\n    org.apache.oozie.WorkflowJobBean wf = createBaseWorkflow(protoConf, \"mr-action\");\n    org.apache.oozie.WorkflowActionBean action = ((org.apache.oozie.WorkflowActionBean) (wf.getActions().get(0)));\n    action.setType(ae.getType());\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(wf, action);\n    org.apache.hadoop.conf.Configuration conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());\n    junit.framework.Assert.assertEquals(\"IN\", conf.get(\"mapred.input.dir\"));\n    actionXml = org.apache.oozie.util.XmlUtils.parseXml((((((((((((((((((((\"<map-reduce>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<streaming>\") + \"<mapper>M</mapper>\") + \"<reducer>R</reducer>\") + \"<record-reader>RR</record-reader>\") + \"<record-reader-mapping>RRM1=1</record-reader-mapping>\") + \"<record-reader-mapping>RRM2=2</record-reader-mapping>\") + \"<env>e=E</env>\") + \"<env>ee=EE</env>\") + \"</streaming>\") + \"<configuration>\") + \"<property><name>mapred.input.dir</name><value>IN</value></property>\") + \"<property><name>mapred.output.dir</name><value>OUT</value></property>\") + \"</configuration>\") + \"</map-reduce>\");\n    conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());\n    junit.framework.Assert.assertEquals(\"M\", conf.get(\"oozie.streaming.mapper\"));\n    junit.framework.Assert.assertEquals(\"R\", conf.get(\"oozie.streaming.reducer\"));\n    junit.framework.Assert.assertEquals(\"RR\", conf.get(\"oozie.streaming.record-reader\"));\n    junit.framework.Assert.assertEquals(\"2\", conf.get(\"oozie.streaming.record-reader-mapping.size\"));\n    junit.framework.Assert.assertEquals(\"2\", conf.get(\"oozie.streaming.env.size\"));\n    actionXml = org.apache.oozie.util.XmlUtils.parseXml(((((((((((((((((((\"<map-reduce>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<pipes>\") + \"<map>M</map>\") + \"<reduce>R</reduce>\") + \"<inputformat>IF</inputformat>\") + \"<partitioner>P</partitioner>\") + \"<writer>W</writer>\") + \"<program>PP</program>\") + \"</pipes>\") + \"<configuration>\") + \"<property><name>mapred.input.dir</name><value>IN</value></property>\") + \"<property><name>mapred.output.dir</name><value>OUT</value></property>\") + \"</configuration>\") + \"</map-reduce>\");\n    conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());\n    junit.framework.Assert.assertEquals(\"M\", conf.get(\"oozie.pipes.map\"));\n    junit.framework.Assert.assertEquals(\"R\", conf.get(\"oozie.pipes.reduce\"));\n    junit.framework.Assert.assertEquals(\"IF\", conf.get(\"oozie.pipes.inputformat\"));\n    junit.framework.Assert.assertEquals(\"P\", conf.get(\"oozie.pipes.partitioner\"));\n    junit.framework.Assert.assertEquals(\"W\", conf.get(\"oozie.pipes.writer\"));\n    junit.framework.Assert.assertEquals(getFsTestCaseDir() + \"/PP\", conf.get(\"oozie.pipes.program\"));\n}",
        "ClassName": "TestMapReduceActionError",
        "Label": 1,
        "MethodName": "testSetupMethods",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.SchemaService wss = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.SchemaService.class);\n    javax.xml.validation.Validator validator = wss.getSchema(org.apache.oozie.service.SchemaService.SchemaName.COORDINATOR).newValidator();\n    java.lang.String COORD_APP1 = \"<coordinator-app name='NAME' frequency='${coord:days(1)}' start='2009-02-01T01:00Z' end='2009-02-03T23:59Z' timezone='UTC' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns='uri:oozie:coordinator:0.2' xmlns:sla='uri:oozie:sla:0.1'> \" + ((((((\"<controls> <timeout>10</timeout> <concurrency>2</concurrency> <execution>LIFO</execution> </controls> <datasets> <dataset name='a' frequency='${coord:days(7)}' initial-instance='2009-02-01T01:00Z' timezone='UTC'> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> <dataset name='local_a' frequency='${coord:days(7)}' initial-instance='2009-02-01T01:00Z' timezone='UTC'> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> </datasets> <input-events> <data-in name='A' dataset='a'> <instance>${coord:latest(0)}</instance> </data-in>  </input-events> <output-events> <data-out name='LOCAL_A' dataset='local_a'> <instance>${coord:current(-1)}</instance> </data-out> </output-events> <action> <workflow> <app-path>hdfs:///tmp/workflows/</app-path> <configuration> <property> <name>inputA</name> <value>${coord:dataIn('A')}</value> </property> <property> <name>inputB</name> <value>${coord:dataOut('LOCAL_A')}</value> </property></configuration> </workflow>  \" + \"<sla:info> <sla:app-name>5</sla:app-name> <sla:nominal-time>2009-03-06T010:00Z</sla:nominal-time> \") + \"<sla:should-start>5</sla:should-start> <sla:should-end>50</sla:should-end> \") + \"<sla:alert-contact>abc@example.com</sla:alert-contact> <sla:dev-contact>abc@example.com</sla:dev-contact>\") + \" <sla:qa-contact>abc@example.com</sla:qa-contact> <sla:se-contact>abc@example.com</sla:se-contact>\") + \"</sla:info>\") + \"</action> </coordinator-app>\");\n    org.jdom.Element e = org.apache.oozie.util.XmlUtils.parseXml(COORD_APP1);\n    validator.validate(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(COORD_APP1)));\n}",
        "ClassName": "TestSchemaService",
        "Label": 1,
        "MethodName": "testCoordSLASchema",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-definition\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"0\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_DEFINITION, org.apache.oozie.servlet.MockDagEngineService.did);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testJobDefinition",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"testWf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"one\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"f\", \"end\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\", \"three\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"two\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"f2\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"three\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f2\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"four\", \"five\", \"six\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"four\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j2\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"five\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j2\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"six\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j2\", \"k\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j2\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"seven\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"seven\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.KillNodeDef(\"k\", \"kill\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class)).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    try {\n        invokeForkJoin(parser, def);\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Unexpected Exception\");\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testNestedForkJoin",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.CoordinatorEngine ce = new org.apache.oozie.CoordinatorEngine();\n    java.util.Map<java.lang.String, java.util.List<java.lang.String>> map = ce.parseFilter(\"frequency=5;unit=hours;user=foo;status=FAILED\");\n    junit.framework.Assert.assertEquals(4, map.size());\n    junit.framework.Assert.assertEquals(\"300\", map.get(\"frequency\").get(0));\n    junit.framework.Assert.assertEquals(\"MINUTE\", map.get(\"unit\").get(0));\n    junit.framework.Assert.assertEquals(\"foo\", map.get(\"user\").get(0));\n    junit.framework.Assert.assertEquals(\"FAILED\", map.get(\"status\").get(0));\n}",
        "ClassName": "TestCoordinatorEngineSimple",
        "Label": 1,
        "MethodName": "testParseFilterPositive",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-data\");\n    java.lang.String expr = \"${coord:dataOutPartitionValue('ABC', 'mypartition')}\";\n    eval.setVariable(\"oozie.dataname.ABC\", \"data-out\");\n    junit.framework.Assert.assertEquals(\"${coord:dataOutPartitionValue('ABC', 'mypartition')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:dataOutPartitionValue('ABCD')}\";\n    eval.setVariable(\"oozie.dataname.ABCD\", \"data-out\");\n    try {\n        junit.framework.Assert.assertEquals(\"${coord:dataOutPartitionValue('ABCD')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n        junit.framework.Assert.fail(\"should throw exception because EL function requires 2 parameters\");\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestHCatELFunctions",
        "Label": 1,
        "MethodName": "testDataOutPartitionValuePh1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-data\");\n    java.lang.String expr = \"${coord:dataIn('ABC')}\";\n    eval.setVariable(\"oozie.dataname.ABC\", \"data-in\");\n    junit.framework.Assert.assertEquals(\"${coord:dataIn('ABC')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:dataIn('ABCD')}\";\n    try {\n        junit.framework.Assert.assertEquals(\"${coord:dataIn('ABCD')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n        junit.framework.Assert.fail(\"should throw exception beacuse Data in is not defiend\");\n    } catch (java.lang.Exception ex) {\n    }\n    expr = \"${coord:dataOut('EFG')}\";\n    eval.setVariable(\"oozie.dataname.EFG\", \"data-out\");\n    junit.framework.Assert.assertEquals(\"${coord:dataOut('EFG')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:dataOut('EFGH')}\";\n    try {\n        junit.framework.Assert.assertEquals(\"${coord:dataOut('EFGH')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n        junit.framework.Assert.fail(\"should throw exception beacuse Data in is not defiend\");\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testDataNamesPh1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = (((((((((\"<coordinator-app name=\\\"NAME\\\" frequency=\\\"${coord:days(1)}\\\" start=\\\"2009-02-01T01:00Z\\\" end=\\\"2009-02-01T02:00Z\\\" timezone=\\\"UTC\\\" \" + (((\"xmlns=\\\"uri:oozie:coordinator:0.1\\\"> <controls> <timeout>10</timeout> <concurrency>2</concurrency> \" + \"<execution>LIFO</execution> </controls> <datasets> \") + \"<dataset name=\\\"local_a\\\" frequency=\\\"${coord:days(1)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file://\")) + getTestCaseDir()) + \"/workflows/${YEAR}/${DAY}</uri-template> \") + \"</dataset>\") + \"</datasets> <input-events> \") + \"<data-in name=\\\"A\\\" dataset=\\\"local_a\\\"> <instance>${coord:current(0)}</instance> </data-in>  \") + \"</input-events> \") + \"<action> <workflow> <app-path>hdfs:///tmp/workflows2/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>${coord:dataIn('A')}</value> </property> \") + \"</configuration> </workflow> </action> </coordinator-app>\";\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    final org.apache.oozie.CoordinatorEngine ce = new org.apache.oozie.CoordinatorEngine(org.apache.oozie.test.XTestCase.getTestUser(), \"UNIT_TESTING\");\n    final java.lang.String jobId = ce.submitJob(conf, true);\n    waitFor(5000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            try {\n                java.util.List<org.apache.oozie.client.CoordinatorAction> actions = ce.getCoordJob(jobId).getActions();\n                for (org.apache.oozie.client.CoordinatorAction action : actions) {\n                    org.apache.oozie.client.CoordinatorAction.Status actionStatus = action.getStatus();\n                    if (actionStatus == org.apache.oozie.client.CoordinatorAction.Status.WAITING) {\n                        return true;\n                    }\n                }\n            } catch (java.lang.Exception ex) {\n                return false;\n            }\n            return false;\n        }\n    });\n    java.util.List<org.apache.oozie.client.CoordinatorAction> actions = ce.getCoordJob(jobId).getActions();\n    junit.framework.Assert.assertTrue(actions.size() > 0);\n    org.apache.oozie.client.CoordinatorAction action = actions.get(0);\n    java.lang.String missingDeps = action.getMissingDependencies();\n    java.lang.System.out.println(\"Missing deps=\" + missingDeps);\n    junit.framework.Assert.assertEquals((\"file://\" + getTestCaseDir()) + \"/workflows/2009/01/_SUCCESS\", missingDeps);\n}",
        "ClassName": "TestCoordinatorEngine",
        "Label": 1,
        "MethodName": "testDoneFlag",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    dropTable(\"db1\", \"table1\", true);\n    dropDatabase(\"db1\", true);\n    createDatabase(\"db1\");\n    createTable(\"db1\", \"table1\", \"year,month,dt,country\");\n    java.lang.String part1 = addPartition(\"db1\", \"table1\", \"year=2012;month=12;dt=02;country=us\");\n    java.lang.String part2 = addPartition(\"db1\", \"table1\", \"year=2012;month=12;dt=03;country=us\");\n    java.lang.String part3 = addPartition(\"db1\", \"table1\", \"year=2013;month=1;dt=01;country=us\");\n    java.lang.String uri1 = (\"hcat://\" + getMetastoreAuthority()) + \"/db1/table1/year=2012;month=12\";\n    java.lang.String uri2 = (\"hcat://\" + getMetastoreAuthority()) + \"/db1/table1/year=2013;dt=01\";\n    java.lang.String prepareXML = ((((((\"<prepare>\" + \"<delete path='\") + uri1) + \"'/>\") + \"<delete path='\") + uri2) + \"'/>\") + \"</prepare>\";\n    org.apache.hadoop.mapred.JobConf conf = createJobConf();\n    org.apache.oozie.action.hadoop.LauncherMapper.setupLauncherURIHandlerConf(conf);\n    org.apache.oozie.action.hadoop.PrepareActionsDriver.doOperations(prepareXML, conf);\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    junit.framework.Assert.assertFalse(fs.exists(new org.apache.hadoop.fs.Path(part1)));\n    junit.framework.Assert.assertFalse(fs.exists(new org.apache.hadoop.fs.Path(part2)));\n    junit.framework.Assert.assertFalse(fs.exists(new org.apache.hadoop.fs.Path(part3)));\n    junit.framework.Assert.assertEquals(0, getPartitions(\"db1\", \"table1\", \"country=us\").size());\n    dropTable(\"db1\", \"table1\", true);\n    dropDatabase(\"db1\", true);\n}",
        "ClassName": "TestHCatPrepareActions",
        "Label": 1,
        "MethodName": "testDelete",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = \"<coordinator-app name=\\\"NAME\\\" frequency=\\\"10\\\" start=\\\"2009-02-01T01:00Z\\\" end=\\\"2009-02-03T23:59Z\\\" timezone=\\\"UTC\\\" \" + (((((\"xmlns=\\\"uri:oozie:coordinator:0.2\\\"> \" + \"<controls> <timeout>10</timeout> <concurrency>2</concurrency> \") + \"<execution>LIFO</execution> </controls> \") + \"<action> <workflow> <app-path>hdfs:///tmp/workflows/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>blah</value> </property> \") + \"</configuration> </workflow> </action> </coordinator-app>\");\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    java.lang.String jobId = sc.call();\n    junit.framework.Assert.assertEquals(jobId.substring(jobId.length() - 2), \"-C\");\n    checkCoordJobs(jobId);\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testSubmitNoDatasets",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.io.File log4jFile = new java.io.File(getTestCaseConfDir(), \"test-log4j.properties\");\n    java.lang.ClassLoader cl = java.lang.Thread.currentThread().getContextClassLoader();\n    java.io.InputStream is = cl.getResourceAsStream(\"test-oozie-log4j.properties\");\n    org.apache.oozie.util.IOUtils.copyStream(is, new java.io.FileOutputStream(log4jFile));\n    setSystemProperty(org.apache.oozie.service.XLogService.LOG4J_FILE, \"test-log4j.properties\");\n    org.apache.oozie.service.XLogService ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertFalse(ls.getFromClasspath());\n    junit.framework.Assert.assertEquals(\"test-log4j.properties\", ls.getLog4jProperties());\n    ls.destroy();\n}",
        "ClassName": "TestXLogService",
        "Label": 1,
        "MethodName": "testCustomLog4jFromConfigDir",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testAction(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_KILL, null);\n}",
        "ClassName": "TestV0JobServlet",
        "Label": 1,
        "MethodName": "testKill",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    services.init();\n    org.apache.oozie.service.WorkflowAppService wps = services.get(org.apache.oozie.service.WorkflowAppService.class);\n    try {\n        junit.framework.Assert.assertNotNull(wps.parseDef(new org.apache.oozie.util.XConfiguration(), \"authToken\"));\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception ex) {\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestLiteWorkflowAppService",
        "Label": 1,
        "MethodName": "testNoAppPath",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testActionMater-C\";\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T010:00Z\");\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-11T10:00Z\");\n    addRecordToJobTable(jobId, startTime, endTime);\n    new org.apache.oozie.command.coord.CoordActionMaterializeCommand(jobId, startTime, endTime).call();\n    org.apache.oozie.CoordinatorActionBean action = checkCoordAction(jobId + \"@1\");\n}",
        "ClassName": "TestCoordActionMaterializeCommand",
        "Label": 1,
        "MethodName": "testActionMater",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.command.XCommand command = new org.apache.oozie.command.TestXCommand.AXCommand(false);\n    junit.framework.Assert.assertEquals(\"name\", command.getName());\n    junit.framework.Assert.assertEquals(\"type\", command.getType());\n    junit.framework.Assert.assertEquals(1, command.getPriority());\n    junit.framework.Assert.assertEquals(false, command.isLockRequired());\n    junit.framework.Assert.assertEquals(\"key\", command.getEntityKey());\n}",
        "ClassName": "TestXCommand",
        "Label": 1,
        "MethodName": "testXCommandGetters",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.jms.JMSJobEventListener wfEventListener = new org.apache.oozie.jms.JMSJobEventListener();\n    wfEventListener.init(conf);\n    java.util.Date startDate = org.apache.oozie.util.DateUtils.parseDateUTC(\"2012-07-22T00:00Z\");\n    org.apache.oozie.event.WorkflowJobEvent wfe = new org.apache.oozie.event.WorkflowJobEvent(\"wfId1\", \"caId1\", org.apache.oozie.client.WorkflowJob.Status.RUNNING, \"user1\", \"wf-app-name1\", startDate, null);\n    org.apache.oozie.jms.ConnectionContext jmsContext = getConnectionContext();\n    try {\n        javax.jms.Session session = jmsContext.createSession(Session.AUTO_ACKNOWLEDGE);\n        javax.jms.MessageConsumer consumer = jmsContext.createConsumer(session, wfEventListener.getTopic(wfe));\n        wfEventListener.onWorkflowJobEvent(wfe);\n        javax.jms.TextMessage message = ((javax.jms.TextMessage) (consumer.receive(5000)));\n        junit.framework.Assert.assertFalse(message.getText().contains(\"endTime\"));\n        org.apache.oozie.client.event.message.WorkflowJobMessage wfStartMessage = org.apache.oozie.client.event.jms.JMSMessagingUtils.getEventMessage(message);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.RUNNING, wfStartMessage.getStatus());\n        junit.framework.Assert.assertEquals(startDate, wfStartMessage.getStartTime());\n        junit.framework.Assert.assertEquals(\"wfId1\", wfStartMessage.getId());\n        junit.framework.Assert.assertEquals(\"caId1\", wfStartMessage.getParentId());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.Event.MessageType.JOB, wfStartMessage.getMessageType());\n        junit.framework.Assert.assertEquals(org.apache.oozie.AppType.WORKFLOW_JOB, wfStartMessage.getAppType());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.JobEvent.EventStatus.STARTED, wfStartMessage.getEventStatus());\n        junit.framework.Assert.assertEquals(\"user1\", wfStartMessage.getUser());\n        junit.framework.Assert.assertEquals(\"wf-app-name1\", wfStartMessage.getAppName());\n        wfEventListener.destroy();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSJobEventListener",
        "Label": 1,
        "MethodName": "testOnWorkflowJobStartedEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"f\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"a\", \"b\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"a\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.AsynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"b\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.AsynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"kill\" }))).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.KillNodeDef(\"kill\", \"killed\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class)).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, job.getStatus());\n    job.signal(\"/b/\", \"\");\n    junit.framework.Assert.assertEquals(2, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.size());\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.kills.size());\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.exits.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.fails.size());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testWFKillWithRunningNodes",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.TestCallableQueueService.EXEC_ORDER = new java.util.concurrent.atomic.AtomicLong();\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable1 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"TestSerialConcurrencyLimit\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable2 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"TestSerialConcurrencyLimit\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable3 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"TestSerialConcurrencyLimit\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable4 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"TestSerialConcurrencyLimit\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable5 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"TestSerialConcurrencyLimit\", 0, 100);\n    java.util.List<org.apache.oozie.service.TestCallableQueueService.MyCallable> callables = java.util.Arrays.asList(callable1, callable2, callable3, callable4, callable5);\n    org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    java.lang.String type = \"SerialConcurrencyLimit\";\n    for (org.apache.oozie.service.TestCallableQueueService.MyCallable c : callables) {\n        queueservice.queueSerial(java.util.Arrays.asList(c, new org.apache.oozie.service.TestCallableQueueService.MyCallable(type = type + \"x\", 0, 0)));\n    }\n    waitFor(3000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return ((((callable1.executed != 0) && (callable2.executed != 0)) && (callable3.executed != 0)) && (callable4.executed != 0)) && (callable5.executed != 0);\n        }\n    });\n    long first = java.lang.Long.MAX_VALUE;\n    for (org.apache.oozie.service.TestCallableQueueService.MyCallable c : callables) {\n        junit.framework.Assert.assertTrue(c.executed != 0);\n        first = java.lang.Math.min(first, c.executed);\n    }\n    int secondBatch = 0;\n    for (org.apache.oozie.service.TestCallableQueueService.MyCallable c : callables) {\n        if ((c.executed - first) > 0) {\n            secondBatch++;\n        }\n    }\n    junit.framework.Assert.assertTrue(secondBatch >= 2);\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testSerialConcurrencyLimit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setupServices(\"testevictionontimetolive\");\n    org.apache.oozie.service.PartitionDependencyManagerService pdms = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.PartitionDependencyManagerService.class);\n    int numItems = 50;\n    long startTime = java.lang.System.currentTimeMillis();\n    for (int i = 0; i < numItems; i++) {\n        org.apache.oozie.util.HCatURI dep = new org.apache.oozie.util.HCatURI(\"hcat://hcat.server.com:5080/mydb/mytbl/id=\" + i);\n        pdms.addMissingDependency(dep, \"\" + i);\n    }\n    verifyWaitingAction(pdms, numItems);\n    org.apache.oozie.service.TestPartitionDependencyManagerEhcache.LOG.info(((\"Time taken to insert and retrive \" + numItems) + \" items is \") + (java.lang.System.currentTimeMillis() - startTime));\n    java.lang.Thread.sleep(1000);\n    for (int i = 0; i < numItems; i++) {\n        junit.framework.Assert.assertNull(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI((\"hcat://hcat.server.com:5080/mydb/mytbl/id=\" + \"\") + i)));\n    }\n}",
        "ClassName": "TestPartitionDependencyManagerEhcache",
        "Label": 1,
        "MethodName": "testEvictionOnTimeToLive",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"name\", \"def\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"one\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"f\", \"end\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\", \"three\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"two\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"three\", \"j\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"three\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"k\")).addNode(new org.apache.oozie.workflow.lite.KillNodeDef(\"k\", \"kill\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class)).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    try {\n        invokeForkJoin(parser, def);\n        junit.framework.Assert.fail(\"Expected to catch an exception but did not encounter any\");\n    } catch (java.lang.Exception ex) {\n        org.apache.oozie.workflow.WorkflowException we = ((org.apache.oozie.workflow.WorkflowException) (ex.getCause()));\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0743, we.getErrorCode());\n        junit.framework.Assert.assertTrue(we.getMessage().contains(\"three\"));\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testTransitionFailure1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.System.out.println(\"Running Test\");\n    java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testCoordChangeXCommand-C\";\n    try {\n        addRecordToJobTable(jobId);\n    } catch (java.lang.Exception ex) {\n        ex.printStackTrace();\n        junit.framework.Assert.fail(\"Exception thrown \" + ex);\n    }\n    java.lang.String pauseTime = org.apache.oozie.command.coord.TestCoordChangeXCommand.convertDateToString(new java.util.Date().getTime() + ((10 * 60) * 1000));\n    java.lang.String endTime = org.apache.oozie.command.coord.TestCoordChangeXCommand.convertDateToString(new java.util.Date().getTime() + ((20 * 60) * 1000));\n    new org.apache.oozie.command.coord.CoordChangeXCommand(jobId, (\"endtime=\" + endTime) + \";concurrency=200\").call();\n    try {\n        checkCoordJobs(jobId, org.apache.oozie.util.DateUtils.parseDateOozieTZ(endTime), 200, null, false);\n    } catch (java.lang.Exception ex) {\n        ex.printStackTrace();\n        junit.framework.Assert.fail(\"Invalid date\" + ex);\n    }\n    java.lang.String changeValue = ((\"endtime=\" + endTime) + \";concurrency=200;pausetime=\") + pauseTime;\n    new org.apache.oozie.command.coord.CoordChangeXCommand(jobId, changeValue).call();\n    try {\n        checkCoordJobs(jobId, org.apache.oozie.util.DateUtils.parseDateOozieTZ(endTime), 200, org.apache.oozie.util.DateUtils.parseDateOozieTZ(pauseTime), true);\n    } catch (java.lang.Exception ex) {\n        ex.printStackTrace();\n        junit.framework.Assert.fail(\"Invalid date\" + ex);\n    }\n    new org.apache.oozie.command.coord.CoordChangeXCommand(jobId, (\"endtime=\" + endTime) + \";concurrency=200;pausetime=\").call();\n    try {\n        checkCoordJobs(jobId, org.apache.oozie.util.DateUtils.parseDateOozieTZ(endTime), 200, null, true);\n    } catch (java.lang.Exception ex) {\n        ex.printStackTrace();\n        junit.framework.Assert.fail(\"Invalid date\" + ex);\n    }\n    new org.apache.oozie.command.coord.CoordChangeXCommand(jobId, (\"endtime=\" + endTime) + \";pausetime=;concurrency=200\").call();\n    try {\n        checkCoordJobs(jobId, org.apache.oozie.util.DateUtils.parseDateOozieTZ(endTime), 200, null, true);\n    } catch (java.lang.Exception ex) {\n        ex.printStackTrace();\n        junit.framework.Assert.fail(\"Invalid date\" + ex);\n    }\n    new org.apache.oozie.command.coord.CoordChangeXCommand(jobId, \"endtime=2012-12-20T05:00Z;concurrency=-200\").call();\n    try {\n        checkCoordJobs(jobId, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2012-12-20T05:00Z\"), -200, null, false);\n    } catch (java.lang.Exception ex) {\n        ex.printStackTrace();\n        junit.framework.Assert.fail(\"Invalid date\" + ex);\n    }\n    new org.apache.oozie.command.coord.CoordChangeXCommand(jobId, \"endtime=2012-12-20T05:00Z\").call();\n    try {\n        checkCoordJobs(jobId, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2012-12-20T05:00Z\"), null, null, false);\n    } catch (java.lang.Exception ex) {\n        ex.printStackTrace();\n        junit.framework.Assert.fail(\"Invalid date\" + ex);\n    }\n    new org.apache.oozie.command.coord.CoordChangeXCommand(jobId, \"concurrency=-1\").call();\n    try {\n        checkCoordJobs(jobId, null, -1, null, false);\n    } catch (java.lang.Exception ex) {\n        ex.printStackTrace();\n        junit.framework.Assert.fail(\"Invalid date\" + ex);\n    }\n    try {\n        new org.apache.oozie.command.coord.CoordChangeXCommand(jobId, \"a=1;b=-200\").call();\n        junit.framework.Assert.fail(\"Should not reach here.\");\n    } catch (org.apache.oozie.command.CommandException ex) {\n        if (ex.getErrorCode() != org.apache.oozie.ErrorCode.E1015) {\n            junit.framework.Assert.fail(\"Error code should be E1015.\");\n        }\n    }\n    try {\n        new org.apache.oozie.command.coord.CoordChangeXCommand(jobId, \"endtime=2012-12-20T05:00;concurrency=-200\").call();\n        junit.framework.Assert.fail(\"Should not reach here.\");\n    } catch (org.apache.oozie.command.CommandException ex) {\n        if (ex.getErrorCode() != org.apache.oozie.ErrorCode.E1015) {\n            junit.framework.Assert.fail(\"Error code should be E1015.\");\n        }\n    }\n    try {\n        new org.apache.oozie.command.coord.CoordChangeXCommand(jobId, \"endtime=2012-12-20T05:00Z;concurrency=2ac\").call();\n        junit.framework.Assert.fail(\"Should not reach here.\");\n    } catch (org.apache.oozie.command.CommandException ex) {\n        if (ex.getErrorCode() != org.apache.oozie.ErrorCode.E1015) {\n            junit.framework.Assert.fail(\"Error code should be E1015.\");\n        }\n    }\n    try {\n        new org.apache.oozie.command.coord.CoordChangeXCommand(jobId, \"endtime=1900-12-20T05:00Z\").call();\n        junit.framework.Assert.fail(\"Should not reach here.\");\n    } catch (org.apache.oozie.command.CommandException ex) {\n        if (ex.getErrorCode() != org.apache.oozie.ErrorCode.E1015) {\n            junit.framework.Assert.fail(\"Error code should be E1015.\");\n        }\n    }\n    try {\n        new org.apache.oozie.command.coord.CoordChangeXCommand(jobId, \"pausetime=1900-12-20T05:00Z\").call();\n        junit.framework.Assert.fail(\"Should not reach here.\");\n    } catch (org.apache.oozie.command.CommandException ex) {\n        if (ex.getErrorCode() != org.apache.oozie.ErrorCode.E1015) {\n            junit.framework.Assert.fail(\"Error code should be E1015.\");\n        }\n    }\n    try {\n        new org.apache.oozie.command.coord.CoordChangeXCommand(jobId, \"pausetime=2009-02-01T01:03Z\").call();\n        junit.framework.Assert.fail(\"Should not reach here.\");\n    } catch (org.apache.oozie.command.CommandException ex) {\n        if (ex.getErrorCode() != org.apache.oozie.ErrorCode.E1015) {\n            junit.framework.Assert.fail(\"Error code should be E1015.\");\n        }\n    }\n    try {\n        new org.apache.oozie.command.coord.CoordChangeXCommand(jobId, \"pausetime=null\").call();\n        junit.framework.Assert.fail(\"Should not reach here.\");\n    } catch (org.apache.oozie.command.CommandException ex) {\n        if (ex.getErrorCode() != org.apache.oozie.ErrorCode.E1015) {\n            junit.framework.Assert.fail(\"Error code should be E1015.\");\n        }\n    }\n    try {\n        new org.apache.oozie.command.coord.CoordChangeXCommand(jobId, \"pausetime=2009-02-01T01:08Z\").call();\n        junit.framework.Assert.fail(\"Should not reach here.\");\n    } catch (org.apache.oozie.command.CommandException ex) {\n        if (ex.getErrorCode() != org.apache.oozie.ErrorCode.E1015) {\n            junit.framework.Assert.fail(\"Error code should be E1015.\");\n        }\n    }\n}",
        "ClassName": "TestCoordChangeXCommand",
        "Label": 1,
        "MethodName": "testCoordChangeXCommand",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = org.apache.oozie.service.Services.get();\n    org.apache.oozie.service.HadoopAccessorService has = services.get(org.apache.oozie.service.HadoopAccessorService.class);\n    org.apache.hadoop.mapred.JobConf conf = has.createJobConf(getJobTrackerUri());\n    conf.set(\"mapred.job.tracker\", getJobTrackerUri());\n    conf.set(\"fs.default.name\", getNameNodeUri());\n    java.net.URI uri = new java.net.URI(getNameNodeUri());\n    java.lang.String user = org.apache.oozie.test.XTestCase.getTestUser();\n    java.lang.String group = org.apache.oozie.test.XTestCase.getTestGroup();\n    org.apache.hadoop.mapred.JobClient jc = has.createJobClient(user, conf);\n    junit.framework.Assert.assertNotNull(jc);\n    org.apache.hadoop.fs.FileSystem fs = has.createFileSystem(user, new java.net.URI(getNameNodeUri()), conf);\n    junit.framework.Assert.assertNotNull(fs);\n    fs = has.createFileSystem(user, uri, conf);\n    junit.framework.Assert.assertNotNull(fs);\n    user = \"invalid\";\n    try {\n        has.createJobClient(user, conf);\n        junit.framework.Assert.fail();\n    } catch (java.lang.Throwable ex) {\n    }\n    try {\n        has.createFileSystem(user, uri, conf);\n        junit.framework.Assert.fail();\n    } catch (java.lang.Throwable ex) {\n    }\n}",
        "ClassName": "TestHadoopAccessorService",
        "Label": 1,
        "MethodName": "testAccessor",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(getConfString()));\n    org.apache.oozie.util.ELEvaluator eval = org.apache.oozie.coord.CoordELEvaluator.createELEvaluatorForGroup(conf, \"coord-job-submit-freq\");\n    java.lang.String expr = \"<coordinator-app name=\\\"mycoordinator-app\\\" start=\\\"${start}\\\" end=\\\"${end}\\\"\" + \" frequency=\\\"${coord:hours(12)}\\\"><data-in name=\\\"A\\\" dataset=\\\"a\\\"></data-in>\";\n    java.lang.String reply = expr.replace(\"${start}\", conf.get(\"start\")).replace(\"${end}\", conf.get(\"end\")).replace(\"${coord:hours(12)}\", \"720\");\n    junit.framework.Assert.assertEquals(reply, org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"<coordinator-app name=\\\"mycoordinator-app\\\" start=\\\"${start}\\\" end=\\\"${end}\\\"\" + \" frequency=\\\"${coord:days(7)}\\\"><data-in name=\\\"A\\\" dataset=\\\"a\\\"></data-in>\";\n    reply = expr.replace(\"${start}\", conf.get(\"start\")).replace(\"${end}\", conf.get(\"end\")).replace(\"${coord:days(7)}\", \"7\");\n    junit.framework.Assert.assertEquals(reply, org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"<coordinator-app name=\\\"mycoordinator-app\\\" start=\\\"${start}\\\" end=\\\"${end}\\\"\" + \" frequency=\\\"${coord:months(1)}\\\"><data-in name=\\\"A\\\" dataset=\\\"a\\\"></data-in>\";\n    reply = expr.replace(\"${start}\", conf.get(\"start\")).replace(\"${end}\", conf.get(\"end\")).replace(\"${coord:months(1)}\", \"1\");\n    junit.framework.Assert.assertEquals(reply, org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"frequency=${coord:days(2)}\";\n    expr = \"frequency=60\";\n    org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr);\n    expr = \"frequency=${coord:daysInMonth(2)}\";\n    try {\n        org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr);\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception ex) {\n    }\n    expr = \"frequency=${coord:hoursInDay(2)}\";\n    try {\n        org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr);\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception ex) {\n    }\n    expr = \"frequency=${coord:tzOffset()}\";\n    try {\n        org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr);\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception ex) {\n    }\n    expr = \"<frequency=120\";\n    junit.framework.Assert.assertEquals(expr, org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELEvaluator",
        "Label": 1,
        "MethodName": "testCreateFreqELValuator",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            wc.validateWSVersion();\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testValidateVersion",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String actionXml = ((((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node> <configuration>\") + \"<property><name>oozie.launcher.mapreduce.job.acl-view-job</name><value>V</value></property>\") + \"<property><name>oozie.launcher.mapreduce.job.acl-modify-job</name><value>M</value></property>\") + \"<property><name>mapreduce.job.acl-view-job</name><value>VIEWER</value></property>\") + \"<property><name>mapreduce.job.acl-modify-job</name><value>MODIFIER</value></property>\") + \"</configuration>\") + \"<main-class>MAIN-CLASS</main-class>\") + \"</java>\";\n    org.apache.oozie.WorkflowJobBean wfBean = addRecordToWfJobTable(\"test3-acl\", actionXml);\n    org.apache.oozie.WorkflowActionBean action = ((org.apache.oozie.WorkflowActionBean) (wfBean.getActions().get(0)));\n    org.apache.oozie.action.hadoop.JavaActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    action.setType(ae.getType());\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(wfBean, action);\n    org.jdom.Element eActionXml = org.apache.oozie.util.XmlUtils.parseXml(actionXml);\n    org.apache.hadoop.conf.Configuration actionConf = ae.createBaseHadoopConf(context, eActionXml);\n    ae.setupActionConf(actionConf, context, eActionXml, getAppPath());\n    org.apache.hadoop.conf.Configuration conf = ae.createLauncherConf(getFileSystem(), context, action, eActionXml, actionConf);\n    junit.framework.Assert.assertNotSame(conf.get(org.apache.oozie.action.hadoop.JavaActionExecutor.ACL_VIEW_JOB), actionConf.get(org.apache.oozie.action.hadoop.JavaActionExecutor.ACL_VIEW_JOB));\n    junit.framework.Assert.assertNotSame(conf.get(org.apache.oozie.action.hadoop.JavaActionExecutor.ACL_MODIFY_JOB), actionConf.get(org.apache.oozie.action.hadoop.JavaActionExecutor.ACL_MODIFY_JOB));\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testACLDefaults_explicitLauncherAndActionSettings",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path actionDir = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path newDir = new org.apache.hadoop.fs.Path(actionDir, \"newDir\");\n    org.apache.hadoop.mapred.JobConf jobConf = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HadoopAccessorService.class).createJobConf(new java.net.URI(getNameNodeUri()).getAuthority());\n    jobConf.set(\"user.name\", org.apache.oozie.test.XTestCase.getTestUser());\n    jobConf.set(\"fs.default.name\", getNameNodeUri());\n    org.apache.oozie.action.hadoop.LauncherMapper lm = new org.apache.oozie.action.hadoop.LauncherMapper();\n    org.apache.hadoop.conf.Configuration actionConf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String prepareBlock = (((\"<prepare>\" + \"<mkdir path='\") + newDir) + \"'/>\") + \"</prepare>\";\n    lm.setupLauncherInfo(jobConf, \"1\", \"1@a\", actionDir, \"1@a-0\", actionConf, prepareBlock);\n    junit.framework.Assert.assertTrue(jobConf.get(\"oozie.action.prepare.xml\").equals(prepareBlock));\n}",
        "ClassName": "TestLauncher",
        "Label": 1,
        "MethodName": "testSetupLauncherInfoWithNonEmptyPrepareXML",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setupServices(\"testnospilltodisk\");\n    assertSpeedAndMemory(60000, 4500, 2000, 45000000, 40000000);\n}",
        "ClassName": "TestPartitionDependencyManagerEhcache",
        "Label": 1,
        "MethodName": "testMemoryUsageAndSpeed",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.SchemaService wss = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.SchemaService.class);\n    javax.xml.validation.Validator validator = wss.getSchema(org.apache.oozie.service.SchemaService.SchemaName.COORDINATOR).newValidator();\n    java.lang.String COORD_APP1 = \"<coordinator-app name='NAME' frequency='${coord:days(1)}' start='2009-02-01T01:00Z' end='2009-02-03T23:59Z' timezone='UTC' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns='uri:oozie:coordinator:0.2' xmlns:sla='uri:oozie:sla:0.1'> \" + (\"<controls> <timeout>10</timeout> <concurrency>2</concurrency> <execution>LIFO</execution>  <throttle>3</throttle></controls> <datasets> <dataset name='a' frequency='${coord:days(7)}' initial-instance='2009-02-01T01:00Z' timezone='UTC'> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> <dataset name='local_a' frequency='${coord:days(7)}' initial-instance='2009-02-01T01:00Z' timezone='UTC'> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> </datasets> <input-events> <data-in name='A' dataset='a'> <instance>${coord:latest(0)}</instance> </data-in>  </input-events> <output-events> <data-out name='LOCAL_A' dataset='local_a'> <instance>${coord:current(-1)}</instance> </data-out> </output-events> <action> <workflow> <app-path>hdfs:///tmp/workflows/</app-path> <configuration> <property> <name>inputA</name> <value>${coord:dataIn('A')}</value> </property> <property> <name>inputB</name> <value>${coord:dataOut('LOCAL_A')}</value> </property></configuration> </workflow>  \" + \"</action> </coordinator-app>\");\n    org.jdom.Element e = org.apache.oozie.util.XmlUtils.parseXml(COORD_APP1);\n    validator.validate(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(COORD_APP1)));\n}",
        "ClassName": "TestSchemaService",
        "Label": 1,
        "MethodName": "testCoordSchema2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-action-start\");\n    java.lang.String expr = \"${coord:name()}\";\n    junit.framework.Assert.assertEquals(\"mycoordinator-app\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testName",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, false, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.PREP);\n    new org.apache.oozie.command.coord.CoordSuspendXCommand(job.getId()).call();\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.PREPSUSPENDED);\n    new org.apache.oozie.command.coord.CoordResumeXCommand(job.getId()).call();\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.PREP);\n}",
        "ClassName": "TestCoordResumeXCommand",
        "Label": 1,
        "MethodName": "testCoordSuspendAndResumeForPrep",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.ELEvaluator.Context support = new org.apache.oozie.util.ELEvaluator.Context();\n    support.setVariable(\"a\", \"A\");\n    support.addFunction(\"a\", \"a\", org.apache.oozie.util.TestELEvaluator.functionA);\n    org.apache.oozie.util.ELEvaluator evaluator = new org.apache.oozie.util.ELEvaluator(support);\n    junit.framework.Assert.assertEquals(\"Aa\", evaluator.evaluate(\"${a}${a:a()}\", java.lang.String.class));\n}",
        "ClassName": "TestELEvaluator",
        "Label": 1,
        "MethodName": "testEval",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-ext-schema-valid.xml\", -1);\n    java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    final org.apache.oozie.DagEngine engine = new org.apache.oozie.DagEngine(\"u\", \"a\");\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\");\n    conf.setStrings(org.apache.oozie.service.WorkflowAppService.HADOOP_USER, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.setStrings(org.apache.oozie.client.OozieClient.GROUP_NAME, org.apache.oozie.test.XTestCase.getTestGroup());\n    conf.set(org.apache.oozie.client.OozieClient.LOG_TOKEN, \"t\");\n    conf.set(\"external-status\", \"ok\");\n    conf.set(\"signal-value\", \"based_on_action_status\");\n    conf.set(\"running-mode\", \"async\");\n    final java.lang.String jobId = engine.submitJob(conf, true);\n    sleep(200);\n    waitFor(5000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return engine.getJob(jobId).getStatus() == org.apache.oozie.client.WorkflowJob.Status.RUNNING;\n        }\n    });\n    sleep(100);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.WorkflowActionsGetForJobJPAExecutor actionsGetExecutor = new org.apache.oozie.executor.jpa.WorkflowActionsGetForJobJPAExecutor(jobId);\n    java.util.List<org.apache.oozie.WorkflowActionBean> actions = jpaService.execute(actionsGetExecutor);\n    org.apache.oozie.WorkflowActionBean action = null;\n    for (org.apache.oozie.WorkflowActionBean bean : actions) {\n        if (bean.getType().equals(\"test\")) {\n            action = bean;\n            break;\n        }\n    }\n    junit.framework.Assert.assertNotNull(action);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.RUNNING, action.getStatus());\n    action.setLastCheckTime(new java.util.Date());\n    jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionUpdateJPAExecutor(action));\n    int actionCheckDelay = 20;\n    java.lang.Runnable actionCheckRunnable = new org.apache.oozie.service.ActionCheckerService.ActionCheckRunnable(actionCheckDelay);\n    actionCheckRunnable.run();\n    sleep(3000);\n    java.util.List<org.apache.oozie.WorkflowActionBean> actions2 = jpaService.execute(actionsGetExecutor);\n    org.apache.oozie.WorkflowActionBean action2 = null;\n    for (org.apache.oozie.WorkflowActionBean bean : actions2) {\n        if (bean.getType().equals(\"test\")) {\n            action2 = bean;\n            break;\n        }\n    }\n    junit.framework.Assert.assertNotNull(action);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.RUNNING, action2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.RUNNING, engine.getJob(jobId).getStatus());\n}",
        "ClassName": "TestActionCheckerService",
        "Label": 1,
        "MethodName": "testActionCheckerServiceDelay",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    conf.set(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, org.apache.hadoop.util.StringUtils.join(\",\", java.util.Arrays.asList(org.apache.oozie.service.GroupsService.class.getName(), org.apache.oozie.service.ProxyUserService.class.getName())));\n    services.init();\n    try {\n        org.apache.oozie.service.ProxyUserService proxyUser = services.get(org.apache.oozie.service.ProxyUserService.class);\n        junit.framework.Assert.assertNotNull(proxyUser);\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestProxyUserService",
        "Label": 1,
        "MethodName": "testService",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    createTestTable();\n    addPartition(org.apache.oozie.dependency.TestHCatURIHandler.db, org.apache.oozie.dependency.TestHCatURIHandler.table, \"year=2012;month=12;dt=02;country=us\");\n    java.net.URI hcatURI = getHCatURI(org.apache.oozie.dependency.TestHCatURIHandler.db, org.apache.oozie.dependency.TestHCatURIHandler.table, \"country=us;year=2012;month=12;dt=02\");\n    org.apache.oozie.dependency.URIHandler handler = uriService.getURIHandler(hcatURI);\n    junit.framework.Assert.assertTrue(handler.exists(hcatURI, conf, org.apache.oozie.test.XTestCase.getTestUser()));\n    hcatURI = getHCatURI(org.apache.oozie.dependency.TestHCatURIHandler.db, org.apache.oozie.dependency.TestHCatURIHandler.table, \"year=2012;month=12\");\n    junit.framework.Assert.assertTrue(handler.exists(hcatURI, conf, org.apache.oozie.test.XTestCase.getTestUser()));\n    addPartition(org.apache.oozie.dependency.TestHCatURIHandler.db, org.apache.oozie.dependency.TestHCatURIHandler.table, \"year=2012;month=12;dt=03;country=us\");\n    hcatURI = getHCatURI(org.apache.oozie.dependency.TestHCatURIHandler.db, org.apache.oozie.dependency.TestHCatURIHandler.table, \"country=us;month=12\");\n    junit.framework.Assert.assertTrue(handler.exists(hcatURI, conf, org.apache.oozie.test.XTestCase.getTestUser()));\n    hcatURI = getHCatURI(org.apache.oozie.dependency.TestHCatURIHandler.db, org.apache.oozie.dependency.TestHCatURIHandler.table, \"country=us\");\n    junit.framework.Assert.assertTrue(handler.exists(hcatURI, conf, org.apache.oozie.test.XTestCase.getTestUser()));\n    hcatURI = getHCatURI(org.apache.oozie.dependency.TestHCatURIHandler.db, org.apache.oozie.dependency.TestHCatURIHandler.table, \"dt=02\");\n    junit.framework.Assert.assertTrue(handler.exists(hcatURI, conf, org.apache.oozie.test.XTestCase.getTestUser()));\n    hcatURI = getHCatURI(org.apache.oozie.dependency.TestHCatURIHandler.db, org.apache.oozie.dependency.TestHCatURIHandler.table, \"dt=05\");\n    junit.framework.Assert.assertFalse(handler.exists(hcatURI, conf, org.apache.oozie.test.XTestCase.getTestUser()));\n    hcatURI = getHCatURI(org.apache.oozie.dependency.TestHCatURIHandler.db, org.apache.oozie.dependency.TestHCatURIHandler.table, \"month=02;dt=02\");\n    junit.framework.Assert.assertFalse(handler.exists(hcatURI, conf, org.apache.oozie.test.XTestCase.getTestUser()));\n    dropTestTable();\n}",
        "ClassName": "TestHCatURIHandler",
        "Label": 1,
        "MethodName": "testExists",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v0/admin/*\", org.apache.oozie.servlet.V0AdminServlet.class, org.apache.oozie.servlet.TestAdminServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.net.URL url = createURL(org.apache.oozie.client.rest.RestConstants.ADMIN_BUILD_VERSION_RESOURCE, java.util.Collections.EMPTY_MAP);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals(org.apache.oozie.BuildInfo.getBuildInfo().getProperty(org.apache.oozie.BuildInfo.BUILD_VERSION), json.get(org.apache.oozie.client.rest.JsonTags.BUILD_VERSION));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestAdminServlet",
        "Label": 1,
        "MethodName": "testVersion",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String actionId1 = \"1234465451\";\n    java.lang.String actionId2 = \"1234465452\";\n    java.lang.String actionId3 = \"1234465453\";\n    java.lang.String actionId4 = \"1234465454\";\n    java.lang.String server1 = \"hcat-server1.domain.com:5080\";\n    java.lang.String server2 = \"hcat-server2.domain.com:5080\";\n    java.lang.String db = \"mydb\";\n    java.lang.String table1 = \"mytbl1\";\n    java.lang.String table2 = \"mytbl2\";\n    org.apache.oozie.util.HCatURI dep1 = new org.apache.oozie.util.HCatURI(\"hcat://hcat-server1.domain.com:5080/mydb/mytbl1/dt=20120101;country=us\");\n    org.apache.oozie.util.HCatURI dep2 = new org.apache.oozie.util.HCatURI(\"hcat://hcat-server1.domain.com:5080/mydb/mytbl1/country=us;dt=20120101\");\n    org.apache.oozie.util.HCatURI dep3 = new org.apache.oozie.util.HCatURI(\"hcat://hcat-server2.domain.com:5080/mydb/mytbl2/dt=20120102;country=us\");\n    org.apache.oozie.util.HCatURI dep4 = new org.apache.oozie.util.HCatURI(\"hcat://hcat-server2.domain.com:5080/mydb/mytbl2/dt=20120102;country=us;state=CA\");\n    addMissingDependencyAndRegister(dep1, actionId1);\n    addMissingDependencyAndRegister(dep2, actionId1);\n    addMissingDependencyAndRegister(dep2, actionId2);\n    addMissingDependencyAndRegister(dep2, actionId3);\n    addMissingDependencyAndRegister(dep3, actionId3);\n    addMissingDependencyAndRegister(dep4, actionId4);\n    addMissingDependencyAndRegister(dep4, actionId4);\n    addMissingDependencyAndRegister(dep4, actionId4);\n    org.apache.oozie.service.HCatAccessorService hcatService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HCatAccessorService.class);\n    org.apache.oozie.service.JMSAccessorService jmsService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JMSAccessorService.class);\n    org.apache.oozie.jms.JMSConnectionInfo connInfo = hcatService.getJMSConnectionInfo(dep1.getURI());\n    junit.framework.Assert.assertTrue(hcatService.isRegisteredForNotification(dep1));\n    junit.framework.Assert.assertTrue(hcatService.isRegisteredForNotification(dep3));\n    junit.framework.Assert.assertTrue(jmsService.isListeningToTopic(connInfo, (dep1.getDb() + \".\") + dep1.getTable()));\n    junit.framework.Assert.assertTrue(jmsService.isListeningToTopic(connInfo, (dep3.getDb() + \".\") + dep3.getTable()));\n    org.apache.oozie.service.PartitionDependencyManagerService pdms = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.PartitionDependencyManagerService.class);\n    junit.framework.Assert.assertTrue(pdms.getWaitingActions(dep1).contains(actionId1));\n    junit.framework.Assert.assertTrue(pdms.getWaitingActions(dep2).contains(actionId1));\n    junit.framework.Assert.assertTrue(pdms.getWaitingActions(dep2).contains(actionId2));\n    junit.framework.Assert.assertTrue(pdms.getWaitingActions(dep2).contains(actionId2));\n    junit.framework.Assert.assertTrue(pdms.getWaitingActions(dep3).contains(actionId3));\n    junit.framework.Assert.assertTrue(pdms.getWaitingActions(dep4).contains(actionId4));\n    junit.framework.Assert.assertEquals(1, pdms.getWaitingActions(dep4).size());\n    pdms.removeMissingDependency(dep2, actionId1);\n    junit.framework.Assert.assertTrue(pdms.getWaitingActions(dep1).contains(actionId1));\n    junit.framework.Assert.assertEquals(2, pdms.getWaitingActions(dep2).size());\n    junit.framework.Assert.assertTrue(!pdms.getWaitingActions(dep2).contains(actionId1));\n    junit.framework.Assert.assertNull(pdms.getAvailableDependencyURIs(actionId1));\n    pdms.partitionAvailable(server2, db, table2, getPartitionMap(\"dt=20120102;country=us;state=NY\"));\n    junit.framework.Assert.assertNull(pdms.getWaitingActions(dep3));\n    junit.framework.Assert.assertTrue(pdms.getAvailableDependencyURIs(actionId3).contains(dep3.getURI().toString()));\n    pdms.partitionAvailable(server2, db, table2, getPartitionMap(\"dt=20120102;country=us;state=CA\"));\n    junit.framework.Assert.assertNull(pdms.getWaitingActions(dep4));\n    junit.framework.Assert.assertTrue(pdms.getAvailableDependencyURIs(actionId4).contains(dep4.getURI().toString()));\n    pdms.partitionAvailable(server1, db, table1, getPartitionMap(\"dt=20120101;country=us\"));\n    junit.framework.Assert.assertNull(pdms.getWaitingActions(dep1));\n    junit.framework.Assert.assertNull(pdms.getWaitingActions(dep2));\n    junit.framework.Assert.assertTrue(pdms.getAvailableDependencyURIs(actionId2).contains(dep2.getURI().toString()));\n    junit.framework.Assert.assertTrue(pdms.getAvailableDependencyURIs(actionId3).contains(dep2.getURI().toString()));\n    junit.framework.Assert.assertTrue(pdms.getAvailableDependencyURIs(actionId3).contains(dep3.getURI().toString()));\n    junit.framework.Assert.assertTrue(pdms.removeAvailableDependencyURIs(actionId3, pdms.getAvailableDependencyURIs(actionId3)));\n    junit.framework.Assert.assertNull(pdms.getAvailableDependencyURIs(actionId3));\n    junit.framework.Assert.assertFalse(hcatService.isRegisteredForNotification(dep1));\n    junit.framework.Assert.assertFalse(hcatService.isRegisteredForNotification(dep3));\n    junit.framework.Assert.assertFalse(jmsService.isListeningToTopic(connInfo, (dep1.getDb() + \".\") + dep1.getTable()));\n    junit.framework.Assert.assertFalse(jmsService.isListeningToTopic(connInfo, (dep3.getDb() + \".\") + dep3.getTable()));\n}",
        "ClassName": "TestPartitionDependencyManagerService",
        "Label": 1,
        "MethodName": "testPartitionDependency",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    org.apache.oozie.WorkflowActionBean action = this.addRecordToWfActionTable(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action.getId());\n    job = jpaService.execute(wfJobGetCmd);\n    action = jpaService.execute(wfActionGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.WorkflowJob.Status.RUNNING);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n    org.apache.oozie.workflow.WorkflowInstance wfInstance = job.getWorkflowInstance();\n    junit.framework.Assert.assertEquals(wfInstance.getStatus(), org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    new org.apache.oozie.command.wf.KillXCommand(job.getId()).call();\n    job = jpaService.execute(wfJobGetCmd);\n    action = jpaService.execute(wfActionGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.WorkflowJob.Status.KILLED);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.WorkflowAction.Status.KILLED);\n    wfInstance = job.getWorkflowInstance();\n    junit.framework.Assert.assertEquals(wfInstance.getStatus(), org.apache.oozie.workflow.WorkflowInstance.Status.KILLED);\n}",
        "ClassName": "TestWorkflowKillXCommand",
        "Label": 1,
        "MethodName": "testWfKillSuccess2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testAuthorizationService(false);\n}",
        "ClassName": "TestAuthorizationService",
        "Label": 1,
        "MethodName": "testAuthorizationServiceUseACLs",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.FAILED, org.apache.oozie.workflow.WorkflowInstance.Status.FAILED);\n    org.apache.oozie.command.wf.WorkflowXCommand<java.lang.Void> myCmd = new org.apache.oozie.command.wf.KillXCommand(job.getId()) {\n        @java.lang.Override\n        protected java.lang.Void execute() {\n            org.apache.oozie.command.wf.WorkflowXCommand.generateEvent(job, \"errorCode\", \"errorMsg\");\n            return null;\n        }\n    };\n    myCmd.call();\n    org.apache.oozie.event.WorkflowJobEvent event = ((org.apache.oozie.event.WorkflowJobEvent) (queue.poll()));\n    junit.framework.Assert.assertNotNull(event);\n    junit.framework.Assert.assertEquals(\"errorCode\", event.getErrorCode());\n    junit.framework.Assert.assertEquals(\"errorMsg\", event.getErrorMessage());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.JobEvent.EventStatus.FAILURE, event.getEventStatus());\n}",
        "ClassName": "TestEventGeneration",
        "Label": 1,
        "MethodName": "testWorkflowJobEventError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    if (createJobConf().get(\"yarn.resourcemanager.address\") != null) {\n        return;\n    }\n    services.destroy();\n    setSystemProperty(\"oozie.service.ActionCheckerService.action.check.interval\", \"10\");\n    setSystemProperty(\"oozie.service.ActionCheckerService.action.check.delay\", \"20\");\n    final int maxRetries = 2;\n    setSystemProperty(\"oozie.action.retries.max\", java.lang.Integer.toString(maxRetries));\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.WorkflowJobBean job0 = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    final java.lang.String jobId = job0.getId();\n    org.apache.oozie.WorkflowActionBean action0 = this.addRecordToWfActionTable(jobId, \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    final java.lang.String actionId = action0.getId();\n    final org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(actionId);\n    new org.apache.oozie.command.wf.ActionStartXCommand(actionId, \"map-reduce\").call();\n    final org.apache.oozie.WorkflowActionBean action1 = jpaService.execute(wfActionGetCmd);\n    java.lang.String originalLauncherId = action1.getExternalId();\n    executeWhileJobTrackerIsShutdown(new org.apache.oozie.test.XTestCase.ShutdownJobTrackerExecutable() {\n        @java.lang.Override\n        public void execute() throws java.lang.Exception {\n            junit.framework.Assert.assertEquals(0, action1.getRetries());\n            new org.apache.oozie.command.wf.ActionCheckXCommand(actionId).call();\n            waitFor(30 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n                @java.lang.Override\n                public boolean evaluate() throws java.lang.Exception {\n                    org.apache.oozie.WorkflowActionBean action1a = jpaService.execute(wfActionGetCmd);\n                    return action1a.getRetries() > 0;\n                }\n            });\n            waitFor(180 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n                @java.lang.Override\n                public boolean evaluate() throws java.lang.Exception {\n                    org.apache.oozie.WorkflowActionBean action1a = jpaService.execute(wfActionGetCmd);\n                    return action1a.getRetries() == 0;\n                }\n            });\n            org.apache.oozie.WorkflowActionBean action1b = jpaService.execute(wfActionGetCmd);\n            junit.framework.Assert.assertEquals(0, action1b.getRetries());\n            junit.framework.Assert.assertEquals(\"START_MANUAL\", action1b.getStatusStr());\n            org.apache.oozie.WorkflowJobBean job1 = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(jobId));\n            junit.framework.Assert.assertEquals(\"SUSPENDED\", job1.getStatusStr());\n        }\n    });\n    new org.apache.oozie.command.wf.ResumeXCommand(jobId).call();\n    org.apache.oozie.WorkflowJobBean job2 = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(jobId));\n    junit.framework.Assert.assertEquals(\"RUNNING\", job2.getStatusStr());\n    org.apache.oozie.command.wf.ActionXCommand.ActionExecutorContext context = new org.apache.oozie.command.wf.ActionXCommand.ActionExecutorContext(job2, action1, false, false);\n    org.apache.oozie.WorkflowActionBean action2 = jpaService.execute(wfActionGetCmd);\n    org.apache.oozie.action.hadoop.MapReduceActionExecutor actionExecutor = new org.apache.oozie.action.hadoop.MapReduceActionExecutor();\n    org.apache.hadoop.mapred.JobConf conf = actionExecutor.createBaseHadoopConf(context, org.apache.oozie.util.XmlUtils.parseXml(action2.getConf()));\n    java.lang.String user = conf.get(\"user.name\");\n    org.apache.hadoop.mapred.JobClient jobClient = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HadoopAccessorService.class).createJobClient(user, conf);\n    new org.apache.oozie.command.wf.ActionCheckXCommand(actionId).call();\n    org.apache.oozie.WorkflowActionBean action3 = jpaService.execute(wfActionGetCmd);\n    java.lang.String launcherId = action3.getExternalId();\n    junit.framework.Assert.assertFalse(originalLauncherId.equals(launcherId));\n    final org.apache.hadoop.mapred.RunningJob launcherJob = jobClient.getJob(org.apache.hadoop.mapred.JobID.forName(launcherId));\n    waitFor(120 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return launcherJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(launcherJob.isSuccessful());\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.hasIdSwap(launcherJob));\n    new org.apache.oozie.command.wf.ActionCheckXCommand(actionId).call();\n    org.apache.oozie.WorkflowActionBean action4 = jpaService.execute(wfActionGetCmd);\n    java.lang.String mapperId = action4.getExternalId();\n    junit.framework.Assert.assertFalse(launcherId.equals(mapperId));\n    final org.apache.hadoop.mapred.RunningJob mrJob = jobClient.getJob(org.apache.hadoop.mapred.JobID.forName(mapperId));\n    waitFor(120 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return mrJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(mrJob.isSuccessful());\n    new org.apache.oozie.command.wf.ActionCheckXCommand(actionId).call();\n    org.apache.oozie.WorkflowActionBean action5 = jpaService.execute(wfActionGetCmd);\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", action5.getExternalStatus());\n}",
        "ClassName": "TestActionCheckXCommand",
        "Label": 1,
        "MethodName": "testActionCheckTransientDuringLauncher",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"f\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"a\", \"b\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"a\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.AsynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"b\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.AsynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"x\" }))).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    try {\n        job.start();\n        job.signal(\"/b/\", \"\");\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n    }\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.FAILED, job.getStatus());\n    junit.framework.Assert.assertEquals(2, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.size());\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.fails.size());\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.exits.size());\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.fails.size());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testWfFailWithRunningNodes",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, true, true);\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action1 = createWorkflowAction(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action2 = createWorkflowAction(job.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    job.setStatus(org.apache.oozie.client.WorkflowJob.Status.RUNNING);\n    coordJob.setStatus(org.apache.oozie.client.Job.Status.SUCCEEDED);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> insertList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    insertList.add(action1);\n    insertList.add(action2);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> updateList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    updateList.add(coordJob);\n    updateList.add(job);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BulkUpdateInsertForCoordActionStatusJPAExecutor bulkUpdateCmd = new org.apache.oozie.executor.jpa.BulkUpdateInsertForCoordActionStatusJPAExecutor(updateList, insertList);\n    jpaService.execute(bulkUpdateCmd);\n    coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId()));\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", coordJob.getStatusStr());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId());\n    org.apache.oozie.WorkflowJobBean wfBean = jpaService.execute(wfGetCmd);\n    junit.framework.Assert.assertEquals(\"RUNNING\", wfBean.getStatusStr());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action1.getId());\n    action1 = jpaService.execute(actionGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", action1.getStatusStr());\n    actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action2.getId());\n    action2 = jpaService.execute(actionGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", action2.getStatusStr());\n}",
        "ClassName": "TestBulkUpdateInsertForCoordActionStatusJPAExecutor",
        "Label": 1,
        "MethodName": "testBulkInsertUpdates",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.TestCallableQueueService.EXEC_ORDER = new java.util.concurrent.atomic.AtomicLong();\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.CallableQueueService.CONF_THREADS, \"1\");\n    new org.apache.oozie.service.Services().init();\n    org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable1 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(0, 200);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable2 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(0, 200);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable3 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(0, 200);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callableLow = new org.apache.oozie.service.TestCallableQueueService.MyCallable();\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callableHigh = new org.apache.oozie.service.TestCallableQueueService.MyCallable(1, 10);\n    queueservice.queue(callable1);\n    queueservice.queue(callable2);\n    queueservice.queue(callable3);\n    queueservice.queue(callableLow);\n    queueservice.queue(callableHigh);\n    waitFor(3000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return ((((callable1.executed != 0) && (callable2.executed != 0)) && (callable3.executed != 0)) && (callableLow.executed != 0)) && (callableHigh.executed != 0);\n        }\n    });\n    junit.framework.Assert.assertTrue(callable1.executed >= 0);\n    junit.framework.Assert.assertTrue(callable2.executed >= 0);\n    junit.framework.Assert.assertTrue(callable3.executed >= 0);\n    junit.framework.Assert.assertTrue(callableLow.executed >= 0);\n    junit.framework.Assert.assertTrue(callableHigh.executed >= 0);\n    junit.framework.Assert.assertTrue(callableHigh.order < callableLow.order);\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testPriorityExecution",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.jms.JMSJobEventListener wfEventListener = new org.apache.oozie.jms.JMSJobEventListener();\n    wfEventListener.init(conf);\n    org.apache.oozie.event.WorkflowJobEvent wfe = new org.apache.oozie.event.WorkflowJobEvent(\"wfId1\", \"caId1\", org.apache.oozie.client.WorkflowJob.Status.FAILED, \"user_1\", \"wf-app-name1\", new java.util.Date(), new java.util.Date());\n    org.apache.oozie.jms.ConnectionContext jmsContext = getConnectionContext();\n    try {\n        javax.jms.Session session = jmsContext.createSession(Session.AUTO_ACKNOWLEDGE);\n        java.lang.String selector = org.apache.oozie.client.event.jms.JMSHeaderConstants.USER + \"='user_1'\";\n        javax.jms.MessageConsumer consumer = jmsContext.createConsumer(session, wfEventListener.getTopic(wfe), selector);\n        wfEventListener.onWorkflowJobEvent(wfe);\n        javax.jms.TextMessage message = ((javax.jms.TextMessage) (consumer.receive(5000)));\n        org.apache.oozie.client.event.message.WorkflowJobMessage wfFailMessage = org.apache.oozie.client.event.jms.JMSMessagingUtils.getEventMessage(message);\n        org.junit.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.FAILED, wfFailMessage.getStatus());\n        junit.framework.Assert.assertEquals(\"user_1\", wfFailMessage.getUser());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.Event.MessageType.JOB, wfFailMessage.getMessageType());\n        wfEventListener.destroy();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSJobEventListener",
        "Label": 1,
        "MethodName": "testWorkflowJobSelectors",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final int actionNum = 1;\n    final org.apache.oozie.CoordinatorEngine ce = new org.apache.oozie.CoordinatorEngine(org.apache.oozie.test.XTestCase.getTestUser(), \"UNIT_TESTING\");\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    final org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, false, false, 0);\n    final org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    final org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", wfJob.getId(), \"RUNNING\", 0);\n    sleep(3000);\n    java.lang.Runnable actionCheckRunnable = new org.apache.oozie.service.ActionCheckerService.ActionCheckRunnable(1);\n    actionCheckRunnable.run();\n    sleep(3000);\n    waitFor(200000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return ce.getCoordAction(action.getId()).getStatus() == org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED;\n        }\n    });\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.CoordinatorActionBean recoveredAction = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action.getId()));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, recoveredAction.getStatus());\n}",
        "ClassName": "TestActionCheckerService",
        "Label": 1,
        "MethodName": "testActionCheckerServiceCoord",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.jms.JMSJobEventListener coordEventListener = new org.apache.oozie.jms.JMSJobEventListener();\n    coordEventListener.init(conf);\n    java.util.Date startDate = org.apache.oozie.util.DateUtils.parseDateUTC(\"2012-07-22T00:00Z\");\n    java.util.Date nominalTime = org.apache.oozie.util.DateUtils.parseDateUTC(\"2011-07-11T00:00Z\");\n    java.util.Date endDate = new java.util.Date();\n    org.apache.oozie.event.CoordinatorActionEvent cae = new org.apache.oozie.event.CoordinatorActionEvent(\"caId1\", \"caJobId1\", org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"user1\", \"wf-app-name1\", nominalTime, startDate, null);\n    cae.setEndTime(endDate);\n    org.apache.oozie.jms.ConnectionContext jmsContext = getConnectionContext();\n    try {\n        javax.jms.Session session = jmsContext.createSession(Session.AUTO_ACKNOWLEDGE);\n        javax.jms.MessageConsumer consumer = jmsContext.createConsumer(session, coordEventListener.getTopic(cae));\n        coordEventListener.onCoordinatorActionEvent(cae);\n        javax.jms.TextMessage message = ((javax.jms.TextMessage) (consumer.receive(5000)));\n        junit.framework.Assert.assertFalse(message.getText().contains(\"errorCode\"));\n        junit.framework.Assert.assertFalse(message.getText().contains(\"errorMessage\"));\n        junit.framework.Assert.assertFalse(message.getText().contains(\"missingDependency\"));\n        org.apache.oozie.client.event.message.CoordinatorActionMessage coordActionSuccessMessage = org.apache.oozie.client.event.jms.JMSMessagingUtils.getEventMessage(message);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordActionSuccessMessage.getStatus());\n        junit.framework.Assert.assertEquals(startDate, coordActionSuccessMessage.getStartTime());\n        junit.framework.Assert.assertEquals(endDate, coordActionSuccessMessage.getEndTime());\n        junit.framework.Assert.assertEquals(\"caJobId1\", coordActionSuccessMessage.getParentId());\n        junit.framework.Assert.assertEquals(\"caId1\", coordActionSuccessMessage.getId());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.Event.MessageType.JOB, coordActionSuccessMessage.getMessageType());\n        junit.framework.Assert.assertEquals(org.apache.oozie.AppType.COORDINATOR_ACTION, coordActionSuccessMessage.getAppType());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.JobEvent.EventStatus.SUCCESS, coordActionSuccessMessage.getEventStatus());\n        junit.framework.Assert.assertEquals(\"user1\", coordActionSuccessMessage.getUser());\n        junit.framework.Assert.assertEquals(\"wf-app-name1\", coordActionSuccessMessage.getAppName());\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSJobEventListener",
        "Label": 1,
        "MethodName": "testOnCoordinatorJobSuccessEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String validFileName = \"./test-workflow-app.xml\";\n            java.lang.String invalidFileName = \"./test-invalid-workflow-app.xml\";\n            java.lang.String validContent = \"<workflow-app xmlns=\\\"uri:oozie:workflow:0.2\\\" name=\\\"no-op-wf\\\"> \" + \" <start to=\\\"end\\\"/> <end name=\\\"end\\\"/> </workflow-app>\";\n            java.lang.String invalidContent = \"<workflow-app xmlns=\\\"uri:oozie:workflow:0.2\\\" name=\\\"f\\\"> \" + \" <tag=\\\"end\\\"/> <tag=\\\"end\\\"/> </workflow-app>\";\n            java.io.File validfile = new java.io.File(validFileName);\n            java.io.File invalidfile = new java.io.File(invalidFileName);\n            validfile.delete();\n            invalidfile.delete();\n            org.apache.oozie.util.IOUtils.copyCharStream(new java.io.StringReader(validContent), new java.io.FileWriter(validfile));\n            java.lang.String[] args = new java.lang.String[]{ \"validate\", validFileName };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            org.apache.oozie.util.IOUtils.copyCharStream(new java.io.StringReader(invalidContent), new java.io.FileWriter(invalidfile));\n            args = new java.lang.String[]{ \"validate\", invalidFileName };\n            junit.framework.Assert.assertEquals(-1, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testValidateWorkFlowCommand",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, false, true, 2);\n    final java.lang.String coordJobId = coordJob.getId();\n    final org.apache.oozie.CoordinatorActionBean coordAction1_1 = addRecordToCoordActionTable(coordJobId, 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    final org.apache.oozie.CoordinatorActionBean coordAction1_2 = addRecordToCoordActionTable(coordJobId, 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    this.addRecordToWfJobTable(coordAction1_1.getExternalId(), org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    this.addRecordToWfJobTable(coordAction1_2.getExternalId(), org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    new org.apache.oozie.command.coord.CoordSuspendXCommand(coordJobId).call();\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJobId);\n    coordJob = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDED, coordJob.getStatus());\n    sleep(3000);\n    new org.apache.oozie.command.coord.CoordResumeXCommand(coordJobId).call();\n    coordJob = jpaService.execute(coordJobGetCmd);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(20 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean job = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJobId));\n            return job.getStatus().equals(org.apache.oozie.client.Job.Status.SUCCEEDED);\n        }\n    });\n    org.apache.oozie.CoordinatorJobBean coordJob1 = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJobId));\n    junit.framework.Assert.assertFalse(coordJob1.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob1.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServiceSuspendAndResume",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.client.OozieClientException ex = new org.apache.oozie.client.OozieClientException(\"errorCode\", \"message\", new java.lang.Exception());\n    junit.framework.Assert.assertEquals(\"errorCode\", ex.getErrorCode());\n    junit.framework.Assert.assertTrue(ex.getMessage().contains(\"message\"));\n    junit.framework.Assert.assertNotNull(ex.getCause());\n    junit.framework.Assert.assertTrue(ex.toString().contains(\"errorCode\") && ex.toString().contains(\"message\"));\n}",
        "ClassName": "TestWorkflowClientException",
        "Label": 1,
        "MethodName": "testErrorCodeMessageCause",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.command.TestXCommand.AXCommand command = new org.apache.oozie.command.TestXCommand.AXCommand(true);\n    command.call();\n    junit.framework.Assert.assertTrue(command.execute);\n}",
        "ClassName": "TestXCommand",
        "Label": 1,
        "MethodName": "testXCommandLifecycleLocking",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorActionBean action1 = addRecordToCoordActionTable(\"000-123-C\", 1, org.apache.oozie.client.CoordinatorAction.Status.KILLED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.WorkflowActionBean action2 = addRecordToWfActionTable(\"000-123-W\", \"2\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> deleteList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    deleteList.add(action1);\n    deleteList.add(action2);\n    org.apache.oozie.executor.jpa.BulkUpdateDeleteJPAExecutor bulkDelRerunCmd = new org.apache.oozie.executor.jpa.BulkUpdateDeleteJPAExecutor();\n    bulkDelRerunCmd.setDeleteList(deleteList);\n    jpaService.execute(bulkDelRerunCmd);\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action1.getId()));\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException jex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, jex.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action2.getId()));\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException jex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, jex.getErrorCode());\n    }\n}",
        "ClassName": "TestBulkUpdateDeleteJPAExecutor",
        "Label": 1,
        "MethodName": "testDeletes",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            junit.framework.Assert.assertEquals(\"id-valid\", wc.getJobId(\"external-valid\"));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOBS_EXTERNAL_ID_PARAM, org.apache.oozie.servlet.MockDagEngineService.did);\n            junit.framework.Assert.assertNull(wc.getJobId(\"external-invalid\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testExternalId",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path actionDir = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    final org.apache.hadoop.mapred.RunningJob runningJob = _test(\"securityManager\");\n    waitFor(2000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return runningJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(runningJob.isSuccessful());\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainDone(runningJob));\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainSuccessful(runningJob));\n    junit.framework.Assert.assertFalse(org.apache.oozie.action.hadoop.LauncherMapper.hasOutputData(runningJob));\n    junit.framework.Assert.assertFalse(org.apache.oozie.action.hadoop.LauncherMapper.hasIdSwap(runningJob));\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainDone(runningJob));\n    junit.framework.Assert.assertFalse(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getErrorPath(actionDir)));\n    junit.framework.Assert.assertFalse(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getIdSwapPath(actionDir)));\n    junit.framework.Assert.assertFalse(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getOutputDataPath(actionDir)));\n}",
        "ClassName": "TestLauncher",
        "Label": 1,
        "MethodName": "testSecurityManager",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = createCoordAction(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    action.setSlaXml(org.apache.oozie.test.XDataTestCase.slaXml);\n    insertRecordCoordAction(action);\n    _testGetActionForCheck(action.getId(), job.getId(), org.apache.oozie.client.CoordinatorAction.Status.WAITING, 0, action.getId() + \"_E\", org.apache.oozie.test.XDataTestCase.slaXml);\n}",
        "ClassName": "TestCoordActionGetForCheckJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = \"<coordinator-app name=\\\"NAME\\\" frequencyERROR=\\\"10\\\" start=\\\"2009-02-01T01:00Z\\\" end=\\\"2009-02-03T23:59Z\\\" timezone=\\\"UTC\\\" \" + (((((((((((((\"xmlns=\\\"uri:oozie:coordinator:0.2\\\"> <controls> <timeout>10</timeout> <concurrency>2</concurrency> \" + \"<execution>LIFO</execution> </controls> <datasets> \") + \"<dataset name=\\\"a\\\" frequency=\\\"60\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"<dataset name=\\\"local_a\\\" frequency=\\\"120\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"</datasets> <input-events> \") + \"<data-in name=\\\"A\\\" dataset=\\\"a\\\"> <instance>${coord:latest(0)}</instance> </data-in>  \") + \"</input-events> \") + \"<output-events> <data-out name=\\\"LOCAL_A\\\" dataset=\\\"local_a\\\"> \") + \"<instance>${coord:current(-1)}</instance> </data-out> </output-events> <action> <workflow> <app-path>hdfs:///tmp/workflows/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>${coord:dataIn('A')}</value> </property> \") + \"<property> <name>inputB</name> <value>${coord:dataOut('LOCAL_A')}</value> \") + \"</property></configuration> </workflow> </action> </coordinator-app>\");\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    try {\n        sc.call();\n        junit.framework.Assert.fail(\"Exception expected if schema has errors!\");\n    } catch (org.apache.oozie.command.CommandException e) {\n    }\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testSchemaError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = \"<coordinator-app name=\\\"NAME\\\" frequency=\\\"${coord:days(1)}\\\" start=\\\"2009-02-01T01:00Z\\\" end=\\\"2009-02-03T23:59Z\\\" timezone=\\\"UTC\\\" \" + (((((((((((((\"xmlns=\\\"uri:oozie:coordinator:0.1\\\"> <controls> <concurrency>2</concurrency> \" + \"<execution>LIFO</execution> </controls> <datasets> \") + \"<dataset name=\\\"a\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"<dataset name=\\\"local_a\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"</datasets> <input-events> \") + \"<data-in name=\\\"A\\\" dataset=\\\"a\\\"> <instance>${coord:latest(0)}</instance> </data-in>  \") + \"</input-events> \") + \"<output-events> <data-out name=\\\"LOCAL_A\\\" dataset=\\\"local_a\\\"> \") + \"<instance>${coord:current(-1)}</instance> </data-out> </output-events> <action> <workflow> <app-path>hdfs:///tmp/workflows/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>${coord:dataIn('A')}</value> </property> \") + \"<property> <name>inputB</name> <value>${coord:dataOut('LOCAL_A')}</value> \") + \"</property></configuration> </workflow> </action> </coordinator-app>\");\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    this.addRecordToBundleActionTable(\"OOZIE-B\", \"COORD-NAME\", 0, org.apache.oozie.client.Job.Status.PREP);\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\", \"OOZIE-B\", \"COORD-NAME\");\n    try {\n        sc.call();\n        junit.framework.Assert.fail(\"Exception expected because namespace is too old when submit coordinator through bundle!\");\n    } catch (org.apache.oozie.command.CommandException e) {\n    }\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testBasicSubmitWithWrongNamespace",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowXClient.END_POINTS, org.apache.oozie.client.TestWorkflowXClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowXClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            int wfCount = org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT;\n            org.apache.oozie.client.XOozieClient wc = new org.apache.oozie.client.XOozieClient(oozieUrl);\n            java.util.Properties conf = wc.createConfiguration();\n            org.apache.hadoop.fs.Path libPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"lib\");\n            getFileSystem().mkdirs(libPath);\n            java.lang.System.out.println(libPath.toString());\n            conf.setProperty(org.apache.oozie.client.OozieClient.LIBPATH, libPath.toString());\n            conf.setProperty(org.apache.oozie.client.XOozieClient.JT, \"localhost:9001\");\n            conf.setProperty(org.apache.oozie.client.XOozieClient.NN, \"hdfs://localhost:9000\");\n            java.lang.String[] params = new java.lang.String[]{ \"NAME=test\" };\n            java.lang.String hiveScriptFile = getTestCaseDir() + \"/test\";\n            java.lang.System.out.println(hiveScriptFile);\n            java.io.BufferedWriter writer = new java.io.BufferedWriter(new java.io.FileWriter(hiveScriptFile));\n            writer.write(\"CREATE EXTERNAL TABLE ${NAME} (a INT);\");\n            writer.close();\n            junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + wfCount) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, wc.submitScriptLanguage(conf, hiveScriptFile, null, params, \"hive\"));\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowXClient",
        "Label": 1,
        "MethodName": "testSubmitHive",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    java.lang.StringBuilder execPath = new java.lang.StringBuilder(\"\");\n    for (int i = 0; i < 20; i++) {\n        execPath.append(\"/fork\" + i);\n    }\n    org.apache.oozie.WorkflowActionBean action = addRecordToWfActionTable(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP, execPath.toString());\n    _testGetActionWithExecPath(action.getId(), execPath.toString());\n}",
        "ClassName": "TestWorkflowActionGetJPAExecutor",
        "Label": 1,
        "MethodName": "testWfActionGetWithExecPath",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    addRecordToWfActionTable(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    addRecordToWfActionTable(job.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    addRecordToWfActionTable(job.getId(), \"3\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    _testGetActions(job.getId());\n}",
        "ClassName": "TestWorkflowJobGetActionsJPAExecutor",
        "Label": 1,
        "MethodName": "testWfActionsGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    addRecordToCoordActionTable(job.getId(), actionNum++, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    _testPendingFalseStatusCount(job.getId(), 1);\n    addRecordToCoordActionTable(job.getId(), actionNum++, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    _testPendingFalseStatusCount(job.getId(), 3);\n}",
        "ClassName": "TestCoordActionsPendingFalseStatusCountGetJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionPendingFalseStatusCountGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    _testGetActions(job.getId(), action.getId());\n}",
        "ClassName": "TestCoordJobGetActionsJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleEngine be = new org.apache.oozie.BundleEngine();\n    try {\n        org.apache.oozie.client.CoordinatorJob cj = be.getCoordJob(\"foo\");\n        junit.framework.Assert.fail(\"Expected BundleEngineException was not thrown.\");\n    } catch (org.apache.oozie.BundleEngineException bee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0301, bee.getErrorCode());\n    }\n}",
        "ClassName": "TestBundleEngineSimple",
        "Label": 1,
        "MethodName": "testGetCoordJob1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"coord-multiple-input-start-instance1.xml\", -1);\n    java.io.Writer writer = new java.io.FileWriter(new java.net.URI(appPath).getPath());\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    try {\n        sc.call();\n        junit.framework.Assert.fail(\"Expected to catch errors due to incorrectly specified input data set start-instances\");\n    } catch (org.apache.oozie.command.CommandException e) {\n        junit.framework.Assert.assertEquals(sc.getJob().getStatus(), org.apache.oozie.client.Job.Status.FAILED);\n        junit.framework.Assert.assertEquals(e.getErrorCode(), org.apache.oozie.ErrorCode.E1021);\n        junit.framework.Assert.assertTrue(e.getMessage().contains(sc.COORD_INPUT_EVENTS) && e.getMessage().contains(\"Coordinator app definition should not have multiple start-instances\"));\n    }\n    reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"coord-multiple-input-start-instance2.xml\", -1);\n    writer = new java.io.FileWriter(new java.net.URI(appPath).getPath());\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    try {\n        sc.call();\n    } catch (org.apache.oozie.command.CommandException e) {\n        junit.framework.Assert.fail(\"Unexpected failure: \" + e);\n    }\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testBasicSubmitWithMultipleStartInstancesInputEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    final java.lang.String includePath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"include1.xml\";\n    final java.lang.String URI_TEMPLATE_INCLUDE_XML = \"file:///tmp/include_xml/workflows/${YEAR}/${DAY}\";\n    final java.lang.String URI_TEMPLATE_COORD_XML = \"file:///tmp/coord_xml/workflows/${YEAR}/${DAY}\";\n    java.lang.String includeXml = ((((\"<datasets> \" + (\"<dataset name=\\\"B\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" timezone=\\\"UTC\\\">\" + \"<uri-template>\")) + URI_TEMPLATE_INCLUDE_XML) + \"</uri-template>\") + \"</dataset> \") + \"</datasets>\";\n    writeToFile(includeXml, includePath);\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = ((((((((((((((((((((\"<coordinator-app name=\\\"${appName}-foo\\\" frequency=\\\"${coord:days(1)}\\\" start=\\\"2009-02-01T01:00Z\\\" \" + (((((\"end=\\\"2009-02-03T23:59Z\\\" timezone=\\\"UTC\\\" xmlns=\\\"uri:oozie:coordinator:0.2\\\">\" + \"<controls> \") + \"<execution>LIFO</execution>\") + \"</controls>\") + \"<datasets> \") + \"<include>\")) + includePath) + \"</include>\") + \"<dataset name=\\\"B\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" timezone=\\\"UTC\\\">\") + \"<uri-template>\") + URI_TEMPLATE_COORD_XML) + \"</uri-template>\") + \"</dataset> \") + \"</datasets>\") + \" <input-events> \") + \"<data-in name=\\\"inputB\\\" dataset=\\\"B\\\"> <instance>${coord:latest(0)}</instance> </data-in>  \") + \"</input-events> \") + \"<action>\") + \"<workflow>\") + \"<app-path>hdfs:///tmp/workflows/</app-path> \") + \"<configuration>\") + \"<property> <name>inputB</name> <value>${coord:dataIn('inputB')}</value> </property> \") + \"</configuration>\") + \"</workflow>\") + \"</action>\") + \" </coordinator-app>\";\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.set(\"appName\", \"var-app-name\");\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    java.lang.String jobId = sc.call();\n    junit.framework.Assert.assertEquals(jobId.substring(jobId.length() - 2), \"-C\");\n    org.apache.oozie.CoordinatorJobBean job = checkCoordJobs(jobId);\n    junit.framework.Assert.assertNotNull(job);\n    org.jdom.Element processedJobXml = org.apache.oozie.util.XmlUtils.parseXml(job.getJobXml());\n    org.jdom.Namespace namespace = processedJobXml.getNamespace();\n    @java.lang.SuppressWarnings(\"unchecked\")\n    java.util.List<org.jdom.Element> datasetElements = processedJobXml.getChild(\"input-events\", namespace).getChild(\"data-in\", namespace).getChildren(\"dataset\", namespace);\n    junit.framework.Assert.assertTrue(\"<dataset> should not be duplicate\", datasetElements.size() == 1);\n    junit.framework.Assert.assertEquals(URI_TEMPLATE_COORD_XML, datasetElements.get(0).getChildText(\"uri-template\", namespace));\n    junit.framework.Assert.assertFalse(\"<uri-template> should not contain one from the include file\", job.getJobXml().contains(URI_TEMPLATE_INCLUDE_XML));\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testDuplicateDatasetNameInIncludeFile",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId());\n    org.apache.oozie.WorkflowJobBean wfBean = jpaService.execute(wfGetCmd);\n    wfBean.setStatus(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED);\n    org.apache.oozie.executor.jpa.WorkflowJobUpdateJPAExecutor wfUpdateCmd1 = new org.apache.oozie.executor.jpa.WorkflowJobUpdateJPAExecutor(wfBean);\n    jpaService.execute(wfUpdateCmd1);\n    org.apache.oozie.WorkflowJobBean wfBean1 = jpaService.execute(wfGetCmd);\n    junit.framework.Assert.assertEquals(wfBean1.getId(), job.getId());\n    junit.framework.Assert.assertEquals(wfBean1.getStatusStr(), \"SUCCEEDED\");\n    wfBean.setAppName(\"test\");\n    wfBean.setStatus(org.apache.oozie.client.WorkflowJob.Status.RUNNING);\n    org.apache.oozie.executor.jpa.WorkflowJobUpdateJPAExecutor wfUpdateCmd2 = new org.apache.oozie.executor.jpa.WorkflowJobUpdateJPAExecutor(wfBean);\n    jpaService.execute(wfUpdateCmd2);\n    org.apache.oozie.WorkflowJobBean wfBean2 = jpaService.execute(wfGetCmd);\n    junit.framework.Assert.assertEquals(wfBean2.getId(), job.getId());\n    junit.framework.Assert.assertEquals(wfBean2.getStatusStr(), \"RUNNING\");\n}",
        "ClassName": "TestWorkflowJobUpdateJPAExecutor",
        "Label": 1,
        "MethodName": "testWorkflowJobUpdate",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.XLog.Info.get().clear();\n    org.apache.oozie.util.XLog.Info.get().setParameter(org.apache.oozie.service.DagXLogInfoService.JOB, \"job\");\n    org.apache.oozie.util.XLog.Info.get().setParameter(org.apache.oozie.service.DagXLogInfoService.ACTION, \"action\");\n    org.apache.oozie.command.Command command = new org.apache.oozie.command.TestCommand.MyCommand(false);\n    org.apache.oozie.util.XLog.Info.get().clear();\n    command.call();\n    junit.framework.Assert.assertTrue(org.apache.oozie.util.XLog.Info.get().createPrefix().contains(\"JOB[job]\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.util.XLog.Info.get().createPrefix().contains(\"ACTION[action]\"));\n    command.resetLogInfoWorkflow();\n    junit.framework.Assert.assertTrue(org.apache.oozie.util.XLog.Info.get().createPrefix().contains(\"JOB[-]\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.util.XLog.Info.get().createPrefix().contains(\"ACTION[action]\"));\n    command.resetLogInfoAction();\n    junit.framework.Assert.assertTrue(org.apache.oozie.util.XLog.Info.get().createPrefix().contains(\"ACTION[-]\"));\n    waitFor(2000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return org.apache.oozie.command.TestCommand.EXECUTED.size() == 6;\n        }\n    });\n    junit.framework.Assert.assertEquals(6, org.apache.oozie.command.TestCommand.EXECUTED.size());\n    junit.framework.Assert.assertEquals(java.util.Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"), org.apache.oozie.command.TestCommand.EXECUTED);\n    org.apache.oozie.command.TestCommand.EXECUTED.clear();\n    org.apache.oozie.util.XLog.Info.get().setParameter(org.apache.oozie.service.DagXLogInfoService.JOB, \"job\");\n    org.apache.oozie.util.XLog.Info.get().setParameter(org.apache.oozie.service.DagXLogInfoService.ACTION, \"action\");\n    command = new org.apache.oozie.command.TestCommand.MyCommand(true);\n    try {\n        command.call();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.command.CommandException ex) {\n    }\n    waitFor(200, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return org.apache.oozie.command.TestCommand.EXECUTED.size() == 2;\n        }\n    });\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.command.TestCommand.EXECUTED.size());\n    junit.framework.Assert.assertEquals(java.util.Arrays.asList(\"ex\"), org.apache.oozie.command.TestCommand.EXECUTED);\n}",
        "ClassName": "TestCommand",
        "Label": 1,
        "MethodName": "testDagCommand",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path mkdir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"mkdir\");\n    org.apache.hadoop.fs.Path mkdirX = new org.apache.hadoop.fs.Path(mkdir.toUri().getPath());\n    org.apache.hadoop.fs.Path delete = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"delete\");\n    org.apache.hadoop.fs.Path deleteX = new org.apache.hadoop.fs.Path(delete.toUri().getPath());\n    fs.mkdirs(delete);\n    org.apache.hadoop.fs.Path source = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"source\");\n    org.apache.hadoop.fs.Path sourceX = new org.apache.hadoop.fs.Path(source.toUri().getPath());\n    fs.mkdirs(source);\n    org.apache.hadoop.fs.Path target = new org.apache.hadoop.fs.Path(new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"target\").toUri().getPath());\n    org.apache.hadoop.fs.Path chmod1 = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"chmod1\");\n    org.apache.hadoop.fs.Path chmod1X = new org.apache.hadoop.fs.Path(chmod1.toUri().getPath());\n    fs.mkdirs(chmod1);\n    org.apache.hadoop.fs.Path child1 = new org.apache.hadoop.fs.Path(chmod1, \"child1\");\n    fs.mkdirs(child1);\n    org.apache.hadoop.fs.Path chmod2 = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"chmod2\");\n    org.apache.hadoop.fs.Path chmod2X = new org.apache.hadoop.fs.Path(chmod2.toUri().getPath());\n    fs.mkdirs(chmod2);\n    org.apache.hadoop.fs.Path child2 = new org.apache.hadoop.fs.Path(chmod2, \"child2\");\n    fs.mkdirs(child2);\n    org.apache.hadoop.fs.Path newFile1 = new org.apache.hadoop.fs.Path(mkdir + \"newFile1\");\n    org.apache.hadoop.fs.Path newFile1X = new org.apache.hadoop.fs.Path(newFile1.toUri().getPath());\n    org.apache.hadoop.fs.Path newFile2 = new org.apache.hadoop.fs.Path(mkdir + \"newFile2\");\n    org.apache.hadoop.fs.Path newFile2X = new org.apache.hadoop.fs.Path(newFile2.toUri().getPath());\n    fs.createNewFile(newFile1);\n    java.lang.String actionXml = java.text.MessageFormat.format(\"<fs><name-node>{0}</name-node>\" + (((((((\"<mkdir path=''{1}''/>\" + \"<delete path=''{2}''/>\") + \"<move source=''{3}'' target=''{4}''/>\") + \"<chmod path=''{5}'' permissions=''-rwxrwxrwx''/>\") + \"<chmod path=''{6}'' permissions=''-rwxrwx---'' dir-files=''false''/>\") + \"<touchz path=''{7}''/>\") + \"<touchz path=''{8}''/>\") + \"</fs>\"), getNameNodeUri(), mkdirX, deleteX, sourceX, target, chmod1X, chmod2X, newFile1X, newFile2X);\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml);\n    org.apache.oozie.client.WorkflowAction action = context.getAction();\n    junit.framework.Assert.assertFalse(fs.exists(ae.getRecoveryPath(context)));\n    ae.start(context, action);\n    junit.framework.Assert.assertTrue(fs.exists(ae.getRecoveryPath(context)));\n    ae.check(context, context.getAction());\n    junit.framework.Assert.assertEquals(\"OK\", context.getAction().getExternalStatus());\n    junit.framework.Assert.assertNull(context.getAction().getData());\n    ae.end(context, context.getAction());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, context.getAction().getStatus());\n    junit.framework.Assert.assertFalse(fs.exists(ae.getRecoveryPath(context)));\n    junit.framework.Assert.assertTrue(fs.exists(mkdir));\n    junit.framework.Assert.assertFalse(fs.exists(delete));\n    junit.framework.Assert.assertFalse(fs.exists(source));\n    junit.framework.Assert.assertTrue(fs.exists(target));\n    junit.framework.Assert.assertTrue(fs.exists(newFile1));\n    junit.framework.Assert.assertTrue(fs.exists(newFile2));\n    junit.framework.Assert.assertEquals(\"rwxrwxrwx\", fs.getFileStatus(chmod1).getPermission().toString());\n    junit.framework.Assert.assertNotSame(\"rwxrwxrwx\", fs.getFileStatus(child1).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxrwx---\", fs.getFileStatus(chmod2).getPermission().toString());\n    junit.framework.Assert.assertNotSame(\"rwxrwx---\", fs.getFileStatus(child2).getPermission().toString());\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testSubmitWithNameNode",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, true, true, 3);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    sleep(1000);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServiceSucceeded",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"f\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"a\", \"b\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"a\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"b\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.AsynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j\" }))).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, job.getStatus());\n    job.fail(\"b\");\n    junit.framework.Assert.assertEquals(2, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.kills.size());\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.exits.size());\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.fails.size());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testFailWithRunningNodes",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.StringBuffer sb = new java.lang.StringBuffer(\"\");\n    org.apache.oozie.util.TestMemoryLocks.Locker l1 = new org.apache.oozie.util.TestMemoryLocks.WriteLocker(\"a\", 1, 0, sb);\n    org.apache.oozie.util.TestMemoryLocks.Locker l2 = new org.apache.oozie.util.TestMemoryLocks.WriteLocker(\"a\", 2, 50, sb);\n    new java.lang.Thread(l1).start();\n    java.lang.Thread.sleep(500);\n    new java.lang.Thread(l2).start();\n    java.lang.Thread.sleep(500);\n    l1.finish();\n    java.lang.Thread.sleep(500);\n    l2.finish();\n    java.lang.Thread.sleep(500);\n    junit.framework.Assert.assertEquals(\"a:1-L a:2-N a:1-U\", sb.toString().trim());\n}",
        "ClassName": "TestMemoryLocks",
        "Label": 1,
        "MethodName": "testTimeoutTimingOutWriteLock",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            int wfCount = org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT;\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            java.util.Properties conf = wc.createConfiguration();\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\")).close();\n            conf.setProperty(org.apache.oozie.client.OozieClient.APP_PATH, appPath.toString());\n            junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + wfCount) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, wc.run(conf));\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testRun",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowJobBean subwfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJob.getId());\n    org.apache.oozie.WorkflowActionBean subwfAction = addRecordToWfActionTable(subwfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction.getId());\n    wfJob = jpaService.execute(wfJobGetCmd);\n    wfAction = jpaService.execute(wfActionGetCmd);\n    subwfJob = jpaService.execute(subwfJobGetCmd);\n    subwfAction = jpaService.execute(subwfActionGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, subwfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, subwfAction.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(7, 1, 1, 10).call();\n    try {\n        jpaService.execute(wfJobGetCmd);\n        junit.framework.Assert.fail(\"Workflow Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfActionGetCmd);\n        junit.framework.Assert.fail(\"Workflow Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfJobGetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfActionGetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeWFWithSubWF3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.util.List<java.lang.String>> filterListApp2 = createFilterList(\"appname\", appName2);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.SLAEventsGetForFilterJPAExecutor slaEventsGetCmd = new org.apache.oozie.executor.jpa.SLAEventsGetForFilterJPAExecutor(0, 100, filterListApp2, new long[1]);\n    java.util.List<org.apache.oozie.SLAEventBean> list = jpaService.execute(slaEventsGetCmd);\n    junit.framework.Assert.assertNotNull(list);\n    junit.framework.Assert.assertEquals(2, list.size());\n}",
        "ClassName": "TestSLAEventsGetForFilterJPAExecutor",
        "Label": 1,
        "MethodName": "testGetSLAEventsForAppName",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T23:59\" + TZ);\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-02T23:59\" + TZ);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTableForWaiting(\"coord-job-for-action-input-check.xml\", org.apache.oozie.client.Job.Status.RUNNING, startTime, endTime, false, true, 3);\n    org.apache.oozie.CoordinatorActionBean action1 = addRecordToCoordActionTableForWaiting(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-for-action-input-check.xml\");\n    createDir(getTestCaseDir() + \"/2009/01/29/\");\n    createDir(getTestCaseDir() + \"/2009/01/22/\");\n    createDir(getTestCaseDir() + \"/2009/01/15/\");\n    createDir(getTestCaseDir() + \"/2009/01/08/\");\n    final org.apache.oozie.command.coord.TestCoordActionInputCheckXCommand.MyCoordActionInputCheckXCommand callable1 = new org.apache.oozie.command.coord.TestCoordActionInputCheckXCommand.MyCoordActionInputCheckXCommand(action1.getId(), 100, \"1\");\n    final org.apache.oozie.command.coord.TestCoordActionInputCheckXCommand.MyCoordActionInputCheckXCommand callable2 = new org.apache.oozie.command.coord.TestCoordActionInputCheckXCommand.MyCoordActionInputCheckXCommand(action1.getId(), 100, \"2\");\n    final org.apache.oozie.command.coord.TestCoordActionInputCheckXCommand.MyCoordActionInputCheckXCommand callable3 = new org.apache.oozie.command.coord.TestCoordActionInputCheckXCommand.MyCoordActionInputCheckXCommand(action1.getId(), 100, \"3\");\n    java.util.List<org.apache.oozie.command.coord.TestCoordActionInputCheckXCommand.MyCoordActionInputCheckXCommand> callables = java.util.Arrays.asList(callable1, callable2, callable3);\n    org.apache.oozie.service.CallableQueueService queueservice = services.get(org.apache.oozie.service.CallableQueueService.class);\n    for (org.apache.oozie.command.coord.TestCoordActionInputCheckXCommand.MyCoordActionInputCheckXCommand c : callables) {\n        queueservice.queue(c);\n    }\n    waitFor(200, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return ((callable1.executed != 0) && (callable2.executed == 0)) && (callable3.executed == 0);\n        }\n    });\n    junit.framework.Assert.assertTrue(callable1.executed != 0);\n    junit.framework.Assert.assertTrue(callable2.executed == 0);\n    junit.framework.Assert.assertTrue(callable3.executed == 0);\n}",
        "ClassName": "TestCoordActionInputCheckXCommand",
        "Label": 1,
        "MethodName": "testCoordActionInputCheckXCommandUniqueness",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path script = new org.apache.hadoop.fs.Path(getAppPath(), \"script.pl\");\n    java.io.Writer w = new java.io.OutputStreamWriter(fs.create(script));\n    w.write(org.apache.oozie.action.hadoop.TestShellActionExecutor.PERL_SCRIPT_CONTENT);\n    w.close();\n    java.lang.String actionXml = (((((((((((((((((\"<shell>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<exec>perl</exec>\") + \"<argument>script.pl</argument>\") + \"<argument>A</argument>\") + \"<argument>B</argument>\") + \"<env-var>my_var1=my_val1</env-var>\") + \"<file>\") + script.toString()) + \"#\") + script.getName()) + \"</file>\") + \"<capture-output/>\") + \"</shell>\";\n    _testSubmit(actionXml, true, \"TESTING\");\n}",
        "ClassName": "TestShellActionExecutor",
        "Label": 1,
        "MethodName": "testPerlScript",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.BundleJobBean bean = new org.apache.oozie.BundleJobBean();\n    set(bean);\n    _testGet(bean, true);\n}",
        "ClassName": "TestBundleJobBean",
        "Label": 1,
        "MethodName": "testSetGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"one\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"f\" }))).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\", \"three\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"two\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"three\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j\" }))).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"four\")).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"four\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"end\" }))).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, job.getStatus());\n    junit.framework.Assert.assertEquals(4, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.size());\n    junit.framework.Assert.assertEquals(4, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.exits.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.kills.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.fails.size());\n    junit.framework.Assert.assertTrue(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"one\") < org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"two\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"one\") < org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"three\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"three\") < org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"four\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"two\") < org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"four\"));\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testSimpleFork",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.XLog.Info.defineParameter(\"A\");\n    org.apache.oozie.util.XLog.Info logInfo = new org.apache.oozie.util.XLog.Info();\n    logInfo.setParameter(\"A\", \"a\");\n    junit.framework.Assert.assertEquals(\"A[a]\", logInfo.createPrefix());\n    logInfo = new org.apache.oozie.util.XLog.Info(logInfo);\n    junit.framework.Assert.assertEquals(\"A[a]\", logInfo.createPrefix());\n}",
        "ClassName": "TestXLog",
        "Label": 1,
        "MethodName": "testInfoConstructorPropagation",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String customConfDir = createTestCaseSubDir(\"xconf\");\n    setSystemProperty(org.apache.oozie.service.ConfigurationService.OOZIE_CONFIG_DIR, customConfDir);\n    org.apache.oozie.util.IOUtils.copyStream(org.apache.oozie.util.IOUtils.getResourceAsStream(\"oozie-site1.xml\", -1), new java.io.FileOutputStream(new java.io.File(customConfDir, \"oozie-site.xml\")));\n    org.apache.oozie.service.ConfigurationService cl = new org.apache.oozie.service.ConfigurationService();\n    cl.init(null);\n    junit.framework.Assert.assertEquals(\"oozie-\" + java.lang.System.getProperty(\"user.name\"), cl.getConf().get(\"oozie.system.id\"));\n    junit.framework.Assert.assertNull(cl.getConf().get(\"oozie.dummy\"));\n    cl.destroy();\n}",
        "ClassName": "TestConfigurationService",
        "Label": 1,
        "MethodName": "testAlternateConfDir",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    addRecordToWfActionTable(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.START_MANUAL);\n    _testWfActionRetryManualGet(job.getId());\n    java.lang.System.out.println(\"testWfActionRetryManualGet Successful\");\n}",
        "ClassName": "TestWorkflowActionRetryManualGetJPAExecutor",
        "Label": 1,
        "MethodName": "testWfActionRetryManualGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(false, true);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, false, false);\n    junit.framework.Assert.assertNotNull(job);\n    org.apache.oozie.service.AuthorizationService as = services.get(org.apache.oozie.service.AuthorizationService.class);\n    junit.framework.Assert.assertNotNull(as);\n    as.authorizeForJob(org.apache.oozie.test.XTestCase.getTestUser(), job.getId(), false);\n    as.authorizeForJob(org.apache.oozie.test.XTestCase.getTestUser(), job.getId(), true);\n}",
        "ClassName": "TestAuthorizationService",
        "Label": 1,
        "MethodName": "testAuthorizationServiceForCoord",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.client.HeaderTestingVersionServlet.OOZIE_HEADERS.clear();\n            setSystemProperty(org.apache.oozie.cli.OozieCLI.WS_HEADER_PREFIX + \"header\", \"test\");\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-start\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_START, org.apache.oozie.servlet.MockDagEngineService.did);\n            junit.framework.Assert.assertTrue(org.apache.oozie.client.HeaderTestingVersionServlet.OOZIE_HEADERS.containsKey(\"header\"));\n            junit.framework.Assert.assertTrue(org.apache.oozie.client.HeaderTestingVersionServlet.OOZIE_HEADERS.containsValue(\"test\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testHeaderPropagation",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.jms.JMSJobEventListener coordEventListener = new org.apache.oozie.jms.JMSJobEventListener();\n    coordEventListener.init(conf);\n    java.util.Date startDate = org.apache.oozie.util.DateUtils.parseDateUTC(\"2012-07-22T00:00Z\");\n    java.util.Date nominalTime = org.apache.oozie.util.DateUtils.parseDateUTC(\"2011-07-11T00:00Z\");\n    org.apache.oozie.event.CoordinatorActionEvent cae = new org.apache.oozie.event.CoordinatorActionEvent(\"caId1\", \"caJobId1\", org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"user1\", \"wf-app-name1\", nominalTime, startDate, null);\n    org.apache.oozie.jms.ConnectionContext jmsContext = getConnectionContext();\n    try {\n        javax.jms.Session session = jmsContext.createSession(Session.AUTO_ACKNOWLEDGE);\n        javax.jms.MessageConsumer consumer = jmsContext.createConsumer(session, coordEventListener.getTopic(cae));\n        coordEventListener.onCoordinatorActionEvent(cae);\n        javax.jms.TextMessage message = ((javax.jms.TextMessage) (consumer.receive(5000)));\n        junit.framework.Assert.assertFalse(message.getText().contains(\"endTime\"));\n        junit.framework.Assert.assertFalse(message.getText().contains(\"errorCode\"));\n        junit.framework.Assert.assertFalse(message.getText().contains(\"errorMessage\"));\n        junit.framework.Assert.assertFalse(message.getText().contains(\"missingDependency\"));\n        org.apache.oozie.client.event.message.CoordinatorActionMessage coordActionStartMessage = org.apache.oozie.client.event.jms.JMSMessagingUtils.getEventMessage(message);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.RUNNING, coordActionStartMessage.getStatus());\n        junit.framework.Assert.assertEquals(startDate, coordActionStartMessage.getStartTime());\n        junit.framework.Assert.assertEquals(\"caJobId1\", coordActionStartMessage.getParentId());\n        junit.framework.Assert.assertEquals(\"caId1\", coordActionStartMessage.getId());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.Event.MessageType.JOB, coordActionStartMessage.getMessageType());\n        junit.framework.Assert.assertEquals(org.apache.oozie.AppType.COORDINATOR_ACTION, coordActionStartMessage.getAppType());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.JobEvent.EventStatus.STARTED, coordActionStartMessage.getEventStatus());\n        junit.framework.Assert.assertEquals(\"user1\", coordActionStartMessage.getUser());\n        junit.framework.Assert.assertEquals(\"wf-app-name1\", coordActionStartMessage.getAppName());\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSJobEventListener",
        "Label": 1,
        "MethodName": "testOnCoordinatorActionStartEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    _testCoordJobDelete(job.getId());\n}",
        "ClassName": "TestCoordJobDeleteJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordJobDelete",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setSystemProperty(org.apache.oozie.service.UUIDService.CONF_GENERATOR, \"counter\");\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    services.init();\n    try {\n        org.apache.oozie.service.UUIDService uuid = services.get(org.apache.oozie.service.UUIDService.class);\n        java.lang.String id = uuid.generateId(org.apache.oozie.service.UUIDService.ApplicationType.WORKFLOW);\n        junit.framework.Assert.assertTrue(id.startsWith(\"0000000-\"));\n        for (int i = 0; i < 1000; i++) {\n            id = uuid.generateId(org.apache.oozie.service.UUIDService.ApplicationType.WORKFLOW);\n        }\n        junit.framework.Assert.assertTrue(id.startsWith(\"0001000-\"));\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestUUIDService",
        "Label": 1,
        "MethodName": "testPadding",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.CredentialsProperties prop = new org.apache.oozie.action.hadoop.CredentialsProperties(\"dummyName\", \"dummyType\");\n    prop.getProperties().put(\"hbase.zookeeper.quorum\", \"dummyHost\");\n    org.apache.oozie.action.hadoop.HbaseCredentials hb = new org.apache.oozie.action.hadoop.HbaseCredentials();\n    org.apache.hadoop.mapred.JobConf jc = new org.apache.hadoop.mapred.JobConf(false);\n    hb.copyHbaseConfToJobConf(jc, prop);\n    junit.framework.Assert.assertEquals(\"dummyHost\", jc.get(\"hbase.zookeeper.quorum\"));\n}",
        "ClassName": "TestCredentials",
        "Label": 1,
        "MethodName": "testHbaseCredentials",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path wf = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"workflow.xml\");\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"failover-fs-wf.xml\", -1);\n    java.io.Writer writer = new java.io.OutputStreamWriter(getFileSystem().create(wf));\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    final org.apache.oozie.client.OozieClient wfClient = org.apache.oozie.local.LocalOozie.getClient();\n    java.util.Properties conf = wfClient.createConfiguration();\n    conf.setProperty(org.apache.oozie.client.OozieClient.APP_PATH, wf.toString());\n    conf.setProperty(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.setProperty(org.apache.oozie.client.OozieClient.GROUP_NAME, org.apache.oozie.test.XTestCase.getTestGroup());\n    final org.apache.hadoop.fs.Path source = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"fsfailover-source\");\n    getFileSystem().mkdirs(source);\n    final org.apache.hadoop.fs.Path target = new org.apache.hadoop.fs.Path(getFsTestCaseDir().toString(), \"fsfailover-target\");\n    conf.setProperty(\"source\", source.toString());\n    conf.setProperty(\"target\", target.toUri().getPath());\n    final java.lang.String jobId1 = wfClient.submit(conf);\n    wfClient.start(jobId1);\n    setSystemProperty(org.apache.oozie.FaultInjection.FAULT_INJECTION, \"true\");\n    setSystemProperty(org.apache.oozie.command.SkipCommitFaultInjection.ACTION_FAILOVER_FAULT_INJECTION, \"true\");\n    waitFor(10 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return getFileSystem().exists(target);\n        }\n    });\n    junit.framework.Assert.assertFalse(getFileSystem().exists(target));\n    waitFor(10 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return org.apache.oozie.FaultInjection.isActive(\"org.apache.oozie.command.SkipCommitFaultInjection\");\n        }\n    });\n    junit.framework.Assert.assertFalse(org.apache.oozie.FaultInjection.isActive(\"org.apache.oozie.command.SkipCommitFaultInjection\"));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.RUNNING, wfClient.getJobInfo(jobId1).getStatus());\n    org.apache.oozie.store.WorkflowStore store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.WorkflowStoreService.class).create();\n    java.util.List<org.apache.oozie.WorkflowActionBean> actions = store.getActionsForWorkflow(jobId1, false);\n    junit.framework.Assert.assertEquals(1, actions.size());\n    org.apache.oozie.WorkflowActionBean action = actions.get(0);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.PREP, action.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.action.control.StartActionExecutor.TYPE, action.getType());\n    setSystemProperty(org.apache.oozie.FaultInjection.FAULT_INJECTION, \"false\");\n    setSystemProperty(org.apache.oozie.command.SkipCommitFaultInjection.ACTION_FAILOVER_FAULT_INJECTION, \"false\");\n    org.apache.oozie.command.wf.ActionStartXCommand actionStartCommand = new org.apache.oozie.command.wf.ActionStartXCommand(action.getId(), action.getType());\n    actionStartCommand.call();\n    store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.WorkflowStoreService.class).create();\n    actions = store.getActionsForWorkflow(jobId1, false);\n    action = actions.get(0);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.DONE, action.getStatus());\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return wfClient.getJobInfo(jobId1).getStatus() == org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED;\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfClient.getJobInfo(jobId1).getStatus());\n    final java.lang.String jobId2 = wfClient.submit(conf);\n    wfClient.start(jobId2);\n    waitFor(10 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return wfClient.getJobInfo(jobId2).getStatus() == org.apache.oozie.client.WorkflowJob.Status.KILLED;\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.KILLED, wfClient.getJobInfo(jobId2).getStatus());\n}",
        "ClassName": "TestActionFailover",
        "Label": 1,
        "MethodName": "testFsFailover",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"coordinator.xml\")).close();\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-change\", org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + \"0\", \"-value\", \"concurrency=10\" };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_CHANGE, org.apache.oozie.servlet.MockCoordinatorEngineService.did);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testChangeValue",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    try {\n        services.init();\n        junit.framework.Assert.assertNotNull(services.get(org.apache.oozie.service.WorkflowAppService.class));\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestLiteWorkflowAppService",
        "Label": 1,
        "MethodName": "testService",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean workflow = new org.apache.oozie.WorkflowJobBean();\n    workflow.setAuthToken(\"authToken\");\n    workflow.setLogToken(\"logToken\");\n    workflow.setProtoActionConf(\"proto\");\n    junit.framework.Assert.assertEquals(\"authToken\", workflow.getAuthToken());\n    junit.framework.Assert.assertEquals(\"logToken\", workflow.getLogToken());\n    junit.framework.Assert.assertEquals(\"proto\", workflow.getProtoActionConf());\n}",
        "ClassName": "TestWorkflowBean",
        "Label": 1,
        "MethodName": "testWorkflow",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testTransient(\"end.transient\", org.apache.oozie.client.WorkflowAction.Status.END_RETRY, org.apache.oozie.client.WorkflowAction.Status.END_MANUAL, \"end\");\n    junit.framework.Assert.assertTrue(true);\n}",
        "ClassName": "TestActionErrors",
        "Label": 1,
        "MethodName": "testEndTransient",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date curr = new java.util.Date();\n    java.util.Date pauseTime = new java.util.Date(curr.getTime() - 1000);\n    org.apache.oozie.CoordinatorJobBean job = this.addRecordToCoordJobTableWithPausedTime(org.apache.oozie.client.Job.Status.PAUSEDWITHERROR, false, false, pauseTime);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.FAILED, \"coord-rerun-action1.xml\", 0);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetExecutor = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSEDWITHERROR, job.getStatus());\n    new org.apache.oozie.command.coord.CoordRerunXCommand(job.getId(), org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_DATE, \"2009-12-15T01:00Z\", false, true).call();\n    job = jpaService.execute(coordJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSEDWITHERROR, job.getStatus());\n    junit.framework.Assert.assertNotNull(job.getPauseTime());\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunInPausedWithError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T01:00Z\");\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-20T23:59Z\");\n    final org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, start, end, false, false, 0);\n    sleep(3000);\n    java.lang.Runnable runnable = new org.apache.oozie.service.CoordMaterializeTriggerService.CoordMaterializeTriggerRunnable(3600, 300);\n    runnable.run();\n    sleep(1000);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, coordJob.getStatus());\n    int numWaitingActions = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetRunningActionsCountJPAExecutor(coordJob.getId()));\n    assert numWaitingActions <= coordJob.getMatThrottling();\n}",
        "ClassName": "TestCoordMaterializeTriggerService",
        "Label": 1,
        "MethodName": "testCoordMaterializeTriggerService1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTableForNegCase(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowJobBean subwfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, wfJob.getId());\n    org.apache.oozie.WorkflowActionBean subwfAction = addRecordToWfActionTable(subwfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction.getId());\n    wfJob = jpaService.execute(wfJobGetCmd);\n    wfAction = jpaService.execute(wfActionGetCmd);\n    subwfJob = jpaService.execute(subwfJobGetCmd);\n    subwfAction = jpaService.execute(subwfActionGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.RUNNING, subwfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.RUNNING, subwfAction.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(7, 1, 1, 10).call();\n    try {\n        jpaService.execute(wfJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Action should not have been purged\");\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeWFWithSubWF2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.email.EmailActionExecutor email = new org.apache.oozie.action.email.EmailActionExecutor();\n    email.validateAndMail(createNormalContext(\"email-action\"), prepareEmailElement(false));\n    junit.framework.Assert.assertEquals(\"bod\", com.icegreen.greenmail.util.GreenMailUtil.getBody(server.getReceivedMessages()[0]));\n}",
        "ClassName": "TestEmailActionExecutor",
        "Label": 1,
        "MethodName": "testDoNormalEmail",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertEquals(120, org.apache.oozie.util.ParamChecker.checkInteger(\"120\", \"test\"));\n    junit.framework.Assert.assertEquals(-12, org.apache.oozie.util.ParamChecker.checkInteger(\"-12\", \"test\"));\n    try {\n        org.apache.oozie.util.ParamChecker.checkInteger(\"ABCD\", \"test\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception ex) {\n    }\n    try {\n        org.apache.oozie.util.ParamChecker.checkInteger(\"1.5\", \"test\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestParamChecker",
        "Label": 1,
        "MethodName": "testCheckInteger",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    prepareOozieConfDir(\"oozie-site2.xml\");\n    org.apache.oozie.service.ConfigurationService cl = new org.apache.oozie.service.ConfigurationService();\n    cl.init(null);\n    junit.framework.Assert.assertEquals(\"SITE1\", cl.getConf().get(\"oozie.system.id\"));\n    junit.framework.Assert.assertEquals(\"SITE2\", cl.getConf().get(\"oozie.dummy\"));\n    cl.destroy();\n}",
        "ClassName": "TestConfigurationService",
        "Label": 1,
        "MethodName": "testValueFromSite",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"coord-multiple-output-instance1.xml\", -1);\n    java.io.Writer writer = new java.io.FileWriter(new java.net.URI(appPath).getPath());\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    try {\n        sc.call();\n        junit.framework.Assert.fail(\"Expected to catch errors due to incorrectly specified output data set instances\");\n    } catch (org.apache.oozie.command.CommandException e) {\n        junit.framework.Assert.assertEquals(sc.getJob().getStatus(), org.apache.oozie.client.Job.Status.FAILED);\n        junit.framework.Assert.assertEquals(e.getErrorCode(), org.apache.oozie.ErrorCode.E1021);\n        junit.framework.Assert.assertTrue(e.getMessage().contains(sc.COORD_OUTPUT_EVENTS) && e.getMessage().contains(\"per data-out instance\"));\n    }\n    reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"coord-multiple-output-instance2.xml\", -1);\n    writer = new java.io.FileWriter(new java.net.URI(appPath).getPath());\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    try {\n        sc.call();\n        junit.framework.Assert.fail(\"Expected to catch errors due to incorrectly specified output data set instances\");\n    } catch (org.apache.oozie.command.CommandException e) {\n        junit.framework.Assert.assertEquals(sc.getJob().getStatus(), org.apache.oozie.client.Job.Status.FAILED);\n        junit.framework.Assert.assertEquals(e.getErrorCode(), org.apache.oozie.ErrorCode.E1021);\n        junit.framework.Assert.assertTrue(e.getMessage().contains(sc.COORD_OUTPUT_EVENTS) && e.getMessage().contains(\"is empty\"));\n    }\n    reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"coord-multiple-output-instance3.xml\", -1);\n    writer = new java.io.FileWriter(new java.net.URI(appPath).getPath());\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    try {\n        sc.call();\n        junit.framework.Assert.fail(\"Expected to catch errors due to incorrectly specified output data set instances\");\n    } catch (org.apache.oozie.command.CommandException e) {\n        junit.framework.Assert.assertEquals(sc.getJob().getStatus(), org.apache.oozie.client.Job.Status.FAILED);\n        junit.framework.Assert.assertEquals(e.getErrorCode(), org.apache.oozie.ErrorCode.E0701);\n        junit.framework.Assert.assertTrue(e.getMessage().contains(\"No child element is expected at this point\"));\n    }\n    reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"coord-multiple-output-instance4.xml\", -1);\n    writer = new java.io.FileWriter(new java.net.URI(appPath).getPath());\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    try {\n        sc.call();\n    } catch (org.apache.oozie.command.CommandException e) {\n        junit.framework.Assert.fail(\"Not expected to fail here\");\n    }\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testBasicSubmitWithMultipleInstancesOutputEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.jms.JMSJobEventListener coordEventListener = new org.apache.oozie.jms.JMSJobEventListener();\n    coordEventListener.init(conf);\n    java.util.Date startDate = org.apache.oozie.util.DateUtils.parseDateUTC(\"2012-07-22T00:00Z\");\n    java.util.Date nominalTime = org.apache.oozie.util.DateUtils.parseDateUTC(\"2011-07-11T00:00Z\");\n    java.util.Date endDate = new java.util.Date();\n    org.apache.oozie.event.CoordinatorActionEvent cae = new org.apache.oozie.event.CoordinatorActionEvent(\"caId1\", \"caJobId1\", org.apache.oozie.client.CoordinatorAction.Status.FAILED, \"user1\", \"wf-app-name1\", nominalTime, startDate, null);\n    cae.setEndTime(endDate);\n    cae.setErrorCode(\"E0101\");\n    cae.setErrorMessage(\"dummyError\");\n    org.apache.oozie.jms.ConnectionContext jmsContext = getConnectionContext();\n    try {\n        javax.jms.Session session = jmsContext.createSession(Session.AUTO_ACKNOWLEDGE);\n        javax.jms.MessageConsumer consumer = jmsContext.createConsumer(session, coordEventListener.getTopic(cae));\n        coordEventListener.onCoordinatorActionEvent(cae);\n        javax.jms.TextMessage message = ((javax.jms.TextMessage) (consumer.receive(5000)));\n        junit.framework.Assert.assertFalse(message.getText().contains(\"missingDependency\"));\n        org.apache.oozie.client.event.message.CoordinatorActionMessage coordActionFailMessage = org.apache.oozie.client.event.jms.JMSMessagingUtils.getEventMessage(message);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.FAILED, coordActionFailMessage.getStatus());\n        junit.framework.Assert.assertEquals(startDate, coordActionFailMessage.getStartTime());\n        junit.framework.Assert.assertEquals(endDate, coordActionFailMessage.getEndTime());\n        junit.framework.Assert.assertEquals(\"caJobId1\", coordActionFailMessage.getParentId());\n        junit.framework.Assert.assertEquals(\"caId1\", coordActionFailMessage.getId());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.Event.MessageType.JOB, coordActionFailMessage.getMessageType());\n        junit.framework.Assert.assertEquals(org.apache.oozie.AppType.COORDINATOR_ACTION, coordActionFailMessage.getAppType());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.JobEvent.EventStatus.FAILURE, coordActionFailMessage.getEventStatus());\n        junit.framework.Assert.assertEquals(\"user1\", coordActionFailMessage.getUser());\n        junit.framework.Assert.assertEquals(\"wf-app-name1\", coordActionFailMessage.getAppName());\n        junit.framework.Assert.assertEquals(\"E0101\", coordActionFailMessage.getErrorCode());\n        junit.framework.Assert.assertEquals(\"dummyError\", coordActionFailMessage.getErrorMessage());\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSJobEventListener",
        "Label": 1,
        "MethodName": "testOnCoordinatorJobFailureEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.BundleJobBean bundleJobBean = xDataTestCase.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    runTest(\"/v1/job/*\", org.apache.oozie.servlet.V1JobServlet.class, org.apache.oozie.servlet.TestV1JobServletBundleEngine.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockCoordinatorEngineService.reset();\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO);\n            final java.lang.String id = bundleJobBean.getId();\n            java.net.URL url = createURL(id, params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject obj = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals(id, obj.get(\"bundleJobId\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1JobServletBundleEngine",
        "Label": 1,
        "MethodName": "testBundleEngineGetBundleJob",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String jobXml = \"<coordinator-app name=\\\"mycoordinator-app\\\" start=\\\"2009-02-01T01:00GMT\\\" end=\\\"2009-02-03T23:59GMT\\\" timezone=\\\"UTC\\\"\";\n    jobXml += \" frequency=\\\"720\\\" freq_timeunit=\\\"MINUTE\\\"\";\n    jobXml += \" action-nominal-time='2009-09-01T00:00Z' action-actual-time='2010-10-01T00:00Z'>\";\n    jobXml += \"<input-events><data-in name=\\\"A\\\" dataset=\\\"a\\\"><uris>file:///tmp/coord/US/2009/1/30|file:///tmp/coord/US/2009/1/31</uris>\";\n    jobXml += \"<dataset name=\\\"a\\\" frequency=\\\"1440\\\" initial-instance=\\\"2009-01-01T00:00Z\\\">\";\n    jobXml += \"<uri-template>file:///tmp/coord/US/${YEAR}/${MONTH}/${DAY}</uri-template></dataset></data-in></input-events>\";\n    jobXml += \"<action><workflow><url>http://foobar.com:8080/oozie</url><app-path>hdfs://foobarfoobar.com:9000/usr/tucu/mywf</app-path>\";\n    jobXml += \"<configuration><property><name>inputA</name><value>${coord:dataIn('A')}</value></property>\";\n    jobXml += \"<property><name>ACTIONID</name><value>${coord:actionId()}</value></property>\";\n    jobXml += \"<property><name>NAME</name><value>${coord:name()}</value></property>\";\n    jobXml += \"<property><name>NOMINALTIME</name><value>${coord:nominalTime()}</value></property>\";\n    jobXml += \"<property><name>ACTUALTIME</name><value>${coord:actualTime()}</value></property>\";\n    jobXml += \"</configuration></workflow></action></coordinator-app>\";\n    java.lang.String reply = \"<action><workflow><url>http://foobar.com:8080/oozie</url><app-path>hdfs://foobarfoobar.com:9000/usr/tucu/mywf</app-path>\";\n    reply += \"<configuration><property><name>inputA</name><value>file:///tmp/coord/US/2009/1/30|file:///tmp/coord/US/2009/1/31</value></property>\";\n    reply += \"<property><name>ACTIONID</name><value>00000-oozie-C@1</value></property>\";\n    reply += \"<property><name>NAME</name><value>mycoordinator-app</value></property>\";\n    reply += \"<property><name>NOMINALTIME</name><value>2009-09-01T00:00Z</value></property>\";\n    reply += \"<property><name>ACTUALTIME</name><value>2010-10-01T00:00Z</value></property>\";\n    reply += \"</configuration></workflow></action>\";\n    org.jdom.Element eJob = org.apache.oozie.util.XmlUtils.parseXml(jobXml);\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(getConfString()));\n    org.apache.oozie.util.ELEvaluator eval = org.apache.oozie.coord.CoordELEvaluator.createDataEvaluator(eJob, conf, \"00000-oozie-C@1\");\n    org.jdom.Element action = eJob.getChild(\"action\", eJob.getNamespace());\n    java.lang.String str = org.apache.oozie.util.XmlUtils.prettyPrint(action).toString();\n    junit.framework.Assert.assertEquals(org.apache.oozie.util.XmlUtils.prettyPrint(org.apache.oozie.util.XmlUtils.parseXml(reply)).toString(), org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, str));\n}",
        "ClassName": "TestCoordELEvaluator",
        "Label": 1,
        "MethodName": "testCreateDataEvaluator",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable = new org.apache.oozie.service.TestCallableQueueService.MyCallable();\n    long scheduled = java.lang.System.currentTimeMillis();\n    queueservice.queue(callable, 1000);\n    waitFor(3000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return callable.executed != 0;\n        }\n    });\n    junit.framework.Assert.assertTrue(callable.executed >= (scheduled + 1000));\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testDelayedQueuing",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path actionLibPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"actionlibs\");\n    getFileSystem().mkdirs(actionLibPath);\n    org.apache.hadoop.fs.Path jar1Path = new org.apache.hadoop.fs.Path(actionLibPath, \"jar1.jar\");\n    getFileSystem().create(jar1Path).close();\n    org.apache.hadoop.fs.Path jar2Path = new org.apache.hadoop.fs.Path(actionLibPath, \"jar2.jar\");\n    getFileSystem().create(jar2Path).close();\n    java.lang.String actionXml = ((((((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<job-xml>job.xml</job-xml>\") + \"<job-xml>job2.xml</job-xml>\") + \"<configuration>\") + \"<property><name>oozie.launcher.oozie.libpath</name><value>\") + actionLibPath) + \"</value></property>\") + \"</configuration>\") + \"<main-class>MAIN-CLASS</main-class>\") + \"</java>\";\n    org.jdom.Element eActionXml = org.apache.oozie.util.XmlUtils.parseXml(actionXml);\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml, null);\n    org.apache.oozie.action.hadoop.JavaActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    org.apache.hadoop.conf.Configuration jobConf = ae.createBaseHadoopConf(context, eActionXml);\n    ae.setupLauncherConf(jobConf, eActionXml, getAppPath(), context);\n    ae.setLibFilesArchives(context, eActionXml, getAppPath(), jobConf);\n    java.net.URI[] cacheFiles = org.apache.hadoop.filecache.DistributedCache.getCacheFiles(jobConf);\n    java.lang.String cacheFilesStr = java.util.Arrays.toString(cacheFiles);\n    junit.framework.Assert.assertTrue(cacheFilesStr.contains(jar1Path.toString()));\n    junit.framework.Assert.assertTrue(cacheFilesStr.contains(jar2Path.toString()));\n    org.apache.hadoop.fs.Path jar3Path = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"jar3.jar\");\n    getFileSystem().create(jar3Path).close();\n    actionXml = ((((((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<job-xml>job.xml</job-xml>\") + \"<job-xml>job2.xml</job-xml>\") + \"<configuration>\") + \"<property><name>oozie.launcher.oozie.libpath</name><value>\") + jar3Path) + \"</value></property>\") + \"</configuration>\") + \"<main-class>MAIN-CLASS</main-class>\") + \"</java>\";\n    eActionXml = org.apache.oozie.util.XmlUtils.parseXml(actionXml);\n    context = createContext(actionXml, null);\n    ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    jobConf = ae.createBaseHadoopConf(context, eActionXml);\n    ae.setupLauncherConf(jobConf, eActionXml, getAppPath(), context);\n    ae.setLibFilesArchives(context, eActionXml, getAppPath(), jobConf);\n    cacheFiles = org.apache.hadoop.filecache.DistributedCache.getCacheFiles(jobConf);\n    cacheFilesStr = java.util.Arrays.toString(cacheFiles);\n    junit.framework.Assert.assertTrue(cacheFilesStr.contains(jar3Path.toString()));\n    actionXml = ((((((((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<job-xml>job.xml</job-xml>\") + \"<job-xml>job2.xml</job-xml>\") + \"<configuration>\") + \"<property><name>oozie.launcher.oozie.libpath</name><value>\") + actionLibPath) + \",\") + jar3Path) + \"</value></property>\") + \"</configuration>\") + \"<main-class>MAIN-CLASS</main-class>\") + \"</java>\";\n    eActionXml = org.apache.oozie.util.XmlUtils.parseXml(actionXml);\n    context = createContext(actionXml, null);\n    ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    jobConf = ae.createBaseHadoopConf(context, eActionXml);\n    ae.setupLauncherConf(jobConf, eActionXml, getAppPath(), context);\n    ae.setLibFilesArchives(context, eActionXml, getAppPath(), jobConf);\n    cacheFiles = org.apache.hadoop.filecache.DistributedCache.getCacheFiles(jobConf);\n    cacheFilesStr = java.util.Arrays.toString(cacheFiles);\n    junit.framework.Assert.assertTrue(cacheFilesStr.contains(jar1Path.toString()));\n    junit.framework.Assert.assertTrue(cacheFilesStr.contains(jar2Path.toString()));\n    junit.framework.Assert.assertTrue(cacheFilesStr.contains(jar3Path.toString()));\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testActionLibsPath",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean bundleJob = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, true);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    final java.lang.String bundleId = bundleJob.getId();\n    addRecordToBundleActionTable(bundleId, null, 0, org.apache.oozie.client.Job.Status.KILLED);\n    addRecordToBundleActionTable(bundleId, \"action2\", 0, org.apache.oozie.client.Job.Status.RUNNING);\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    addRecordToCoordJobTableWithBundle(bundleId, \"action2\", org.apache.oozie.client.Job.Status.RUNNING, start, end, true, true, 2);\n    addRecordToCoordActionTable(\"action2\", 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    sleep(10000);\n    runnable.run();\n    waitFor(25 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean bundle = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n            return bundle.getStatus() == org.apache.oozie.client.Job.Status.KILLED;\n        }\n    });\n    bundleJob = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, bundleJob.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testBundleStatusTransitServiceKilled2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"f\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"a\", \"b\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"a\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"b\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.AsynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j\" }))).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, job.getStatus());\n    job.kill();\n    junit.framework.Assert.assertEquals(2, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.size());\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.kills.size());\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.exits.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.fails.size());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testKillWithRunningNodes",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            java.util.Properties conf = wc.createConfiguration();\n            conf.setProperty(org.apache.oozie.client.OozieClient.USER_NAME, \"x\");\n            wc.kill((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END);\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_KILL, org.apache.oozie.servlet.MockDagEngineService.did);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testKill",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.XConfiguration protoConf = getBaseProtoConf();\n    org.apache.oozie.WorkflowJobBean workflow = createBaseWorkflow(protoConf, \"W\");\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path parentLibJar = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"lib/parentLibrary.jar\");\n    fs.create(parentLibJar);\n    junit.framework.Assert.assertTrue(fs.exists(parentLibJar));\n    java.lang.String defaultConf = workflow.getConf();\n    org.apache.oozie.util.XConfiguration newConf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(defaultConf));\n    newConf.set(org.apache.oozie.client.OozieClient.LIBPATH, parentLibJar.getParent().toString());\n    workflow.setConf(newConf.toXmlString());\n    org.apache.hadoop.fs.Path subWorkflowAppPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir().toString(), \"subwf\");\n    java.io.Writer writer = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(subWorkflowAppPath, \"workflow.xml\")));\n    writer.write(org.apache.oozie.action.oozie.TestSubWorkflowActionExecutor.APP1);\n    writer.close();\n    org.apache.hadoop.fs.Path subwfLibJar = new org.apache.hadoop.fs.Path(subWorkflowAppPath, \"lib/subwfLibrary.jar\");\n    fs.create(subwfLibJar);\n    junit.framework.Assert.assertTrue(fs.exists(subwfLibJar));\n    final org.apache.oozie.WorkflowActionBean action = ((org.apache.oozie.WorkflowActionBean) (workflow.getActions().get(0)));\n    action.setConf((((((\"<sub-workflow xmlns='uri:oozie:workflow:0.1' name='subwf'>\" + \"      <app-path>\") + subWorkflowAppPath) + java.io.File.separator) + \"workflow.xml\") + \"</app-path>\") + \"</sub-workflow>\");\n    org.apache.oozie.action.oozie.SubWorkflowActionExecutor subWorkflow = new org.apache.oozie.action.oozie.SubWorkflowActionExecutor();\n    subWorkflow.start(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), action);\n    final org.apache.oozie.client.OozieClient oozieClient = subWorkflow.getWorkflowClient(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), org.apache.oozie.action.oozie.SubWorkflowActionExecutor.LOCAL);\n    waitFor(org.apache.oozie.action.oozie.TestSubWorkflowActionExecutor.JOB_TIMEOUT, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return oozieClient.getJobInfo(action.getExternalId()).getStatus() == org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED;\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, oozieClient.getJobInfo(action.getExternalId()).getStatus());\n    subWorkflow.check(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), action);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.DONE, action.getStatus());\n    subWorkflow.end(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), action);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, action.getStatus());\n    org.apache.oozie.service.WorkflowAppService wps = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.WorkflowAppService.class);\n    org.apache.oozie.client.WorkflowJob wf = oozieClient.getJobInfo(action.getExternalId());\n    org.apache.hadoop.conf.Configuration childConf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(wf.getConf()));\n    childConf = wps.createProtoActionConf(childConf, \"authToken\", true);\n    junit.framework.Assert.assertEquals(childConf.get(org.apache.oozie.service.WorkflowAppService.APP_LIB_PATH_LIST), subwfLibJar.toString());\n}",
        "ClassName": "TestSubWorkflowActionExecutor",
        "Label": 1,
        "MethodName": "testSubworkflowLib",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    java.lang.String jobId = job.getId();\n    org.apache.oozie.CoordinatorActionBean action1 = addRecordToCoordActionTable(jobId, actionNum, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    java.util.List<org.apache.oozie.CoordinatorActionBean> coordActions = org.apache.oozie.coord.CoordUtils.getCoordActionsFromIds(jobId, java.lang.Integer.toString(actionNum));\n    junit.framework.Assert.assertEquals(1, coordActions.size());\n    junit.framework.Assert.assertEquals(action1, coordActions.get(0));\n}",
        "ClassName": "TestCoordUtils",
        "Label": 1,
        "MethodName": "testGetCoordActionsFromIds",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String str = \"<java>\" + ((((((\"<job-xml>job1.xml</job-xml>\" + \"<job-xml>job2.xml</job-xml>\") + \"<configuration>\") + \"<property><name>p1</name><value>v1a</value></property>\") + \"<property><name>p2</name><value>v2</value></property>\") + \"</configuration>\") + \"</java>\");\n    org.jdom.Element xml = org.apache.oozie.util.XmlUtils.parseXml(str);\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n    getFileSystem().mkdirs(appPath);\n    org.apache.oozie.util.XConfiguration jConf = new org.apache.oozie.util.XConfiguration();\n    jConf.set(\"p1\", \"v1b\");\n    jConf.set(\"p3\", \"v3a\");\n    java.io.OutputStream os = getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"job1.xml\"));\n    jConf.writeXml(os);\n    os.close();\n    jConf = new org.apache.oozie.util.XConfiguration();\n    jConf.set(\"p4\", \"v4\");\n    jConf.set(\"p3\", \"v3b\");\n    os = getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"job2.xml\"));\n    jConf.writeXml(os);\n    os.close();\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    junit.framework.Assert.assertEquals(0, conf.size());\n    org.apache.oozie.action.hadoop.JavaActionExecutor.parseJobXmlAndConfiguration(createContext(\"<java/>\", null), xml, appPath, conf);\n    junit.framework.Assert.assertEquals(4, conf.size());\n    junit.framework.Assert.assertEquals(\"v1a\", conf.get(\"p1\"));\n    junit.framework.Assert.assertEquals(\"v2\", conf.get(\"p2\"));\n    junit.framework.Assert.assertEquals(\"v3b\", conf.get(\"p3\"));\n    junit.framework.Assert.assertEquals(\"v4\", conf.get(\"p4\"));\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testParseJobXmlAndConfiguration",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.String> map = new java.util.HashMap<java.lang.String, java.lang.String>();\n    map.put(\"a\", \"A\");\n    map.put(\"b\", \"&\");\n    java.lang.String str = org.apache.oozie.util.ELConstantsFunctions.toJsonStr(map);\n    org.jdom.Element e = org.apache.oozie.util.XmlUtils.parseXml((\"<x>\" + str) + \"</x>\");\n    org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (new org.json.simple.parser.JSONParser().parse(e.getText())));\n    java.util.Map<java.lang.String, java.lang.String> map2 = new java.util.HashMap<java.lang.String, java.lang.String>(json);\n    junit.framework.Assert.assertEquals(map, map2);\n}",
        "ClassName": "TestELConstantsFunctions",
        "Label": 1,
        "MethodName": "testToJsonStr",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.email.EmailActionExecutor email = new org.apache.oozie.action.email.EmailActionExecutor();\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context ctx = createNormalContext(\"email-action\");\n    try {\n        email.validateAndMail(ctx, prepareBadElement(\"to\"));\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception e) {\n    }\n    try {\n        email.validateAndMail(ctx, prepareBadElement(\"cc\"));\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception e) {\n    }\n    try {\n        email.validateAndMail(ctx, prepareBadElement(\"subject\"));\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception e) {\n    }\n    try {\n        email.validateAndMail(ctx, prepareBadElement(\"body\"));\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception e) {\n    }\n}",
        "ClassName": "TestEmailActionExecutor",
        "Label": 1,
        "MethodName": "testValidation",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    java.lang.String jobId = job.getId();\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(jobId, actionNum++, org.apache.oozie.client.CoordinatorAction.Status.SUSPENDED, \"coord-action-get.xml\", 0);\n    _testCoordActionsForCorrectColumnValues(jobId, action.getId(), action.getStatus(), action.getPending());\n}",
        "ClassName": "TestCoordJobGetActionsSuspendedJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionsSuspendedForColumnValues",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp app = parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-schema-valid-global-ext.xml\", -1), new org.apache.hadoop.conf.Configuration());\n    java.lang.String a = app.getNode(\"a\").getConf();\n    java.lang.String expectedA = \"<hive xmlns=\\\"uri:oozie:hive-action:0.2\\\">\\r\\n\" + (((((((((((((((((((((((\"  <prepare>\\r\\n\" + \"    <delete path=\\\"/tmp\\\" />\\r\\n\") + \"    <mkdir path=\\\"/tmp\\\" />\\r\\n\") + \"  </prepare>\\r\\n\") + \"  <configuration>\\r\\n\") + \"    <property>\\r\\n\") + \"      <name>c</name>\\r\\n\") + \"      <value>C</value>\\r\\n\") + \"    </property>\\r\\n\") + \"    <property>\\r\\n\") + \"      <name>a</name>\\r\\n\") + \"      <value>A</value>\\r\\n\") + \"    </property>\\r\\n\") + \"    <property>\\r\\n\") + \"      <name>b</name>\\r\\n\") + \"      <value>B</value>\\r\\n\") + \"    </property>\\r\\n\") + \"  </configuration>\\r\\n\") + \"  <script>script.q</script>\\r\\n\") + \"  <param>INPUT=/tmp/table</param>\\r\\n\") + \"  <param>OUTPUT=/tmp/hive</param>\\r\\n\") + \"  <job-tracker>foo</job-tracker>\\r\\n\") + \"  <name-node>bar</name-node>\\r\\n\") + \"</hive>\");\n    java.lang.System.out.println(\"AAA \" + expectedA.replaceAll(\" \", \"\"));\n    junit.framework.Assert.assertEquals(expectedA.replaceAll(\" \", \"\"), a.replaceAll(\" \", \"\"));\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testParserGlobalExtensionActions",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testNonTransientWithCoordActionUpdate(\"end.non-transient\", org.apache.oozie.client.WorkflowAction.Status.END_MANUAL, \"end\");\n    junit.framework.Assert.assertTrue(true);\n}",
        "ClassName": "TestActionErrors",
        "Label": 1,
        "MethodName": "testEndNonTransientWithCoordActionUpdate",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.TestCallableQueueService.EXEC_ORDER = new java.util.concurrent.atomic.AtomicLong();\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.CallableQueueService.CONF_THREADS, \"1\");\n    setSystemProperty(org.apache.oozie.service.CallableQueueService.CONF_CALLABLE_INTERRUPT_TYPES, \"testKill\");\n    new org.apache.oozie.service.Services().init();\n    org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    final org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand initialCallable = new org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand(\"initialKey\", \"initialType\", 2, 200, \"initialLockKey\");\n    final java.util.List<org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand> callables = new java.util.ArrayList<org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand>();\n    for (int i = 0; i < 10; i++) {\n        callables.add(new org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand(\"key\" + i, \"type\" + i, 1, 100, \"lockKey\"));\n    }\n    final org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand intCallable = new org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand(\"keyInt\", \"testKill\", 0, 200, \"lockKey\");\n    queueservice.queue(initialCallable);\n    for (int i = 0; i < 10; i++) {\n        queueservice.queue(callables.get(i));\n    }\n    queueservice.queue(intCallable);\n    waitFor(3000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            boolean retValue = (initialCallable.executed != 0) && (intCallable.executed != 0);\n            for (org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand c : callables) {\n                retValue = retValue && (c.executed != 0);\n            }\n            return retValue;\n        }\n    });\n    junit.framework.Assert.assertTrue(initialCallable.executed > 0);\n    junit.framework.Assert.assertTrue(intCallable.executed > 0);\n    junit.framework.Assert.assertTrue(intCallable.executed < callables.get(5).executed);\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testInterrupt",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertNotNull(org.apache.oozie.service.Services.get().get(org.apache.oozie.service.ActionService.class));\n}",
        "ClassName": "TestActionService",
        "Label": 1,
        "MethodName": "testService",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.client.OozieClient client = org.apache.oozie.local.LocalOozie.getCoordClient();\n    junit.framework.Assert.assertEquals(\"localoozie\", client.getOozieUrl());\n}",
        "ClassName": "TestLocalOozieClientCoord",
        "Label": 1,
        "MethodName": "testGetOozieUrl",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-ext-schema-valid.xml\", -1);\n    java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    final org.apache.oozie.DagEngine engine = new org.apache.oozie.DagEngine(\"u\", \"a\");\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\");\n    conf.setStrings(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.setStrings(org.apache.oozie.client.OozieClient.GROUP_NAME, org.apache.oozie.test.XTestCase.getTestGroup());\n    conf.set(org.apache.oozie.client.OozieClient.LOG_TOKEN, \"t\");\n    conf.set(\"external-status\", \"ok\");\n    conf.set(\"signal-value\", \"based_on_action_status\");\n    final java.lang.String jobId = engine.submitJob(conf, true);\n    waitFor(5000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return engine.getJob(jobId).getStatus() == org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED;\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, engine.getJob(jobId).getStatus());\n    new org.apache.oozie.command.PurgeXCommand(1, 1, 1, 10000).call();\n    sleep(1000);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(jobId);\n    org.apache.oozie.WorkflowJobBean wfBean = jpaService.execute(wfJobGetCmd);\n    java.util.Date endDate = new java.util.Date(java.lang.System.currentTimeMillis() - ((((2 * 24) * 60) * 60) * 1000));\n    wfBean.setEndTime(endDate);\n    org.apache.oozie.executor.jpa.WorkflowJobUpdateJPAExecutor wfUpdateCmd = new org.apache.oozie.executor.jpa.WorkflowJobUpdateJPAExecutor(wfBean);\n    jpaService.execute(wfUpdateCmd);\n    java.lang.Runnable purgeRunnable = new org.apache.oozie.service.PurgeService.PurgeRunnable(1, 1, 1, 100);\n    purgeRunnable.run();\n    waitFor(10000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            try {\n                engine.getJob(jobId).getStatus();\n            } catch (java.lang.Exception ex) {\n                return true;\n            }\n            return false;\n        }\n    });\n    try {\n        engine.getJob(jobId).getStatus();\n        junit.framework.Assert.fail(\"Job should be purged. Should fail.\");\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.assertEquals(ex.getClass(), org.apache.oozie.DagEngineException.class);\n        org.apache.oozie.DagEngineException dex = ((org.apache.oozie.DagEngineException) (ex));\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, dex.getErrorCode());\n    }\n}",
        "ClassName": "TestPurgeService",
        "Label": 1,
        "MethodName": "testPurgeServiceForWorkflow",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.EventHandlerService ehs = _testEventHandlerService();\n    org.apache.oozie.event.WorkflowJobEvent event = new org.apache.oozie.event.WorkflowJobEvent(\"jobid\", \"parentid\", org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.test.XTestCase.getTestUser(), \"myapp\", null, null);\n    ehs.queueEvent(event);\n    ehs.new EventWorker().run();\n    junit.framework.Assert.assertTrue(org.apache.oozie.service.TestEventHandlerService.output.toString().contains(\"Workflow Job event STARTED\"));\n    org.apache.oozie.service.TestEventHandlerService.output.setLength(0);\n    event.setStatus(org.apache.oozie.client.WorkflowJob.Status.SUSPENDED);\n    ehs.queueEvent(event);\n    ehs.new EventWorker().run();\n    junit.framework.Assert.assertTrue(org.apache.oozie.service.TestEventHandlerService.output.toString().contains(\"Workflow Job event SUSPEND\"));\n    org.apache.oozie.service.TestEventHandlerService.output.setLength(0);\n    event.setStatus(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED);\n    ehs.queueEvent(event);\n    ehs.new EventWorker().run();\n    junit.framework.Assert.assertTrue(org.apache.oozie.service.TestEventHandlerService.output.toString().contains(\"Workflow Job event SUCCESS\"));\n    org.apache.oozie.service.TestEventHandlerService.output.setLength(0);\n    event.setStatus(org.apache.oozie.client.WorkflowJob.Status.KILLED);\n    ehs.queueEvent(event);\n    ehs.new EventWorker().run();\n    junit.framework.Assert.assertTrue(org.apache.oozie.service.TestEventHandlerService.output.toString().contains(\"Workflow Job event FAILURE\"));\n    org.apache.oozie.service.TestEventHandlerService.output.setLength(0);\n    org.apache.oozie.event.CoordinatorActionEvent event2 = new org.apache.oozie.event.CoordinatorActionEvent(\"jobid\", \"parentid\", org.apache.oozie.client.CoordinatorAction.Status.WAITING, org.apache.oozie.test.XTestCase.getTestUser(), \"myapp\", null, null, null);\n    ehs.queueEvent(event2);\n    ehs.new EventWorker().run();\n    junit.framework.Assert.assertTrue(org.apache.oozie.service.TestEventHandlerService.output.toString().contains(\"Coord Action event WAITING\"));\n    org.apache.oozie.service.TestEventHandlerService.output.setLength(0);\n    event2.setStatus(org.apache.oozie.client.CoordinatorAction.Status.RUNNING);\n    ehs.queueEvent(event2);\n    ehs.new EventWorker().run();\n    junit.framework.Assert.assertTrue(org.apache.oozie.service.TestEventHandlerService.output.toString().contains(\"Coord Action event STARTED\"));\n    org.apache.oozie.service.TestEventHandlerService.output.setLength(0);\n    event2.setStatus(org.apache.oozie.client.CoordinatorAction.Status.SUSPENDED);\n    ehs.queueEvent(event2);\n    ehs.new EventWorker().run();\n    junit.framework.Assert.assertTrue(org.apache.oozie.service.TestEventHandlerService.output.toString().contains(\"Coord Action event SUSPEND\"));\n    org.apache.oozie.service.TestEventHandlerService.output.setLength(0);\n    event2.setStatus(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    ehs.queueEvent(event2);\n    ehs.new EventWorker().run();\n    junit.framework.Assert.assertTrue(org.apache.oozie.service.TestEventHandlerService.output.toString().contains(\"Coord Action event SUCCESS\"));\n    org.apache.oozie.service.TestEventHandlerService.output.setLength(0);\n    event2.setStatus(org.apache.oozie.client.CoordinatorAction.Status.TIMEDOUT);\n    ehs.queueEvent(event2);\n    ehs.new EventWorker().run();\n    junit.framework.Assert.assertTrue(org.apache.oozie.service.TestEventHandlerService.output.toString().contains(\"Coord Action event FAILURE\"));\n    org.apache.oozie.service.TestEventHandlerService.output.setLength(0);\n    event2.setStatus(org.apache.oozie.client.CoordinatorAction.Status.KILLED);\n    ehs.queueEvent(event2);\n    ehs.new EventWorker().run();\n    junit.framework.Assert.assertTrue(org.apache.oozie.service.TestEventHandlerService.output.toString().contains(\"Coord Action event FAILURE\"));\n    org.apache.oozie.service.TestEventHandlerService.output.setLength(0);\n}",
        "ClassName": "TestEventHandlerService",
        "Label": 1,
        "MethodName": "testEventListener",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            java.lang.String jobId = (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END;\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_LOG, wc.getJobLog(jobId));\n            org.apache.oozie.client.WorkflowAction wfAction = wc.getWorkflowActionInfo(jobId);\n            junit.framework.Assert.assertEquals(jobId, wfAction.getId());\n            org.apache.oozie.client.CoordinatorJob job = wc.getCoordJobInfo(jobId);\n            junit.framework.Assert.assertEquals(\"group\", job.getAcl());\n            junit.framework.Assert.assertEquals(\"SUCCEEDED\", job.getStatus().toString());\n            junit.framework.Assert.assertEquals(\"user\", job.getUser());\n            org.apache.oozie.client.BundleJob bundleJob = wc.getBundleJobInfo(jobId);\n            junit.framework.Assert.assertEquals(\"SUCCEEDED\", bundleJob.getStatus().toString());\n            junit.framework.Assert.assertEquals(\"user\", bundleJob.getUser());\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testJobInformation",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"coord\");\n    java.lang.String actionXml = getCoordActionXml(appPath, \"coord-action-get.xml\");\n    java.lang.String actionNomialTime = getActionNominalTime(actionXml);\n    _testGetActionForNominalTime(job.getId(), action.getId(), org.apache.oozie.util.DateUtils.parseDateOozieTZ(actionNomialTime));\n}",
        "ClassName": "TestCoordJobGetActionForNominalTimeJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    java.lang.String jobId = job.getId();\n    addRecordToCoordActionTable(jobId, actionNum++, org.apache.oozie.client.CoordinatorAction.Status.SUSPENDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(jobId, actionNum++, org.apache.oozie.client.CoordinatorAction.Status.SUSPENDED, \"coord-action-get.xml\", 1);\n    addRecordToCoordActionTable(jobId, actionNum++, org.apache.oozie.client.CoordinatorAction.Status.FAILED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(jobId, actionNum++, org.apache.oozie.client.CoordinatorAction.Status.KILLED, \"coord-action-get.xml\", 0);\n    _testCoordActionsSuspendedSize(jobId, 2);\n}",
        "ClassName": "TestCoordJobGetActionsSuspendedJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionsSuspendedForSize",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testConfigDefaults(false);\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testMissingConfigDefaults",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    _testGetRunningActionsCount(job.getId(), 0);\n    cleanUpDBTables();\n    job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.SUBMITTED, \"coord-action-get.xml\", 0);\n    _testGetRunningActionsCount(job.getId(), 1);\n    cleanUpDBTables();\n    job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    _testGetRunningActionsCount(job.getId(), 1);\n}",
        "ClassName": "TestCoordJobGetRunningActionsCountJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp app = parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-schema-valid-global.xml\", -1), new org.apache.hadoop.conf.Configuration());\n    java.lang.String e = app.getNode(\"e\").getConf();\n    java.lang.String expectedE = \"<pig xmlns=\\\"uri:oozie:workflow:0.4\\\">\\r\\n\" + ((((((((((((((((((((\"  <prepare>\\r\\n\" + \"    <delete path=\\\"/tmp\\\" />\\r\\n\") + \"    <mkdir path=\\\"/tmp\\\" />\\r\\n\") + \"  </prepare>\\r\\n\") + \"  <configuration>\\r\\n\") + \"    <property>\\r\\n\") + \"      <name>a</name>\\r\\n\") + \"      <value>A2</value>\\r\\n\") + \"    </property>\\r\\n\") + \"    <property>\\r\\n\") + \"      <name>b</name>\\r\\n\") + \"      <value>B</value>\\r\\n\") + \"    </property>\\r\\n\") + \"  </configuration>\\r\\n\") + \"  <script>/tmp</script>\\r\\n\") + \"  <param>x</param>\\r\\n\") + \"  <file>/tmp</file>\\r\\n\") + \"  <file>/tmp</file>\\r\\n\") + \"  <job-tracker>foo</job-tracker>\\r\\n\") + \"  <name-node>bar</name-node>\\r\\n\") + \"</pig>\");\n    junit.framework.Assert.assertEquals(expectedE.replaceAll(\" \", \"\"), e.replaceAll(\" \", \"\"));\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testParserGlobalLocalAlreadyExists",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String slaId = \"1\";\n    try {\n        _testInsertEvent(slaId);\n    } finally {\n    }\n}",
        "ClassName": "TestSLAStore",
        "Label": 1,
        "MethodName": "testSLAStore",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_STATES_WITHOUT_ERROR, \"false\");\n    services = new org.apache.oozie.service.Services();\n    setClassesToBeExcluded(services.getConf(), excludedServices);\n    services.init();\n    org.apache.oozie.BundleJobBean bundleJob = createBundleJob(org.apache.oozie.client.Job.Status.PAUSEDWITHERROR, true);\n    bundleJob.setPauseTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T01:00Z\"));\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.executor.jpa.BundleJobInsertJPAExecutor bundleInsertjpa = new org.apache.oozie.executor.jpa.BundleJobInsertJPAExecutor(bundleJob);\n    jpaService.execute(bundleInsertjpa);\n    final java.lang.String bundleId = bundleJob.getId();\n    addRecordToBundleActionTable(bundleId, \"action1\", 1, org.apache.oozie.client.Job.Status.PAUSED);\n    addRecordToBundleActionTable(bundleId, \"action2\", 1, org.apache.oozie.client.Job.Status.PAUSED);\n    addRecordToBundleActionTable(bundleId, \"action3\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean bundle = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n            return bundle.getStatus() == org.apache.oozie.client.Job.Status.PAUSED;\n        }\n    });\n    bundleJob = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSED, bundleJob.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testBundleStatusTransitServicePaused",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.sla.service.SLAService slas = org.apache.oozie.service.Services.get().get(org.apache.oozie.sla.service.SLAService.class);\n    junit.framework.Assert.assertNotNull(slas);\n    junit.framework.Assert.assertTrue(org.apache.oozie.sla.service.SLAService.isEnabled());\n    org.apache.oozie.service.EventHandlerService ehs = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.EventHandlerService.class);\n    org.apache.oozie.sla.SLARegistrationBean sla1 = _createSLARegistration(\"job-1\", org.apache.oozie.AppType.WORKFLOW_JOB);\n    sla1.setExpectedStart(new java.util.Date(java.lang.System.currentTimeMillis() - (((1 * 1) * 3600) * 1000)));\n    sla1.setExpectedEnd(new java.util.Date(java.lang.System.currentTimeMillis() + (((1 * 1) * 3600) * 1000)));\n    slas.addRegistrationEvent(sla1);\n    junit.framework.Assert.assertEquals(1, slas.getSLACalculator().size());\n    slas.runSLAWorker();\n    ehs.new EventWorker().run();\n    junit.framework.Assert.assertTrue(org.apache.oozie.sla.TestSLAService.output.toString().contains(\"Sla START - MISS!!!\"));\n    org.apache.oozie.sla.TestSLAService.output.setLength(0);\n    sla1 = _createSLARegistration(\"job-2\", org.apache.oozie.AppType.WORKFLOW_JOB);\n    sla1.setExpectedStart(new java.util.Date(java.lang.System.currentTimeMillis() + ((1 * 3600) * 1000)));\n    sla1.setExpectedEnd(new java.util.Date(java.lang.System.currentTimeMillis() + ((2 * 3600) * 1000)));\n    slas.addRegistrationEvent(sla1);\n    slas.addStatusEvent(sla1.getJobId(), org.apache.oozie.client.WorkflowJob.Status.RUNNING.name(), org.apache.oozie.client.event.JobEvent.EventStatus.STARTED, new java.util.Date(), new java.util.Date());\n    org.apache.oozie.sla.SLARegistrationBean sla2 = _createSLARegistration(\"job-3\", org.apache.oozie.AppType.COORDINATOR_JOB);\n    sla2.setExpectedStart(new java.util.Date(java.lang.System.currentTimeMillis() + ((1 * 3600) * 1000)));\n    sla2.setExpectedEnd(new java.util.Date(java.lang.System.currentTimeMillis() - ((2 * 3600) * 1000)));\n    slas.addRegistrationEvent(sla2);\n    junit.framework.Assert.assertEquals(3, slas.getSLACalculator().size());\n    slas.addStatusEvent(sla2.getJobId(), org.apache.oozie.client.Job.Status.SUCCEEDED.name(), org.apache.oozie.client.event.JobEvent.EventStatus.SUCCESS, new java.util.Date(), new java.util.Date());\n    slas.runSLAWorker();\n    ehs.new EventWorker().run();\n    junit.framework.Assert.assertTrue(org.apache.oozie.sla.TestSLAService.output.toString().contains(sla1.getJobId() + \" Sla START - MET!!!\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.sla.TestSLAService.output.toString().contains(sla2.getJobId() + \" Sla END - MISS!!!\"));\n    org.apache.oozie.sla.TestSLAService.output.setLength(0);\n    sla2 = _createSLARegistration(\"job-4\", org.apache.oozie.AppType.WORKFLOW_JOB);\n    sla2.setExpectedStart(new java.util.Date(java.lang.System.currentTimeMillis() - ((2 * 3600) * 1000)));\n    sla2.setExpectedEnd(new java.util.Date(java.lang.System.currentTimeMillis() - ((1 * 3600) * 1000)));\n    slas.addRegistrationEvent(sla2);\n    junit.framework.Assert.assertEquals(3, slas.getSLACalculator().size());\n    slas.runSLAWorker();\n    junit.framework.Assert.assertEquals(2, ehs.getEventQueue().size());\n    ehs.new EventWorker().run();\n    java.lang.System.out.println(org.apache.oozie.sla.TestSLAService.output);\n    junit.framework.Assert.assertTrue(org.apache.oozie.sla.TestSLAService.output.toString().contains(sla2.getJobId() + \" Sla START - MISS!!!\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.sla.TestSLAService.output.toString().contains(sla2.getJobId() + \" Sla END - MISS!!!\"));\n    org.apache.oozie.sla.TestSLAService.output.setLength(0);\n    sla1 = _createSLARegistration(\"action-1\", org.apache.oozie.AppType.COORDINATOR_ACTION);\n    sla1.setExpectedStart(new java.util.Date(java.lang.System.currentTimeMillis() + ((1 * 3600) * 1000)));\n    sla1.setExpectedEnd(new java.util.Date(java.lang.System.currentTimeMillis() + ((2 * 3600) * 1000)));\n    slas.addRegistrationEvent(sla1);\n    junit.framework.Assert.assertEquals(3, slas.getSLACalculator().size());\n    slas.addStatusEvent(sla1.getJobId(), org.apache.oozie.client.CoordinatorAction.Status.RUNNING.name(), org.apache.oozie.client.event.JobEvent.EventStatus.STARTED, new java.util.Date(), new java.util.Date());\n    slas.addStatusEvent(sla1.getJobId(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED.name(), org.apache.oozie.client.event.JobEvent.EventStatus.SUCCESS, new java.util.Date(), new java.util.Date());\n    slas.runSLAWorker();\n    junit.framework.Assert.assertEquals(3, ehs.getEventQueue().size());\n    ehs.new EventWorker().run();\n    java.lang.System.out.println(org.apache.oozie.sla.TestSLAService.output);\n    junit.framework.Assert.assertTrue(org.apache.oozie.sla.TestSLAService.output.toString().contains(sla1.getJobId() + \" Sla START - MET!!!\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.sla.TestSLAService.output.toString().contains(sla1.getJobId() + \" Sla END - MET!!!\"));\n}",
        "ClassName": "TestSLAService",
        "Label": 1,
        "MethodName": "testUpdateSLA",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testConfigDefaults(true);\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testAvailConfigDefaults",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path root = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"root\");\n    org.apache.hadoop.fs.Path jar = new org.apache.hadoop.fs.Path(\"jar.jar\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(getAppPath(), jar)).close();\n    org.apache.hadoop.fs.Path rootJar = new org.apache.hadoop.fs.Path(root, \"rootJar.jar\");\n    getFileSystem().create(rootJar).close();\n    org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(\"file\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(getAppPath(), file)).close();\n    org.apache.hadoop.fs.Path rootFile = new org.apache.hadoop.fs.Path(root, \"rootFile\");\n    getFileSystem().create(rootFile).close();\n    org.apache.hadoop.fs.Path so = new org.apache.hadoop.fs.Path(\"soFile.so\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(getAppPath(), so)).close();\n    org.apache.hadoop.fs.Path rootSo = new org.apache.hadoop.fs.Path(root, \"rootSoFile.so\");\n    getFileSystem().create(rootSo).close();\n    org.apache.hadoop.fs.Path so1 = new org.apache.hadoop.fs.Path(\"soFile.so.1\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(getAppPath(), so1)).close();\n    org.apache.hadoop.fs.Path rootSo1 = new org.apache.hadoop.fs.Path(root, \"rootSoFile.so.1\");\n    getFileSystem().create(rootSo1).close();\n    org.apache.hadoop.fs.Path archive = new org.apache.hadoop.fs.Path(\"archive.tar\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(getAppPath(), archive)).close();\n    org.apache.hadoop.fs.Path rootArchive = new org.apache.hadoop.fs.Path(root, \"rootArchive.tar\");\n    getFileSystem().create(rootArchive).close();\n    java.lang.String actionXml = (((((((((((((((((((((((((((((\"<map-reduce>\" + \"      <job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"      <name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"      <main-class>CLASS</main-class>\") + \"      <file>\") + jar.toString()) + \",\") + rootJar.toString()) + \",\") + file.toString()) + \", \") + rootFile.toString()) + \"  ,\") + so.toString()) + \",\") + rootSo.toString()) + \",\") + so1.toString()) + \",\") + rootSo1.toString()) + \"</file>\\n\") + \"      <archive>\") + archive.toString()) + \", \") + rootArchive.toString()) + \" </archive>\\n\") + \"</map-reduce>\";\n    org.jdom.Element eActionXml = org.apache.oozie.util.XmlUtils.parseXml(actionXml);\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(\"map-reduce\", actionXml);\n    org.apache.hadoop.fs.Path appPath = getAppPath();\n    org.apache.oozie.action.hadoop.MapReduceActionExecutor ae = new org.apache.oozie.action.hadoop.MapReduceActionExecutor();\n    org.apache.hadoop.conf.Configuration jobConf = ae.createBaseHadoopConf(context, eActionXml);\n    ae.setupActionConf(jobConf, context, eActionXml, appPath);\n    ae.setLibFilesArchives(context, eActionXml, appPath, jobConf);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.filecache.DistributedCache.getSymlink(jobConf));\n    org.apache.hadoop.fs.Path[] filesInClasspath = org.apache.hadoop.filecache.DistributedCache.getFileClassPaths(jobConf);\n    for (org.apache.hadoop.fs.Path p : new org.apache.hadoop.fs.Path[]{ new org.apache.hadoop.fs.Path(getAppPath(), jar), rootJar }) {\n        boolean found = false;\n        for (org.apache.hadoop.fs.Path c : filesInClasspath) {\n            if ((!found) && p.toUri().getPath().equals(c.toUri().getPath())) {\n                found = true;\n            }\n        }\n        junit.framework.Assert.assertTrue((\"file \" + p.toUri().getPath()) + \" not found in classpath\", found);\n    }\n    for (org.apache.hadoop.fs.Path p : new org.apache.hadoop.fs.Path[]{ new org.apache.hadoop.fs.Path(getAppPath(), file), rootFile, new org.apache.hadoop.fs.Path(getAppPath(), so), rootSo, new org.apache.hadoop.fs.Path(getAppPath(), so1), rootSo1 }) {\n        boolean found = false;\n        for (org.apache.hadoop.fs.Path c : filesInClasspath) {\n            if ((!found) && p.toUri().getPath().equals(c.toUri().getPath())) {\n                found = true;\n            }\n        }\n        junit.framework.Assert.assertFalse((\"file \" + p.toUri().getPath()) + \" found in classpath\", found);\n    }\n    java.net.URI[] filesInCache = org.apache.hadoop.filecache.DistributedCache.getCacheFiles(jobConf);\n    for (org.apache.hadoop.fs.Path p : new org.apache.hadoop.fs.Path[]{ new org.apache.hadoop.fs.Path(getAppPath(), jar), rootJar, new org.apache.hadoop.fs.Path(getAppPath(), file), rootFile, new org.apache.hadoop.fs.Path(getAppPath(), so), rootSo, new org.apache.hadoop.fs.Path(getAppPath(), so1), rootSo1 }) {\n        boolean found = false;\n        for (java.net.URI c : filesInCache) {\n            if ((!found) && p.toUri().getPath().equals(c.getPath())) {\n                found = true;\n            }\n        }\n        junit.framework.Assert.assertTrue((\"file \" + p.toUri().getPath()) + \" not found in cache\", found);\n    }\n    java.net.URI[] archivesInCache = org.apache.hadoop.filecache.DistributedCache.getCacheArchives(jobConf);\n    for (org.apache.hadoop.fs.Path p : new org.apache.hadoop.fs.Path[]{ new org.apache.hadoop.fs.Path(getAppPath(), archive), rootArchive }) {\n        boolean found = false;\n        for (java.net.URI c : archivesInCache) {\n            if ((!found) && p.toUri().getPath().equals(c.getPath())) {\n                found = true;\n            }\n        }\n        junit.framework.Assert.assertTrue((\"archive \" + p.toUri().getPath()) + \" not found in cache\", found);\n    }\n}",
        "ClassName": "TestMapReduceActionExecutor",
        "Label": 1,
        "MethodName": "testCommaSeparatedFilesAndArchives",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.client.OozieClient client = org.apache.oozie.local.LocalOozie.getCoordClient();\n    java.util.List<org.apache.oozie.client.CoordinatorJob> list0 = client.getCoordJobsInfo(\"\", 1, 100);\n    junit.framework.Assert.assertEquals(0, list0.size());\n    java.util.Properties conf = client.createConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = \"<coordinator-app name=\\\"NAME\\\" frequency=\\\"${coord:minutes(20)}\\\" \" + (((((((((((((((\"start=\\\"2009-02-01T01:00Z\\\" end=\\\"2009-02-03T23:59Z\\\" timezone=\\\"UTC\\\" \" + \"xmlns=\\\"uri:oozie:coordinator:0.1\\\"> <controls> <timeout>10</timeout> <concurrency>1</concurrency> \") + \"<execution>LIFO</execution> </controls> <datasets> \") + \"<dataset name=\\\"a\\\" frequency=\\\"${coord:minutes(20)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"<dataset name=\\\"local_a\\\" frequency=\\\"${coord:minutes(20)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"</datasets> <input-events> \") + \"<data-in name=\\\"A\\\" dataset=\\\"a\\\"> <instance>${coord:latest(0)}</instance> </data-in>  \") + \"</input-events> \") + \"<output-events> <data-out name=\\\"LOCAL_A\\\" dataset=\\\"local_a\\\"> \") + \"<instance>${coord:current(-1)}</instance> </data-out> </output-events> <action> <workflow> \") + \"<app-path>hdfs:///tmp/workflows/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>${coord:dataIn('A')}</value> </property> \") + \"<property> <name>inputB</name> <value>${coord:dataOut('LOCAL_A')}</value> \") + \"</property></configuration> </workflow> </action> </coordinator-app>\");\n    writeToFile(appXml, appPath);\n    conf.setProperty(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    java.lang.String jobId0 = client.submit(conf);\n    client.kill(jobId0);\n    java.lang.String jobId = client.run(conf);\n    client.suspend(jobId);\n    client.resume(jobId);\n    client.kill(jobId);\n    org.apache.oozie.client.CoordinatorJob job = client.getCoordJobInfo(jobId);\n    java.lang.String appName = job.getAppName();\n    junit.framework.Assert.assertEquals(\"NAME\", appName);\n    java.util.List<org.apache.oozie.client.CoordinatorJob> list = client.getCoordJobsInfo(\"\", 1, 5);\n    junit.framework.Assert.assertEquals(2, list.size());\n}",
        "ClassName": "TestLocalOozieClientCoord",
        "Label": 1,
        "MethodName": "testJobMethods",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.List<java.lang.String> decTrans = new java.util.ArrayList<java.lang.String>();\n    decTrans.add(\"one\");\n    decTrans.add(\"two\");\n    decTrans.add(\"three\");\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"testWf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"d\")).addNode(new org.apache.oozie.workflow.lite.DecisionNodeDef(\"d\", \"\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestDecisionNodeHandler.class, decTrans)).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"one\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"end\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"two\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"end\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"three\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"end\" }))).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"abcde\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, job.getStatus());\n    job.signal(\"/\", \"one\");\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, job.getStatus());\n    junit.framework.Assert.assertEquals(2, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.size());\n    junit.framework.Assert.assertEquals(2, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.exits.size());\n    junit.framework.Assert.assertTrue(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.containsKey(\"one\"));\n    junit.framework.Assert.assertTrue(!org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.containsKey(\"two\"));\n    junit.framework.Assert.assertTrue(!org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.containsKey(\"three\"));\n    org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.clear();\n    job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"abcde\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, job.getStatus());\n    job.signal(\"/\", \"two\");\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, job.getStatus());\n    junit.framework.Assert.assertTrue(!org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.containsKey(\"one\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.containsKey(\"two\"));\n    junit.framework.Assert.assertTrue(!org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.containsKey(\"three\"));\n    org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.clear();\n    job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"abcde\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, job.getStatus());\n    job.signal(\"/\", \"three\");\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, job.getStatus());\n    junit.framework.Assert.assertTrue(!org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.containsKey(\"one\"));\n    junit.framework.Assert.assertTrue(!org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.containsKey(\"two\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.containsKey(\"three\"));\n    org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.clear();\n    job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"abcde\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, job.getStatus());\n    try {\n        job.signal(\"/\", \"bla\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception e) {\n    }\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.FAILED, job.getStatus());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testDecision",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path newDir = new org.apache.hadoop.fs.Path(\"test/oozietests/testDelete/delete\");\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    if (fs.exists(newDir)) {\n        fs.delete(newDir, true);\n    }\n    java.lang.String prepareXML = (((\"<prepare>\" + \"<delete path='\") + newDir) + \"'/>\") + \"</prepare>\";\n    org.w3c.dom.Document doc = org.apache.oozie.action.hadoop.PrepareActionsDriver.getDocumentFromXML(prepareXML);\n    org.w3c.dom.Node n = doc.getDocumentElement().getChildNodes().item(0);\n    try {\n        org.apache.hadoop.mapred.JobConf conf = createJobConf();\n        org.apache.oozie.action.hadoop.LauncherMapper.setupLauncherURIHandlerConf(conf);\n        org.apache.oozie.action.hadoop.PrepareActionsDriver.doOperations(prepareXML, conf);\n        junit.framework.Assert.fail(\"Expected to catch an exception but did not encounter any\");\n    } catch (org.apache.oozie.action.hadoop.LauncherException le) {\n        org.apache.hadoop.fs.Path path = new org.apache.hadoop.fs.Path(n.getAttributes().getNamedItem(\"path\").getNodeValue().trim());\n        junit.framework.Assert.assertEquals(\"Scheme not present in uri \" + path, le.getMessage());\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail(\"Expected a LauncherException but received an Exception\");\n    }\n}",
        "ClassName": "TestFSPrepareActions",
        "Label": 1,
        "MethodName": "testForNullScheme",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    javax.xml.validation.Schema schema = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.SchemaService.class).getSchema(org.apache.oozie.service.SchemaService.SchemaName.WORKFLOW);\n    final int numThreads = 20;\n    final org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.RCThread[] threads = new org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.RCThread[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n        org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(schema, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n        threads[i] = new org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.RCThread(parser);\n    }\n    for (int i = 0; i < numThreads; i++) {\n        threads[i].start();\n    }\n    waitFor(120 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            boolean allDone = true;\n            for (int i = 0; i < numThreads; i++) {\n                allDone = allDone & threads[i].done;\n            }\n            return allDone;\n        }\n    });\n    boolean error = false;\n    for (int i = 0; i < numThreads; i++) {\n        error = error || threads[i].error;\n    }\n    junit.framework.Assert.assertFalse(error);\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testRaceConditionWithOldXerces",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-schema-valid-global-ext-no-global.xml\", -1), new org.apache.hadoop.conf.Configuration());\n    try {\n        parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-schema-invalid-global-ext-no-global.xml\", -1), new org.apache.hadoop.conf.Configuration());\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0701, ex.getErrorCode());\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testParserGlobalExtensionActionsNoGlobal",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String testJobId = (\"0000001-\" + new java.util.Date().getTime()) + \"-testCoordKill-C\";\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, true);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.READY, \"coord-action-get.xml\", 0);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action.getId());\n    job = jpaService.execute(coordJobGetCmd);\n    action = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.SUCCEEDED);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.READY);\n    try {\n        new org.apache.oozie.command.coord.CoordKillXCommand(testJobId).call();\n        junit.framework.Assert.fail(\"Job doesn't exist. Should fail.\");\n    } catch (org.apache.oozie.command.CommandException ce) {\n    }\n}",
        "ClassName": "TestCoordKillXCommand",
        "Label": 1,
        "MethodName": "testCoordKillFailed",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTableForWaiting(\"coord-job-for-action-input-check.xml\", org.apache.oozie.client.Job.Status.RUNNING, false, true);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTableForWaiting(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-for-action-input-check.xml\");\n    createDir(getTestCaseDir() + \"/2009/29/\");\n    createDir(getTestCaseDir() + \"/2009/22/\");\n    createDir(getTestCaseDir() + \"/2009/15/\");\n    createDir(getTestCaseDir() + \"/2009/08/\");\n    sleep(3000);\n    java.lang.Runnable recoveryRunnable = new org.apache.oozie.service.RecoveryService.RecoveryRunnable(0, 1, 1);\n    recoveryRunnable.run();\n    final java.lang.String actionId = action.getId();\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    waitFor(10000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(actionId);\n            org.apache.oozie.CoordinatorActionBean newAction = jpaService.execute(coordGetCmd);\n            return newAction.getStatus() != org.apache.oozie.client.CoordinatorAction.Status.WAITING;\n        }\n    });\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(actionId);\n    action = jpaService.execute(coordGetCmd);\n    if (action.getStatus() == org.apache.oozie.client.CoordinatorAction.Status.WAITING) {\n        junit.framework.Assert.fail(\"recovery waiting coord action failed, action is WAITING\");\n    }\n}",
        "ClassName": "TestRecoveryService",
        "Label": 1,
        "MethodName": "testCoordActionRecoveryServiceForWaiting",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-start\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_START, org.apache.oozie.servlet.MockDagEngineService.did);\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockDagEngineService.started.get(1));\n            args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-start\", org.apache.oozie.servlet.MockDagEngineService.JOB_ID + (org.apache.oozie.servlet.MockDagEngineService.workflows.size() + 1) };\n            junit.framework.Assert.assertEquals(-1, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testStart",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v0/jobs\", org.apache.oozie.servlet.TestJobsServlet.V0JobsServletWithDefUser.class, org.apache.oozie.servlet.TestJobsServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            java.lang.String appPath = getFsTestCaseDir().toString() + \"/app\";\n            org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n            org.apache.hadoop.fs.Path jobXmlPath = new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\");\n            fs.create(jobXmlPath);\n            org.apache.hadoop.conf.Configuration jobConf = new org.apache.oozie.util.XConfiguration();\n            jobConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n            jobConf.set(org.apache.oozie.client.OozieClient.APP_PATH, appPath);\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            java.net.URL url = createURL(\"\", params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"content-type\", org.apache.oozie.client.rest.RestConstants.XML_CONTENT_TYPE);\n            conn.setDoOutput(true);\n            jobConf.writeXml(conn.getOutputStream());\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_CREATED, conn.getResponseCode());\n            junit.framework.Assert.assertEquals(org.apache.oozie.test.XTestCase.getTestUser2(), org.apache.oozie.servlet.MockDagEngineService.user);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestJobsServlet",
        "Label": 1,
        "MethodName": "testDiffUser",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/job/*\", org.apache.oozie.servlet.V1JobServlet.class, org.apache.oozie.servlet.TestV1JobServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_SHOW_GRAPH);\n            java.net.URL url = createURL((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + 1) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.PNG_IMAGE_CONTENT_TYPE));\n            org.apache.oozie.servlet.MockCoordinatorEngineService.reset();\n            params.clear();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_SHOW_GRAPH);\n            url = createURL(org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + 1, params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode());\n            junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0306.name(), conn.getHeaderField(org.apache.oozie.client.rest.RestConstants.OOZIE_ERROR_CODE));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1JobServlet",
        "Label": 1,
        "MethodName": "testGraph",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.servlet.MyJsonRestServlet.MULTIPLE_RESOURCES, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"/resource1\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"POST\", \"/resource1\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"GET\", \"/resource2\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"POST\", \"/resource2\", \"\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestJsonRestServlet",
        "Label": 1,
        "MethodName": "testMultipleResources",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String actionXml = \"<workflow-app xmlns='uri:oozie:workflow:0.2.5' name='pig-wf'>\" + (((((((((((((((((((((((((((\"<credentials>\" + \"<credential name='abcname' type='abc'>\") + \"<property>\") + \"<name>property1</name>\") + \"<value>value1</value>\") + \"</property>\") + \"<property>\") + \"<name>property2</name>\") + \"<value>value2</value>\") + \"</property>\") + \"<property>\") + \"<name>${property3}</name>\") + \"<value>${value3}</value>\") + \"</property>\") + \"</credential>\") + \"</credentials>\") + \"<start to='pig1' />\") + \"<action name='pig1' cred='abcname'>\") + \"<pig>\") + \"</pig>\") + \"<ok to='end' />\") + \"<error to='fail' />\") + \"</action>\") + \"<kill name='fail'>\") + \"<message>Pig failed, error message[${wf:errorMessage(wf:lastErrorNode())}]</message>\") + \"</kill>\") + \"<end name='end' />\") + \"</workflow-app>\");\n    org.apache.oozie.action.hadoop.JavaActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    org.apache.oozie.WorkflowJobBean wfBean = addRecordToWfJobTable(\"test1\", actionXml);\n    org.apache.oozie.WorkflowActionBean action = ((org.apache.oozie.WorkflowActionBean) (wfBean.getActions().get(0)));\n    action.setType(ae.getType());\n    action.setCred(\"abcname\");\n    java.lang.String actionxml = \"<pig>\" + ((((((((((((((((((\"<job-tracker>${jobTracker}</job-tracker>\" + \"<name-node>${nameNode}</name-node>\") + \"<prepare>\") + \"<delete path='outputdir' />\") + \"</prepare>\") + \"<configuration>\") + \"<property>\") + \"<name>mapred.compress.map.output</name>\") + \"<value>true</value>\") + \"</property>\") + \"<property>\") + \"<name>mapred.job.queue.name</name>\") + \"<value>${queueName}</value>\") + \"</property>\") + \"</configuration>\") + \"<script>org/apache/oozie/examples/pig/id.pig</script>\") + \"<param>INPUT=${inputDir}</param>\") + \"<param>OUTPUT=${outputDir}/pig-output</param>\") + \"</pig>\");\n    action.setConf(actionxml);\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(wfBean, action);\n    org.jdom.Element actionXmlconf = org.apache.oozie.util.XmlUtils.parseXml(action.getConf());\n    org.apache.hadoop.conf.Configuration actionConf = ae.createBaseHadoopConf(context, actionXmlconf);\n    java.util.HashMap<java.lang.String, org.apache.oozie.action.hadoop.CredentialsProperties> credProperties = ae.setCredentialPropertyToActionConf(context, action, actionConf);\n    org.apache.oozie.action.hadoop.CredentialsProperties prop = credProperties.get(\"abcname\");\n    junit.framework.Assert.assertEquals(\"value1\", prop.getProperties().get(\"property1\"));\n    junit.framework.Assert.assertEquals(\"value2\", prop.getProperties().get(\"property2\"));\n    junit.framework.Assert.assertEquals(\"val3\", prop.getProperties().get(\"prop3\"));\n    org.apache.hadoop.conf.Configuration conf = org.apache.oozie.service.Services.get().getConf();\n    conf.set(\"oozie.credentials.credentialclasses\", \"abc=org.apache.oozie.action.hadoop.InsertTestToken\");\n    org.apache.hadoop.mapred.JobConf credentialsConf = new org.apache.hadoop.mapred.JobConf();\n    org.apache.hadoop.conf.Configuration launcherConf = ae.createBaseHadoopConf(context, actionXmlconf);\n    org.apache.oozie.util.XConfiguration.copy(launcherConf, credentialsConf);\n    ae.setCredentialTokens(credentialsConf, context, action, credProperties);\n    org.apache.hadoop.security.token.Token<? extends org.apache.hadoop.security.token.TokenIdentifier> tk = credentialsConf.getCredentials().getToken(new org.apache.hadoop.io.Text(\"ABC Token\"));\n    junit.framework.Assert.assertNotNull(tk);\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testCredentialsModule",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertNotNull(org.apache.oozie.service.Services.get().get(org.apache.oozie.service.InstrumentationService.class));\n    junit.framework.Assert.assertNotNull(org.apache.oozie.service.Services.get().get(org.apache.oozie.service.InstrumentationService.class).get());\n}",
        "ClassName": "TestInstrumentationService",
        "Label": 1,
        "MethodName": "testInstrumentation",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().getConf().setBoolean(org.apache.oozie.coord.CoordELFunctions.LATEST_EL_USE_CURRENT_TIME, true);\n    java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-TestCoordActionInputCheckXCommand-C\";\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-15T23:59\" + TZ);\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-16T23:59\" + TZ);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(jobId, startTime, endTime, \"latest\");\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.CoordinatorActionBean action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor(job.getId() + \"@1\"));\n    junit.framework.Assert.assertEquals(org.apache.oozie.command.coord.CoordCommandUtils.RESOLVED_UNRESOLVED_SEPARATOR + \"${coord:latestRange(-3,0)}\", action.getMissingDependencies());\n    java.lang.String actionXML = action.getActionXml();\n    java.lang.String actionCreationTime = \"2009-02-15T01:00\" + TZ;\n    actionXML = actionXML.replaceAll(\"action-actual-time=\\\".*\\\">\", (\"action-actual-time=\\\"\" + actionCreationTime) + \"\\\">\");\n    action.setActionXml(actionXML);\n    action.setCreatedTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(actionCreationTime));\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionUpdateForInputCheckJPAExecutor(action));\n    action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor(job.getId() + \"@1\"));\n    junit.framework.Assert.assertTrue(action.getActionXml().contains(\"action-actual-time=\\\"2009-02-15T01:00\"));\n    createDir(getTestCaseDir() + \"/2009/03/05/\");\n    createDir(getTestCaseDir() + \"/2009/02/19/\");\n    createDir(getTestCaseDir() + \"/2009/02/12/\");\n    createDir(getTestCaseDir() + \"/2009/02/05/\");\n    createDir(getTestCaseDir() + \"/2009/01/22/\");\n    createDir(getTestCaseDir() + \"/2009/01/08/\");\n    new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(job.getId() + \"@1\", job.getId()).call();\n    java.lang.Thread.sleep(1000);\n    action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(job.getId() + \"@1\"));\n    actionXML = action.getActionXml();\n    junit.framework.Assert.assertEquals(\"\", action.getMissingDependencies());\n    java.lang.String resolvedList = (((((((((((((\"file://\" + getTestCaseDir()) + \"/2009/03/05\") + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"file://\") + getTestCaseDir()) + \"/2009/02/19\") + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"file://\") + getTestCaseDir()) + \"/2009/02/12\") + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"file://\") + getTestCaseDir()) + \"/2009/02/05\";\n    junit.framework.Assert.assertEquals(resolvedList, actionXML.substring(actionXML.indexOf(\"<uris>\") + 6, actionXML.indexOf(\"</uris>\")));\n}",
        "ClassName": "TestCoordActionInputCheckXCommand",
        "Label": 1,
        "MethodName": "testActionInputCheckLatestCurrentTime",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path inputDir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"input\");\n    org.apache.hadoop.fs.Path outputDir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"output\");\n    java.io.Writer w = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(inputDir, \"data.txt\")));\n    w.write(\"dummy\\n\");\n    w.write(\"dummy\\n\");\n    w.close();\n    java.lang.String actionXml = (((((((\"<map-reduce>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + getOozieActionExternalStatsWriteProperty(inputDir.toString(), outputDir.toString(), \"false\").toXmlString(false)) + \"</map-reduce>\";\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(\"map-reduce\", actionXml);\n    final org.apache.hadoop.mapred.RunningJob launcherJob = submitAction(context);\n    java.lang.String launcherId = context.getAction().getExternalId();\n    waitFor(120 * 2000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return launcherJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(launcherJob.isSuccessful());\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.hasIdSwap(launcherJob));\n    org.apache.oozie.action.hadoop.MapReduceActionExecutor ae = new org.apache.oozie.action.hadoop.MapReduceActionExecutor();\n    ae.check(context, context.getAction());\n    junit.framework.Assert.assertTrue(launcherId.equals(context.getAction().getExternalId()));\n    org.apache.hadoop.mapred.JobConf conf = ae.createBaseHadoopConf(context, org.apache.oozie.util.XmlUtils.parseXml(actionXml));\n    java.lang.String user = conf.get(\"user.name\");\n    java.lang.String group = conf.get(\"group.name\");\n    org.apache.hadoop.mapred.JobClient jobClient = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HadoopAccessorService.class).createJobClient(user, conf);\n    final org.apache.hadoop.mapred.RunningJob mrJob = jobClient.getJob(org.apache.hadoop.mapred.JobID.forName(context.getAction().getExternalChildIDs()));\n    waitFor(120 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return mrJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(mrJob.isSuccessful());\n    ae.check(context, context.getAction());\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", context.getAction().getExternalStatus());\n    junit.framework.Assert.assertNull(context.getAction().getData());\n    ae.end(context, context.getAction());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, context.getAction().getStatus());\n    junit.framework.Assert.assertNull(context.getExecutionStats());\n    junit.framework.Assert.assertNotNull(context.getExternalChildIDs());\n    junit.framework.Assert.assertNotNull(context.getVar(\"hadoop.counters\"));\n    java.lang.String counters = context.getVar(\"hadoop.counters\");\n    junit.framework.Assert.assertTrue(counters.contains(\"Counter\"));\n}",
        "ClassName": "TestMapReduceActionExecutor",
        "Label": 1,
        "MethodName": "testSetExecutionStats_when_user_has_specified_stats_write_FALSE",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String dataEvntXML = \"<data-in name=\\\"A\\\" dataset=\\\"a\\\"><uris>file:///tmp/coord/US/2009/1/30|file:///tmp/coord/US/2009/1/31</uris>\";\n    dataEvntXML += \"<dataset name=\\\"a\\\" frequency=\\\"1440\\\" initial-instance=\\\"2009-01-01T00:00Z\\\" freq_timeunit=\\\"MINUTE\\\" timezone=\\\"UTC\\\" end_of_duration=\\\"NONE\\\">\";\n    dataEvntXML += \"<uri-template>file:///tmp/coord/US/${YEAR}/${MONTH}/${DAY}</uri-template></dataset></data-in>\";\n    org.jdom.Element event = org.apache.oozie.util.XmlUtils.parseXml(dataEvntXML);\n    org.apache.oozie.coord.SyncCoordAction appInst = new org.apache.oozie.coord.SyncCoordAction();\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-09-08T01:00Z\"));\n    appInst.setActualTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2010-10-01T00:00Z\"));\n    appInst.setTimeUnit(org.apache.oozie.coord.TimeUnit.MINUTE);\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(getConfString()));\n    org.apache.oozie.util.ELEvaluator eval = org.apache.oozie.coord.CoordELEvaluator.createInstancesELEvaluator(event, appInst, conf);\n    java.lang.String expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"2009-09-08T00:00Z\", eval.evaluate(expr, java.lang.String.class));\n}",
        "ClassName": "TestCoordELEvaluator",
        "Label": 1,
        "MethodName": "testCreateInstancesELEvaluator",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testInsertWF();\n    _testGetWF();\n    _testUpdateWF();\n    _testGetStatusCount();\n    _testGetWFIDWithExtID();\n    _testSaveAction();\n    _testLoadAction();\n    _testUpdateAction();\n    _testGetActionsForWF();\n    java.lang.System.out.println(\"after _testGetActions()\");\n    _testGetActionForWFFailure();\n    java.lang.System.out.println(\"after _testGetActionForWFFailure()\");\n    _testGetPendingActions();\n    java.lang.System.out.println(\"after _testPendingAction()\");\n    _testGetWFInfo();\n    java.lang.System.out.println(\"after _testWFInfo()\");\n    java.lang.System.out.println(\"after _testGetWFInfos()\");\n    _testDeleteAction();\n    _testPurge();\n}",
        "ClassName": "TestDBWorkflowStore",
        "Label": 1,
        "MethodName": "testDBWorkflowStore",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.ParamChecker.notEmptyElements(new java.util.ArrayList<java.lang.String>(), \"name\");\n    org.apache.oozie.util.ParamChecker.notEmptyElements(java.util.Arrays.asList(\"a\"), \"name\");\n    try {\n        org.apache.oozie.util.ParamChecker.notEmptyElements(null, \"name\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n    }\n    try {\n        org.apache.oozie.util.ParamChecker.notEmptyElements(java.util.Arrays.asList(\"a\", null), \"name\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n    }\n}",
        "ClassName": "TestParamChecker",
        "Label": 1,
        "MethodName": "testNotEmptyElements",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String jobId = (\"00000-\" + new java.util.Date().getTime()) + \"-TestCoordJobsToBeMaterializedJPAExecutor-C\";\n    insertJob(jobId, org.apache.oozie.client.Job.Status.PREP);\n    _testCoordJobsToBeMaterialized();\n}",
        "ClassName": "TestCoordJobsToBeMaterializedJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordJobsToBeMaterializedCommand",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-action-start\");\n    java.lang.String expr = \"${coord:dataOutPartitionValue('ABC','datastamp')}\";\n    eval.setVariable(\".dataout.ABC\", \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=20120230;region=US\");\n    eval.setVariable(\".dataout.ABC.unresolved\", java.lang.Boolean.FALSE);\n    java.lang.String res = org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr);\n    junit.framework.Assert.assertTrue(res.equals(\"20120230\"));\n    expr = \"${coord:dataOutPartitionValue('ABC','region')}\";\n    res = org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr);\n    junit.framework.Assert.assertTrue(res.equals(\"US\"));\n}",
        "ClassName": "TestHCatELFunctions",
        "Label": 1,
        "MethodName": "testDataOutPartitionValue",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    org.apache.oozie.service.Services services = super.setupServicesForHCatalog();\n    services.init();\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T010:00Z\");\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-11T10:00Z\");\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTableForWaiting(\"coord-job-for-matd-hcat.xml\", org.apache.oozie.client.Job.Status.RUNNING, startTime, endTime, false, false, 0);\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    org.apache.oozie.CoordinatorActionBean actionBean = getCoordAction(job.getId() + \"@1\");\n    junit.framework.Assert.assertEquals((\"file://dummyhdfs/2009/05/_SUCCESS\" + org.apache.oozie.command.coord.CoordCommandUtils.RESOLVED_UNRESOLVED_SEPARATOR) + \"${coord:latestRange(-1,0)}\", actionBean.getMissingDependencies());\n    junit.framework.Assert.assertEquals((((\"hcat://dummyhcat:1000/db1/table1/ds=2009-12\" + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"hcat://dummyhcat:1000/db3/table3/ds=2009-05\") + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"hcat://dummyhcat:1000/db3/table3/ds=2009-26\", actionBean.getPushMissingDependencies());\n}",
        "ClassName": "TestCoordMaterializeTransitionXCommand",
        "Label": 1,
        "MethodName": "testActionMaterForHcatalog",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    final java.lang.String includePath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"include1.xml\";\n    final java.lang.String URI_TEMPLATE_INCLUDE_XML = \"file:///tmp/include_xml/workflows/${YEAR}/${DAY}\";\n    final java.lang.String URI_TEMPLATE_COORD_XML = \"file:///tmp/coord_xml/workflows/${YEAR}/${DAY}\";\n    java.lang.String includeXml = ((((\"<datasets> \" + (\"<dataset name=\\\"A\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" timezone=\\\"UTC\\\">\" + \"<uri-template>\")) + URI_TEMPLATE_INCLUDE_XML) + \"</uri-template>\") + \"</dataset> \") + \"</datasets>\";\n    writeToFile(includeXml, includePath);\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = (((((((((((((((((((((\"<coordinator-app name=\\\"${appName}-foo\\\" frequency=\\\"${coord:days(1)}\\\" start=\\\"2009-02-01T01:00Z\\\" \" + (((((\"end=\\\"2009-02-03T23:59Z\\\" timezone=\\\"UTC\\\" xmlns=\\\"uri:oozie:coordinator:0.2\\\">\" + \"<controls> \") + \"<execution>LIFO</execution>\") + \"</controls>\") + \"<datasets> \") + \"<include>\")) + includePath) + \"</include>\") + \"<dataset name=\\\"B\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" timezone=\\\"UTC\\\">\") + \"<uri-template>\") + URI_TEMPLATE_COORD_XML) + \"</uri-template>\") + \"</dataset> \") + \"</datasets>\") + \" <input-events> \") + \"<data-in name=\\\"inputA\\\" dataset=\\\"A\\\"> <instance>${coord:latest(0)}</instance> </data-in>  \") + \"<data-in name=\\\"inputB\\\" dataset=\\\"B\\\"> <instance>${coord:latest(0)}</instance> </data-in>  \") + \"</input-events> \") + \"<action>\") + \"<workflow>\") + \"<app-path>hdfs:///tmp/workflows/</app-path> \") + \"<configuration>\") + \"<property> <name>inputA</name> <value>${coord:dataIn('inputB')}</value> </property> \") + \"</configuration>\") + \"</workflow>\") + \"</action>\") + \" </coordinator-app>\";\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.set(\"appName\", \"var-app-name\");\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    java.lang.String jobId = sc.call();\n    junit.framework.Assert.assertEquals(jobId.substring(jobId.length() - 2), \"-C\");\n    org.apache.oozie.CoordinatorJobBean job = checkCoordJobs(jobId);\n    junit.framework.Assert.assertNotNull(job);\n    org.jdom.Element processedJobXml = org.apache.oozie.util.XmlUtils.parseXml(job.getJobXml());\n    org.jdom.Namespace namespace = processedJobXml.getNamespace();\n    @java.lang.SuppressWarnings(\"unchecked\")\n    java.util.List<org.jdom.Element> datainElements = processedJobXml.getChild(\"input-events\", namespace).getChildren(\"data-in\", namespace);\n    junit.framework.Assert.assertTrue(\"<data-in> should be 2. One from coordinator.xml and the other from the include file\", datainElements.size() == 2);\n    junit.framework.Assert.assertEquals(URI_TEMPLATE_INCLUDE_XML, datainElements.get(0).getChild(\"dataset\", namespace).getChildText(\"uri-template\", namespace));\n    junit.framework.Assert.assertEquals(URI_TEMPLATE_COORD_XML, datainElements.get(1).getChild(\"dataset\", namespace).getChildText(\"uri-template\", namespace));\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testBasicSubmitWithIncludeFile",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = \"<coordinator-app name=\\\"NAME\\\" frequency=\\\"10\\\" start=\\\"2009-02-01T01:00Z\\\" end=\\\"2009-02-03T23:59Z\\\" timezone=\\\"UTC\\\" \" + (((\"xmlns=\\\"uri:oozie:coordinator:0.2\\\"> \" + \"<action> <workflow> <app-path>hdfs:///tmp/workflows/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>blah</value> </property> \") + \"</configuration> </workflow> </action> </coordinator-app>\");\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    java.lang.String jobId = sc.call();\n    junit.framework.Assert.assertEquals(jobId.substring(jobId.length() - 2), \"-C\");\n    checkCoordJobs(jobId);\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testSubmitNoControls",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.jms.JMSJobEventListener wfEventListener = new org.apache.oozie.jms.JMSJobEventListener();\n    wfEventListener.init(conf);\n    java.util.Date startDate = org.apache.oozie.util.DateUtils.parseDateUTC(\"2012-07-22T00:00Z\");\n    org.apache.oozie.event.WorkflowJobEvent wfe = new org.apache.oozie.event.WorkflowJobEvent(\"wfId1\", \"caId1\", org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, \"user1\", \"wf-app-name1\", startDate, null);\n    org.apache.oozie.jms.ConnectionContext jmsContext = getConnectionContext();\n    try {\n        javax.jms.Session session = jmsContext.createSession(Session.AUTO_ACKNOWLEDGE);\n        javax.jms.MessageConsumer consumer = jmsContext.createConsumer(session, wfEventListener.getTopic(wfe));\n        wfEventListener.onWorkflowJobEvent(wfe);\n        javax.jms.TextMessage message = ((javax.jms.TextMessage) (consumer.receive(5000)));\n        junit.framework.Assert.assertFalse(message.getText().contains(\"endTime\"));\n        org.apache.oozie.client.event.message.WorkflowJobMessage wfFailMessage = org.apache.oozie.client.event.jms.JMSMessagingUtils.getEventMessage(message);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, wfFailMessage.getStatus());\n        junit.framework.Assert.assertEquals(startDate, wfFailMessage.getStartTime());\n        junit.framework.Assert.assertEquals(\"wfId1\", wfFailMessage.getId());\n        junit.framework.Assert.assertEquals(\"caId1\", wfFailMessage.getParentId());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.Event.MessageType.JOB, wfFailMessage.getMessageType());\n        junit.framework.Assert.assertEquals(org.apache.oozie.AppType.WORKFLOW_JOB, wfFailMessage.getAppType());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.JobEvent.EventStatus.SUSPEND, wfFailMessage.getEventStatus());\n        junit.framework.Assert.assertEquals(\"user1\", wfFailMessage.getUser());\n        junit.framework.Assert.assertEquals(\"wf-app-name1\", wfFailMessage.getAppName());\n        junit.framework.Assert.assertNull(wfFailMessage.getErrorCode());\n        junit.framework.Assert.assertNull(wfFailMessage.getErrorMessage());\n        wfEventListener.destroy();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSJobEventListener",
        "Label": 1,
        "MethodName": "testOnWorkflowJobSuspendEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, false);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    final java.lang.String bundleId = job.getId();\n    addRecordToBundleActionTable(bundleId, \"action1\", 0, org.apache.oozie.client.Job.Status.KILLED);\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    addRecordToCoordJobTableWithBundle(bundleId, \"action1\", org.apache.oozie.client.Job.Status.KILLED, start, end, true, true, 2);\n    addRecordToCoordActionTable(\"action1\", 1, org.apache.oozie.client.CoordinatorAction.Status.KILLED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(\"action1\", 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(15 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(\"action1\"));\n            return coordJob.getStatus().equals(org.apache.oozie.client.Job.Status.DONEWITHERROR);\n        }\n    });\n    org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(\"action1\"));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.DONEWITHERROR, coordJob.getStatus());\n    org.apache.oozie.BundleActionBean bab = jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleId, \"action1\"));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.DONEWITHERROR, bab.getStatus());\n    job = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.DONEWITHERROR, job.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testBundleStatusTransitServiceForTerminalStates",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path path = new org.apache.hadoop.fs.Path(getFsTestCaseDir() + \"/2012/12/02/\");\n    org.apache.oozie.action.hadoop.LauncherURIHandler handler = uriHandlerFactory.getURIHandler(path.toUri());\n    junit.framework.Assert.assertTrue(handler.create(path.toUri(), conf));\n    junit.framework.Assert.assertTrue(getFileSystem().exists(path));\n}",
        "ClassName": "TestLauncherFSURIHandler",
        "Label": 1,
        "MethodName": "testCreate",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.oozie.SubWorkflowActionExecutor subWorkflow = new org.apache.oozie.action.oozie.SubWorkflowActionExecutor();\n    org.apache.oozie.util.XConfiguration protoConf = getBaseProtoConf();\n    org.apache.oozie.WorkflowJobBean workflow = createBaseWorkflow(protoConf, \"W\");\n    org.apache.oozie.WorkflowActionBean action = ((org.apache.oozie.WorkflowActionBean) (workflow.getActions().get(0)));\n    action.setConf(\"<sub-workflow xmlns='uri:oozie:workflow:0.1'>\" + (((((((\"      <app-path>hdfs://foo:9000/user/bar/workflow.xml</app-path>\" + \"      <configuration>\") + \"        <property>\") + \"          <name>a</name>\") + \"          <value>A</value>\") + \"        </property>\") + \"      </configuration>\") + \"</sub-workflow>\"));\n    org.apache.oozie.client.OozieClient oozieClient = subWorkflow.getWorkflowClient(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), org.apache.oozie.action.oozie.SubWorkflowActionExecutor.LOCAL);\n    junit.framework.Assert.assertNotNull(oozieClient);\n    oozieClient = subWorkflow.getWorkflowClient(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), \"http://localhost:8080/oozie\");\n    junit.framework.Assert.assertNotNull(oozieClient);\n}",
        "ClassName": "TestSubWorkflowActionExecutor",
        "Label": 1,
        "MethodName": "testSubWorkflowConfCreation",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    org.apache.oozie.WorkflowActionBean action = addRecordToWfActionTable(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    _testGetAction(action.getId());\n}",
        "ClassName": "TestWorkflowActionGetJPAExecutor",
        "Label": 1,
        "MethodName": "testWfActionGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        org.apache.oozie.util.ParameterVerifier.verifyParameters(null, org.apache.oozie.util.XmlUtils.parseXml(\"<root xmlns=\\\"uri:oozie:workflow:0.4\\\"></root>\"));\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n        junit.framework.Assert.assertEquals(\"conf cannot be null\", ex.getMessage());\n    }\n    org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration(false);\n    conf.set(\"A\", \"a\");\n    org.apache.oozie.util.ParameterVerifier.verifyParameters(conf, null);\n    junit.framework.Assert.assertEquals(1, conf.size());\n    junit.framework.Assert.assertEquals(\"a\", conf.get(\"A\"));\n    try {\n        org.apache.oozie.util.ParameterVerifier.verifyParameters(null, null);\n    } catch (java.lang.IllegalArgumentException ex) {\n        junit.framework.Assert.assertEquals(\"conf cannot be null\", ex.getMessage());\n    }\n}",
        "ClassName": "TestParameterVerifier",
        "Label": 1,
        "MethodName": "testVerifyParametersNull",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String actionXml = (((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<main-class>\") + org.apache.oozie.action.hadoop.LauncherMainTester.class.getName()) + \"</main-class>\") + \"</java>\";\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml, null);\n    final org.apache.hadoop.mapred.RunningJob runningJob = submitAction(context);\n    waitFor(60 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return runningJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(runningJob.isSuccessful());\n    org.apache.oozie.action.ActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    ae.check(context, context.getAction());\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", context.getAction().getExternalStatus());\n    junit.framework.Assert.assertNull(context.getAction().getData());\n    ae.end(context, context.getAction());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, context.getAction().getStatus());\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testSimpestSleSubmitOK",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.SchemaService wss = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.SchemaService.class);\n    javax.xml.validation.Validator validator = wss.getSchema(org.apache.oozie.service.SchemaService.SchemaName.WORKFLOW).newValidator();\n    validator.validate(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(org.apache.oozie.service.TestSchemaService.APP_V2)));\n}",
        "ClassName": "TestSchemaService",
        "Label": 1,
        "MethodName": "testWfSchemaV2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.util.List<java.lang.String>> filterList = createFilterList(\"jobid\", coordId1, coordActionId1, coordId2, coordActionId2);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    long[] lastSeqId = new long[1];\n    lastSeqId[0] = -1;\n    org.apache.oozie.executor.jpa.SLAEventsGetForFilterJPAExecutor slaEventsGetCmd = new org.apache.oozie.executor.jpa.SLAEventsGetForFilterJPAExecutor(1, 3, filterList, lastSeqId);\n    java.util.List<org.apache.oozie.SLAEventBean> list = jpaService.execute(slaEventsGetCmd);\n    junit.framework.Assert.assertNotNull(list);\n    junit.framework.Assert.assertEquals(3, list.size());\n}",
        "ClassName": "TestSLAEventsGetForFilterJPAExecutor",
        "Label": 1,
        "MethodName": "testGetSLAEventsForCombinedWithRange",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path mkdir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"mkdir\");\n    org.apache.hadoop.fs.Path delete = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"delete\");\n    fs.mkdirs(delete);\n    org.apache.hadoop.fs.Path source = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"source\");\n    fs.mkdirs(source);\n    org.apache.hadoop.fs.Path target = new org.apache.hadoop.fs.Path(new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"target\").toUri().getPath());\n    org.apache.hadoop.fs.Path chmod1 = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"chmod1\");\n    fs.mkdirs(chmod1);\n    org.apache.hadoop.fs.Path child1 = new org.apache.hadoop.fs.Path(chmod1, \"child1\");\n    fs.mkdirs(child1);\n    org.apache.hadoop.fs.Path chmod2 = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"chmod2\");\n    fs.mkdirs(chmod2);\n    org.apache.hadoop.fs.Path child2 = new org.apache.hadoop.fs.Path(chmod2, \"child2\");\n    fs.mkdirs(child2);\n    java.lang.String actionXml = java.text.MessageFormat.format(\"<fs>\" + (((((\"<mkdir path=''{0}''/>\" + \"<delete path=''{1}''/>\") + \"<move source=''{2}'' target=''{3}''/>\") + \"<chmod path=''{4}'' permissions=''111''/>\") + \"<chmod path=''{5}'' permissions=''222'' dir-files=''false''/>\") + \"</fs>\"), mkdir, delete, source.toUri().getPath(), target, chmod1, chmod2);\n    java.lang.String id = \"ID\" + java.lang.System.currentTimeMillis();\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml);\n    ((org.apache.oozie.WorkflowJobBean) (context.getWorkflow())).setId(id);\n    ((org.apache.oozie.WorkflowActionBean) (context.getWorkflow().getActions().get(0))).setJobId(id);\n    ((org.apache.oozie.WorkflowActionBean) (context.getWorkflow().getActions().get(0))).setId(id + \"-FS\");\n    org.apache.oozie.client.WorkflowAction action = context.getAction();\n    junit.framework.Assert.assertFalse(fs.exists(ae.getRecoveryPath(context)));\n    try {\n        ae.start(context, action);\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        if (!ex.getErrorCode().equals(\"FS001\")) {\n            throw ex;\n        }\n    }\n    junit.framework.Assert.assertTrue(fs.exists(mkdir));\n    junit.framework.Assert.assertFalse(fs.exists(delete));\n    junit.framework.Assert.assertTrue(fs.exists(ae.getRecoveryPath(context)));\n    actionXml = java.text.MessageFormat.format(\"<fs>\" + (((((\"<mkdir path=''{0}''/>\" + \"<delete path=''{1}''/>\") + \"<move source=''{2}'' target=''{3}''/>\") + \"<chmod path=''{4}'' permissions=''-rwxrwxrwx''/>\") + \"<chmod path=''{5}'' permissions=''-rwxrwx---'' dir-files=''false''/>\") + \"</fs>\"), mkdir, delete, source, target, chmod1, chmod2);\n    context = createContext(actionXml);\n    ((org.apache.oozie.WorkflowJobBean) (context.getWorkflow())).setId(id);\n    ((org.apache.oozie.WorkflowActionBean) (context.getWorkflow().getActions().get(0))).setJobId(id);\n    ((org.apache.oozie.WorkflowActionBean) (context.getWorkflow().getActions().get(0))).setId(id + \"-FS\");\n    action = context.getAction();\n    ae.start(context, action);\n    ae.check(context, context.getAction());\n    junit.framework.Assert.assertEquals(\"OK\", context.getAction().getExternalStatus());\n    junit.framework.Assert.assertNull(context.getAction().getData());\n    ae.end(context, context.getAction());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, context.getAction().getStatus());\n    junit.framework.Assert.assertFalse(fs.exists(ae.getRecoveryPath(context)));\n    junit.framework.Assert.assertTrue(fs.exists(mkdir));\n    junit.framework.Assert.assertFalse(fs.exists(delete));\n    junit.framework.Assert.assertFalse(fs.exists(source));\n    junit.framework.Assert.assertTrue(fs.exists(target));\n    junit.framework.Assert.assertEquals(\"rwxrwxrwx\", fs.getFileStatus(chmod1).getPermission().toString());\n    junit.framework.Assert.assertNotSame(\"rwxrwxrwx\", fs.getFileStatus(child1).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxrwx---\", fs.getFileStatus(chmod2).getPermission().toString());\n    junit.framework.Assert.assertNotSame(\"rwxrwx---\", fs.getFileStatus(child2).getPermission().toString());\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testRecovery",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date start = new java.util.Date();\n    java.util.Date end = new java.util.Date(start.getTime() + ((3600 * 48) * 1000));\n    final org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, start, end, false, false, 0);\n    sleep(3000);\n    java.lang.Runnable runnable = new org.apache.oozie.service.CoordMaterializeTriggerService.CoordMaterializeTriggerRunnable(3600, 300);\n    runnable.run();\n    sleep(1000);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, coordJob.getStatus());\n}",
        "ClassName": "TestCoordMaterializeTriggerService",
        "Label": 1,
        "MethodName": "testCoordMaterializeTriggerService2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = (((((((((\"<coordinator-app name=\\\"NAME\\\" frequency=\\\"${coord:days(1)}\\\" start=\\\"2009-02-01T01:00Z\\\" end=\\\"2009-02-01T02:00Z\\\" timezone=\\\"UTC\\\" \" + (((\"xmlns=\\\"uri:oozie:coordinator:0.1\\\"> <controls> <timeout>10</timeout> <concurrency>2</concurrency> \" + \"<execution>LIFO</execution> </controls> <datasets> \") + \"<dataset name=\\\"local_a\\\" frequency=\\\"${coord:days(1)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file://\")) + getTestCaseDir()) + \"/workflows/${YEAR}/${MONTH}/${DAY}</uri-template> \") + \"<done-flag>consume_me</done-flag> </dataset>\") + \"</datasets> <input-events> \") + \"<data-in name=\\\"A\\\" dataset=\\\"local_a\\\"> <instance>${coord:current(0)}</instance> </data-in>  \") + \"</input-events> \") + \"<action> <workflow> <app-path>hdfs:///tmp/workflows2/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>${coord:dataIn('A')}</value> </property> \") + \"</configuration> </workflow> </action> </coordinator-app>\";\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    final org.apache.oozie.CoordinatorEngine ce = new org.apache.oozie.CoordinatorEngine(org.apache.oozie.test.XTestCase.getTestUser(), \"UNIT_TESTING\");\n    final java.lang.String jobId = ce.submitJob(conf, true);\n    java.lang.String doneDir = getTestCaseDir() + \"/workflows/2009/02/01\";\n    java.lang.Process pr;\n    try {\n        pr = java.lang.Runtime.getRuntime().exec((\"mkdir -p \" + doneDir) + \"/consume_me\");\n        pr.waitFor();\n    } catch (java.io.IOException e) {\n        e.printStackTrace();\n    } catch (java.lang.InterruptedException e) {\n        e.printStackTrace();\n    }\n    waitFor(10000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            try {\n                java.util.List<org.apache.oozie.client.CoordinatorAction> actions = ce.getCoordJob(jobId).getActions();\n                for (org.apache.oozie.client.CoordinatorAction action : actions) {\n                    org.apache.oozie.client.CoordinatorAction.Status actionStatus = action.getStatus();\n                    if (actionStatus == org.apache.oozie.client.CoordinatorAction.Status.SUBMITTED) {\n                        return true;\n                    }\n                }\n            } catch (java.lang.Exception ex) {\n                return false;\n            }\n            return false;\n        }\n    });\n    java.util.List<org.apache.oozie.client.CoordinatorAction> actions = ce.getCoordJob(jobId).getActions();\n    junit.framework.Assert.assertTrue(actions.size() > 0);\n    org.apache.oozie.client.CoordinatorAction action = actions.get(0);\n    java.lang.System.out.println(\"status=\" + action.getStatus());\n    java.lang.String missingDeps = action.getMissingDependencies();\n    java.lang.System.out.println(\"..Missing deps=\" + missingDeps);\n    if (!((missingDeps == null) || missingDeps.equals(\"\"))) {\n        junit.framework.Assert.fail();\n    }\n}",
        "ClassName": "TestCoordinatorEngine",
        "Label": 1,
        "MethodName": "testDoneFlagCreation",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_COORD_STATUS, \"true\");\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, false, false);\n    job.setAppNamespace(org.apache.oozie.service.SchemaService.COORDINATOR_NAMESPACE_URI_1);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(job));\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.PREP);\n    new org.apache.oozie.command.coord.CoordSuspendXCommand(job.getId()).call();\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.SUSPENDED);\n    new org.apache.oozie.command.coord.CoordResumeXCommand(job.getId()).call();\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNING);\n}",
        "ClassName": "TestCoordResumeXCommand",
        "Label": 1,
        "MethodName": "testCoordSuspendAndResumeForPrepWithBackwardCompatibility",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.client.OozieClient client = org.apache.oozie.local.LocalOozie.getCoordClient();\n    try {\n        client.reRun(\"foo-id\", client.createConfiguration());\n        junit.framework.Assert.fail(\"OozieClientException expected.\");\n    } catch (org.apache.oozie.client.OozieClientException oce) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0301.toString(), oce.getErrorCode());\n    }\n}",
        "ClassName": "TestLocalOozieClientCoord",
        "Label": 1,
        "MethodName": "testReRun2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.CallableQueueService.CONF_CALLABLE_NEXT_ELIGIBLE, \"true\");\n    new org.apache.oozie.service.Services().init();\n    org.apache.oozie.service.TestCallableQueueService.CLCallable.resetConcurrency();\n    final org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable1 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable2 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable3 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable4 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable5 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable6 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(0, 100);\n    java.util.List<org.apache.oozie.service.TestCallableQueueService.MyCallable> callables = java.util.Arrays.asList(callable1, callable2, callable3, callable4, callable5, callable6);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callableOther = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"other\", 0, 100);\n    queueservice.queue(callableOther, 1000);\n    for (org.apache.oozie.service.TestCallableQueueService.MyCallable c : callables) {\n        queueservice.queue(c, 10);\n    }\n    float originalRatio = org.apache.oozie.test.XTestCase.WAITFOR_RATIO;\n    try {\n        org.apache.oozie.test.XTestCase.WAITFOR_RATIO = 1;\n        waitFor(2000, new org.apache.oozie.test.XTestCase.Predicate() {\n            public boolean evaluate() throws java.lang.Exception {\n                return queueservice.queueSize() == 0;\n            }\n        });\n    } finally {\n        org.apache.oozie.test.XTestCase.WAITFOR_RATIO = originalRatio;\n    }\n    java.lang.System.out.println(\"Callable Queue Size :\" + queueservice.queueSize());\n    long last = java.lang.Long.MIN_VALUE;\n    for (org.apache.oozie.service.TestCallableQueueService.MyCallable c : callables) {\n        java.lang.System.out.println(\"Callable C executed :\" + c.executed);\n        junit.framework.Assert.assertTrue(c.executed != 0);\n        last = java.lang.Math.max(last, c.executed);\n    }\n    java.lang.System.out.println(\"Callable callableOther executed :\" + callableOther.executed);\n    junit.framework.Assert.assertTrue(callableOther.executed < last);\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testConcurrencyReachedAndChooseNextEligible",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.servlet.MyJsonRestServlet.CONTENT_TYPE_JSON_CRON_TEST, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"\", \"json=object\", \"application/xml\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"\", \"json=object\", \"application/xml; param=x\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"GET\", \"\", \"json=object\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"GET\", \"\", \"json=object\", \"application/json\"));\n            java.lang.String response = invokeAndGetResponse(\"GET\", \"\", \"json=object\", \"application/xml\");\n            junit.framework.Assert.assertTrue(response.contains(\"object\"));\n            response = invokeAndGetResponse(\"GET\", \"\", \"json=array\", \"application/xml\");\n            junit.framework.Assert.assertTrue(response.contains(\"array\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestJsonRestServlet",
        "Label": 1,
        "MethodName": "testContentTypeJsonCron",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.jms.JMSJobEventListener wfEventListener = new org.apache.oozie.jms.JMSJobEventListener();\n    wfEventListener.init(conf);\n    org.apache.oozie.event.WorkflowJobEvent wfe = new org.apache.oozie.event.WorkflowJobEvent(\"wfId1\", \"caId1\", org.apache.oozie.client.WorkflowJob.Status.FAILED, \"user1\", \"wf-app-name1\", new java.util.Date(), new java.util.Date());\n    org.apache.oozie.jms.ConnectionContext jmsContext = getConnectionContext();\n    try {\n        javax.jms.Session session = jmsContext.createSession(Session.AUTO_ACKNOWLEDGE);\n        java.lang.String selector = org.apache.oozie.client.event.jms.JMSHeaderConstants.USER + \"='Non_matching_user'\";\n        javax.jms.MessageConsumer consumer = jmsContext.createConsumer(session, wfEventListener.getTopic(wfe), selector);\n        wfEventListener.onWorkflowJobEvent(wfe);\n        javax.jms.TextMessage message = ((javax.jms.TextMessage) (consumer.receive(5000)));\n        junit.framework.Assert.assertNull(message);\n        wfEventListener.destroy();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSJobEventListener",
        "Label": 1,
        "MethodName": "testWorkflowJobSelectorsNegative",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.XConfiguration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(\"a\", \"A\");\n    conf.set(\"b\", \"${a}\");\n    junit.framework.Assert.assertEquals(\"A\", conf.getRaw(\"a\"));\n    junit.framework.Assert.assertEquals(\"${a}\", conf.getRaw(\"b\"));\n    conf = conf.resolve();\n    junit.framework.Assert.assertEquals(\"A\", conf.getRaw(\"a\"));\n    junit.framework.Assert.assertEquals(\"A\", conf.getRaw(\"b\"));\n}",
        "ClassName": "TestXConfiguration",
        "Label": 1,
        "MethodName": "testResolve",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.command.TestXCommand.AXCommand command = new org.apache.oozie.command.TestXCommand.AXCommand(true);\n    command.mark_fail = true;\n    try {\n        command.call();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.command.CommandException ex) {\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestXCommand",
        "Label": 1,
        "MethodName": "testXCommandVerifyPreconditionFailing",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    dropTable(\"db1\", \"table1\", true);\n    dropDatabase(\"db1\", true);\n    createDatabase(\"db1\");\n    createTable(\"db1\", \"table1\", \"year,month,dt,country\");\n    addPartition(\"db1\", \"table1\", \"year=2012;month=12;dt=02;country=us\");\n    org.apache.hadoop.conf.Configuration protoConf = new org.apache.hadoop.conf.Configuration();\n    protoConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    protoConf.set(\"hadoop.job.ugi\", (org.apache.oozie.test.XTestCase.getTestUser() + \",\") + \"group\");\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, \"appPath\");\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.set(\"test.dir\", getTestCaseDir());\n    conf.set(\"partition1\", getHCatURI(\"db1\", \"table1\", \"dt=02\").toString());\n    conf.set(\"partition2\", getHCatURI(\"db1\", \"table1\", \"dt=05\").toString());\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"name\", \"<workflow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, conf, \"wfId\");\n    org.apache.oozie.WorkflowJobBean wf = new org.apache.oozie.WorkflowJobBean();\n    wf.setId(job.getId());\n    wf.setAppName(\"name\");\n    wf.setAppPath(\"appPath\");\n    wf.setUser(org.apache.oozie.test.XTestCase.getTestUser());\n    wf.setGroup(\"group\");\n    wf.setWorkflowInstance(job);\n    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();\n    protoConf.writeXml(baos);\n    wf.setProtoActionConf(baos.toString());\n    org.apache.oozie.WorkflowActionBean action = new org.apache.oozie.WorkflowActionBean();\n    action.setId(\"actionId\");\n    action.setName(\"actionName\");\n    org.apache.oozie.util.ELEvaluator eval = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.ELService.class).createEvaluator(\"workflow\");\n    org.apache.oozie.DagELFunctions.configureEvaluator(eval, wf, action);\n    junit.framework.Assert.assertEquals(true, ((boolean) (eval.evaluate(\"${hcat:exists(wf:conf('partition1'))}\", java.lang.Boolean.class))));\n    junit.framework.Assert.assertEquals(false, ((boolean) (eval.evaluate(\"${hcat:exists(wf:conf('partition2'))}\", java.lang.Boolean.class))));\n    dropTable(\"db1\", \"table1\", true);\n    dropDatabase(\"db1\", true);\n}",
        "ClassName": "TestHCatELFunctions",
        "Label": 1,
        "MethodName": "testHCatExists",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Random random = new java.util.Random();\n    try {\n        services.destroy();\n        services = new org.apache.oozie.service.Services();\n        org.apache.hadoop.conf.Configuration conf = services.getConf();\n        conf.set(org.apache.oozie.service.Services.CONF_SERVICE_EXT_CLASSES, (org.apache.oozie.service.JMSAccessorService.class.getName() + \",\") + org.apache.oozie.service.JMSTopicService.class.getName());\n        int randomPort = 30000 + random.nextInt(10000);\n        java.lang.String brokerURl = \"tcp://localhost:\" + randomPort;\n        conf.set(org.apache.oozie.jms.JMSJobEventListener.JMS_CONNECTION_PROPERTIES, (((((\"java.naming.factory.initial#\" + org.apache.oozie.test.XTestCase.ActiveMQConnFactory) + \";\") + \"java.naming.provider.url#\") + brokerURl) + \";connectionFactoryNames#\") + \"ConnectionFactory\");\n        services.init();\n        org.apache.oozie.jms.JMSJobEventListener wfEventListener = new org.apache.oozie.jms.JMSJobEventListener();\n        wfEventListener.init(conf);\n        org.apache.activemq.broker.BrokerService broker = new org.apache.activemq.broker.BrokerService();\n        broker.addConnector(brokerURl);\n        broker.start();\n        org.apache.oozie.jms.ConnectionContext jmsContext = getConnectionContext();\n        junit.framework.Assert.assertNotNull(jmsContext);\n        broker.stop();\n        jmsContext = getConnectionContext();\n        junit.framework.Assert.assertNull(jmsContext);\n        broker = new org.apache.activemq.broker.BrokerService();\n        broker.addConnector(brokerURl);\n        broker.start();\n        org.apache.oozie.event.WorkflowJobEvent wfe = new org.apache.oozie.event.WorkflowJobEvent(\"wfId1\", \"caId1\", org.apache.oozie.client.WorkflowJob.Status.FAILED, \"user1\", \"wf-app-name1\", new java.util.Date(), new java.util.Date());\n        jmsContext = getConnectionContext();\n        javax.jms.Session session = jmsContext.createSession(Session.AUTO_ACKNOWLEDGE);\n        javax.jms.MessageConsumer consumer = jmsContext.createConsumer(session, wfEventListener.getTopic(wfe));\n        wfEventListener.onWorkflowJobEvent(wfe);\n        javax.jms.TextMessage message = ((javax.jms.TextMessage) (consumer.receive(5000)));\n        junit.framework.Assert.assertNotNull(message);\n        broker.stop();\n        wfEventListener.destroy();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSJobEventListener",
        "Label": 1,
        "MethodName": "testConnectionDrop",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testNonJsonResponses(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_DEFINITION, org.apache.oozie.client.rest.RestConstants.XML_CONTENT_TYPE, org.apache.oozie.servlet.MockCoordinatorEngineService.COORD_APP);\n}",
        "ClassName": "TestV1JobServlet",
        "Label": 1,
        "MethodName": "testJobDef",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean bundleJob = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, true);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    final java.lang.String bundleId = bundleJob.getId();\n    addRecordToBundleActionTable(bundleId, \"action1\", 0, org.apache.oozie.client.Job.Status.DONEWITHERROR);\n    addRecordToBundleActionTable(bundleId, \"action2\", 0, org.apache.oozie.client.Job.Status.DONEWITHERROR);\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    addRecordToCoordJobTableWithBundle(bundleId, \"action1\", org.apache.oozie.client.Job.Status.DONEWITHERROR, start, end, false, true, 2);\n    addRecordToCoordJobTableWithBundle(bundleId, \"action2\", org.apache.oozie.client.Job.Status.DONEWITHERROR, start, end, false, true, 2);\n    new org.apache.oozie.command.bundle.BundleKillXCommand(bundleId).call();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean bundle = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n            return bundle.getStatus() == org.apache.oozie.client.Job.Status.KILLED;\n        }\n    });\n    bundleJob = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, bundleJob.getStatus());\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(15 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean bundle = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n            return bundle.getStatus() == org.apache.oozie.client.Job.Status.DONEWITHERROR;\n        }\n    });\n    bundleJob = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.DONEWITHERROR, bundleJob.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testBundleStatusTransitServiceKilled1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.TestServices.S1.INITED_S1 = false;\n    org.apache.oozie.service.TestServices.S1Ext.INITED_S1EXT = false;\n    setSystemProperty(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, org.apache.oozie.service.TestServices.SERVICES);\n    setSystemProperty(org.apache.oozie.service.Services.CONF_SERVICE_EXT_CLASSES, org.apache.oozie.service.TestServices.SERVICES_EXT);\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    services.init();\n    try {\n        junit.framework.Assert.assertEquals(org.apache.oozie.service.TestServices.S1Ext.class, services.get(org.apache.oozie.service.TestServices.S1.class).getClass());\n        junit.framework.Assert.assertEquals(org.apache.oozie.service.TestServices.S2.class, services.get(org.apache.oozie.service.TestServices.S2.class).getClass());\n        junit.framework.Assert.assertFalse(org.apache.oozie.service.TestServices.S1.INITED_S1);\n        junit.framework.Assert.assertTrue(org.apache.oozie.service.TestServices.S1Ext.INITED_S1EXT);\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestServices",
        "Label": 1,
        "MethodName": "testServicesExtLoading",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/admin/*\", org.apache.oozie.servlet.V1AdminServlet.class, org.apache.oozie.servlet.TestV1AdminServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.net.URL url = createURL(org.apache.oozie.client.rest.RestConstants.ADMIN_OS_ENV_RESOURCE, java.util.Collections.EMPTY_MAP);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertTrue(json.containsKey(\"USER\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1AdminServlet",
        "Label": 1,
        "MethodName": "testOsEnv",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.URIHandlerService uriService = new org.apache.oozie.service.URIHandlerService();\n    java.net.URI uri = uriService.getAuthorityWithScheme(\"hdfs://nn1:8020/dataset/${YEAR}/${MONTH}\");\n    junit.framework.Assert.assertEquals(\"hdfs://nn1:8020\", uri.toString());\n    uri = uriService.getAuthorityWithScheme(\"hdfs://nn1:8020\");\n    junit.framework.Assert.assertEquals(\"hdfs://nn1:8020\", uri.toString());\n    uri = uriService.getAuthorityWithScheme(\"hdfs://nn1:8020/\");\n    junit.framework.Assert.assertEquals(\"hdfs://nn1:8020\", uri.toString());\n    uri = uriService.getAuthorityWithScheme(\"hdfs://///tmp/file\");\n    junit.framework.Assert.assertEquals(\"hdfs:///\", uri.toString());\n    uri = uriService.getAuthorityWithScheme(\"hdfs:///tmp/file\");\n    junit.framework.Assert.assertEquals(\"hdfs:///\", uri.toString());\n    uri = uriService.getAuthorityWithScheme(\"/tmp/file\");\n    junit.framework.Assert.assertEquals(\"/\", uri.toString());\n}",
        "ClassName": "TestURIHandlerService",
        "Label": 1,
        "MethodName": "testGetAuthorityWithScheme",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertNotNull(org.apache.oozie.service.Services.get().get(org.apache.oozie.service.WorkflowStoreService.class));\n}",
        "ClassName": "TestLiteWorkflowStoreService",
        "Label": 1,
        "MethodName": "testService",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-ext-schema-valid.xml\", -1);\n    java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    final org.apache.oozie.DagEngine engine = new org.apache.oozie.DagEngine(org.apache.oozie.test.XTestCase.getTestUser(), \"a\");\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\");\n    conf.set(org.apache.oozie.service.WorkflowAppService.HADOOP_USER, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.set(org.apache.oozie.client.OozieClient.LOG_TOKEN, \"t\");\n    conf.set(\"external-status\", \"ok\");\n    conf.set(\"signal-value\", \"based_on_action_status\");\n    conf.set(\"running-mode\", \"async\");\n    final java.lang.String jobId = engine.submitJob(conf, true);\n    waitFor(5000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return engine.getJob(jobId).getStatus() == org.apache.oozie.client.WorkflowJob.Status.RUNNING;\n        }\n    });\n    sleep(2000);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.WorkflowActionsGetForJobJPAExecutor actionsGetExecutor = new org.apache.oozie.executor.jpa.WorkflowActionsGetForJobJPAExecutor(jobId);\n    java.util.List<org.apache.oozie.WorkflowActionBean> actions = jpaService.execute(actionsGetExecutor);\n    org.apache.oozie.WorkflowActionBean action = null;\n    for (org.apache.oozie.WorkflowActionBean bean : actions) {\n        if (bean.getType().equals(\"test\")) {\n            action = bean;\n            break;\n        }\n    }\n    junit.framework.Assert.assertNotNull(action);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.RUNNING, action.getStatus());\n    sleep(2000);\n    java.lang.Runnable actionCheckRunnable = new org.apache.oozie.service.ActionCheckerService.ActionCheckRunnable(0);\n    actionCheckRunnable.run();\n    waitFor(20000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return engine.getJob(jobId).getStatus() == org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED;\n        }\n    });\n    java.util.List<org.apache.oozie.WorkflowActionBean> actions2 = jpaService.execute(actionsGetExecutor);\n    org.apache.oozie.WorkflowActionBean action2 = actions2.get(0);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, action2.getStatus());\n}",
        "ClassName": "TestActionCheckerService",
        "Label": 1,
        "MethodName": "testActionCheckerService",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setSystemProperty(\"oozie.service.ActionService.executor.ext.classes\", org.apache.oozie.service.TestLiteWorkflowAppService.TestActionExecutor.class.getName());\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    try {\n        services.init();\n        java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-schema-action-name-too-long.xml\", -1);\n        java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n        org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n        org.apache.oozie.service.WorkflowAppService wps = services.get(org.apache.oozie.service.WorkflowAppService.class);\n        org.apache.hadoop.conf.Configuration jobConf = new org.apache.oozie.util.XConfiguration();\n        jobConf.set(org.apache.oozie.client.OozieClient.APP_PATH, ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\");\n        jobConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n        try {\n            org.apache.oozie.workflow.lite.LiteWorkflowApp app = ((org.apache.oozie.workflow.lite.LiteWorkflowApp) (wps.parseDef(jobConf, \"authToken\")));\n            junit.framework.Assert.fail();\n        } catch (org.apache.oozie.workflow.WorkflowException ex) {\n            junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0724, ex.getErrorCode());\n        }\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestLiteWorkflowAppService",
        "Label": 1,
        "MethodName": "testActionNameLength",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, false, false, 1);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    final java.lang.String wfJobId = wfJob.getId();\n    org.apache.oozie.CoordinatorActionBean coordAction = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", wfJobId, \"RUNNING\", 0);\n    new org.apache.oozie.command.coord.CoordKillXCommand(coordJob.getId()).call();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJobId);\n            org.apache.oozie.WorkflowJobBean wfBean = jpaService.execute(wfGetCmd);\n            return wfBean.getStatusStr().equals(\"KILLED\");\n        }\n    });\n    junit.framework.Assert.assertNotNull(jpaService);\n    final org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJobId);\n    coordJob = jpaService.execute(coordJobGetCmd);\n    coordAction = jpaService.execute(coordActionGetCmd);\n    wfJob = jpaService.execute(wfGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, coordJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.KILLED, coordAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.KILLED, wfJob.getStatus());\n    junit.framework.Assert.assertEquals(false, coordAction.isPending());\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(10 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean coordJobBean = jpaService.execute(coordJobGetCmd);\n            return !coordJobBean.isPending();\n        }\n    });\n    coordJob = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(false, coordJob.isPending());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServiceKilledByUser1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String[] members = new java.lang.String[]{ \"LIFO\", \"FIFO\", \"ONLYLAST\" };\n    org.apache.oozie.util.ParamChecker.isMember(\"FIFO\", members, \"test\");\n    try {\n        org.apache.oozie.util.ParamChecker.isMember(\"FIF\", members, \"test\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestParamChecker",
        "Label": 1,
        "MethodName": "testIsMember",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-data\");\n    java.lang.String expr = \"${coord:dataInPartitionFilter('ABC', 'pig')}\";\n    eval.setVariable(\"oozie.dataname.ABC\", \"data-in\");\n    junit.framework.Assert.assertEquals(\"${coord:dataInPartitionFilter('ABC', 'pig')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:dataInPartitionFilter('ABCD')}\";\n    eval.setVariable(\"oozie.dataname.ABCD\", \"data-in\");\n    try {\n        junit.framework.Assert.assertEquals(\"${coord:dataInPartitionFilter('ABCD')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n        junit.framework.Assert.fail(\"should throw exception because dataInPartitionFilter() requires 2 parameters\");\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestHCatELFunctions",
        "Label": 1,
        "MethodName": "testdataInPartitionFilterPh1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.ELEvaluator.Context support = new org.apache.oozie.util.ELEvaluator.Context();\n    support.addFunction(\"a\", \"a\", org.apache.oozie.util.TestELEvaluator.functionA);\n    try {\n        support.addFunction(\"b\", \"b\", org.apache.oozie.util.TestELEvaluator.functionB);\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n    }\n    try {\n        support.addFunction(\"c\", \"c\", org.apache.oozie.util.TestELEvaluator.functionC);\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n    }\n    junit.framework.Assert.assertEquals(org.apache.oozie.util.TestELEvaluator.functionA, support.resolveFunction(\"a\", \"a\"));\n}",
        "ClassName": "TestELEvaluator",
        "Label": 1,
        "MethodName": "testContextFunctions",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String actionXml = (((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node> <configuration>\") + \"<property><name>mapreduce.job.acl-modify-job</name><value>MODIFIER</value></property>\") + \"</configuration>\") + \"<main-class>MAIN-CLASS</main-class>\") + \"</java>\";\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml, \"USERS\");\n    org.apache.hadoop.mapred.RunningJob job = submitAction(context);\n    org.apache.hadoop.fs.FileSystem fs = context.getAppFileSystem();\n    org.apache.hadoop.conf.Configuration jobXmlConf = new org.apache.oozie.util.XConfiguration(fs.open(new org.apache.hadoop.fs.Path(job.getJobFile())));\n    java.lang.String userModifyAcl = jobXmlConf.get(org.apache.oozie.action.hadoop.JavaActionExecutor.ACL_MODIFY_JOB);\n    java.lang.String userGroup = context.getWorkflow().getAcl();\n    junit.framework.Assert.assertFalse(userGroup.equals(userModifyAcl));\n    actionXml = ((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node> <configuration>\") + \"</configuration>\") + \"<main-class>MAIN-CLASS</main-class>\") + \"</java>\";\n    context = createContext(actionXml, \"USERS\");\n    job = submitAction(context);\n    fs = context.getAppFileSystem();\n    jobXmlConf = new org.apache.oozie.util.XConfiguration(fs.open(new org.apache.hadoop.fs.Path(job.getJobFile())));\n    userModifyAcl = jobXmlConf.get(org.apache.oozie.action.hadoop.JavaActionExecutor.ACL_MODIFY_JOB);\n    userGroup = context.getWorkflow().getAcl();\n    junit.framework.Assert.assertTrue(userGroup.equals(userModifyAcl));\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testACLModifyJob",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordAction = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction.getId());\n    wfJob = jpaService.execute(wfJobGetCmd);\n    wfAction = jpaService.execute(wfActionGetCmd);\n    coordJob = jpaService.execute(coordJobGetCmd);\n    coordAction = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(7, org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob.getLastModifiedTime()), 1, 10).call();\n    try {\n        jpaService.execute(coordJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action should not have been purged\");\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeCoordWithWFChild1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testAdminUsers(true, \"admin\", org.apache.oozie.test.XTestCase.getTestUser());\n}",
        "ClassName": "TestAuthorizationService",
        "Label": 1,
        "MethodName": "testAdminUsersWithAdminFile",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.KILLED, org.apache.oozie.workflow.WorkflowInstance.Status.KILLED);\n    org.apache.oozie.WorkflowActionBean action = addRecordToWfActionTable(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    job.setStatus(org.apache.oozie.client.WorkflowJob.Status.RUNNING);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> updateList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    updateList.add(job);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> deleteList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    deleteList.add(action);\n    org.apache.oozie.executor.jpa.BulkUpdateDeleteJPAExecutor bulkDelRerunCmd = new org.apache.oozie.executor.jpa.BulkUpdateDeleteJPAExecutor();\n    bulkDelRerunCmd.setUpdateList(updateList);\n    bulkDelRerunCmd.setDeleteList(deleteList);\n    jpaService.execute(bulkDelRerunCmd);\n    job = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId()));\n    junit.framework.Assert.assertEquals(\"RUNNING\", job.getStatusStr());\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action.getId()));\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException jex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, jex.getErrorCode());\n    }\n}",
        "ClassName": "TestBulkUpdateDeleteJPAExecutor",
        "Label": 1,
        "MethodName": "testBulkUpdatesDeletes",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testDataNotSet(\"avoid-set-execution-data\", org.apache.oozie.command.wf.ActionStartXCommand.START_DATA_MISSING);\n}",
        "ClassName": "TestActionErrors",
        "Label": 1,
        "MethodName": "testExecutionDataNotSet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.PREP);\n    new org.apache.oozie.command.bundle.BundlePauseXCommand(job).call();\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.PREPPAUSED);\n    new org.apache.oozie.command.bundle.BundleUnpauseXCommand(job).call();\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.PREP);\n}",
        "ClassName": "TestBundlePauseUnpauseXCommand",
        "Label": 1,
        "MethodName": "testBundlePauseUnpause1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    _testUpdateJob(job.getId());\n}",
        "ClassName": "TestCoordJobUpdateJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordJobUpdate",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.jms.JMSJobEventListener coordEventListener = new org.apache.oozie.jms.JMSJobEventListener();\n    coordEventListener.init(conf);\n    java.util.Date startDate = org.apache.oozie.util.DateUtils.parseDateUTC(\"2012-07-22T00:00Z\");\n    java.util.Date nominalTime = org.apache.oozie.util.DateUtils.parseDateUTC(\"2011-07-11T00:00Z\");\n    org.apache.oozie.event.CoordinatorActionEvent cae = new org.apache.oozie.event.CoordinatorActionEvent(\"caId1\", \"caJobId1\", org.apache.oozie.client.CoordinatorAction.Status.FAILED, \"user1\", \"wf-app-name1\", nominalTime, startDate, null);\n    org.apache.oozie.jms.ConnectionContext jmsContext = getConnectionContext();\n    try {\n        javax.jms.Session session = jmsContext.createSession(Session.AUTO_ACKNOWLEDGE);\n        java.lang.String selector = org.apache.oozie.client.event.jms.JMSHeaderConstants.USER + \"='Non_matching_user'\";\n        javax.jms.MessageConsumer consumer = jmsContext.createConsumer(session, coordEventListener.getTopic(cae), selector);\n        coordEventListener.onCoordinatorActionEvent(cae);\n        javax.jms.TextMessage message = ((javax.jms.TextMessage) (consumer.receive(5000)));\n        junit.framework.Assert.assertNull(message);\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSJobEventListener",
        "Label": 1,
        "MethodName": "testCoordinatorActionSelectorsNegative",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"jobs\", \"-len\", \"3\", \"-offset\", \"2\", \"-oozie\", oozieUrl, \"-filter\", \"name=x\" };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOBS_FILTER_PARAM, org.apache.oozie.servlet.MockDagEngineService.did);\n            args = new java.lang.String[]{ \"jobs\", \"-localtime\", \"-len\", \"3\", \"-offset\", \"2\", \"-oozie\", oozieUrl, \"-filter\", \"name=x\" };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOBS_FILTER_PARAM, org.apache.oozie.servlet.MockDagEngineService.did);\n            args = new java.lang.String[]{ \"jobs\", \"-timezone\", \"PST\", \"-len\", \"3\", \"-offset\", \"2\", \"-oozie\", oozieUrl, \"-filter\", \"name=x\" };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOBS_FILTER_PARAM, org.apache.oozie.servlet.MockDagEngineService.did);\n            args = new java.lang.String[]{ \"jobs\", \"-jobtype\", \"coord\", \"-filter\", \"status=FAILED\", \"-oozie\", oozieUrl };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOBS_FILTER_PARAM, org.apache.oozie.servlet.MockDagEngineService.did);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testJobsStatus",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    try {\n        new org.apache.oozie.command.bundle.BundleJobXCommand(\"bundle-id\").call();\n        junit.framework.Assert.fail(\"Job doesn't exist. Should fail.\");\n    } catch (org.apache.oozie.command.CommandException ce) {\n    }\n}",
        "ClassName": "TestBundleJobXCommand",
        "Label": 1,
        "MethodName": "testBundleJobInfoFailed",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String currentDateplusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDateplusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDateplusMonth);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUSPENDED, start, end, true, true, 3);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    final java.lang.String jobId = job.getId();\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(10 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(jobId));\n            return coordJob.isPending() == false;\n        }\n    });\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertFalse(job.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, job.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServiceSuspendedByUser",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/admin/*\", org.apache.oozie.servlet.V1AdminServlet.class, org.apache.oozie.servlet.TestV1AdminServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.net.URL url = createURL(org.apache.oozie.client.rest.RestConstants.ADMIN_BUILD_VERSION_RESOURCE, java.util.Collections.EMPTY_MAP);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals(org.apache.oozie.BuildInfo.getBuildInfo().getProperty(org.apache.oozie.BuildInfo.BUILD_VERSION), json.get(org.apache.oozie.client.rest.JsonTags.BUILD_VERSION));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1AdminServlet",
        "Label": 1,
        "MethodName": "testVersion",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = this.addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.FAILED, false, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetExecutor = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.FAILED, job.getStatus());\n    try {\n        new org.apache.oozie.command.coord.CoordRerunXCommand(job.getId(), org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_DATE, \"2009-12-15T01:00Z\", false, true).call();\n        junit.framework.Assert.fail(\"Coordinator job is FAILED, rerun should throw exception\");\n    } catch (org.apache.oozie.command.CommandException ce) {\n    }\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunInFailed",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String actionXml = (((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<main-class>\") + org.apache.oozie.action.hadoop.LauncherMainTester.class.getName()) + \"</main-class>\") + \"<arg>out</arg>\") + \"<capture-output/>\") + \"</java>\";\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml, null);\n    final org.apache.hadoop.mapred.RunningJob runningJob = submitAction(context);\n    waitFor(60 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return runningJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(runningJob.isSuccessful());\n    org.apache.oozie.action.ActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    ae.check(context, context.getAction());\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", context.getAction().getExternalStatus());\n    junit.framework.Assert.assertNotNull(context.getAction().getData());\n    java.io.StringReader sr = new java.io.StringReader(context.getAction().getData());\n    java.util.Properties props = new java.util.Properties();\n    props.load(sr);\n    junit.framework.Assert.assertEquals(\"A\", props.get(\"a\"));\n    ae.end(context, context.getAction());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, context.getAction().getStatus());\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testOutputSubmitOK",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        org.apache.oozie.service.JMSTopicService jmsTopicService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JMSTopicService.class);\n        org.apache.oozie.WorkflowJobBean wfj = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n        junit.framework.Assert.assertEquals(wfj.getUser(), jmsTopicService.getTopic(wfj.getId()));\n        org.apache.oozie.WorkflowActionBean wab = addRecordToWfActionTable(wfj.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n        junit.framework.Assert.assertEquals(wfj.getUser(), jmsTopicService.getTopic(wab.getId()));\n        org.apache.oozie.CoordinatorJobBean cjb = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, true, true);\n        junit.framework.Assert.assertEquals(wfj.getUser(), jmsTopicService.getTopic(cjb.getId()));\n        org.apache.oozie.CoordinatorActionBean cab = addRecordToCoordActionTable(cjb.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-for-action-input-check.xml\", 0);\n        junit.framework.Assert.assertEquals(wfj.getUser(), jmsTopicService.getTopic(cab.getId()));\n        org.apache.oozie.BundleJobBean bjb = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, true);\n        junit.framework.Assert.assertEquals(wfj.getUser(), jmsTopicService.getTopic(bjb.getId()));\n        org.apache.oozie.BundleActionBean bab = addRecordToBundleActionTable(bjb.getId(), \"1\", 1, org.apache.oozie.client.Job.Status.RUNNING);\n        junit.framework.Assert.assertEquals(wfj.getUser(), jmsTopicService.getTopic(bab.getBundleActionId()));\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSTopicService",
        "Label": 1,
        "MethodName": "testTopicAsUser",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String newHCatDependency1 = \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=11;region=us\";\n    java.lang.String newHCatDependency2 = \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=12;region=us\";\n    org.apache.oozie.util.HCatURI hcatUri1 = new org.apache.oozie.util.HCatURI(newHCatDependency1);\n    org.apache.oozie.util.HCatURI hcatUri2 = new org.apache.oozie.util.HCatURI(newHCatDependency2);\n    java.lang.String fullDeps = (newHCatDependency1 + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + newHCatDependency2;\n    java.lang.String actionId = addInitRecords(fullDeps);\n    checkCoordAction(actionId, fullDeps, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    org.apache.oozie.service.PartitionDependencyManagerService pdms = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.PartitionDependencyManagerService.class);\n    pdms.addMissingDependency(hcatUri1, actionId);\n    pdms.addMissingDependency(hcatUri2, actionId);\n    pdms.partitionAvailable(\"hcat.server.com:5080\", \"mydb\", \"clicks\", getPartitionMap(\"src=search;datastamp=12;region=us\"));\n    java.util.Collection<java.lang.String> availableURIs = pdms.getAvailableDependencyURIs(actionId);\n    junit.framework.Assert.assertEquals(1, availableURIs.size());\n    junit.framework.Assert.assertTrue(availableURIs.contains(newHCatDependency2));\n    new org.apache.oozie.command.coord.CoordActionUpdatePushMissingDependency(actionId).call();\n    checkCoordAction(actionId, newHCatDependency1, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    pdms.partitionAvailable(\"hcat.server.com:5080\", \"mydb\", \"clicks\", getPartitionMap(\"src=search;datastamp=11;region=us\"));\n    availableURIs = pdms.getAvailableDependencyURIs(actionId);\n    junit.framework.Assert.assertEquals(1, availableURIs.size());\n    junit.framework.Assert.assertTrue(availableURIs.contains(newHCatDependency1));\n    new org.apache.oozie.command.coord.CoordActionUpdatePushMissingDependency(actionId).call();\n    checkCoordAction(actionId, \"\", org.apache.oozie.client.CoordinatorAction.Status.READY);\n    junit.framework.Assert.assertNull(pdms.getAvailableDependencyURIs(actionId));\n}",
        "ClassName": "TestCoordActionUpdatePushMissingDependency",
        "Label": 1,
        "MethodName": "testUpdateCoordTableAdvanced",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.CoordinatorJobBean coord = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    final org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(coord.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.command.coord.CoordinatorXCommand<java.lang.Void> myCmd = new org.apache.oozie.command.coord.CoordActionCheckXCommand(action.getId(), 0) {\n        @java.lang.Override\n        protected java.lang.Void execute() {\n            org.apache.oozie.command.coord.CoordinatorXCommand.generateEvent(action, coord.getUser(), coord.getAppName());\n            return null;\n        }\n    };\n    action.setMissingDependencies(\"pull\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionUpdateJPAExecutor(action));\n    myCmd.call();\n    org.apache.oozie.event.CoordinatorActionEvent event = ((org.apache.oozie.event.CoordinatorActionEvent) (queue.poll()));\n    junit.framework.Assert.assertNotNull(event);\n    junit.framework.Assert.assertEquals(\"pull\", event.getMissingDeps());\n    action.setMissingDependencies(null);\n    action.setPushMissingDependencies(\"push\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionUpdateJPAExecutor(action));\n    myCmd.call();\n    event = ((org.apache.oozie.event.CoordinatorActionEvent) (queue.poll()));\n    junit.framework.Assert.assertNotNull(event);\n    junit.framework.Assert.assertEquals(\"push\", event.getMissingDeps());\n    action.setMissingDependencies(\"pull\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionUpdateJPAExecutor(action));\n    myCmd.call();\n    event = ((org.apache.oozie.event.CoordinatorActionEvent) (queue.poll()));\n    junit.framework.Assert.assertNotNull(event);\n    junit.framework.Assert.assertEquals((\"pull\" + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"push\", event.getMissingDeps());\n}",
        "ClassName": "TestEventGeneration",
        "Label": 1,
        "MethodName": "testCoordinatorActionEventDependencies",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testCoordRerun-C\";\n    final int actionNum = 1;\n    final java.lang.String actionId = (jobId + \"@\") + actionNum;\n    org.apache.oozie.store.CoordinatorStore store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store.beginTrx();\n    try {\n        addRecordToJobTable(jobId, store, org.apache.oozie.client.Job.Status.SUCCEEDED);\n        addRecordToActionTable(jobId, actionNum, actionId, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\");\n        store.commitTrx();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Could not update db.\");\n    } finally {\n        store.closeTrx();\n    }\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"coord\");\n    java.lang.String outputDir = appPath.toString() + \"/coord-input/2009/12/14/11/00\";\n    org.apache.hadoop.fs.Path success = new org.apache.hadoop.fs.Path(outputDir, \"_SUCCESS\");\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    fs.mkdirs(new org.apache.hadoop.fs.Path(outputDir));\n    fs.create(success, true);\n    junit.framework.Assert.assertTrue(fs.exists(success));\n    final org.apache.oozie.client.OozieClient coordClient = org.apache.oozie.local.LocalOozie.getCoordClient();\n    coordClient.reRunCoord(jobId, org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_ACTION, java.lang.Integer.toString(actionNum), false, false);\n    org.apache.oozie.store.CoordinatorStore store2 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store2.beginTrx();\n    org.apache.oozie.CoordinatorActionBean action2 = store2.getCoordinatorAction(actionId, false);\n    junit.framework.Assert.assertNotSame(action2.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    store2.commitTrx();\n    store2.closeTrx();\n    waitFor(120 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.client.CoordinatorAction bean = coordClient.getCoordActionInfo(actionId);\n            return (bean.getStatus() == org.apache.oozie.client.CoordinatorAction.Status.WAITING) || (bean.getStatus() == org.apache.oozie.client.CoordinatorAction.Status.READY);\n        }\n    });\n    junit.framework.Assert.assertFalse(fs.exists(success));\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunCleanup",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.client.OozieClientException ex = new org.apache.oozie.client.OozieClientException(\"errorCode\", \"message\");\n    junit.framework.Assert.assertEquals(\"errorCode\", ex.getErrorCode());\n    junit.framework.Assert.assertEquals(\"message\", ex.getMessage());\n    junit.framework.Assert.assertNull(ex.getCause());\n    junit.framework.Assert.assertTrue(ex.toString().contains(\"errorCode\") && ex.toString().contains(\"message\"));\n}",
        "ClassName": "TestWorkflowClientException",
        "Label": 1,
        "MethodName": "testErrorCodeMessage",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleEngine be = new org.apache.oozie.BundleEngine();\n    try {\n        be.parseFilter(\"winniethepooh\");\n        junit.framework.Assert.fail(\"BundleEngineException expected.\");\n    } catch (org.apache.oozie.BundleEngineException bee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0420, bee.getErrorCode());\n    }\n    try {\n        be.parseFilter(\"xx=yy=zz\");\n        junit.framework.Assert.fail(\"BundleEngineException expected.\");\n    } catch (org.apache.oozie.BundleEngineException bee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0420, bee.getErrorCode());\n    }\n    try {\n        be.parseFilter(\"foo=moo\");\n        junit.framework.Assert.fail(\"BundleEngineException expected.\");\n    } catch (org.apache.oozie.BundleEngineException bee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0420, bee.getErrorCode());\n    }\n    try {\n        be.parseFilter(\"status=foo\");\n        junit.framework.Assert.fail(\"BundleEngineException expected.\");\n    } catch (org.apache.oozie.BundleEngineException bee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0420, bee.getErrorCode());\n    }\n}",
        "ClassName": "TestBundleEngineSimple",
        "Label": 1,
        "MethodName": "testParseFilterNegative",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.lang.String wfId1 = \"workflow-1\";\n    java.lang.String wfId2 = \"workflow-2\";\n    org.apache.oozie.sla.SLACalculatorBean bean1 = _createSLACalcBean(wfId1, false, false);\n    org.apache.oozie.sla.SLASummaryBean bean2 = _createSLASummaryBean(wfId1, \"RUNNING\", org.apache.oozie.client.event.SLAEvent.EventStatus.START_MISS, new java.util.Date(), new java.util.Date(), 1000, null, null, 2000);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> list = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    list.add(bean1);\n    list.add(bean2);\n    org.apache.oozie.executor.jpa.sla.SLACalculationInsertUpdateJPAExecutor writeCmd = new org.apache.oozie.executor.jpa.sla.SLACalculationInsertUpdateJPAExecutor(list, null);\n    jpaService.execute(writeCmd);\n    java.util.Date newDate = new java.util.Date();\n    bean1 = _createSLACalcBean(wfId1, true, true);\n    bean2 = new org.apache.oozie.sla.SLASummaryBean();\n    bean2.setJobId(wfId1);\n    bean2.setActualEnd(newDate);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> updateList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    updateList.add(bean1);\n    updateList.add(bean2);\n    org.apache.oozie.sla.SLACalculatorBean bean3 = _createSLACalcBean(wfId2, false, false);\n    org.apache.oozie.sla.SLASummaryBean bean4 = _createSLASummaryBean(wfId2, \"RUNNING\", org.apache.oozie.client.event.SLAEvent.EventStatus.END_MISS, new java.util.Date(), new java.util.Date(), 1000, null, null, 2000);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> insertList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    insertList.add(bean3);\n    insertList.add(bean4);\n    writeCmd = new org.apache.oozie.executor.jpa.sla.SLACalculationInsertUpdateJPAExecutor(insertList, updateList);\n    setSystemProperty(org.apache.oozie.FaultInjection.FAULT_INJECTION, \"true\");\n    setSystemProperty(org.apache.oozie.command.SkipCommitFaultInjection.ACTION_FAILOVER_FAULT_INJECTION, \"true\");\n    try {\n        jpaService.execute(writeCmd);\n        junit.framework.Assert.fail(\"Expected exception due to commit failure but didn't get any\");\n    } catch (java.lang.Exception e) {\n    }\n    org.apache.oozie.FaultInjection.deactivate(\"org.apache.oozie.command.SkipCommitFaultInjection\");\n    org.apache.oozie.executor.jpa.sla.SLACalculatorGetJPAExecutor readCmd1 = new org.apache.oozie.executor.jpa.sla.SLACalculatorGetJPAExecutor(wfId1);\n    org.apache.oozie.sla.SLACalculatorBean scBean = jpaService.execute(readCmd1);\n    junit.framework.Assert.assertFalse(scBean.isStartProcessed());\n    org.apache.oozie.executor.jpa.sla.SLASummaryGetJPAExecutor readCmd2 = new org.apache.oozie.executor.jpa.sla.SLASummaryGetJPAExecutor(wfId1);\n    org.apache.oozie.sla.SLASummaryBean sdBean = jpaService.execute(readCmd2);\n    junit.framework.Assert.assertNull(sdBean.getActualEnd());\n    readCmd1 = new org.apache.oozie.executor.jpa.sla.SLACalculatorGetJPAExecutor(wfId2);\n    try {\n        scBean = jpaService.execute(readCmd1);\n        junit.framework.Assert.fail(\"Expected exception but didnt get any\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException jpaee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0603, jpaee.getErrorCode());\n    }\n}",
        "ClassName": "TestSLACalculationJPAExecutor",
        "Label": 1,
        "MethodName": "testRollback",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String[] args = new java.lang.String[]{ \"info\" };\n    junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n    args = new java.lang.String[]{ \"info\", \"-timezones\" };\n    junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testInfo",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNINGWITHERROR, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNINGWITHERROR, job.getStatus());\n    new org.apache.oozie.command.bundle.BundleJobSuspendXCommand(job.getId()).call();\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDEDWITHERROR, job.getStatus());\n}",
        "ClassName": "TestBundleJobSuspendXCommand",
        "Label": 1,
        "MethodName": "testBundleSuspendWithError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-freq\");\n    java.lang.String expr = \"${YEAR}\";\n    try {\n        junit.framework.Assert.assertEquals(expr, org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n        junit.framework.Assert.fail(\"should throw exception beacuse coord-job-submit-freq doesn't resolve YEAR/MONTH/DAY\");\n    } catch (java.lang.Exception ex) {\n    }\n    init(\"coord-job-submit-nofuncs\");\n    junit.framework.Assert.assertEquals(expr, org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${MONTH}\";\n    junit.framework.Assert.assertEquals(expr, org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${DAY}\";\n    junit.framework.Assert.assertEquals(expr, org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${HOUR}\";\n    junit.framework.Assert.assertEquals(expr, org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${MINUTE}\";\n    junit.framework.Assert.assertEquals(expr, org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testURIVars",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.ELEvaluator.Context support = new org.apache.oozie.util.ELEvaluator.Context();\n    support.setVariable(\"a\", \"A\");\n    support.addFunction(\"a\", \"a\", org.apache.oozie.util.TestELEvaluator.functionA);\n    support.addFunction(\"a\", \"d\", org.apache.oozie.util.TestELEvaluator.functionD);\n    org.apache.oozie.util.ELEvaluator evaluator = new org.apache.oozie.util.ELEvaluator(support);\n    junit.framework.Assert.assertNull(org.apache.oozie.util.ELEvaluator.getCurrent());\n    junit.framework.Assert.assertEquals(\"a\", evaluator.evaluate(\"${a:a()}\", java.lang.String.class));\n    junit.framework.Assert.assertEquals(\"a,a\", evaluator.evaluate(\"${a:a()},${a:a()}\", java.lang.String.class));\n    try {\n        evaluator.evaluate(\"${a:a(), a:a()}\", java.lang.String.class);\n        junit.framework.Assert.fail(\"Evaluated bad expression\");\n    } catch (javax.servlet.jsp.el.ELException ignore) {\n    }\n    junit.framework.Assert.assertTrue(evaluator.checkForExistence(\"${a:a()}${a:a()}!\", \"!\"));\n    junit.framework.Assert.assertTrue(evaluator.checkForExistence(\"${a:a()},${a:a()}\", \",\"));\n    junit.framework.Assert.assertFalse(evaluator.checkForExistence(\"${a:d('foo', 'bar')}\", \",\"));\n    try {\n        evaluator.checkForExistence(\"${a:a(), a:a()}\", \",\");\n        junit.framework.Assert.fail(\"Parsed bad expression\");\n    } catch (javax.servlet.jsp.el.ELException ignore) {\n    }\n    junit.framework.Assert.assertNull(org.apache.oozie.util.ELEvaluator.getCurrent());\n}",
        "ClassName": "TestELEvaluator",
        "Label": 1,
        "MethodName": "testCheckForExistence",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.BundleJobBean bundleJob = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    org.apache.oozie.CoordinatorJobBean coordJob1 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.CoordinatorJobBean coordJob2 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    coordJob2.setAppName(\"coord2\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob2));\n    org.apache.oozie.CoordinatorJobBean coordJob3 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    coordJob3.setAppName(\"coord3\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob3));\n    org.apache.oozie.CoordinatorJobBean coordJob4 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    coordJob4.setAppName(\"coord4\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob4));\n    org.apache.oozie.CoordinatorJobBean coordJob5 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    coordJob5.setAppName(\"coord5\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob5));\n    org.apache.oozie.WorkflowJobBean wfJob1 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJob2 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJob3 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJob4 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJob5 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction1 = addRecordToWfActionTable(wfJob1.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction2 = addRecordToWfActionTable(wfJob2.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction3 = addRecordToWfActionTable(wfJob3.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction4 = addRecordToWfActionTable(wfJob4.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction5 = addRecordToWfActionTable(wfJob5.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordAction1 = addRecordToCoordActionTable(coordJob1.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob1.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction2 = addRecordToCoordActionTable(coordJob2.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob2.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction3 = addRecordToCoordActionTable(coordJob3.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob3.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction4 = addRecordToCoordActionTable(coordJob4.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob4.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction5 = addRecordToCoordActionTable(coordJob5.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob5.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.BundleActionBean bundleAction1 = addRecordToBundleActionTable(bundleJob.getId(), coordJob1.getId(), coordJob1.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean bundleAction2 = addRecordToBundleActionTable(bundleJob.getId(), coordJob2.getId(), coordJob2.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean bundleAction3 = addRecordToBundleActionTable(bundleJob.getId(), coordJob3.getId(), coordJob3.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean bundleAction4 = addRecordToBundleActionTable(bundleJob.getId(), coordJob4.getId(), coordJob4.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean bundleAction5 = addRecordToBundleActionTable(bundleJob.getId(), coordJob5.getId(), coordJob5.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob1GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob1.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob2GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob2.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob3GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob3.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob4GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob4.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob5GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob5.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction1GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction1.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction2GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction2.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction3GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction3.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction4GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction4.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction5GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction5.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJob1GetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob1.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJob2GetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob2.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJob3GetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob3.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJob4GetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob4.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJob5GetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob5.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction1GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction1.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction2GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction2.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction3GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction3.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction4GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction4.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction5GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction5.getId());\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleJob.getId());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleAction1GetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJob.getId(), coordJob1.getAppName());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleAction2GetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJob.getId(), coordJob2.getAppName());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleAction3GetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJob.getId(), coordJob3.getAppName());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleAction4GetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJob.getId(), coordJob4.getAppName());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleAction5GetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJob.getId(), coordJob5.getAppName());\n    wfJob1 = jpaService.execute(wfJob1GetCmd);\n    wfJob2 = jpaService.execute(wfJob2GetCmd);\n    wfJob3 = jpaService.execute(wfJob3GetCmd);\n    wfJob4 = jpaService.execute(wfJob4GetCmd);\n    wfJob5 = jpaService.execute(wfJob5GetCmd);\n    wfAction1 = jpaService.execute(wfAction1GetCmd);\n    wfAction2 = jpaService.execute(wfAction2GetCmd);\n    wfAction3 = jpaService.execute(wfAction3GetCmd);\n    wfAction4 = jpaService.execute(wfAction4GetCmd);\n    wfAction5 = jpaService.execute(wfAction5GetCmd);\n    coordJob1 = jpaService.execute(coordJob1GetCmd);\n    coordJob2 = jpaService.execute(coordJob2GetCmd);\n    coordJob3 = jpaService.execute(coordJob3GetCmd);\n    coordJob4 = jpaService.execute(coordJob4GetCmd);\n    coordJob5 = jpaService.execute(coordJob5GetCmd);\n    coordAction1 = jpaService.execute(coordAction1GetCmd);\n    coordAction2 = jpaService.execute(coordAction2GetCmd);\n    coordAction3 = jpaService.execute(coordAction3GetCmd);\n    coordAction4 = jpaService.execute(coordAction4GetCmd);\n    coordAction5 = jpaService.execute(coordAction5GetCmd);\n    bundleJob = jpaService.execute(bundleJobGetCmd);\n    bundleAction1 = jpaService.execute(bundleAction1GetCmd);\n    bundleAction2 = jpaService.execute(bundleAction2GetCmd);\n    bundleAction3 = jpaService.execute(bundleAction3GetCmd);\n    bundleAction4 = jpaService.execute(bundleAction4GetCmd);\n    bundleAction5 = jpaService.execute(bundleAction5GetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob5.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction5.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob5.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction5.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleAction1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleAction2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleAction3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleAction4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleAction5.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(wfJob1.getEndTime()), org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob1.getLastModifiedTime()), 7, 3).call();\n    try {\n        jpaService.execute(bundleJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(bundleAction1GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action 1 should not have been purged\");\n    }\n    try {\n        jpaService.execute(bundleAction2GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action 2 should not have been purged\");\n    }\n    try {\n        jpaService.execute(bundleAction3GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action 3 should not have been purged\");\n    }\n    try {\n        jpaService.execute(bundleAction4GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action 4 should not have been purged\");\n    }\n    try {\n        jpaService.execute(bundleAction5GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action 5 should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordJob1GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job 1 should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordJob2GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job 2 should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordJob3GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job 3 should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordJob4GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job 4 should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordJob5GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job 5 should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordAction1GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action 1 should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordAction2GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action 2 should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordAction3GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action 3 should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordAction4GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action 4 should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordAction5GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action 5 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJob1GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job 1 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJob2GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job 2 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJob3GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job 3 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJob4GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job 4 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJob5GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job 5 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfAction1GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action 1 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfAction2GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action 2 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfAction3GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action 3 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfAction4GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action 4 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfAction5GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action 5 should not have been purged\");\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeBundleWithCoordChildWithWFChild2MoreThanLimit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    assertSpeedAndMemory(60000, 4000, 2000, 45000000, 40000000);\n}",
        "ClassName": "TestPartitionDependencyManagerService",
        "Label": 1,
        "MethodName": "testMemoryUsageAndSpeed",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path path = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"dir\");\n    org.apache.hadoop.fs.Path child = new org.apache.hadoop.fs.Path(path, \"child\");\n    org.apache.hadoop.fs.Path grandchild = new org.apache.hadoop.fs.Path(child, \"grandchild\");\n    fs.mkdirs(grandchild);\n    fs.setPermission(path, org.apache.hadoop.fs.permission.FsPermission.valueOf(\"-rwx------\"));\n    fs.setPermission(child, org.apache.hadoop.fs.permission.FsPermission.valueOf(\"-rwxr-----\"));\n    fs.setPermission(grandchild, org.apache.hadoop.fs.permission.FsPermission.valueOf(\"-rwx---r--\"));\n    junit.framework.Assert.assertEquals(\"rwx------\", fs.getFileStatus(path).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxr-----\", fs.getFileStatus(child).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwx---r--\", fs.getFileStatus(grandchild).getPermission().toString());\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(\"<fs/>\");\n    ae.chmod(context, path, \"-rwx-----x\", false, false);\n    junit.framework.Assert.assertEquals(\"rwx-----x\", fs.getFileStatus(path).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxr-----\", fs.getFileStatus(child).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwx---r--\", fs.getFileStatus(grandchild).getPermission().toString());\n    ae.chmod(context, path, \"-rwxr----x\", true, false);\n    junit.framework.Assert.assertEquals(\"rwxr----x\", fs.getFileStatus(path).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxr----x\", fs.getFileStatus(child).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwx---r--\", fs.getFileStatus(grandchild).getPermission().toString());\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testChmod",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.String> map = new java.util.HashMap<java.lang.String, java.lang.String>();\n    map.put(\"a\", \"A\");\n    map.put(\"b\", \"&\");\n    java.lang.String str = org.apache.oozie.util.ELConstantsFunctions.toConfigurationStr(map);\n    org.jdom.Element e = org.apache.oozie.util.XmlUtils.parseXml((\"<x>\" + str) + \"</x>\");\n    org.apache.oozie.util.XConfiguration conf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(e.getText()));\n    java.util.Map<java.lang.String, java.lang.String> map2 = new java.util.HashMap<java.lang.String, java.lang.String>();\n    for (java.util.Map.Entry entry : conf) {\n        map2.put(((java.lang.String) (entry.getKey())), ((java.lang.String) (entry.getValue())));\n    }\n    junit.framework.Assert.assertEquals(map, map2);\n}",
        "ClassName": "TestELConstantsFunctions",
        "Label": 1,
        "MethodName": "testToConfigurationStr",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp workflowDef = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"testWf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"one\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"two\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"four\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"three\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"end\" }))).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance workflowJob = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(workflowDef, new org.apache.oozie.util.XConfiguration(), \"abcde\");\n    try {\n        workflowJob.start();\n    } catch (org.apache.oozie.workflow.WorkflowException e) {\n    }\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.FAILED, workflowJob.getStatus());\n    junit.framework.Assert.assertEquals(2, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.size());\n    junit.framework.Assert.assertEquals(2, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.exits.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.kills.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.fails.size());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testImmediateError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setupServices(null);\n    super.testPartitionDependency();\n}",
        "ClassName": "TestPartitionDependencyManagerEhcache",
        "Label": 1,
        "MethodName": "testPartitionDependency",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = (((((((((\"<coordinator-app name=\\\"NAME\\\" frequency=\\\"${coord:days(1)}\\\" start=\\\"2009-02-01T01:00Z\\\" end=\\\"2009-02-01T02:00Z\\\" timezone=\\\"UTC\\\" \" + (((\"xmlns=\\\"uri:oozie:coordinator:0.1\\\"> <controls> <timeout>10</timeout> <concurrency>2</concurrency> \" + \"<execution>LIFO</execution> </controls> <datasets> \") + \"<dataset name=\\\"local_a\\\" frequency=\\\"${coord:days(1)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file://\")) + getTestCaseDir()) + \"/workflows/${YEAR}/${MONTH}/${DAY}</uri-template> \") + \"<done-flag>consume_me</done-flag> </dataset>\") + \"</datasets> <input-events> \") + \"<data-in name=\\\"A\\\" dataset=\\\"local_a\\\"> <instance>${coord:current(0)}</instance> </data-in>  \") + \"</input-events> \") + \"<action> <workflow> <app-path>hdfs:///tmp/workflows2/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>${coord:dataIn('A')}</value> </property> \") + \"</configuration> </workflow> </action> </coordinator-app>\";\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    final org.apache.oozie.CoordinatorEngine ce = new org.apache.oozie.CoordinatorEngine(org.apache.oozie.test.XTestCase.getTestUser(), \"UNIT_TESTING\");\n    final java.lang.String jobId = ce.submitJob(conf, true);\n    waitFor(5000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            try {\n                java.util.List<org.apache.oozie.client.CoordinatorAction> actions = ce.getCoordJob(jobId).getActions();\n                for (org.apache.oozie.client.CoordinatorAction action : actions) {\n                    org.apache.oozie.client.CoordinatorAction.Status actionStatus = action.getStatus();\n                    if (actionStatus == org.apache.oozie.client.CoordinatorAction.Status.WAITING) {\n                        return true;\n                    }\n                }\n            } catch (java.lang.Exception ex) {\n                return false;\n            }\n            return false;\n        }\n    });\n    java.util.List<org.apache.oozie.client.CoordinatorAction> actions = ce.getCoordJob(jobId).getActions();\n    junit.framework.Assert.assertTrue(actions.size() > 0);\n    org.apache.oozie.client.CoordinatorAction action = actions.get(0);\n    java.lang.String missingDeps = action.getMissingDependencies();\n    java.lang.System.out.println(\"..Missing deps=\" + missingDeps);\n    junit.framework.Assert.assertEquals((\"file://\" + getTestCaseDir()) + \"/workflows/2009/02/01/consume_me\", missingDeps);\n}",
        "ClassName": "TestCoordinatorEngine",
        "Label": 1,
        "MethodName": "testCustomDoneFlag",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        services.destroy();\n        services = super.setupServicesForHCatalog();\n        services.init();\n        java.lang.String db = \"default\";\n        java.lang.String table = \"tablename\";\n        java.lang.String server = \"hcatserver\";\n        java.lang.String newHCatDependency1 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=brazil\";\n        java.lang.String newHCatDependency2 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=usa\";\n        java.lang.String pushMissingDeps = (newHCatDependency1 + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + newHCatDependency2;\n        org.apache.oozie.service.PartitionDependencyManagerService pdms = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.PartitionDependencyManagerService.class);\n        org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTableForWaiting(\"coord-job-for-action-input-check.xml\", org.apache.oozie.client.Job.Status.RUNNING, false, true);\n        org.apache.oozie.CoordinatorActionBean action1 = addRecordToCoordActionTableForWaiting(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-for-action-input-check.xml\", null, pushMissingDeps, \"Z\");\n        java.lang.String newHCatDependency3 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=russia\";\n        org.apache.oozie.CoordinatorActionBean action2 = addRecordToCoordActionTableForWaiting(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-for-action-input-check.xml\", null, newHCatDependency3, \"Z\");\n        org.apache.oozie.util.HCatURI hcatURI1;\n        org.apache.oozie.util.HCatURI hcatURI2;\n        org.apache.oozie.util.HCatURI hcatURI3;\n        hcatURI1 = new org.apache.oozie.util.HCatURI(newHCatDependency1);\n        hcatURI2 = new org.apache.oozie.util.HCatURI(newHCatDependency2);\n        hcatURI3 = new org.apache.oozie.util.HCatURI(newHCatDependency3);\n        pdms.addMissingDependency(hcatURI1, action1.getId());\n        pdms.addMissingDependency(hcatURI2, action1.getId());\n        pdms.addMissingDependency(hcatURI3, action2.getId());\n        junit.framework.Assert.assertTrue(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency1)).contains(action1.getId()));\n        junit.framework.Assert.assertTrue(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency2)).contains(action1.getId()));\n        junit.framework.Assert.assertTrue(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency3)).contains(action2.getId()));\n        new org.apache.oozie.command.coord.CoordKillXCommand(job.getId()).call();\n        junit.framework.Assert.assertNull(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency1)));\n        junit.framework.Assert.assertNull(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency2)));\n        junit.framework.Assert.assertNull(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency3)));\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestCoordKillXCommand",
        "Label": 1,
        "MethodName": "testCoordKillRemovePushMissingDeps",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(new java.lang.String[]{ \"/v0/admin/*\", \"/v0/job/*\" }, new java.lang.Class[]{ org.apache.oozie.servlet.V0AdminServlet.class, org.apache.oozie.servlet.V0JobServlet.class }, org.apache.oozie.servlet.TestAdminServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ACTION_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_ACTION_START);\n            java.net.URL url = createURL(\"/v0/job/*\", org.apache.oozie.servlet.MockDagEngineService.JOB_ID + 1, params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"PUT\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            url = createURL(\"/v0/admin/*\", org.apache.oozie.client.rest.RestConstants.ADMIN_STATUS_RESOURCE, java.util.Collections.EMPTY_MAP);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertTrue(json.containsKey(org.apache.oozie.client.rest.JsonTags.OOZIE_SAFE_MODE));\n            junit.framework.Assert.assertFalse(((java.lang.Boolean) (json.get(org.apache.oozie.client.rest.JsonTags.OOZIE_SAFE_MODE))));\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ADMIN_SAFE_MODE_PARAM, \"true\");\n            url = createURL(\"/v0/admin/*\", org.apache.oozie.client.rest.RestConstants.ADMIN_STATUS_RESOURCE, params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"PUT\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            url = createURL(\"/v0/admin/*\", org.apache.oozie.client.rest.RestConstants.ADMIN_STATUS_RESOURCE, java.util.Collections.EMPTY_MAP);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertTrue(json.containsKey(org.apache.oozie.client.rest.JsonTags.OOZIE_SAFE_MODE));\n            junit.framework.Assert.assertTrue(((java.lang.Boolean) (json.get(org.apache.oozie.client.rest.JsonTags.OOZIE_SAFE_MODE))));\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ACTION_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_ACTION_START);\n            url = createURL(\"/v0/job/*\", org.apache.oozie.servlet.MockDagEngineService.JOB_ID + 1, params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"PUT\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_SERVICE_UNAVAILABLE, conn.getResponseCode());\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ADMIN_SAFE_MODE_PARAM, \"false\");\n            url = createURL(\"/v0/admin/*\", org.apache.oozie.client.rest.RestConstants.ADMIN_STATUS_RESOURCE, params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"PUT\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            url = createURL(\"/v0/admin/*\", org.apache.oozie.client.rest.RestConstants.ADMIN_STATUS_RESOURCE, java.util.Collections.EMPTY_MAP);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertTrue(json.containsKey(org.apache.oozie.client.rest.JsonTags.OOZIE_SAFE_MODE));\n            junit.framework.Assert.assertFalse(((java.lang.Boolean) (json.get(org.apache.oozie.client.rest.JsonTags.OOZIE_SAFE_MODE))));\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ACTION_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_ACTION_START);\n            url = createURL(\"/v0/job/*\", org.apache.oozie.servlet.MockDagEngineService.JOB_ID + 1, params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"PUT\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            return null;\n        }\n    });\n}",
        "ClassName": "TestAdminServlet",
        "Label": 1,
        "MethodName": "testSafeMode",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String db = \"default\";\n    java.lang.String table = \"tablename\";\n    java.lang.String newHCatDependency1 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=brazil\";\n    java.lang.String newHCatDependency2 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=usa\";\n    java.lang.String newHCatDependency = (newHCatDependency1 + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + newHCatDependency2;\n    populateTable(db, table);\n    java.lang.String actionId = addInitRecords(newHCatDependency);\n    checkCoordAction(actionId, newHCatDependency, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId, true).call();\n    checkCoordAction(actionId, newHCatDependency1, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    org.apache.oozie.service.PartitionDependencyManagerService pdms = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.PartitionDependencyManagerService.class);\n    org.apache.oozie.service.HCatAccessorService hcatService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HCatAccessorService.class);\n    junit.framework.Assert.assertTrue(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency1)).contains(actionId));\n    junit.framework.Assert.assertTrue(hcatService.isRegisteredForNotification(new org.apache.oozie.util.HCatURI(newHCatDependency1)));\n    long timeOutCreationTime = java.lang.System.currentTimeMillis() - ((12 * 60) * 1000);\n    setCoordActionCreationTime(actionId, timeOutCreationTime);\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId).call();\n    java.lang.Thread.sleep(100);\n    checkCoordAction(actionId, newHCatDependency1, org.apache.oozie.client.CoordinatorAction.Status.TIMEDOUT);\n    junit.framework.Assert.assertNull(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency1)));\n    junit.framework.Assert.assertFalse(hcatService.isRegisteredForNotification(new org.apache.oozie.util.HCatURI(newHCatDependency1)));\n}",
        "ClassName": "TestCoordPushDependencyCheckXCommand",
        "Label": 1,
        "MethodName": "testTimeOut",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    ae.validatePath(new org.apache.hadoop.fs.Path(\"hdfs://x/bla\"), true);\n    ae.validatePath(new org.apache.hadoop.fs.Path(\"bla\"), false);\n    try {\n        ae.validatePath(new org.apache.hadoop.fs.Path(\"hdfs://x/bla\"), false);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(\"FS002\", ex.getErrorCode());\n    }\n    try {\n        ae.validatePath(new org.apache.hadoop.fs.Path(\"bla\"), true);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(\"FS001\", ex.getErrorCode());\n    }\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.HadoopAccessorService.SUPPORTED_FILESYSTEMS, \"hdfs,viewfs\");\n    new org.apache.oozie.service.Services().init();\n    try {\n        ae.validatePath(new org.apache.hadoop.fs.Path(\"viewfs://bla\"), true);\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.fail(\"viewfs is a supported scheme. This should not throw exception\");\n    }\n    try {\n        ae.validatePath(new org.apache.hadoop.fs.Path(\"file://bla\"), true);\n        junit.framework.Assert.fail(\"file is not a supported scheme. This should throw exception\");\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertTrue(ex.getMessage().contains(\"E0904\"));\n    }\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testValidatePath",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, true, true);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    coordJob.setStatus(org.apache.oozie.client.Job.Status.RUNNING);\n    wfJob.setStatus(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED);\n    action.setStatus(org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> updateList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    updateList.add(coordJob);\n    updateList.add(wfJob);\n    updateList.add(action);\n    org.apache.oozie.executor.jpa.BulkUpdateInsertForCoordActionStartJPAExecutor bulkUpdateCmd = new org.apache.oozie.executor.jpa.BulkUpdateInsertForCoordActionStartJPAExecutor();\n    bulkUpdateCmd.setUpdateList(updateList);\n    jpaService.execute(bulkUpdateCmd);\n    coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId()));\n    junit.framework.Assert.assertEquals(\"RUNNING\", coordJob.getStatusStr());\n    wfJob = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId()));\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", wfJob.getStatusStr());\n    org.apache.oozie.WorkflowActionBean action2 = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action.getId()));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.RUNNING, action2.getStatus());\n}",
        "ClassName": "TestBulkUpdateInsertForCoordActionStartJPAExecutor",
        "Label": 1,
        "MethodName": "testUpdates",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-ext-schema-valid.xml\", -1);\n    java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n    createTestCaseSubDir(\"lib\");\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    final org.apache.oozie.DagEngine engine = new org.apache.oozie.DagEngine(org.apache.oozie.test.XTestCase.getTestUser(), \"a\");\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\");\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.set(org.apache.oozie.client.OozieClient.LOG_TOKEN, \"t\");\n    conf.set(\"external-status\", \"ok\");\n    conf.set(\"signal-value\", \"based_on_action_status\");\n    conf.set(\"running-mode\", \"async\");\n    sleep(1000);\n    final java.lang.String jobId = engine.submitJob(conf, true);\n    sleep(1000);\n    waitFor(5000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return engine.getJob(jobId).getStatus() == org.apache.oozie.client.WorkflowJob.Status.RUNNING;\n        }\n    });\n    sleep(1000);\n    final org.apache.oozie.store.WorkflowStore store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.WorkflowStoreService.class).create();\n    store.beginTrx();\n    java.util.List<org.apache.oozie.WorkflowActionBean> actions = store.getActionsForWorkflow(jobId, false);\n    org.apache.oozie.WorkflowActionBean action = null;\n    for (org.apache.oozie.WorkflowActionBean bean : actions) {\n        if (bean.getType().equals(\"test\")) {\n            action = bean;\n            break;\n        }\n    }\n    junit.framework.Assert.assertNotNull(action);\n    final java.lang.String actionId = action.getId();\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.RUNNING, action.getStatus());\n    java.lang.String actionConf = action.getConf();\n    java.lang.String fixedActionConf = actionConf.replaceAll(\"async\", \"sync\");\n    action.setConf(fixedActionConf);\n    action.setPending();\n    store.updateAction(action);\n    store.commitTrx();\n    store.closeTrx();\n    java.lang.Runnable recoveryRunnable = new org.apache.oozie.service.RecoveryService.RecoveryRunnable(0, 60, 60);\n    recoveryRunnable.run();\n    sleep(3000);\n    final org.apache.oozie.store.WorkflowStore store2 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.WorkflowStoreService.class).create();\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.RUNNING, engine.getJob(jobId).getStatus());\n    store2.beginTrx();\n    org.apache.oozie.WorkflowActionBean action2 = store2.getAction(actionId, false);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.RUNNING, action2.getStatus());\n    action2.setStatus(org.apache.oozie.client.WorkflowAction.Status.PREP);\n    action2.setPending();\n    store2.updateAction(action2);\n    store2.commitTrx();\n    store2.closeTrx();\n    sleep(1000);\n    recoveryRunnable.run();\n    sleep(3000);\n    waitFor(10000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return engine.getWorkflowAction(actionId).getStatus() == org.apache.oozie.client.WorkflowAction.Status.OK;\n        }\n    });\n    final org.apache.oozie.store.WorkflowStore store3 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.WorkflowStoreService.class).create();\n    store3.beginTrx();\n    org.apache.oozie.WorkflowActionBean action3 = store3.getAction(actionId, false);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, action3.getStatus());\n    store3.commitTrx();\n    store3.closeTrx();\n}",
        "ClassName": "TestRecoveryService",
        "Label": 1,
        "MethodName": "testWorkflowActionRecoveryService",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.MapReduceActionExecutor ae = new org.apache.oozie.action.hadoop.MapReduceActionExecutor();\n    org.apache.hadoop.fs.Path jar = new org.apache.hadoop.fs.Path(ae.getOozieRuntimeDir(), ae.getLauncherJarName());\n    junit.framework.Assert.assertTrue(new java.io.File(jar.toString()).exists());\n}",
        "ClassName": "TestMapReduceActionExecutor",
        "Label": 1,
        "MethodName": "testLauncherJar",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-action-start\", \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=12;region=us\");\n    eval.setVariable(\".datain.ABC\", \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=12;region=us\");\n    eval.setVariable(\".datain.ABC.unresolved\", java.lang.Boolean.FALSE);\n    java.lang.String expr = \"${coord:tableIn('ABC')}\";\n    junit.framework.Assert.assertEquals(\"clicks\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    eval.setVariable(\".dataout.ABC\", \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=12;region=us\");\n    eval.setVariable(\".dataout.ABC.unresolved\", java.lang.Boolean.FALSE);\n    expr = \"${coord:tableOut('ABC')}\";\n    junit.framework.Assert.assertEquals(\"clicks\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestHCatELFunctions",
        "Label": 1,
        "MethodName": "testTable",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-freq\");\n    java.lang.String expr = \"${coord:hours(1)}\";\n    junit.framework.Assert.assertEquals(\"60\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    junit.framework.Assert.assertEquals(org.apache.oozie.coord.TimeUnit.MINUTE, ((org.apache.oozie.coord.TimeUnit) (eval.getVariable(\"timeunit\"))));\n    expr = \"${coord:hours(coord:hours(1))}\";\n    junit.framework.Assert.assertEquals(\"3600\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    junit.framework.Assert.assertEquals(org.apache.oozie.coord.TimeUnit.MINUTE, ((org.apache.oozie.coord.TimeUnit) (eval.getVariable(\"timeunit\"))));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testHours",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    java.lang.String resourceXmlName = \"coord-action-get.xml\";\n    java.util.Date dummyCreationTime = new java.util.Date();\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = createCoordAction(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.WAITING, resourceXmlName, 0);\n    action.setConsoleUrl(\"consoleUrl\");\n    action.setExternalStatus(\"externalStatus\");\n    action.setErrorCode(\"errorCode\");\n    action.setErrorMessage(\"errorMessage\");\n    action.setTrackerUri(\"trackerUri\");\n    action.setCreatedTime(dummyCreationTime);\n    java.lang.String testDir = getTestCaseDir();\n    java.lang.String missDeps = \"file://#testDir/2009/29/_SUCCESS#file://#testDir/2009/22/_SUCCESS#file://#testDir/2009/15/_SUCCESS#file://#testDir/2009/08/_SUCCESS\";\n    missDeps = missDeps.replaceAll(\"#testDir\", testDir);\n    action.setMissingDependencies(missDeps);\n    action.setTimeOut(10);\n    insertRecordCoordAction(action);\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"coord\");\n    java.lang.String actionXml = getCoordActionXml(appPath, resourceXmlName);\n    java.lang.String actionNominalTime = getActionNominalTime(actionXml);\n    _testGetActionsSubset(job.getId(), action.getId(), 1, 1, \"consoleUrl\", \"errorCode\", \"errorMessage\", action.getId() + \"_E\", \"externalStatus\", \"trackerUri\", dummyCreationTime, org.apache.oozie.util.DateUtils.parseDateOozieTZ(actionNominalTime), missDeps, 10, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n}",
        "ClassName": "TestCoordJobGetActionsSubsetJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.client.HeaderTestingVersionServlet.OOZIE_HEADERS.clear();\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"admin\", \"-status\", \"-oozie\", oozieUrl };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            args = new java.lang.String[]{ \"admin\", \"-oozie\", oozieUrl, \"-systemmode\", \"NORMAL\" };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testOozieStatus",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    java.lang.String jobId = job.getId();\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(jobId, actionNum++, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    _testCoordActionForCorrectColumnValues(jobId, action.getId(), action.getStatus(), action.getPending());\n}",
        "ClassName": "TestCoordJobGetActionsNotCompletedJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionsNotCompletetedForColumnValues",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/job/*\", org.apache.oozie.servlet.V1JobServlet.class, org.apache.oozie.servlet.TestV1JobServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockCoordinatorEngineService.reset();\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ACTION_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_ACTION_START);\n            java.net.URL url = createURL(org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + 1, params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"PUT\");\n            conn.setRequestProperty(\"content-type\", org.apache.oozie.client.rest.RestConstants.XML_CONTENT_TYPE);\n            conn.setDoOutput(true);\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode());\n            junit.framework.Assert.assertEquals(null, org.apache.oozie.servlet.MockCoordinatorEngineService.did);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1JobServlet",
        "Label": 1,
        "MethodName": "testStart",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String db = \"default\";\n    java.lang.String table = \"tablename\";\n    java.lang.String newHCatDependency1 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=brazil\";\n    java.lang.String newHCatDependency2 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=usa\";\n    java.lang.String newHCatDependency = (newHCatDependency1 + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + newHCatDependency2;\n    populateTable(db, table);\n    java.lang.String actionId = addInitRecords(newHCatDependency);\n    checkCoordAction(actionId, newHCatDependency, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId, true).call();\n    checkCoordAction(actionId, newHCatDependency1, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    org.apache.oozie.service.PartitionDependencyManagerService pdms = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.PartitionDependencyManagerService.class);\n    org.apache.oozie.service.HCatAccessorService hcatService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HCatAccessorService.class);\n    junit.framework.Assert.assertTrue(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency1)).contains(actionId));\n    junit.framework.Assert.assertTrue(hcatService.isRegisteredForNotification(new org.apache.oozie.util.HCatURI(newHCatDependency1)));\n    long timeOutCreationTime = java.lang.System.currentTimeMillis() - ((12 * 60) * 1000);\n    setCoordActionCreationTime(actionId, timeOutCreationTime);\n    dropTable(db, table, true);\n    try {\n        new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId).call();\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception e) {\n        junit.framework.Assert.assertTrue(e.getMessage().contains(\"NoSuchObjectException\"));\n    }\n    java.lang.Thread.sleep(100);\n    checkCoordAction(actionId, newHCatDependency1, org.apache.oozie.client.CoordinatorAction.Status.TIMEDOUT);\n    junit.framework.Assert.assertNull(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency1)));\n    junit.framework.Assert.assertFalse(hcatService.isRegisteredForNotification(new org.apache.oozie.util.HCatURI(newHCatDependency1)));\n}",
        "ClassName": "TestCoordPushDependencyCheckXCommand",
        "Label": 1,
        "MethodName": "testTimeOutWithException2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setupServices(\"testmaxelementsinmemory\");\n    org.apache.oozie.service.PartitionDependencyManagerService pdms = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.PartitionDependencyManagerService.class);\n    int numItems = 1000;\n    for (int i = 0; i < numItems; i++) {\n        org.apache.oozie.util.HCatURI dep = new org.apache.oozie.util.HCatURI(\"hcat://hcat.server.com:5080/mydb/mytbl/id=\" + i);\n        pdms.addMissingDependency(dep, \"\" + i);\n    }\n    for (int i = 0; i < 300; i++) {\n        junit.framework.Assert.assertNull(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI((\"hcat://hcat.server.com:5080/mydb/mytbl/id=\" + \"\") + i)));\n    }\n    int evicted = 0;\n    for (int i = 300; i < 700; i++) {\n        if (pdms.getWaitingActions(new org.apache.oozie.util.HCatURI((\"hcat://hcat.server.com:5080/mydb/mytbl/id=\" + \"\") + i)) == null) {\n            evicted++;\n        }\n    }\n    junit.framework.Assert.assertEquals(200, evicted);\n    for (int i = 700; i < 1000; i++) {\n        java.lang.String actionID = \"\" + i;\n        org.apache.oozie.util.HCatURI dep = new org.apache.oozie.util.HCatURI(\"hcat://hcat.server.com:5080/mydb/mytbl/id=\" + actionID);\n        java.util.Collection<java.lang.String> waitingActions = pdms.getWaitingActions(dep);\n        junit.framework.Assert.assertNotNull(dep.toURIString() + \" is missing in cache\", waitingActions);\n        junit.framework.Assert.assertTrue(dep.toURIString() + \" is missing in cache\", waitingActions.contains(actionID));\n    }\n}",
        "ClassName": "TestPartitionDependencyManagerEhcache",
        "Label": 1,
        "MethodName": "testMaxElementsInMemory",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"one\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"two\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"end\" }))).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, job.getStatus());\n    junit.framework.Assert.assertEquals(2, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.size());\n    junit.framework.Assert.assertEquals(2, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.exits.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.kills.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.fails.size());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testSynchDouble",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.StringBuffer sb = new java.lang.StringBuffer(\"\");\n    org.apache.oozie.util.TestMemoryLocks.Locker l1 = new org.apache.oozie.util.TestMemoryLocks.ReadLocker(\"a\", 1, -1, sb);\n    org.apache.oozie.util.TestMemoryLocks.Locker l2 = new org.apache.oozie.util.TestMemoryLocks.ReadLocker(\"a\", 2, -1, sb);\n    new java.lang.Thread(l1).start();\n    java.lang.Thread.sleep(500);\n    new java.lang.Thread(l2).start();\n    java.lang.Thread.sleep(500);\n    l1.finish();\n    java.lang.Thread.sleep(500);\n    l2.finish();\n    java.lang.Thread.sleep(500);\n    junit.framework.Assert.assertEquals(\"a:1-L a:2-L a:1-U a:2-U\", sb.toString().trim());\n}",
        "ClassName": "TestMemoryLocks",
        "Label": 1,
        "MethodName": "testReadLock",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.util.List<java.lang.String>> filterList = new java.util.HashMap();\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    long[] lastSeqId = new long[1];\n    lastSeqId[0] = -1;\n    org.apache.oozie.executor.jpa.SLAEventsGetForFilterJPAExecutor slaEventsGetCmd = new org.apache.oozie.executor.jpa.SLAEventsGetForFilterJPAExecutor(1, 3, filterList, lastSeqId);\n    java.util.List<org.apache.oozie.SLAEventBean> list = jpaService.execute(slaEventsGetCmd);\n    junit.framework.Assert.assertNotNull(list);\n    junit.framework.Assert.assertEquals(3, list.size());\n}",
        "ClassName": "TestSLAEventsGetForFilterJPAExecutor",
        "Label": 1,
        "MethodName": "testGetSLAEventsWithRange",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-action-start\");\n    java.lang.String expr = \"${coord:actionId()}\";\n    junit.framework.Assert.assertEquals(\"00000-oozie-C@1\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testActionId",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    junit.framework.Assert.assertEquals(\"rwxrwxrwx\", ae.createShortPermission(\"777\", null).toString());\n    junit.framework.Assert.assertEquals(\"rwxrwxrwx\", ae.createShortPermission(\"-rwxrwxrwx\", null).toString());\n    junit.framework.Assert.assertEquals(\"r--------\", ae.createShortPermission(\"400\", null).toString());\n    junit.framework.Assert.assertEquals(\"r--------\", ae.createShortPermission(\"-r--------\", null).toString());\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testPermissionMask",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date current = new java.util.Date();\n    final java.lang.String wfId = (\"0000000-\" + current.getTime()) + \"-TestSLAEventsGetForSeqIdJPAExecutor-W\";\n    addRecordToSLAEventTable(wfId, org.apache.oozie.client.SLAEvent.Status.CREATED, current);\n    addRecordToSLAEventTable(wfId, org.apache.oozie.client.SLAEvent.Status.STARTED, current);\n    addRecordToSLAEventTable(wfId, org.apache.oozie.client.SLAEvent.Status.SUCCEEDED, current);\n    _testGetSLAEventsForSeqId(wfId, current);\n}",
        "ClassName": "TestSLAEventsGetForSeqIdJPAExecutor",
        "Label": 1,
        "MethodName": "testSLAEventsGetForSeqId",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"one\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.AsynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"end\" }))).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    job.setVar(\"a\", \"A\");\n    job.setTransientVar(\"b\", \"B\");\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.PREP, job.getStatus());\n    junit.framework.Assert.assertEquals(\"A\", job.getVar(\"a\"));\n    junit.framework.Assert.assertEquals(\"B\", job.getTransientVar(\"b\"));\n    junit.framework.Assert.assertEquals(\"1\", job.getId());\n    byte[] array = org.apache.oozie.util.WritableUtils.toByteArray(job);\n    job = org.apache.oozie.util.WritableUtils.fromByteArray(array, org.apache.oozie.workflow.lite.LiteWorkflowInstance.class);\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.PREP, job.getStatus());\n    junit.framework.Assert.assertEquals(\"A\", job.getVar(\"a\"));\n    junit.framework.Assert.assertEquals(null, job.getTransientVar(\"b\"));\n    junit.framework.Assert.assertEquals(\"1\", job.getId());\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, job.getStatus());\n    array = org.apache.oozie.util.WritableUtils.toByteArray(job);\n    job = org.apache.oozie.util.WritableUtils.fromByteArray(array, org.apache.oozie.workflow.lite.LiteWorkflowInstance.class);\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, job.getStatus());\n    job.signal(\"/\", \"\");\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, job.getStatus());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testJobPersistance",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    _testCoordActionUpdateModifiedTime(action);\n}",
        "ClassName": "TestCoordActionUpdateForModifiedTimeJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionUpdateModifiedTime",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        org.apache.oozie.local.LocalOozie.stop();\n        org.apache.oozie.local.LocalOozie.getClient();\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalStateException ex) {\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    }\n    try {\n        org.apache.oozie.local.LocalOozie.start();\n        org.apache.oozie.local.LocalOozie.start();\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalStateException ex) {\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    }\n    try {\n        org.apache.oozie.local.LocalOozie.stop();\n        org.apache.oozie.local.LocalOozie.start();\n        org.apache.oozie.client.OozieClient wc = org.apache.oozie.local.LocalOozie.getClient();\n        junit.framework.Assert.assertNotNull(wc);\n        junit.framework.Assert.assertEquals(\"localoozie\", wc.getOozieUrl());\n    } finally {\n        org.apache.oozie.local.LocalOozie.stop();\n    }\n}",
        "ClassName": "TestLocalOozie",
        "Label": 1,
        "MethodName": "testLocalOozieInitDestroy",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path subWorkflowAppPath = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    java.io.Writer writer = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(subWorkflowAppPath, \"workflow.xml\")));\n    writer.write(org.apache.oozie.action.oozie.TestSubWorkflowActionExecutor.APP1);\n    writer.close();\n    org.apache.oozie.util.XConfiguration protoConf = getBaseProtoConf();\n    org.apache.oozie.WorkflowJobBean workflow = createBaseWorkflow(protoConf, \"W\");\n    java.lang.String defaultConf = workflow.getConf();\n    org.apache.oozie.util.XConfiguration newConf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(defaultConf));\n    newConf.set(\"abc\", \"xyz\");\n    workflow.setConf(newConf.toXmlString());\n    final org.apache.oozie.WorkflowActionBean action = ((org.apache.oozie.WorkflowActionBean) (workflow.getActions().get(0)));\n    action.setConf(((((((((((((\"<sub-workflow xmlns='uri:oozie:workflow:0.1' name='subwf'>\" + \"      <app-path>\") + subWorkflowAppPath) + java.io.File.separator) + \"workflow.xml\") + \"</app-path>\") + \"      <propagate-configuration />\") + \"      <configuration>\") + \"        <property>\") + \"          <name>a</name>\") + \"          <value>A</value>\") + \"        </property>\") + \"      </configuration>\") + \"</sub-workflow>\");\n    org.apache.oozie.action.oozie.SubWorkflowActionExecutor subWorkflow = new org.apache.oozie.action.oozie.SubWorkflowActionExecutor();\n    subWorkflow.start(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), action);\n    final org.apache.oozie.client.OozieClient oozieClient = subWorkflow.getWorkflowClient(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), org.apache.oozie.action.oozie.SubWorkflowActionExecutor.LOCAL);\n    waitFor(org.apache.oozie.action.oozie.TestSubWorkflowActionExecutor.JOB_TIMEOUT, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return oozieClient.getJobInfo(action.getExternalId()).getStatus() == org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED;\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, oozieClient.getJobInfo(action.getExternalId()).getStatus());\n    subWorkflow.check(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), action);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.DONE, action.getStatus());\n    subWorkflow.end(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), action);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, action.getStatus());\n    org.apache.oozie.client.WorkflowJob wf = oozieClient.getJobInfo(action.getExternalId());\n    org.apache.hadoop.conf.Configuration childConf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(wf.getConf()));\n    junit.framework.Assert.assertEquals(\"xyz\", childConf.get(\"abc\"));\n}",
        "ClassName": "TestSubWorkflowActionExecutor",
        "Label": 1,
        "MethodName": "testConfigPropagation",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_COORD_STATUS, \"true\");\n    services = new org.apache.oozie.service.Services();\n    setClassesToBeExcluded(services.getConf(), excludedServices);\n    services.init();\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, true);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    job.setAppNamespace(org.apache.oozie.service.SchemaService.COORDINATOR_NAMESPACE_URI_1);\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(job));\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action.getId());\n    job = jpaService.execute(coordJobGetCmd);\n    action = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, job.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.RUNNING, action.getStatus());\n    new org.apache.oozie.command.coord.CoordKillXCommand(job.getId()).call();\n    job = jpaService.execute(coordJobGetCmd);\n    action = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, job.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.KILLED, action.getStatus());\n}",
        "ClassName": "TestCoordKillXCommand",
        "Label": 1,
        "MethodName": "testCoordKillForBackwardSupport",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.jdom.Element e = org.apache.oozie.util.XmlUtils.parseXml(org.apache.oozie.util.TestXmlUtils.EXTERNAL_ENTITY_XML);\n    junit.framework.Assert.assertEquals(0, e.getText().length());\n}",
        "ClassName": "TestXmlUtils",
        "Label": 1,
        "MethodName": "testExternalEntity",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertNotNull(org.apache.oozie.service.Services.get().get(org.apache.oozie.service.SchedulerService.class));\n    org.apache.oozie.service.SchedulerService ss = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.SchedulerService.class);\n    final java.util.concurrent.atomic.AtomicInteger counter = new java.util.concurrent.atomic.AtomicInteger();\n    ss.schedule(new java.lang.Runnable() {\n        public void run() {\n            counter.incrementAndGet();\n        }\n    }, 0, 1, org.apache.oozie.service.SchedulerService.Unit.SEC);\n    waitFor(2 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return false;\n        }\n    });\n    junit.framework.Assert.assertTrue(counter.get() > 1);\n}",
        "ClassName": "TestSchedulerService",
        "Label": 1,
        "MethodName": "testInstrumentation",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testErrorWithUserRetry(\"end.error\", \"ok\", \"OK\");\n    junit.framework.Assert.assertTrue(true);\n}",
        "ClassName": "TestActionErrors",
        "Label": 1,
        "MethodName": "testEndErrorWithUserRetry",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-freq\");\n    java.lang.String expr = \"${coord:endOfDays(1)}\";\n    expr = \"${coord:endOfDays(3)}\";\n    junit.framework.Assert.assertEquals(\"3\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    junit.framework.Assert.assertEquals(org.apache.oozie.coord.TimeUnit.DAY, ((org.apache.oozie.coord.TimeUnit) (eval.getVariable(\"timeunit\"))));\n    junit.framework.Assert.assertEquals(org.apache.oozie.coord.TimeUnit.END_OF_DAY, ((org.apache.oozie.coord.TimeUnit) (eval.getVariable(\"endOfDuration\"))));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testEndOfDays",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    org.apache.oozie.WorkflowActionBean action = addRecordToWfActionTable(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    _testUpdateAction(action.getId());\n}",
        "ClassName": "TestWorkflowActionUpdateJPAExecutor",
        "Label": 1,
        "MethodName": "testWorkflowActionUpdate",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            int wfCount = org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT;\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\")).close();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-submit\", \"-oozie\", oozieUrl, \"-config\", createConfigFile(appPath.toString()) };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(\"submit\", org.apache.oozie.servlet.MockDagEngineService.did);\n            junit.framework.Assert.assertFalse(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            wfCount++;\n            args = new java.lang.String[]{ \"job\", \"-submit\", \"-oozie\", oozieUrl, \"-config\", createPropertiesFile(appPath.toString()) };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(\"submit\", org.apache.oozie.servlet.MockDagEngineService.did);\n            junit.framework.Assert.assertFalse(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            wfCount = org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT;\n            args = new java.lang.String[]{ \"job\", \"-submit\", \"-oozie\", oozieUrl, \"-config\", createPropertiesFile(appPath.toString()) + \"x\" };\n            junit.framework.Assert.assertEquals(-1, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(null, org.apache.oozie.servlet.MockDagEngineService.did);\n            try {\n                org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount);\n                junit.framework.Assert.fail();\n            } catch (java.lang.Exception e) {\n            }\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testSubmit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    conf.set(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, org.apache.hadoop.util.StringUtils.join(\",\", java.util.Arrays.asList(org.apache.oozie.service.GroupsService.class.getName(), org.apache.oozie.service.ProxyUserService.class.getName())));\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.hosts\", \"*\");\n    try {\n        services.init();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.service.ServiceException ex) {\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestProxyUserService",
        "Label": 1,
        "MethodName": "testWrongConfigGroups",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String actionId = new java.util.Date().getTime() + \"-COORD-ActionStartCommand-C@1\";\n    java.lang.String wfApp = \"<start to='${someParam}' />\";\n    addRecordToActionTable(actionId, 1, wfApp);\n    new org.apache.oozie.command.coord.CoordActionStartXCommand(actionId, \"me\", \"myapp\", \"mytoken\", \"myjob\").call();\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.CoordinatorActionBean action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForStartJPAExecutor(actionId));\n    if (action.getStatus() == org.apache.oozie.client.CoordinatorAction.Status.SUBMITTED) {\n        junit.framework.Assert.fail(\"Expected status was FAILED due to incorrect XML element\");\n    }\n    junit.framework.Assert.assertEquals(action.getErrorCode(), org.apache.oozie.ErrorCode.E0701.toString());\n    junit.framework.Assert.assertTrue(action.getErrorMessage().contains(\"XML schema error, cvc-pattern-valid: Value '${someParam}' \" + \"is not facet-valid with respect to pattern\"));\n}",
        "ClassName": "TestCoordActionStartXCommand",
        "Label": 1,
        "MethodName": "testActionStartWithErrorReported",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean bundleJob = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.KILLED, true);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    final java.lang.String bundleId = bundleJob.getId();\n    addRecordToBundleActionTable(bundleId, \"action1\", 1, org.apache.oozie.client.Job.Status.KILLED);\n    addRecordToBundleActionTable(bundleId, \"action2\", 1, org.apache.oozie.client.Job.Status.KILLED);\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    addRecordToCoordJobTableWithBundle(bundleId, \"action1\", org.apache.oozie.client.Job.Status.RUNNING, start, end, false, true, 2);\n    addRecordToCoordJobTableWithBundle(bundleId, \"action2\", org.apache.oozie.client.Job.Status.RUNNING, start, end, false, true, 2);\n    final org.apache.oozie.CoordinatorActionBean coordAction1_1 = addRecordToCoordActionTable(\"action1\", 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    final org.apache.oozie.CoordinatorActionBean coordAction1_2 = addRecordToCoordActionTable(\"action1\", 2, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    final org.apache.oozie.CoordinatorActionBean coordAction1_3 = addRecordToCoordActionTable(\"action2\", 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    final org.apache.oozie.CoordinatorActionBean coordAction1_4 = addRecordToCoordActionTable(\"action2\", 2, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    this.addRecordToWfJobTable(coordAction1_1.getExternalId(), org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    this.addRecordToWfJobTable(coordAction1_2.getExternalId(), org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    this.addRecordToWfJobTable(coordAction1_3.getExternalId(), org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    this.addRecordToWfJobTable(coordAction1_4.getExternalId(), org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    new org.apache.oozie.command.coord.CoordKillXCommand(\"action1\").call();\n    new org.apache.oozie.command.coord.CoordKillXCommand(\"action2\").call();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.WorkflowJobBean wfJob = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(coordAction1_4.getExternalId()));\n            return wfJob.getStatus().equals(org.apache.oozie.client.Job.Status.KILLED);\n        }\n    });\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean bundle = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n            return bundle.isPending() == false;\n        }\n    });\n    bundleJob = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n    junit.framework.Assert.assertFalse(bundleJob.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, bundleJob.getStatus());\n    org.apache.oozie.BundleActionBean bundleAction1 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleId, \"action1\"));\n    junit.framework.Assert.assertFalse(bundleAction1.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, bundleAction1.getStatus());\n    org.apache.oozie.CoordinatorJobBean coordJob1 = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(\"action1\"));\n    junit.framework.Assert.assertFalse(coordJob1.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, coordJob1.getStatus());\n    org.apache.oozie.BundleActionBean bundleAction2 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleId, \"action2\"));\n    junit.framework.Assert.assertFalse(bundleAction2.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, bundleAction2.getStatus());\n    org.apache.oozie.CoordinatorJobBean coordJob2 = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(\"action2\"));\n    junit.framework.Assert.assertFalse(coordJob2.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, coordJob2.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testBundleStatusTransitServiceKilled",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.TestCallableQueueService.EXEC_ORDER = new java.util.concurrent.atomic.AtomicLong();\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable1 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithSameKeyInComposite\", \"QueueUniquenessWithSameKeyInComposite\", 0, 200);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable2 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithSameKeyInComposite\", \"QueueUniquenessWithSameKeyInComposite\", 0, 200);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable3 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithSameKeyInComposite\", \"QueueUniquenessWithSameKeyInComposite\", 0, 200);\n    java.util.List<org.apache.oozie.service.TestCallableQueueService.MyCallable> callables = java.util.Arrays.asList(callable1, callable2, callable3);\n    org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    java.lang.String type = \"QueueUniquenessWithSameKeyInComposite\";\n    for (org.apache.oozie.service.TestCallableQueueService.MyCallable c : callables) {\n        queueservice.queueSerial(java.util.Arrays.asList(c, new org.apache.oozie.service.TestCallableQueueService.MyCallable(type = type + \"x\", 0, 0)), 200);\n    }\n    waitFor(2000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return ((callable1.executed != 0) && (callable2.executed == 0)) && (callable3.executed == 0);\n        }\n    });\n    junit.framework.Assert.assertTrue(callable1.executed != 0);\n    junit.framework.Assert.assertTrue(callable2.executed == 0);\n    junit.framework.Assert.assertTrue(callable3.executed == 0);\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testQueueUniquenessWithSameKeyInComposite",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testCoordRerun-C\";\n    final int actionNum1 = 1;\n    final int actionNum2 = 2;\n    final java.lang.String actionId1 = (jobId + \"@\") + actionNum1;\n    final java.lang.String actionId2 = (jobId + \"@\") + actionNum2;\n    org.apache.oozie.store.CoordinatorStore store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store.beginTrx();\n    try {\n        addRecordToJobTable(jobId, store, org.apache.oozie.client.Job.Status.SUCCEEDED);\n        addRecordToActionTable(jobId, actionNum1, actionId1, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\");\n        addRecordToActionTable(jobId, actionNum2, actionId2, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action2.xml\");\n        store.commitTrx();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Could not update db.\");\n    } finally {\n        store.closeTrx();\n    }\n    java.lang.String rerunScope = \"2009-12-15T01:00Z,2009-12-16T01:00Z,2009-12-17T01:00Z\";\n    try {\n        final org.apache.oozie.client.OozieClient coordClient = org.apache.oozie.local.LocalOozie.getCoordClient();\n        coordClient.reRunCoord(jobId, org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_DATE, rerunScope, false, true);\n        junit.framework.Assert.fail(\"Exception expected because one action is missing from db.\");\n    } catch (org.apache.oozie.client.OozieClientException ex) {\n        junit.framework.Assert.assertTrue(ex.getErrorCode() == org.apache.oozie.ErrorCode.E0605.toString());\n    }\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunDateNeg",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.KILLED, start, end, true, false, 3);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.KILLED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.KILLED, \"coord-action-get.xml\", 0);\n    final java.lang.String jobId = job.getId();\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(jobId));\n            return coordJob.isPending() == false;\n        }\n    });\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertFalse(job.isPending());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServiceKilledByUser2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testNonJsonResponses(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_DEFINITION, org.apache.oozie.client.rest.RestConstants.XML_CONTENT_TYPE, org.apache.oozie.servlet.MockDagEngineService.WORKFLOW_APP);\n}",
        "ClassName": "TestV0JobServlet",
        "Label": 1,
        "MethodName": "testJobDef",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.TestCallableQueueService.EXEC_ORDER = new java.util.concurrent.atomic.AtomicLong();\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable1 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithSameKeyInOneComposite\", \"QueueUniquenessWithSameKeyInOneComposite\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable2 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithSameKeyInOneComposite\", \"QueueUniquenessWithSameKeyInOneComposite\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable3 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithSameKeyInOneComposite\", \"QueueUniquenessWithSameKeyInOneComposite\", 0, 100);\n    org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    queueservice.queueSerial(java.util.Arrays.asList(callable1, callable2, callable3));\n    waitFor(200, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return ((callable1.executed != 0) && (callable2.executed == 0)) && (callable3.executed == 0);\n        }\n    });\n    junit.framework.Assert.assertTrue(callable1.executed != 0);\n    junit.framework.Assert.assertTrue(callable2.executed == 0);\n    junit.framework.Assert.assertTrue(callable3.executed == 0);\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testQueueUniquenessWithSameKeyInOneComposite",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = \"<coordinator-app name=\\\"NAME\\\" frequency=\\\"10\\\" start=\\\"2009-02-01T01:00Z\\\" end=\\\"2009-02-03T23:59Z\\\" timezone=\\\"UTC\\\" \" + (((\"xmlns=\\\"uri:oozie:coordinator:0.2\\\"> \" + \"<action> <workflow> <app-path>hdfs:///tmp/workflows/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>blah</value> </property> \") + \"</configuration> </workflow> </action> </coordinator-app>\");\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.set(\"MINUTES\", \"1\");\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    try {\n        sc.call();\n        junit.framework.Assert.fail(\"Coord job submission should fail with reserved variable definitions.\");\n    } catch (org.apache.oozie.command.CommandException ce) {\n    }\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testSubmitReservedVars",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path path1 = new org.apache.hadoop.fs.Path(getFsTestCaseDir() + \"/2012/12/02/\");\n    org.apache.hadoop.fs.Path path2 = new org.apache.hadoop.fs.Path(getFsTestCaseDir() + \"/2012/12/12/\");\n    getFileSystem().mkdirs(path1);\n    org.apache.oozie.dependency.URIHandler handler = uriService.getURIHandler(path1.toUri());\n    junit.framework.Assert.assertTrue(handler.exists(path1.toUri(), conf, org.apache.oozie.test.XTestCase.getTestUser()));\n    junit.framework.Assert.assertFalse(handler.exists(path2.toUri(), conf, org.apache.oozie.test.XTestCase.getTestUser()));\n    handler = uriService.getURIHandler(path1.toUri(), false);\n    junit.framework.Assert.assertTrue(handler.exists(new java.net.URI(path1.toUri().getPath()), conf, org.apache.oozie.test.XTestCase.getTestUser()));\n}",
        "ClassName": "TestFSURIHandler",
        "Label": 1,
        "MethodName": "testExists",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordAction = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction.getId());\n    wfJob = jpaService.execute(wfJobGetCmd);\n    wfAction = jpaService.execute(wfActionGetCmd);\n    coordJob = jpaService.execute(coordJobGetCmd);\n    coordAction = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(wfJob.getEndTime()), 7, 1, 10).call();\n    try {\n        jpaService.execute(coordJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action should not have been purged\");\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeCoordWithWFChild2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-suspend\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_SUSPEND, org.apache.oozie.servlet.MockDagEngineService.did);\n            args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-suspend\", org.apache.oozie.servlet.MockDagEngineService.JOB_ID + (org.apache.oozie.servlet.MockDagEngineService.workflows.size() + 1) };\n            junit.framework.Assert.assertEquals(-1, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testSuspend",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-kill\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_KILL, org.apache.oozie.servlet.MockDagEngineService.did);\n            args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-kill\", org.apache.oozie.servlet.MockDagEngineService.JOB_ID + (org.apache.oozie.servlet.MockDagEngineService.workflows.size() + 1) };\n            junit.framework.Assert.assertEquals(-1, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testKill",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String request = (\"bundle=\" + bundleName) + \";coordinators=Coord1,Coord2;actionstatus=KILLED\";\n    java.util.List<org.apache.oozie.client.rest.BulkResponseImpl> brList = _execQuery(request);\n    junit.framework.Assert.assertEquals(2, brList.size());\n    junit.framework.Assert.assertEquals(brList.get(0).getAction().getId(), \"Coord1@2\");\n    junit.framework.Assert.assertEquals(brList.get(1).getAction().getId(), \"Coord2@1\");\n}",
        "ClassName": "TestBulkMonitorJPAExecutor",
        "Label": 1,
        "MethodName": "testMultipleCoordinators",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, false);\n    addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, false);\n    _testGetJobsForStatus();\n    _testGetJobsForGroup();\n    addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.KILLED, false);\n    addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false);\n    _testGetJobsForAppName();\n    _testGetJobInfoForUser();\n    _testGetJobsForUserAndStatus();\n}",
        "ClassName": "TestBundleJobsXCommand",
        "Label": 1,
        "MethodName": "testBundleJobsGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.client.OozieClient client = org.apache.oozie.local.LocalOozie.getCoordClient();\n    junit.framework.Assert.assertEquals(\"localoozie\", client.getProtocolUrl());\n}",
        "ClassName": "TestLocalOozieClientCoord",
        "Label": 1,
        "MethodName": "testGetProtocolUrl",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.ELEvaluator.Context support = new org.apache.oozie.util.ELEvaluator.Context();\n    junit.framework.Assert.assertNull(support.getVariable(\"a\"));\n    support.setVariable(\"a\", \"A\");\n    junit.framework.Assert.assertEquals(\"A\", support.getVariable(\"a\"));\n    java.util.Map<java.lang.String, java.lang.Object> vars = new java.util.HashMap<java.lang.String, java.lang.Object>();\n    vars.put(\"a\", \"AA\");\n    vars.put(\"b\", \"BB\");\n    support.setVariables(vars);\n    junit.framework.Assert.assertEquals(\"AA\", support.getVariable(\"a\"));\n    junit.framework.Assert.assertEquals(\"BB\", support.getVariable(\"b\"));\n    try {\n        support.resolveVariable(\"c\");\n        junit.framework.Assert.fail();\n    } catch (javax.servlet.jsp.el.ELException ex) {\n    }\n}",
        "ClassName": "TestELEvaluator",
        "Label": 1,
        "MethodName": "testContextVars",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNING);\n    new org.apache.oozie.command.bundle.BundlePauseXCommand(job).call();\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.PAUSED);\n    new org.apache.oozie.command.bundle.BundleUnpauseXCommand(job).call();\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNING);\n}",
        "ClassName": "TestBundlePauseUnpauseXCommand",
        "Label": 1,
        "MethodName": "testBundlePauseUnpause2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.ActionService as = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.ActionService.class);\n    junit.framework.Assert.assertNotNull(as.getExecutor(\"switch\"));\n}",
        "ClassName": "TestActionService",
        "Label": 1,
        "MethodName": "testActions",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.MapReduceActionExecutor ae = new org.apache.oozie.action.hadoop.MapReduceActionExecutor();\n    junit.framework.Assert.assertEquals(\"map-reduce\", ae.getType());\n    junit.framework.Assert.assertEquals(\"map-reduce-launcher.jar\", ae.getLauncherJarName());\n    java.util.List<java.lang.Class> classes = new java.util.ArrayList<java.lang.Class>();\n    classes.add(org.apache.oozie.action.hadoop.LauncherMapper.class);\n    classes.add(org.apache.oozie.action.hadoop.LauncherSecurityManager.class);\n    classes.add(org.apache.oozie.action.hadoop.LauncherException.class);\n    classes.add(org.apache.oozie.action.hadoop.LauncherMainException.class);\n    classes.add(org.apache.oozie.action.hadoop.PrepareActionsDriver.class);\n    classes.addAll(org.apache.oozie.service.Services.get().get(org.apache.oozie.service.URIHandlerService.class).getClassesForLauncher());\n    classes.add(org.apache.oozie.action.hadoop.ActionStats.class);\n    classes.add(org.apache.oozie.action.hadoop.ActionType.class);\n    classes.add(org.apache.oozie.action.hadoop.LauncherMain.class);\n    classes.add(org.apache.oozie.action.hadoop.MapReduceMain.class);\n    classes.add(org.apache.oozie.action.hadoop.PipesMain.class);\n    org.jdom.Element actionXml = org.apache.oozie.util.XmlUtils.parseXml(((((((((((\"<map-reduce>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<configuration>\") + \"<property><name>mapred.input.dir</name><value>IN</value></property>\") + \"<property><name>mapred.output.dir</name><value>OUT</value></property>\") + \"</configuration>\") + \"</map-reduce>\");\n    org.apache.oozie.util.XConfiguration protoConf = new org.apache.oozie.util.XConfiguration();\n    protoConf.set(org.apache.oozie.service.WorkflowAppService.HADOOP_USER, org.apache.oozie.test.XTestCase.getTestUser());\n    org.apache.oozie.WorkflowJobBean wf = createBaseWorkflow(protoConf, \"mr-action\");\n    org.apache.oozie.WorkflowActionBean action = ((org.apache.oozie.WorkflowActionBean) (wf.getActions().get(0)));\n    action.setType(ae.getType());\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(wf, action);\n    org.apache.hadoop.conf.Configuration conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());\n    junit.framework.Assert.assertEquals(\"IN\", conf.get(\"mapred.input.dir\"));\n    org.apache.oozie.service.Services serv = org.apache.oozie.service.Services.get();\n    boolean originalUberJarDisabled = serv.getConf().getBoolean(\"oozie.action.mapreduce.uber.jar.enable\", false);\n    serv.getConf().setBoolean(\"oozie.action.mapreduce.uber.jar.enable\", true);\n    actionXml = createUberJarActionXML(getNameNodeUri() + \"/app/job.jar\", \"\");\n    conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());\n    junit.framework.Assert.assertEquals(getNameNodeUri() + \"/app/job.jar\", conf.get(\"oozie.mapreduce.uber.jar\"));\n    org.apache.hadoop.mapred.JobConf launcherJobConf = ae.createLauncherConf(getFileSystem(), context, action, actionXml, conf);\n    junit.framework.Assert.assertEquals(getNameNodeUri() + \"/app/job.jar\", launcherJobConf.getJar());\n    actionXml = createUberJarActionXML(\"/app/job.jar\", \"\");\n    conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());\n    junit.framework.Assert.assertEquals(getNameNodeUri() + \"/app/job.jar\", conf.get(\"oozie.mapreduce.uber.jar\"));\n    launcherJobConf = ae.createLauncherConf(getFileSystem(), context, action, actionXml, conf);\n    junit.framework.Assert.assertEquals(getNameNodeUri() + \"/app/job.jar\", launcherJobConf.getJar());\n    actionXml = createUberJarActionXML(\"job.jar\", \"\");\n    conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());\n    junit.framework.Assert.assertEquals(getFsTestCaseDir() + \"/job.jar\", conf.get(\"oozie.mapreduce.uber.jar\"));\n    launcherJobConf = ae.createLauncherConf(getFileSystem(), context, action, actionXml, conf);\n    junit.framework.Assert.assertEquals(getFsTestCaseDir() + \"/job.jar\", launcherJobConf.getJar());\n    actionXml = createUberJarActionXML(\"job.jar\", \"<streaming></streaming>\");\n    conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());\n    junit.framework.Assert.assertEquals(\"\", conf.get(\"oozie.mapreduce.uber.jar\"));\n    launcherJobConf = ae.createLauncherConf(getFileSystem(), context, action, actionXml, conf);\n    junit.framework.Assert.assertNull(launcherJobConf.getJar());\n    actionXml = createUberJarActionXML(\"job.jar\", \"<pipes></pipes>\");\n    conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());\n    junit.framework.Assert.assertEquals(\"\", conf.get(\"oozie.mapreduce.uber.jar\"));\n    launcherJobConf = ae.createLauncherConf(getFileSystem(), context, action, actionXml, conf);\n    junit.framework.Assert.assertNull(launcherJobConf.getJar());\n    actionXml = org.apache.oozie.util.XmlUtils.parseXml(((((((\"<map-reduce>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"</map-reduce>\");\n    conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());\n    junit.framework.Assert.assertNull(conf.get(\"oozie.mapreduce.uber.jar\"));\n    launcherJobConf = ae.createLauncherConf(getFileSystem(), context, action, actionXml, conf);\n    junit.framework.Assert.assertNull(launcherJobConf.getJar());\n    serv.getConf().setBoolean(\"oozie.action.mapreduce.uber.jar.enable\", false);\n    try {\n        actionXml = createUberJarActionXML(getNameNodeUri() + \"/app/job.jar\", \"\");\n        conf = ae.createBaseHadoopConf(context, actionXml);\n        ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());\n        junit.framework.Assert.fail(\"ActionExecutorException expected because uber jars are disabled\");\n    } catch (org.apache.oozie.action.ActionExecutorException aee) {\n        junit.framework.Assert.assertEquals(\"MR003\", aee.getErrorCode());\n        junit.framework.Assert.assertEquals(org.apache.oozie.action.ActionExecutorException.ErrorType.ERROR, aee.getErrorType());\n        junit.framework.Assert.assertTrue(aee.getMessage().contains(\"oozie.action.mapreduce.uber.jar.enable\"));\n        junit.framework.Assert.assertTrue(aee.getMessage().contains(\"oozie.mapreduce.uber.jar\"));\n    }\n    serv.getConf().setBoolean(\"oozie.action.mapreduce.uber.jar.enable\", originalUberJarDisabled);\n    actionXml = org.apache.oozie.util.XmlUtils.parseXml((((((((((((((((((((\"<map-reduce>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<streaming>\") + \"<mapper>M</mapper>\") + \"<reducer>R</reducer>\") + \"<record-reader>RR</record-reader>\") + \"<record-reader-mapping>RRM1=1</record-reader-mapping>\") + \"<record-reader-mapping>RRM2=2</record-reader-mapping>\") + \"<env>e=E</env>\") + \"<env>ee=EE</env>\") + \"</streaming>\") + \"<configuration>\") + \"<property><name>mapred.input.dir</name><value>IN</value></property>\") + \"<property><name>mapred.output.dir</name><value>OUT</value></property>\") + \"</configuration>\") + \"</map-reduce>\");\n    conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());\n    junit.framework.Assert.assertEquals(\"M\", conf.get(\"oozie.streaming.mapper\"));\n    junit.framework.Assert.assertEquals(\"R\", conf.get(\"oozie.streaming.reducer\"));\n    junit.framework.Assert.assertEquals(\"RR\", conf.get(\"oozie.streaming.record-reader\"));\n    junit.framework.Assert.assertEquals(\"2\", conf.get(\"oozie.streaming.record-reader-mapping.size\"));\n    junit.framework.Assert.assertEquals(\"2\", conf.get(\"oozie.streaming.env.size\"));\n    actionXml = org.apache.oozie.util.XmlUtils.parseXml(((((((((((((((((((\"<map-reduce>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<pipes>\") + \"<map>M</map>\") + \"<reduce>R</reduce>\") + \"<inputformat>IF</inputformat>\") + \"<partitioner>P</partitioner>\") + \"<writer>W</writer>\") + \"<program>PP</program>\") + \"</pipes>\") + \"<configuration>\") + \"<property><name>mapred.input.dir</name><value>IN</value></property>\") + \"<property><name>mapred.output.dir</name><value>OUT</value></property>\") + \"</configuration>\") + \"</map-reduce>\");\n    conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());\n    junit.framework.Assert.assertEquals(\"M\", conf.get(\"oozie.pipes.map\"));\n    junit.framework.Assert.assertEquals(\"R\", conf.get(\"oozie.pipes.reduce\"));\n    junit.framework.Assert.assertEquals(\"IF\", conf.get(\"oozie.pipes.inputformat\"));\n    junit.framework.Assert.assertEquals(\"P\", conf.get(\"oozie.pipes.partitioner\"));\n    junit.framework.Assert.assertEquals(\"W\", conf.get(\"oozie.pipes.writer\"));\n    junit.framework.Assert.assertEquals(getFsTestCaseDir() + \"/PP\", conf.get(\"oozie.pipes.program\"));\n}",
        "ClassName": "TestMapReduceActionExecutor",
        "Label": 1,
        "MethodName": "testSetupMethods",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/version\", org.apache.oozie.servlet.VersionServlet.class, true, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            java.net.URL url = createURL(\"\", params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONArray array = ((org.json.simple.JSONArray) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals(3, array.size());\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.OozieClient.WS_PROTOCOL_VERSION_1, array.get(1));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestVersionServlet",
        "Label": 1,
        "MethodName": "testVersion",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.client.OozieClientException ex = new org.apache.oozie.client.OozieClientException(\"errorCode\", new java.lang.Exception(\"message\"));\n    junit.framework.Assert.assertEquals(\"errorCode\", ex.getErrorCode());\n    junit.framework.Assert.assertTrue(ex.getMessage().contains(\"message\"));\n    junit.framework.Assert.assertNotNull(ex.getCause());\n    junit.framework.Assert.assertTrue(ex.toString().contains(\"errorCode\") && ex.toString().contains(\"message\"));\n}",
        "ClassName": "TestWorkflowClientException",
        "Label": 1,
        "MethodName": "testErrorCodeCause",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path subWorkflowAppPath = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    java.io.Writer writer = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(subWorkflowAppPath, \"workflow.xml\")));\n    writer.write(org.apache.oozie.action.oozie.TestSubWorkflowActionExecutor.APP1);\n    writer.close();\n    org.apache.oozie.util.XConfiguration protoConf = getBaseProtoConf();\n    org.apache.oozie.WorkflowJobBean workflow = createBaseWorkflow(protoConf, \"W\");\n    final org.apache.oozie.WorkflowActionBean action = ((org.apache.oozie.WorkflowActionBean) (workflow.getActions().get(0)));\n    action.setConf((((((((((\"<sub-workflow xmlns='uri:oozie:workflow:0.1'>\" + \"      <app-path>\") + subWorkflowAppPath) + \"</app-path>\") + \"      <configuration>\") + \"        <property>\") + \"          <name>a</name>\") + \"          <value>A</value>\") + \"        </property>\") + \"      </configuration>\") + \"</sub-workflow>\");\n    org.apache.oozie.action.oozie.SubWorkflowActionExecutor subWorkflow = new org.apache.oozie.action.oozie.SubWorkflowActionExecutor();\n    subWorkflow.start(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), action);\n    final org.apache.oozie.client.OozieClient oozieClient = subWorkflow.getWorkflowClient(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), org.apache.oozie.action.oozie.SubWorkflowActionExecutor.LOCAL);\n    waitFor(org.apache.oozie.action.oozie.TestSubWorkflowActionExecutor.JOB_TIMEOUT, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return oozieClient.getJobInfo(action.getExternalId()).getStatus() == org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED;\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, oozieClient.getJobInfo(action.getExternalId()).getStatus());\n    subWorkflow.check(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), action);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.DONE, action.getStatus());\n    subWorkflow.end(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), action);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, action.getStatus());\n    junit.framework.Assert.assertEquals(workflow.getId(), oozieClient.getJobInfo(action.getExternalId()).getParentId());\n}",
        "ClassName": "TestSubWorkflowActionExecutor",
        "Label": 1,
        "MethodName": "testSubWorkflowStart",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.util.List<java.lang.String>> filterList = createFilterList(\"jobid\", coordId1, coordActionId1);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.SLAEventsGetForFilterJPAExecutor slaEventsGetCmd = new org.apache.oozie.executor.jpa.SLAEventsGetForFilterJPAExecutor(0, 100, filterList, new long[1]);\n    java.util.List<org.apache.oozie.SLAEventBean> list = jpaService.execute(slaEventsGetCmd);\n    junit.framework.Assert.assertNotNull(list);\n    junit.framework.Assert.assertEquals(4, list.size());\n}",
        "ClassName": "TestSLAEventsGetForFilterJPAExecutor",
        "Label": 1,
        "MethodName": "testGetSLAEventsForOR",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.lang.String jobId1 = (\"00001-\" + new java.util.Date().getTime()) + \"-TestCoordJobsGetForPurgeJPAExecutor-C\";\n    insertJob(jobId1, org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    java.lang.String jobId2 = (\"00002-\" + new java.util.Date().getTime()) + \"-TestCoordJobsGetForPurgeJPAExecutor-C\";\n    org.apache.oozie.CoordinatorJobBean job2 = insertJob(jobId2, org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    job2.setBundleId(\"some_bundle_parent_id\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(job2));\n    org.apache.oozie.executor.jpa.CoordJobsGetForPurgeJPAExecutor executor = new org.apache.oozie.executor.jpa.CoordJobsGetForPurgeJPAExecutor(10, 50);\n    java.util.List<java.lang.String> jobList = jpaService.execute(executor);\n    junit.framework.Assert.assertEquals(1, jobList.size());\n    junit.framework.Assert.assertEquals(jobId1, jobList.get(0));\n}",
        "ClassName": "TestCoordJobsGetForPurgeJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordJobsGetForPurgeJPAExecutorWithParent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path script = new org.apache.hadoop.fs.Path(getAppPath(), \"script.sh\");\n    java.io.Writer w = new java.io.OutputStreamWriter(fs.create(script));\n    w.write(org.apache.oozie.action.hadoop.TestShellActionExecutor.SHELL_SCRIPT_CONTENT);\n    w.close();\n    java.lang.String actionXml = ((((((((((((((((((\"<shell>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<exec>sh</exec>\") + \"<argument>-c</argument>\") + \"<argument>script.sh</argument>\") + \"<argument>A</argument>\") + \"<argument>B</argument>\") + \"<env-var>var1=val1</env-var>\") + \"<env-var>var2=val2</env-var>\") + \"<file>\") + script.toString()) + \"#\") + script.getName()) + \"</file>\") + \"</shell>\";\n    _testSubmit(actionXml, true, \"\");\n}",
        "ClassName": "TestShellActionExecutor",
        "Label": 1,
        "MethodName": "testShellScript",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(new java.lang.String[]{ \"/v1/admin/*\", \"/v1/job/*\" }, new java.lang.Class[]{ org.apache.oozie.servlet.V1AdminServlet.class, org.apache.oozie.servlet.V1JobServlet.class }, org.apache.oozie.servlet.TestV1AdminServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ACTION_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_ACTION_START);\n            java.net.URL url = createURL(\"/v1/job/*\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"PUT\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            url = createURL(\"/v1/admin/*\", org.apache.oozie.client.rest.RestConstants.ADMIN_STATUS_RESOURCE, java.util.Collections.EMPTY_MAP);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertTrue(json.containsKey(org.apache.oozie.client.rest.JsonTags.OOZIE_SYSTEM_MODE));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.OozieClient.SYSTEM_MODE.NORMAL.toString(), json.get(org.apache.oozie.client.rest.JsonTags.OOZIE_SYSTEM_MODE));\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ADMIN_SYSTEM_MODE_PARAM, org.apache.oozie.client.OozieClient.SYSTEM_MODE.SAFEMODE.toString());\n            url = createURL(\"/v1/admin/*\", org.apache.oozie.client.rest.RestConstants.ADMIN_STATUS_RESOURCE, params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"PUT\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            url = createURL(\"/v1/admin/*\", org.apache.oozie.client.rest.RestConstants.ADMIN_STATUS_RESOURCE, java.util.Collections.EMPTY_MAP);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertTrue(json.containsKey(org.apache.oozie.client.rest.JsonTags.OOZIE_SYSTEM_MODE));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.OozieClient.SYSTEM_MODE.SAFEMODE.toString(), json.get(org.apache.oozie.client.rest.JsonTags.OOZIE_SYSTEM_MODE));\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ACTION_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_ACTION_START);\n            url = createURL(\"/v1/job/*\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"PUT\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_SERVICE_UNAVAILABLE, conn.getResponseCode());\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ADMIN_SYSTEM_MODE_PARAM, org.apache.oozie.client.OozieClient.SYSTEM_MODE.NORMAL.toString());\n            url = createURL(\"/v1/admin/*\", org.apache.oozie.client.rest.RestConstants.ADMIN_STATUS_RESOURCE, params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"PUT\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            url = createURL(\"/v1/admin/*\", org.apache.oozie.client.rest.RestConstants.ADMIN_STATUS_RESOURCE, java.util.Collections.EMPTY_MAP);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertTrue(json.containsKey(org.apache.oozie.client.rest.JsonTags.OOZIE_SYSTEM_MODE));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.OozieClient.SYSTEM_MODE.NORMAL.toString(), json.get(org.apache.oozie.client.rest.JsonTags.OOZIE_SYSTEM_MODE));\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ACTION_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_ACTION_START);\n            url = createURL(\"/v1/job/*\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"PUT\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1AdminServlet",
        "Label": 1,
        "MethodName": "testSafeMode",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setupServices(\"testspilltodisk\");\n    assertSpeedAndMemory(60000, 30000, 11000, 60000000, 25000000);\n}",
        "ClassName": "TestPartitionDependencyManagerEhcache",
        "Label": 1,
        "MethodName": "testMemoryUsageAndSpeedOverflowToDisk",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"a\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"a\", \"\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"b\", \"c\")).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"b\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"end\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"c\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"end\" }))).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, job.getStatus());\n    job.signal(\"/\", \"OK\");\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, job.getStatus());\n    junit.framework.Assert.assertTrue(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.containsKey(\"b\"));\n    junit.framework.Assert.assertTrue(!org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.containsKey(\"c\"));\n    org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.clear();\n    job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, job.getStatus());\n    job.signal(\"/\", \"ERROR\");\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, job.getStatus());\n    junit.framework.Assert.assertTrue(!org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.containsKey(\"b\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.containsKey(\"c\"));\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testActionOKError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    addRecordToWfActionTable(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n    addRecordToWfActionTable(job.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n    _testWfActionSubsetGet(job.getId());\n    java.lang.System.out.println(\"testWfActionSubsetGet Successful\");\n}",
        "ClassName": "TestWorkflowActionSubsetGetJPAExecutor",
        "Label": 1,
        "MethodName": "testWfActionSubsetGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String counters = \"{\\\"g\\\":{\\\"c\\\":10},\\\"org.apache.hadoop.mapred.JobInProgress$Counter\\\":\" + (((((((\"{\\\"TOTAL_LAUNCHED_REDUCES\\\":1,\\\"TOTAL_LAUNCHED_MAPS\\\":2,\\\"DATA_LOCAL_MAPS\\\":2},\\\"ACTION_TYPE\\\":\\\"MAP_REDUCE\\\",\" + \"\\\"FileSystemCounters\\\":{\\\"FILE_BYTES_READ\\\":38,\\\"HDFS_BYTES_READ\\\":19,\") + \"\\\"FILE_BYTES_WRITTEN\\\":146,\\\"HDFS_BYTES_WRITTEN\\\":16},\") + \"\\\"org.apache.hadoop.mapred.Task$Counter\\\":{\\\"REDUCE_INPUT_GROUPS\\\":2,\") + \"\\\"COMBINE_OUTPUT_RECORDS\\\":0,\\\"MAP_INPUT_RECORDS\\\":2,\\\"REDUCE_SHUFFLE_BYTES\\\":22,\") + \"\\\"REDUCE_OUTPUT_RECORDS\\\":2,\\\"SPILLED_RECORDS\\\":4,\\\"MAP_OUTPUT_BYTES\\\":28,\") + \"\\\"MAP_INPUT_BYTES\\\":12,\\\"MAP_OUTPUT_RECORDS\\\":2,\\\"COMBINE_INPUT_RECORDS\\\":0,\") + \"\\\"REDUCE_INPUT_RECORDS\\\":2}}\");\n    org.apache.oozie.WorkflowJobBean workflow = new org.apache.oozie.WorkflowJobBean();\n    workflow.setProtoActionConf(\"<configuration/>\");\n    org.apache.oozie.workflow.lite.LiteWorkflowApp wfApp = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"x\", \"<workflow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"a\"));\n    wfApp.addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"a\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    org.apache.oozie.workflow.WorkflowInstance wi = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(wfApp, new org.apache.oozie.util.XConfiguration(), \"1\");\n    workflow.setWorkflowInstance(wi);\n    workflow.setId(org.apache.oozie.service.Services.get().get(org.apache.oozie.service.UUIDService.class).generateId(org.apache.oozie.service.UUIDService.ApplicationType.WORKFLOW));\n    final org.apache.oozie.WorkflowActionBean action = new org.apache.oozie.WorkflowActionBean();\n    action.setName(\"H\");\n    org.apache.oozie.command.wf.ActionXCommand.ActionExecutorContext context = new org.apache.oozie.command.wf.ActionXCommand.ActionExecutorContext(workflow, action, false, false);\n    context.setVar(org.apache.oozie.action.hadoop.MapReduceActionExecutor.HADOOP_COUNTERS, counters);\n    org.apache.oozie.util.ELEvaluator eval = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.ELService.class).createEvaluator(\"workflow\");\n    org.apache.oozie.DagELFunctions.configureEvaluator(eval, workflow, action);\n    java.lang.String group = \"g\";\n    java.lang.String name = \"c\";\n    junit.framework.Assert.assertEquals(new java.lang.Long(10), eval.evaluate((((\"${hadoop:counters('H')['\" + group) + \"']['\") + name) + \"']}\", java.lang.Long.class));\n    junit.framework.Assert.assertEquals(new java.lang.Long(2), eval.evaluate(\"${hadoop:counters('H')[RECORDS][GROUPS]}\", java.lang.Long.class));\n    junit.framework.Assert.assertEquals(new java.lang.Long(2), eval.evaluate(\"${hadoop:counters('H')[RECORDS][REDUCE_IN]}\", java.lang.Long.class));\n    junit.framework.Assert.assertEquals(new java.lang.Long(2), eval.evaluate(\"${hadoop:counters('H')[RECORDS][REDUCE_OUT]}\", java.lang.Long.class));\n    junit.framework.Assert.assertEquals(new java.lang.Long(2), eval.evaluate(\"${hadoop:counters('H')[RECORDS][MAP_IN]}\", java.lang.Long.class));\n    junit.framework.Assert.assertEquals(new java.lang.Long(2), eval.evaluate(\"${hadoop:counters('H')[RECORDS][MAP_OUT]}\", java.lang.Long.class));\n    junit.framework.Assert.assertEquals(org.apache.oozie.action.hadoop.ActionType.MAP_REDUCE.toString(), eval.evaluate(\"${hadoop:counters('H')['ACTION_TYPE']}\", java.lang.String.class));\n}",
        "ClassName": "TestHadoopELFunctions",
        "Label": 1,
        "MethodName": "testELFunctionsReturningMapReduceStats",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PAUSEDWITHERROR, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSEDWITHERROR, job.getStatus());\n    new org.apache.oozie.command.bundle.BundleJobSuspendXCommand(job.getId()).call();\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDEDWITHERROR, job.getStatus());\n}",
        "ClassName": "TestBundleJobSuspendXCommand",
        "Label": 1,
        "MethodName": "testBundleSuspendWithError2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-action-start\");\n    eval.setVariable(\".datain.ABC\", \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=12;region=us\");\n    eval.setVariable(\".datain.ABC.unresolved\", java.lang.Boolean.FALSE);\n    java.lang.String expr = \"${coord:dataInPartitionFilter('ABC', 'pig')}\";\n    java.lang.String res = org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr);\n    junit.framework.Assert.assertTrue(res.equals(\"(datastamp=='12' AND region=='us')\") || res.equals(\"(region=='us' AND datastamp=='12')\"));\n    eval.setVariable(\".datain.ABC\", \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=12;region=us,\" + \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=13;region=us\");\n    eval.setVariable(\".datain.ABC.unresolved\", java.lang.Boolean.FALSE);\n    expr = \"${coord:dataInPartitionFilter('ABC', 'pig')}\";\n    res = org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr);\n    junit.framework.Assert.assertTrue(((res.equals(\"(datastamp=='12' AND region=='us') OR (datastamp=='13' AND region=='us')\") || res.equals(\"(datastamp=='12' AND region=='us') OR (region=='us' AND datastamp=='13')\")) || res.equals(\"(region=='us' AND datastamp=='12') OR (datastamp=='13' AND region=='us')\")) || res.equals(\"(region=='us' AND datastamp=='12') OR (region=='us' AND datastamp=='13')\"));\n    eval.setVariable(\".datain.ABC\", \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=12;region=us\");\n    eval.setVariable(\".datain.ABC.unresolved\", java.lang.Boolean.FALSE);\n    expr = \"${coord:dataInPartitionFilter('ABC', 'java')}\";\n    res = org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr);\n    junit.framework.Assert.assertTrue(res.equals(\"(datastamp='12' AND region='us')\") || res.equals(\"(region='us' AND datastamp='12')\"));\n}",
        "ClassName": "TestHCatELFunctions",
        "Label": 1,
        "MethodName": "testdataInPartitionFilter",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_STATES_WITHOUT_ERROR, \"false\");\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    org.apache.oozie.CoordinatorJobBean job = this.addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.DONEWITHERROR, false, false);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.FAILED, \"coord-rerun-action1.xml\", 0);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetExecutor = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.DONEWITHERROR, job.getStatus());\n    new org.apache.oozie.command.coord.CoordRerunXCommand(job.getId(), org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_DATE, \"2009-12-15T01:00Z\", false, true).call();\n    job = jpaService.execute(coordJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNINGWITHERROR, job.getStatus());\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunInDoneWithError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testAction(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_SUSPEND, null);\n}",
        "ClassName": "TestV1JobServlet",
        "Label": 1,
        "MethodName": "testSuspend",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp app = parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-schema-valid-global-ext.xml\", -1), new org.apache.hadoop.conf.Configuration());\n    java.lang.String b = app.getNode(\"b\").getConf();\n    java.lang.String expectedB = \"<distcp xmlns=\\\"uri:oozie:distcp-action:0.1\\\">\\r\\n\" + ((((((((((((((((((\"  <job-tracker>blah</job-tracker>\\r\\n\" + \"  <name-node>meh</name-node>\\r\\n\") + \"  <prepare>\\r\\n\") + \"    <delete path=\\\"/tmp2\\\" />\\r\\n\") + \"    <mkdir path=\\\"/tmp2\\\" />\\r\\n\") + \"  </prepare>\\r\\n\") + \"  <configuration>\\r\\n\") + \"    <property>\\r\\n\") + \"      <name>a</name>\\r\\n\") + \"      <value>A2</value>\\r\\n\") + \"    </property>\\r\\n\") + \"    <property>\\r\\n\") + \"      <name>b</name>\\r\\n\") + \"      <value>B</value>\\r\\n\") + \"    </property>\\r\\n\") + \"  </configuration>\\r\\n\") + \"  <arg>/tmp/data.txt</arg>\\r\\n\") + \"  <arg>/tmp2/data.txt</arg>\\r\\n\") + \"</distcp>\");\n    junit.framework.Assert.assertEquals(expectedB.replaceAll(\" \", \"\"), b.replaceAll(\" \", \"\"));\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testParserGlobalExtensionActionsLocalAlreadyExists",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Properties props = new java.util.Properties();\n    props.setProperty(\"log4j.appender.oozie.File\", \"\");\n    java.io.File propsFile = new java.io.File(getTestCaseConfDir(), \"test-disable-log-over-ws-log4j.properties\");\n    java.io.FileOutputStream fos = new java.io.FileOutputStream(propsFile);\n    props.store(fos, \"\");\n    setSystemProperty(org.apache.oozie.service.XLogService.LOG4J_FILE, propsFile.getName());\n    org.apache.oozie.service.XLogService ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertTrue(doStreamDisabledCheck(ls));\n    ls.destroy();\n    props.setProperty(\"log4j.appender.oozie.File\", \"oozie.log\");\n    fos = new java.io.FileOutputStream(propsFile);\n    props.store(fos, \"\");\n    ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertTrue(doStreamDisabledCheck(ls));\n    ls.destroy();\n    props.setProperty(\"log4j.appender.oozie.File\", \"${oozie.log.dir}/oozie.log\");\n    props.setProperty(\"log4j.appender.oozie\", \"\");\n    fos = new java.io.FileOutputStream(propsFile);\n    props.store(fos, \"\");\n    ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertTrue(doStreamDisabledCheck(ls));\n    ls.destroy();\n    props.setProperty(\"log4j.appender.oozie\", \"org.blah.blah\");\n    fos = new java.io.FileOutputStream(propsFile);\n    props.store(fos, \"\");\n    ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertTrue(doStreamDisabledCheck(ls));\n    ls.destroy();\n    props.setProperty(\"log4j.appender.oozie\", \"org.apache.log4j.DailyRollingFileAppender\");\n    props.setProperty(\"log4j.appender.oozie.DatePattern\", \"\");\n    fos = new java.io.FileOutputStream(propsFile);\n    props.store(fos, \"\");\n    ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertTrue(doStreamDisabledCheck(ls));\n    ls.destroy();\n    props.setProperty(\"log4j.appender.oozie.DatePattern\", \"'.'yyyy-MM\");\n    fos = new java.io.FileOutputStream(propsFile);\n    props.store(fos, \"\");\n    ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertTrue(doStreamDisabledCheck(ls));\n    ls.destroy();\n    props.setProperty(\"log4j.appender.oozie.DatePattern\", \"'.'yyyy-MM-dd\");\n    fos = new java.io.FileOutputStream(propsFile);\n    props.store(fos, \"\");\n    ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertFalse(doStreamDisabledCheck(ls));\n    ls.destroy();\n    props.setProperty(\"log4j.appender.oozie.DatePattern\", \"'.'yyyy-MM-dd-HH\");\n    fos = new java.io.FileOutputStream(propsFile);\n    props.store(fos, \"\");\n    ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertFalse(doStreamDisabledCheck(ls));\n    ls.destroy();\n    props.setProperty(\"log4j.appender.oozie\", \"org.apache.log4j.rolling.RollingFileAppender\");\n    props.setProperty(\"log4j.appender.oozie.RollingPolicy.FileNamePattern\", \"\");\n    fos = new java.io.FileOutputStream(propsFile);\n    props.store(fos, \"\");\n    ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertTrue(doStreamDisabledCheck(ls));\n    ls.destroy();\n    props.setProperty(\"log4j.appender.oozie.RollingPolicy.FileNamePattern\", \"${oozie.log.dir}/oozie.log-blah\");\n    fos = new java.io.FileOutputStream(propsFile);\n    props.store(fos, \"\");\n    ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertTrue(doStreamDisabledCheck(ls));\n    ls.destroy();\n    props.setProperty(\"log4j.appender.oozie.RollingPolicy.FileNamePattern\", \"${oozie.log.dir}/blah.log-%d{yyyy-MM-dd-HH}\");\n    fos = new java.io.FileOutputStream(propsFile);\n    props.store(fos, \"\");\n    ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertTrue(doStreamDisabledCheck(ls));\n    ls.destroy();\n    props.setProperty(\"log4j.appender.oozie.RollingPolicy.FileNamePattern\", \"${oozie.log.dir}/oozie.log-%d{yyyy-MM-dd-HH}\");\n    fos = new java.io.FileOutputStream(propsFile);\n    props.store(fos, \"\");\n    ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertFalse(doStreamDisabledCheck(ls));\n    ls.destroy();\n    props.setProperty(\"log4j.appender.oozie.RollingPolicy.FileNamePattern\", \"${oozie.log.dir}/oozie.log-%d{yyyy-MM-dd-HH}.gz\");\n    fos = new java.io.FileOutputStream(propsFile);\n    props.store(fos, \"\");\n    ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertFalse(doStreamDisabledCheck(ls));\n    ls.destroy();\n}",
        "ClassName": "TestXLogService",
        "Label": 1,
        "MethodName": "testDisableLogOverWS",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.StringBuffer sb = new java.lang.StringBuffer(\"\");\n    org.apache.oozie.util.TestMemoryLocks.Locker l1 = new org.apache.oozie.util.TestMemoryLocks.WriteLocker(\"a\", 1, 0, sb);\n    org.apache.oozie.util.TestMemoryLocks.Locker l2 = new org.apache.oozie.util.TestMemoryLocks.WriteLocker(\"a\", 2, 1000, sb);\n    new java.lang.Thread(l1).start();\n    java.lang.Thread.sleep(500);\n    new java.lang.Thread(l2).start();\n    java.lang.Thread.sleep(500);\n    l1.finish();\n    java.lang.Thread.sleep(500);\n    l2.finish();\n    java.lang.Thread.sleep(500);\n    junit.framework.Assert.assertEquals(\"a:1-L a:1-U a:2-L a:2-U\", sb.toString().trim());\n}",
        "ClassName": "TestMemoryLocks",
        "Label": 1,
        "MethodName": "testTimeoutWaitingWriteLock",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration hConf = org.apache.oozie.service.Services.get().getConf();\n    org.apache.oozie.service.HadoopAccessorService has = new org.apache.oozie.service.HadoopAccessorService();\n    hConf.set(\"oozie.service.HadoopAccessorService.supported.filesystems\", \"hdfs,foo\");\n    has.init(hConf);\n    has.checkSupportedFilesystem(new java.net.URI(\"hdfs://localhost:1234/blah\"));\n    has.checkSupportedFilesystem(new java.net.URI(\"foo://localhost:1234/blah\"));\n    try {\n        has.checkSupportedFilesystem(new java.net.URI(\"file://localhost:1234/blah\"));\n        junit.framework.Assert.fail(\"Should have thrown an exception because 'file' scheme isn't allowed\");\n    } catch (org.apache.oozie.service.HadoopAccessorException hae) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0904, hae.getErrorCode());\n    }\n    has.checkSupportedFilesystem(new java.net.URI(\"/blah\"));\n    has = new org.apache.oozie.service.HadoopAccessorService();\n    hConf.set(\"oozie.service.HadoopAccessorService.supported.filesystems\", \"*\");\n    has.init(hConf);\n    has.checkSupportedFilesystem(new java.net.URI(\"hdfs://localhost:1234/blah\"));\n    has.checkSupportedFilesystem(new java.net.URI(\"foo://localhost:1234/blah\"));\n    has.checkSupportedFilesystem(new java.net.URI(\"file://localhost:1234/blah\"));\n    has.checkSupportedFilesystem(new java.net.URI(\"/blah\"));\n}",
        "ClassName": "TestHadoopAccessorService",
        "Label": 1,
        "MethodName": "testCheckSupportedFilesystem",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.WorkflowJobBean job = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    org.apache.oozie.WorkflowActionBean action = this.addRecordToWfActionTable(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.USER_RETRY);\n    java.lang.Runnable recoveryRunnable = new org.apache.oozie.service.RecoveryService.RecoveryRunnable(0, 60, 60);\n    recoveryRunnable.run();\n    sleep(3000);\n    final org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action.getId());\n    waitFor(5000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.WorkflowActionBean a = jpaService.execute(wfActionGetCmd);\n            return a.getExternalId() != null;\n        }\n    });\n    action = jpaService.execute(wfActionGetCmd);\n    junit.framework.Assert.assertNotNull(action.getExternalId());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.RUNNING, action.getStatus());\n    org.apache.oozie.command.wf.ActionXCommand.ActionExecutorContext context = new org.apache.oozie.command.wf.ActionXCommand.ActionExecutorContext(job, action, false, false);\n    org.apache.oozie.action.hadoop.MapReduceActionExecutor actionExecutor = new org.apache.oozie.action.hadoop.MapReduceActionExecutor();\n    org.apache.hadoop.mapred.JobConf conf = actionExecutor.createBaseHadoopConf(context, org.apache.oozie.util.XmlUtils.parseXml(action.getConf()));\n    java.lang.String user = conf.get(\"user.name\");\n    java.lang.String group = conf.get(\"group.name\");\n    org.apache.hadoop.mapred.JobClient jobClient = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HadoopAccessorService.class).createJobClient(user, conf);\n    java.lang.String launcherId = action.getExternalId();\n    final org.apache.hadoop.mapred.RunningJob launcherJob = jobClient.getJob(org.apache.hadoop.mapred.JobID.forName(launcherId));\n    waitFor(240 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return launcherJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(launcherJob.isSuccessful());\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.hasIdSwap(launcherJob));\n}",
        "ClassName": "TestRecoveryService",
        "Label": 1,
        "MethodName": "testWorkflowActionRecoveryUserRetry",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String expr1 = \"${coord:formatTime(\\\"2009-09-08T23:59Z\\\", \\\"yyyy\\\")}\";\n    java.lang.String expr2 = \"${coord:formatTime(\\\"2009-09-08T23:59Z\\\", \\\"yyyyMMdd_HHmmss\\\")}\";\n    init(\"coord-action-create\");\n    junit.framework.Assert.assertEquals(\"2009\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr1));\n    junit.framework.Assert.assertEquals(\"20090908_235900\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr2));\n    init(\"coord-action-create-inst\");\n    junit.framework.Assert.assertEquals(\"2009\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr1));\n    junit.framework.Assert.assertEquals(\"20090908_235900\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr2));\n    init(\"coord-action-start\");\n    junit.framework.Assert.assertEquals(\"2009\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr1));\n    junit.framework.Assert.assertEquals(\"20090908_235900\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr2));\n    java.lang.String utcDate = \"2009-09-08T23:59Z\";\n    java.lang.String expr3 = \"${coord:formatTime(date, \\\"yyyy\\\")}\";\n    java.lang.String expr3_eval = ((\"${coord:formatTime('\" + utcDate) + \"' , \") + \"yyyy)}\";\n    init(\"coord-job-submit-instances\");\n    eval.setVariable(\"date\", utcDate);\n    junit.framework.Assert.assertEquals(expr3_eval, org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr3));\n    init(\"coord-job-submit-data\");\n    eval.setVariable(\"date\", utcDate);\n    junit.framework.Assert.assertEquals(expr3_eval, org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr3));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testFormatTime",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.ParamChecker.validateActionName(\"azAZ09_-\");\n    try {\n        org.apache.oozie.util.ParamChecker.validateActionName(null);\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n    }\n    try {\n        org.apache.oozie.util.ParamChecker.validateActionName(\"\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n    }\n    try {\n        org.apache.oozie.util.ParamChecker.validateActionName(\"@\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n    }\n}",
        "ClassName": "TestParamChecker",
        "Label": 1,
        "MethodName": "testValidToken",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean workflow = new org.apache.oozie.WorkflowJobBean();\n    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();\n    java.io.DataOutputStream dos = new java.io.DataOutputStream(baos);\n    workflow.write(dos);\n    dos.close();\n    java.io.DataInputStream dis = new java.io.DataInputStream(new java.io.ByteArrayInputStream(baos.toByteArray()));\n    workflow = new org.apache.oozie.WorkflowJobBean();\n    workflow.readFields(dis);\n}",
        "ClassName": "TestWorkflowBean",
        "Label": 1,
        "MethodName": "testEmptyWriteRead",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String actionXml = (((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<main-class>\") + org.apache.oozie.action.hadoop.LauncherMainTester.class.getName()) + \"</main-class>\") + \"</java>\";\n    final org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml, null);\n    org.apache.hadoop.mapred.RunningJob runningJob = submitAction(context);\n    java.lang.String launcherId = context.getAction().getExternalId();\n    waitFor(60 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.action.hadoop.JavaActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n            org.apache.hadoop.conf.Configuration conf = ae.createBaseHadoopConf(context, org.apache.oozie.util.XmlUtils.parseXml(actionXml));\n            return org.apache.oozie.action.hadoop.LauncherMapper.getRecoveryId(conf, context.getActionDir(), context.getRecoveryId()) != null;\n        }\n    });\n    final org.apache.hadoop.mapred.RunningJob runningJob2 = submitAction(context);\n    junit.framework.Assert.assertEquals(launcherId, runningJob2.getJobID().toString());\n    junit.framework.Assert.assertEquals(launcherId, context.getAction().getExternalId());\n    waitFor(60 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return runningJob2.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(runningJob.isSuccessful());\n    org.apache.oozie.action.ActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    ae.check(context, context.getAction());\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", context.getAction().getExternalStatus());\n    junit.framework.Assert.assertNull(context.getAction().getData());\n    ae.end(context, context.getAction());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, context.getAction().getStatus());\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testRecovery",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"name\", \"def\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"one\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"f\", \"end\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\", \"three\" }))).addNode(new org.apache.oozie.workflow.lite.DecisionNodeDef(\"two\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestDecisionNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"four\", \"end\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"three\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"four\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.KillNodeDef(\"k\", \"kill\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class)).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    try {\n        invokeForkJoin(parser, def);\n        junit.framework.Assert.fail(\"Expected to catch an exception but did not encounter any\");\n    } catch (java.lang.Exception ex) {\n        org.apache.oozie.workflow.WorkflowException we = ((org.apache.oozie.workflow.WorkflowException) (ex.getCause()));\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0737, we.getErrorCode());\n        junit.framework.Assert.assertTrue(we.getMessage().contains(\"node [two]\"));\n        junit.framework.Assert.assertTrue(we.getMessage().contains(\"node [end]\"));\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testDecisionToEndForkJoinFailure",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path mkdir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"mkdir\");\n    org.apache.hadoop.fs.Path mkdirX = new org.apache.hadoop.fs.Path(mkdir.toUri().getPath());\n    org.apache.hadoop.fs.Path delete = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"delete\");\n    org.apache.hadoop.fs.Path deleteX = new org.apache.hadoop.fs.Path(delete.toUri().getPath());\n    fs.mkdirs(delete);\n    org.apache.hadoop.fs.Path source = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"source\");\n    org.apache.hadoop.fs.Path sourceX = new org.apache.hadoop.fs.Path(source.toUri().getPath());\n    fs.mkdirs(source);\n    org.apache.hadoop.fs.Path target = new org.apache.hadoop.fs.Path(new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"target\").toUri().getPath());\n    org.apache.hadoop.fs.Path chmod1 = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"chmod1\");\n    org.apache.hadoop.fs.Path chmod1X = new org.apache.hadoop.fs.Path(chmod1.toUri().getPath());\n    fs.mkdirs(chmod1);\n    org.apache.hadoop.fs.Path child1 = new org.apache.hadoop.fs.Path(chmod1, \"child1\");\n    fs.mkdirs(child1);\n    org.apache.hadoop.fs.Path chmod2 = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"chmod2\");\n    org.apache.hadoop.fs.Path chmod2X = new org.apache.hadoop.fs.Path(chmod2.toUri().getPath());\n    fs.mkdirs(chmod2);\n    org.apache.hadoop.fs.Path child2 = new org.apache.hadoop.fs.Path(chmod2, \"child2\");\n    fs.mkdirs(child2);\n    org.apache.hadoop.fs.Path newFile1 = new org.apache.hadoop.fs.Path(mkdir + \"newFile1\");\n    org.apache.hadoop.fs.Path newFile1X = new org.apache.hadoop.fs.Path(newFile1.toUri().getPath());\n    org.apache.hadoop.fs.Path newFile2 = new org.apache.hadoop.fs.Path(mkdir + \"newFile2\");\n    org.apache.hadoop.fs.Path newFile2X = new org.apache.hadoop.fs.Path(newFile2.toUri().getPath());\n    fs.createNewFile(newFile1);\n    org.apache.hadoop.fs.Path chmod3 = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"chmod3\");\n    org.apache.hadoop.fs.Path chmod3X = new org.apache.hadoop.fs.Path(chmod3.toUri().getPath());\n    fs.mkdirs(chmod3);\n    org.apache.hadoop.fs.Path child3 = new org.apache.hadoop.fs.Path(chmod3, \"child3\");\n    fs.mkdirs(child3);\n    org.apache.hadoop.fs.Path grandchild3 = new org.apache.hadoop.fs.Path(child3, \"grandchild1\");\n    fs.mkdirs(grandchild3);\n    java.lang.String str = java.text.MessageFormat.format(\"<root><name-node>{0}</name-node>\" + ((((((((\"<mkdir path=''{1}''/>\" + \"<delete path=''{2}''/>\") + \"<move source=''{3}'' target=''{4}''/>\") + \"<chmod path=''{5}'' permissions=''-rwxrwxrwx''/>\") + \"<chmod path=''{6}'' permissions=''-rwxrwx---'' dir-files=''false''/>\") + \"<touchz path=''{7}''/>\") + \"<touchz path=''{8}''/>\") + \"<chmod path=''{9}'' permissions=''-rwxrwx---''> <recursive/> </chmod>\") + \"</root>\"), getNameNodeUri(), mkdirX, deleteX, sourceX, target, chmod1X, chmod2X, newFile1X, newFile2X, chmod3X);\n    org.jdom.Element xml = org.apache.oozie.util.XmlUtils.parseXml(str);\n    ae.doOperations(createContext(\"<fs/>\"), xml);\n    junit.framework.Assert.assertTrue(fs.exists(mkdir));\n    junit.framework.Assert.assertFalse(fs.exists(delete));\n    junit.framework.Assert.assertFalse(fs.exists(source));\n    junit.framework.Assert.assertTrue(fs.exists(target));\n    junit.framework.Assert.assertTrue(fs.exists(newFile1));\n    junit.framework.Assert.assertTrue(fs.exists(newFile2));\n    junit.framework.Assert.assertEquals(\"rwxrwxrwx\", fs.getFileStatus(chmod1).getPermission().toString());\n    junit.framework.Assert.assertNotSame(\"rwxrwxrwx\", fs.getFileStatus(child1).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxrwx---\", fs.getFileStatus(chmod2).getPermission().toString());\n    junit.framework.Assert.assertNotSame(\"rwxrwx---\", fs.getFileStatus(child2).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxrwx---\", fs.getFileStatus(child3).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxrwx---\", fs.getFileStatus(grandchild3).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxrwx---\", fs.getFileStatus(child3).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxrwx---\", fs.getFileStatus(grandchild3).getPermission().toString());\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testDoOperationsWithNameNodeElement",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertEquals(\"\", org.apache.oozie.util.ELConstantsFunctions.trim(null));\n    junit.framework.Assert.assertEquals(\"a\", org.apache.oozie.util.ELConstantsFunctions.trim(\" a \"));\n}",
        "ClassName": "TestELConstantsFunctions",
        "Label": 1,
        "MethodName": "testTrim",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = createCoordAction(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    action.setSlaXml(org.apache.oozie.test.XDataTestCase.slaXml);\n    insertRecordCoordAction(action);\n    _testGetActionByExternalId(action.getId(), job.getId(), org.apache.oozie.client.CoordinatorAction.Status.WAITING, 0, action.getId() + \"_E\", org.apache.oozie.test.XDataTestCase.slaXml);\n}",
        "ClassName": "TestCoordActionGetForExternalIdJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_STATES_WITHOUT_ERROR, \"false\");\n    services = new org.apache.oozie.service.Services();\n    setClassesToBeExcluded(services.getConf(), excludedServices);\n    services.init();\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, true, true, 4);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.KILLED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUSPENDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.SUSPENDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 4, org.apache.oozie.client.CoordinatorAction.Status.SUSPENDED, \"coord-action-get.xml\", 0);\n    final java.lang.String jobId = job.getId();\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(20 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(jobId));\n            return coordJob.getStatus() == org.apache.oozie.client.Job.Status.SUSPENDEDWITHERROR;\n        }\n    });\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDEDWITHERROR, job.getStatus());\n    junit.framework.Assert.assertFalse(job.isPending());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServiceSuspendedWithError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.SchemaService wss = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.SchemaService.class);\n    javax.xml.validation.Validator validator = wss.getSchema(org.apache.oozie.service.SchemaService.SchemaName.WORKFLOW).newValidator();\n    try {\n        validator.validate(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(org.apache.oozie.service.TestSchemaService.WF_SLA_APP_NW)));\n        junit.framework.Assert.fail(\"Schema service check does not work\");\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestSchemaService",
        "Label": 1,
        "MethodName": "testWfSLASchemaNW",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    createTestTable();\n    java.lang.String location1 = getPartitionDir(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"year=2012;month=12;dt=02;country=us\");\n    java.lang.String location2 = getPartitionDir(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"year=2012;month=12;dt=03;country=us\");\n    createPartitionForTestDelete(true, true);\n    java.net.URI hcatURI = getHCatURI(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"year=2012;month=12;dt=02;country=us\");\n    org.apache.oozie.dependency.URIHandler uriHandler = uriService.getURIHandler(hcatURI);\n    junit.framework.Assert.assertTrue(uriHandler.exists(hcatURI, conf, org.apache.oozie.test.XTestCase.getTestUser()));\n    org.apache.oozie.action.hadoop.LauncherURIHandlerFactory uriHandlerFactory = new org.apache.oozie.action.hadoop.LauncherURIHandlerFactory(uriService.getLauncherConfig());\n    org.apache.oozie.action.hadoop.LauncherURIHandler handler = uriHandlerFactory.getURIHandler(hcatURI);\n    handler.delete(hcatURI, conf);\n    junit.framework.Assert.assertFalse(getFileSystem().exists(new org.apache.hadoop.fs.Path(location1)));\n    junit.framework.Assert.assertTrue(getFileSystem().exists(new org.apache.hadoop.fs.Path(location2)));\n    junit.framework.Assert.assertEquals(0, getPartitions(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"year=2012;month=12;dt=02;country=us\").size());\n    junit.framework.Assert.assertEquals(1, getPartitions(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"year=2012;month=12;dt=03;country=us\").size());\n    createPartitionForTestDelete(true, false);\n    hcatURI = getHCatURI(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"year=2012;month=12\");\n    handler.delete(hcatURI, conf);\n    junit.framework.Assert.assertFalse(getFileSystem().exists(new org.apache.hadoop.fs.Path(location1)));\n    junit.framework.Assert.assertFalse(getFileSystem().exists(new org.apache.hadoop.fs.Path(location2)));\n    junit.framework.Assert.assertEquals(0, getPartitions(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"year=2012;month=12;dt=02;country=us\").size());\n    junit.framework.Assert.assertEquals(0, getPartitions(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"year=2012;month=12;dt=03;country=us\").size());\n    createPartitionForTestDelete(true, true);\n    hcatURI = getHCatURI(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"month=12;country=us\");\n    handler.delete(hcatURI, conf);\n    junit.framework.Assert.assertFalse(getFileSystem().exists(new org.apache.hadoop.fs.Path(location1)));\n    junit.framework.Assert.assertFalse(getFileSystem().exists(new org.apache.hadoop.fs.Path(location2)));\n    junit.framework.Assert.assertEquals(0, getPartitions(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"year=2012;month=12;dt=02;country=us\").size());\n    junit.framework.Assert.assertEquals(0, getPartitions(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"year=2012;month=12;dt=03;country=us\").size());\n    createPartitionForTestDelete(true, true);\n    hcatURI = getHCatURI(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"country=us\");\n    handler.delete(hcatURI, conf);\n    junit.framework.Assert.assertFalse(getFileSystem().exists(new org.apache.hadoop.fs.Path(location1)));\n    junit.framework.Assert.assertFalse(getFileSystem().exists(new org.apache.hadoop.fs.Path(location2)));\n    junit.framework.Assert.assertEquals(0, getPartitions(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"year=2012;month=12;dt=02;country=us\").size());\n    junit.framework.Assert.assertEquals(0, getPartitions(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"year=2012;month=12;dt=03;country=us\").size());\n    createPartitionForTestDelete(true, true);\n    hcatURI = getHCatURI(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"dt=03\");\n    handler.delete(hcatURI, conf);\n    junit.framework.Assert.assertTrue(getFileSystem().exists(new org.apache.hadoop.fs.Path(location1)));\n    junit.framework.Assert.assertFalse(getFileSystem().exists(new org.apache.hadoop.fs.Path(location2)));\n    junit.framework.Assert.assertEquals(1, getPartitions(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"year=2012;month=12;dt=02;country=us\").size());\n    junit.framework.Assert.assertEquals(0, getPartitions(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"year=2012;month=12;dt=03;country=us\").size());\n    createPartitionForTestDelete(false, true);\n    hcatURI = getHCatURI(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"dt=09\");\n    handler.delete(hcatURI, conf);\n    junit.framework.Assert.assertTrue(getFileSystem().exists(new org.apache.hadoop.fs.Path(location1)));\n    junit.framework.Assert.assertTrue(getFileSystem().exists(new org.apache.hadoop.fs.Path(location2)));\n    junit.framework.Assert.assertEquals(1, getPartitions(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"year=2012;month=12;dt=02;country=us\").size());\n    junit.framework.Assert.assertEquals(1, getPartitions(org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.db, org.apache.oozie.action.hadoop.TestLauncherHCatURIHandler.table, \"year=2012;month=12;dt=03;country=us\").size());\n    dropTestTable();\n}",
        "ClassName": "TestLauncherHCatURIHandler",
        "Label": 1,
        "MethodName": "testDelete",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().getConf().setBoolean(org.apache.oozie.coord.CoordELFunctions.LATEST_EL_USE_CURRENT_TIME, false);\n    java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-TestCoordActionInputCheckXCommand-C\";\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-15T23:59\" + TZ);\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-16T23:59\" + TZ);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(jobId, startTime, endTime, \"latest\");\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.CoordinatorActionBean action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor(job.getId() + \"@1\"));\n    final java.lang.String pushMissingDependency = (\"file://\" + getTestCaseDir()) + \"/2009/02/05\";\n    action.setPushMissingDependencies(pushMissingDependency);\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionUpdatePushInputCheckJPAExecutor(action));\n    java.lang.String actionXML = action.getActionXml();\n    java.lang.String actionCreationTime = \"2009-02-15T01:00\" + TZ;\n    actionXML = actionXML.replaceAll(\"action-actual-time=\\\".*\\\">\", (\"action-actual-time=\\\"\" + actionCreationTime) + \"\\\">\");\n    action.setActionXml(actionXML);\n    action.setCreatedTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(actionCreationTime));\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionUpdateForInputCheckJPAExecutor(action));\n    action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor(job.getId() + \"@1\"));\n    junit.framework.Assert.assertTrue(action.getActionXml().contains(\"action-actual-time=\\\"2009-02-15T01:00\"));\n    new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(job.getId() + \"@1\", job.getId()).call();\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(job.getId() + \"@1\").call();\n    action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor(job.getId() + \"@1\"));\n    junit.framework.Assert.assertEquals(org.apache.oozie.command.coord.CoordCommandUtils.RESOLVED_UNRESOLVED_SEPARATOR + \"${coord:latestRange(-3,0)}\", action.getMissingDependencies());\n    junit.framework.Assert.assertEquals(pushMissingDependency, action.getPushMissingDependencies());\n    createDir(getTestCaseDir() + \"/2009/03/05/\");\n    createDir(getTestCaseDir() + \"/2009/02/19/\");\n    createDir(getTestCaseDir() + \"/2009/02/12/\");\n    createDir(getTestCaseDir() + \"/2009/01/22/\");\n    createDir(getTestCaseDir() + \"/2009/01/08/\");\n    createDir(getTestCaseDir() + \"/2009/01/01/\");\n    new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(job.getId() + \"@1\", job.getId()).call();\n    action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor(job.getId() + \"@1\"));\n    junit.framework.Assert.assertEquals(org.apache.oozie.command.coord.CoordCommandUtils.RESOLVED_UNRESOLVED_SEPARATOR + \"${coord:latestRange(-3,0)}\", action.getMissingDependencies());\n    junit.framework.Assert.assertEquals(pushMissingDependency, action.getPushMissingDependencies());\n    createDir(getTestCaseDir() + \"/2009/02/05\");\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(job.getId() + \"@1\").call();\n    action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor(job.getId() + \"@1\"));\n    junit.framework.Assert.assertEquals(\"\", action.getPushMissingDependencies());\n    checkCoordAction(job.getId() + \"@1\", org.apache.oozie.command.coord.CoordCommandUtils.RESOLVED_UNRESOLVED_SEPARATOR + \"${coord:latestRange(-3,0)}\", org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(job.getId() + \"@1\", job.getId()).call();\n    java.lang.Thread.sleep(1000);\n    action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor(job.getId() + \"@1\"));\n    junit.framework.Assert.assertEquals(\"\", action.getMissingDependencies());\n    actionXML = action.getActionXml();\n    java.lang.String resolvedList = (((((((((((((\"file://\" + getTestCaseDir()) + \"/2009/02/12\") + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"file://\") + getTestCaseDir()) + \"/2009/02/05\") + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"file://\") + getTestCaseDir()) + \"/2009/01/22\") + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"file://\") + getTestCaseDir()) + \"/2009/01/08\";\n    java.lang.System.out.println(\"Expected: \" + resolvedList);\n    java.lang.System.out.println(\"Actual: \" + actionXML.substring(actionXML.indexOf(\"<uris>\") + 6, actionXML.indexOf(\"</uris>\")));\n    junit.framework.Assert.assertEquals(resolvedList, actionXML.substring(actionXML.indexOf(\"<uris>\") + 6, actionXML.indexOf(\"</uris>\")));\n}",
        "ClassName": "TestCoordActionInputCheckXCommand",
        "Label": 1,
        "MethodName": "testActionInputCheckLatestActionCreationTimeWithPushDependency",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.MapReduceActionExecutor ae = new org.apache.oozie.action.hadoop.MapReduceActionExecutor();\n    org.jdom.Element e = new org.jdom.Element(\"mapreduce\");\n    junit.framework.Assert.assertNull(ae.getDefaultShareLibName(e));\n    e.addContent(new org.jdom.Element(\"streaming\"));\n    junit.framework.Assert.assertEquals(\"mapreduce-streaming\", ae.getDefaultShareLibName(e));\n}",
        "ClassName": "TestMapReduceActionExecutor",
        "Label": 1,
        "MethodName": "testDefaultShareLibName",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String newHCatDependency1 = (\"hcat://\" + server) + \"/nodb/notable/dt=20120430;country=brazil\";\n    java.lang.String newHCatDependency2 = (\"hcat://\" + server) + \"/nodb/notable/dt=20120430;country=usa\";\n    java.lang.String newHCatDependency = (newHCatDependency1 + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + newHCatDependency2;\n    java.lang.String actionId = addInitRecords(newHCatDependency);\n    checkCoordAction(actionId, newHCatDependency, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    try {\n        new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId, true).call();\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception e) {\n        junit.framework.Assert.assertTrue(e.getMessage().contains(\"NoSuchObjectException\"));\n    }\n    checkCoordAction(actionId, newHCatDependency, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    org.apache.oozie.service.PartitionDependencyManagerService pdms = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.PartitionDependencyManagerService.class);\n    org.apache.oozie.service.HCatAccessorService hcatService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HCatAccessorService.class);\n    junit.framework.Assert.assertNull(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency1)));\n    junit.framework.Assert.assertFalse(hcatService.isRegisteredForNotification(new org.apache.oozie.util.HCatURI(newHCatDependency1)));\n    long timeOutCreationTime = java.lang.System.currentTimeMillis() - ((12 * 60) * 1000);\n    setCoordActionCreationTime(actionId, timeOutCreationTime);\n    try {\n        new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId).call();\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception e) {\n        junit.framework.Assert.assertTrue(e.getMessage().contains(\"NoSuchObjectException\"));\n    }\n    java.lang.Thread.sleep(100);\n    checkCoordAction(actionId, newHCatDependency, org.apache.oozie.client.CoordinatorAction.Status.TIMEDOUT);\n}",
        "ClassName": "TestCoordPushDependencyCheckXCommand",
        "Label": 1,
        "MethodName": "testTimeOutWithException1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testTransient(\"start.transient\", org.apache.oozie.client.WorkflowAction.Status.START_RETRY, org.apache.oozie.client.WorkflowAction.Status.START_MANUAL, \"start\");\n    junit.framework.Assert.assertTrue(true);\n}",
        "ClassName": "TestActionErrors",
        "Label": 1,
        "MethodName": "testStartTransient",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.XLog.Info.defineParameter(\"A\");\n    junit.framework.Assert.assertEquals(\"A[-]\", org.apache.oozie.util.XLog.Info.get().createPrefix());\n    org.apache.oozie.util.XLog.Info.get().setParameter(\"A\", \"a\");\n    junit.framework.Assert.assertEquals(\"A[a]\", org.apache.oozie.util.XLog.Info.get().createPrefix());\n    java.lang.Thread t = new java.lang.Thread() {\n        public void run() {\n            junit.framework.Assert.assertEquals(\"A[-]\", org.apache.oozie.util.XLog.Info.get().createPrefix());\n            org.apache.oozie.util.XLog.Info.get().setParameter(\"A\", \"aa\");\n        }\n    };\n    t.start();\n    t.join();\n    junit.framework.Assert.assertEquals(\"A[a]\", org.apache.oozie.util.XLog.Info.get().createPrefix());\n}",
        "ClassName": "TestXLog",
        "Label": 1,
        "MethodName": "testInfoThreadLocal",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.EventHandlerService ehs = _testEventHandlerService();\n    junit.framework.Assert.assertTrue(ehs.getEventQueue() instanceof org.apache.oozie.event.MemoryEventQueue);\n    java.util.Set<java.lang.String> jobtypes = ehs.getAppTypes();\n    junit.framework.Assert.assertTrue(jobtypes.contains(\"workflow_job\"));\n    junit.framework.Assert.assertTrue(jobtypes.contains(\"coordinator_action\"));\n    org.apache.oozie.service.Services services = org.apache.oozie.service.Services.get();\n    services.destroy();\n    services = new org.apache.oozie.service.Services();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    conf.set(org.apache.oozie.service.Services.CONF_SERVICE_EXT_CLASSES, \"\");\n    services.init();\n    junit.framework.Assert.assertFalse(org.apache.oozie.service.EventHandlerService.isEnabled());\n}",
        "ClassName": "TestEventHandlerService",
        "Label": 1,
        "MethodName": "testService",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration(false);\n    java.lang.String str = \"<root xmlns=\\\"uri:oozie:workflow:0.4\\\"><parameters>\" + (\"<property><name></name></property>\" + \"</parameters></root>\");\n    try {\n        org.apache.oozie.util.ParameterVerifier.verifyParameters(conf, org.apache.oozie.util.XmlUtils.parseXml(str));\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.util.ParameterVerifierException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0739, ex.getErrorCode());\n    }\n    str = \"<root xmlns=\\\"uri:oozie:workflow:0.4\\\"><parameters>\" + ((\"<property><name>hello</name></property>\" + \"<property><name></name></property>\") + \"</parameters></root>\");\n    try {\n        org.apache.oozie.util.ParameterVerifier.verifyParameters(conf, org.apache.oozie.util.XmlUtils.parseXml(str));\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.util.ParameterVerifierException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0739, ex.getErrorCode());\n    }\n}",
        "ClassName": "TestParameterVerifier",
        "Label": 1,
        "MethodName": "testVerifyParametersEmptyName",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.client.OozieClient client = org.apache.oozie.local.LocalOozie.getCoordClient();\n    client.validateWSVersion();\n}",
        "ClassName": "TestLocalOozieClientCoord",
        "Label": 1,
        "MethodName": "testValidateWSVersion",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    prepareOozieConfDir(\"oozie-sitealternate.xml\", \"oozie-alternate.xml\");\n    org.apache.oozie.service.ConfigurationService cl = new org.apache.oozie.service.ConfigurationService();\n    cl.init(null);\n    junit.framework.Assert.assertEquals(\"ALTERNATE1\", cl.getConf().get(\"oozie.system.id\"));\n    junit.framework.Assert.assertEquals(\"ALTERNATE2\", cl.getConf().get(\"oozie.dummy\"));\n    cl.destroy();\n}",
        "ClassName": "TestConfigurationService",
        "Label": 1,
        "MethodName": "testValueFromSiteAlternate",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-action-start\");\n    eval.setVariable(\".datain.ABC\", \"file:///tmp/coord/US/2009/1/30,file:///tmp/coord/US/2009/1/31\");\n    eval.setVariable(\".datain.ABC.unresolved\", java.lang.Boolean.FALSE);\n    java.lang.String expr = \"${coord:dataIn('ABC')}\";\n    junit.framework.Assert.assertEquals(\"file:///tmp/coord/US/2009/1/30,file:///tmp/coord/US/2009/1/31\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    eval.setVariable(\".datain.ABC\", \"file:///tmp/coord/US/2009/1/30,file:///tmp/coord/US/2009/1/31\");\n    eval.setVariable(\".datain.ABC.unresolved\", java.lang.Boolean.TRUE);\n    junit.framework.Assert.assertEquals(expr, org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testDataIn",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNINGWITHERROR, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNINGWITHERROR);\n    new org.apache.oozie.command.bundle.BundlePauseXCommand(job).call();\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.PAUSEDWITHERROR);\n    new org.apache.oozie.command.bundle.BundleUnpauseXCommand(job).call();\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNINGWITHERROR);\n}",
        "ClassName": "TestBundlePauseUnpauseXCommand",
        "Label": 1,
        "MethodName": "testBundlePauseUnpause3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.client.OozieClient client = org.apache.oozie.local.LocalOozie.getCoordClient();\n    client.setHeader(\"h\", \"v\");\n    junit.framework.Assert.assertNull(client.getHeader(\"h\"));\n    java.util.Iterator<java.lang.String> hit = client.getHeaderNames();\n    junit.framework.Assert.assertFalse(hit.hasNext());\n    try {\n        hit.next();\n        junit.framework.Assert.fail(\"NoSuchElementException expected.\");\n    } catch (java.util.NoSuchElementException nsee) {\n    }\n    client.removeHeader(\"h\");\n    junit.framework.Assert.assertNull(client.getHeader(\"h\"));\n}",
        "ClassName": "TestLocalOozieClientCoord",
        "Label": 1,
        "MethodName": "testHeaderMethods",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"kill\")).addNode(new org.apache.oozie.workflow.lite.KillNodeDef(\"kill\", \"killed\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class)).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.PREP, job.getStatus());\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.KILLED, job.getStatus());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testKillWorkflow",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordAction = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction.getId());\n    wfJob = jpaService.execute(wfJobGetCmd);\n    wfAction = jpaService.execute(wfActionGetCmd);\n    coordJob = jpaService.execute(coordJobGetCmd);\n    coordAction = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(7, 7, 1, 10).call();\n    try {\n        jpaService.execute(coordJobGetCmd);\n        junit.framework.Assert.fail(\"Coordinator Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordActionGetCmd);\n        junit.framework.Assert.fail(\"Coordinator Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfJobGetCmd);\n        junit.framework.Assert.fail(\"Workflow Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfActionGetCmd);\n        junit.framework.Assert.fail(\"Workflow Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeCoordWithWFChild3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setSystemProperty(\"oozie.authentication.simple.anonymous.allowed\", \"false\");\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\")).close();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-submit\", \"-oozie\", oozieUrl, \"-config\", createConfigFile(appPath.toString()), \"-doas\", org.apache.oozie.test.XTestCase.getTestUser2() };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(\"submit\", org.apache.oozie.servlet.MockDagEngineService.did);\n            junit.framework.Assert.assertEquals(org.apache.oozie.test.XTestCase.getTestUser2(), org.apache.oozie.servlet.MockDagEngineService.user);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testSubmitDoAs",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    services.init();\n    try {\n        org.apache.oozie.util.XLogStreamer.Filter xf2 = new org.apache.oozie.util.XLogStreamer.Filter();\n        xf2.constructPattern();\n        java.util.ArrayList<java.lang.String> a = new java.util.ArrayList<java.lang.String>();\n        a.add(\"2009-06-24 02:43:13,958 DEBUG\");\n        a.add((\" WorkflowRunnerCallable:323 - \" + org.apache.oozie.util.XLog.Info.get().createPrefix()) + \" test log\");\n        junit.framework.Assert.assertEquals(true, xf2.matches(a));\n    } finally {\n        services.destroy();\n    }\n    org.apache.oozie.util.XLogStreamer.Filter.reset();\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"USER\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"GROUP\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"TOKEN\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"APP\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"JOB\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"ACTION\");\n    org.apache.oozie.util.XLogStreamer.Filter xf = new org.apache.oozie.util.XLogStreamer.Filter();\n    junit.framework.Assert.assertEquals(7, matches(xf));\n    xf.setLogLevel(org.apache.oozie.util.XLog.Level.WARN.toString());\n    junit.framework.Assert.assertEquals(2, matches(xf));\n    xf.setLogLevel(org.apache.oozie.util.XLog.Level.WARN.toString());\n    xf.setParameter(\"APP\", \"example-forkjoinwf\");\n    junit.framework.Assert.assertEquals(0, matches(xf));\n    xf.setLogLevel((org.apache.oozie.util.XLog.Level.DEBUG.toString() + \"|\") + org.apache.oozie.util.XLog.Level.INFO.toString());\n    xf.setParameter(\"JOB\", \"14-200904160239--example-forkjoinwf\");\n    junit.framework.Assert.assertEquals(2, matches(xf));\n    org.apache.oozie.util.XLogStreamer.Filter xf1 = new org.apache.oozie.util.XLogStreamer.Filter();\n    xf1.setParameter(\"USER\", \"oozie\");\n    junit.framework.Assert.assertEquals(3, matches(xf1));\n    xf1.setParameter(\"GROUP\", \"oozie\");\n    junit.framework.Assert.assertEquals(2, matches(xf1));\n    xf1.setParameter(\"TOKEN\", \"MYtoken\");\n    junit.framework.Assert.assertEquals(1, matches(xf1));\n}",
        "ClassName": "TestXLogFilter",
        "Label": 1,
        "MethodName": "testXLogFileter",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.io.Text t = new org.apache.hadoop.io.Text();\n    t.set(\"hello\");\n    byte[] array = org.apache.oozie.util.WritableUtils.toByteArray(t);\n    org.apache.hadoop.io.Text tt = org.apache.oozie.util.WritableUtils.fromByteArray(array, org.apache.hadoop.io.Text.class);\n    junit.framework.Assert.assertEquals(\"hello\", tt.toString());\n}",
        "ClassName": "TestWritableUtils",
        "Label": 1,
        "MethodName": "testWritableUtils",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path actionDir = getFsTestCaseDir();\n    org.apache.hadoop.fs.Path newDir = new org.apache.hadoop.fs.Path((\"hftp:/\" + actionDir.toString().substring(5)) + \"/delete\");\n    java.lang.String prepareXML = (((\"<prepare>\" + \"<delete path='\") + newDir) + \"'/>\") + \"</prepare>\";\n    org.w3c.dom.Document doc = org.apache.oozie.action.hadoop.PrepareActionsDriver.getDocumentFromXML(prepareXML);\n    org.w3c.dom.Node n = doc.getDocumentElement().getChildNodes().item(0);\n    try {\n        org.apache.hadoop.mapred.JobConf conf = createJobConf();\n        org.apache.oozie.action.hadoop.LauncherMapper.setupLauncherURIHandlerConf(conf);\n        org.apache.oozie.action.hadoop.PrepareActionsDriver.doOperations(prepareXML, conf);\n        junit.framework.Assert.fail(\"Expected to catch an exception but did not encounter any\");\n    } catch (org.apache.oozie.action.hadoop.LauncherException le) {\n        org.apache.hadoop.fs.Path path = new org.apache.hadoop.fs.Path(n.getAttributes().getNamedItem(\"path\").getNodeValue().trim());\n        junit.framework.Assert.assertEquals(\"Scheme hftp not supported in uri \" + path, le.getMessage());\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail(\"Expected a LauncherException but received an Exception\");\n    }\n}",
        "ClassName": "TestFSPrepareActions",
        "Label": 1,
        "MethodName": "testForInvalidScheme",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"coordinator.xml\")).close();\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-rerun\", org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + \"0\", \"-action\", \"0\", \"-nocleanup\" };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_COORD_ACTION_RERUN, org.apache.oozie.servlet.MockCoordinatorEngineService.did);\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockCoordinatorEngineService.started.get(0));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testCoordReRun4",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertFalse(org.apache.oozie.util.ParameterVerifier.supportsParameters(\"uri:oozie:workflow:0.3\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.util.ParameterVerifier.supportsParameters(\"uri:oozie:workflow:0.4\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.util.ParameterVerifier.supportsParameters(\"uri:oozie:workflow:0.5\"));\n    junit.framework.Assert.assertFalse(org.apache.oozie.util.ParameterVerifier.supportsParameters(\"uri:oozie:coordinator:0.3\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.util.ParameterVerifier.supportsParameters(\"uri:oozie:coordinator:0.4\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.util.ParameterVerifier.supportsParameters(\"uri:oozie:coordinator:0.5\"));\n    junit.framework.Assert.assertFalse(org.apache.oozie.util.ParameterVerifier.supportsParameters(\"uri:oozie:bundle:0.1\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.util.ParameterVerifier.supportsParameters(\"uri:oozie:bundle:0.2\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.util.ParameterVerifier.supportsParameters(\"uri:oozie:bundle:0.3\"));\n    junit.framework.Assert.assertFalse(org.apache.oozie.util.ParameterVerifier.supportsParameters(\"uri:oozie:foo:0.4\"));\n    junit.framework.Assert.assertFalse(org.apache.oozie.util.ParameterVerifier.supportsParameters(\"foo\"));\n}",
        "ClassName": "TestParameterVerifier",
        "Label": 1,
        "MethodName": "testSupportsParameters",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    long currTime = java.lang.System.currentTimeMillis();\n    org.apache.oozie.util.XLogStreamer.Filter.reset();\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"USER\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"GROUP\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"TOKEN\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"APP\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"JOB\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"ACTION\");\n    org.apache.oozie.util.XLogStreamer.Filter xf = new org.apache.oozie.util.XLogStreamer.Filter();\n    xf.setParameter(\"JOB\", \"14-200904160239--example-forkjoinwf\");\n    xf.setLogLevel(\"DEBUG|INFO\");\n    java.lang.String outFilename = \"oozie.log-2012-04-24-19.gz\";\n    java.io.File f = new java.io.File((getTestCaseDir() + \"/\") + outFilename);\n    java.lang.StringBuilder logLines = new java.lang.StringBuilder();\n    logLines.append(\"\\n2012-04-24 19:43:13,958 DEBUG _L19_:323 -\" + org.apache.oozie.util.TestLogStreamer.logStatement);\n    writeToGZFile(f, logLines);\n    outFilename = \"oozie.log-2012-04-24-20.gz\";\n    f = new java.io.File((getTestCaseDir() + \"/\") + outFilename);\n    logLines = new java.lang.StringBuilder();\n    logLines.append(\"\\n2012-04-24 20:43:13,958 DEBUG _L20_:323 -\" + org.apache.oozie.util.TestLogStreamer.logStatement);\n    writeToGZFile(f, logLines);\n    outFilename = \"oozie.log-2012-04-24-21.gz\";\n    f = new java.io.File((getTestCaseDir() + \"/\") + outFilename);\n    logLines = new java.lang.StringBuilder();\n    logLines.append(\"\\n2012-04-24 21:43:13,958 DEBUG _L21_:323 -\" + org.apache.oozie.util.TestLogStreamer.logStatement);\n    writeToGZFile(f, logLines);\n    java.io.FileWriter fw1 = new java.io.FileWriter(getTestCaseDir() + \"/oozie.log\");\n    java.lang.StringBuilder sb1 = new java.lang.StringBuilder();\n    sb1.append(\"\\n2012-04-24 22:43:13,958 DEBUG _L22_:323 -\" + org.apache.oozie.util.TestLogStreamer.logStatement);\n    sb1.append(((\"\\n2012-04-24 22:43:13,961 INFO _L23_:317 -\" + org.apache.oozie.util.TestLogStreamer.logStatement) + \"[org.apache.oozie.core.command.WorkflowRunnerCallable] \") + \"released lock\");\n    fw1.write(sb1.toString());\n    fw1.close();\n    java.io.File f1 = new java.io.File(getTestCaseDir() + \"/oozie.log\");\n    f1.setLastModified(currTime - 5000);\n    java.io.StringWriter sw2 = new java.io.StringWriter();\n    org.apache.oozie.util.XLogStreamer str2 = new org.apache.oozie.util.XLogStreamer(xf, sw2, getTestCaseDir(), \"oozie.log\", 1);\n    java.util.Calendar calendarEntry = java.util.Calendar.getInstance();\n    calendarEntry.set(2012, 3, 24, 19, 0);\n    str2.streamLog(calendarEntry.getTime(), new java.util.Date(java.lang.System.currentTimeMillis()));\n    java.lang.String[] out = sw2.toString().split(\"\\n\");\n    junit.framework.Assert.assertEquals(5, out.length);\n    junit.framework.Assert.assertEquals(true, out[0].contains(\"_L19_\"));\n    junit.framework.Assert.assertEquals(true, out[1].contains(\"_L20_\"));\n    junit.framework.Assert.assertEquals(true, out[2].contains(\"_L21_\"));\n    junit.framework.Assert.assertEquals(true, out[3].contains(\"_L22_\"));\n    junit.framework.Assert.assertEquals(true, out[4].contains(\"_L23_\"));\n}",
        "ClassName": "TestLogStreamer",
        "Label": 1,
        "MethodName": "testStreamLogMultipleHours",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path mkdir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"mkdir\");\n    org.apache.hadoop.fs.Path delete = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"delete\");\n    fs.mkdirs(delete);\n    org.apache.hadoop.fs.Path source = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"source\");\n    fs.mkdirs(source);\n    org.apache.hadoop.fs.Path target = new org.apache.hadoop.fs.Path(new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"target\").toUri().getPath());\n    org.apache.hadoop.fs.Path chmod1 = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"chmod1\");\n    fs.mkdirs(chmod1);\n    org.apache.hadoop.fs.Path child1 = new org.apache.hadoop.fs.Path(chmod1, \"child1\");\n    fs.mkdirs(child1);\n    org.apache.hadoop.fs.Path chmod2 = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"chmod2\");\n    fs.mkdirs(chmod2);\n    org.apache.hadoop.fs.Path child2 = new org.apache.hadoop.fs.Path(chmod2, \"child2\");\n    fs.mkdirs(child2);\n    org.apache.hadoop.fs.Path newFile1 = new org.apache.hadoop.fs.Path(mkdir + \"newFile1\");\n    org.apache.hadoop.fs.Path newFile2 = new org.apache.hadoop.fs.Path(mkdir + \"newFile2\");\n    fs.createNewFile(newFile1);\n    org.apache.hadoop.fs.Path chmod3 = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"chmod3\");\n    fs.mkdirs(chmod3);\n    org.apache.hadoop.fs.Path child3 = new org.apache.hadoop.fs.Path(chmod3, \"child3\");\n    fs.mkdirs(child3);\n    org.apache.hadoop.fs.Path grandchild3 = new org.apache.hadoop.fs.Path(child3, \"grandchild1\");\n    fs.mkdirs(grandchild3);\n    java.lang.String str = java.text.MessageFormat.format(\"<root><mkdir path=''{0}''/>\" + (((((((\"<delete path=''{1}''/>\" + \"<move source=''{2}'' target=''{3}''/>\") + \"<chmod path=''{4}'' permissions=''-rwxrwxrwx''/>\") + \"<chmod path=''{5}'' permissions=''-rwxrwx---'' dir-files=''false''/>\") + \"<touchz path=''{6}''/>\") + \"<touchz path=''{7}''/>\") + \"<chmod path=''{8}'' permissions=''-rwxrwx---''> <recursive/> </chmod>\") + \"</root>\"), mkdir, delete, source, target, chmod1, chmod2, newFile1, newFile2, chmod3);\n    org.jdom.Element xml = org.apache.oozie.util.XmlUtils.parseXml(str);\n    ae.doOperations(createContext(\"<fs/>\"), xml);\n    junit.framework.Assert.assertTrue(fs.exists(mkdir));\n    junit.framework.Assert.assertFalse(fs.exists(delete));\n    junit.framework.Assert.assertFalse(fs.exists(source));\n    junit.framework.Assert.assertTrue(fs.exists(target));\n    junit.framework.Assert.assertTrue(fs.exists(newFile1));\n    junit.framework.Assert.assertTrue(fs.exists(newFile2));\n    junit.framework.Assert.assertEquals(\"rwxrwxrwx\", fs.getFileStatus(chmod1).getPermission().toString());\n    junit.framework.Assert.assertNotSame(\"rwxrwxrwx\", fs.getFileStatus(child1).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxrwx---\", fs.getFileStatus(chmod2).getPermission().toString());\n    junit.framework.Assert.assertNotSame(\"rwxrwx---\", fs.getFileStatus(child2).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxrwx---\", fs.getFileStatus(child3).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxrwx---\", fs.getFileStatus(grandchild3).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxrwx---\", fs.getFileStatus(child3).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxrwx---\", fs.getFileStatus(grandchild3).getPermission().toString());\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testDoOperations",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.BundleJobBean bean = new org.apache.oozie.BundleJobBean();\n    set(bean);\n    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();\n    java.io.DataOutputStream dos = new java.io.DataOutputStream(baos);\n    bean.write(dos);\n    dos.close();\n    final org.apache.oozie.BundleJobBean bean2 = new org.apache.oozie.BundleJobBean();\n    bean2.readFields(new java.io.DataInputStream(new java.io.ByteArrayInputStream(baos.toByteArray())));\n    _testGet(bean2, false);\n}",
        "ClassName": "TestBundleJobBean",
        "Label": 1,
        "MethodName": "testSerialization",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    org.apache.oozie.WorkflowActionBean action = this.addRecordToWfActionTable(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action.getId());\n    job = jpaService.execute(wfJobGetCmd);\n    action = jpaService.execute(wfActionGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.WorkflowJob.Status.RUNNING);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.workflow.WorkflowInstance wfInstance = job.getWorkflowInstance();\n    junit.framework.Assert.assertEquals(wfInstance.getStatus(), org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    new org.apache.oozie.command.wf.KillXCommand(job.getId()).call();\n    job = jpaService.execute(wfJobGetCmd);\n    action = jpaService.execute(wfActionGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.WorkflowJob.Status.KILLED);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.WorkflowAction.Status.OK);\n    wfInstance = job.getWorkflowInstance();\n    junit.framework.Assert.assertEquals(wfInstance.getStatus(), org.apache.oozie.workflow.WorkflowInstance.Status.KILLED);\n}",
        "ClassName": "TestWorkflowKillXCommand",
        "Label": 1,
        "MethodName": "testWfKillFailed",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.CallbackService cs = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallbackService.class);\n    junit.framework.Assert.assertNotNull(cs);\n}",
        "ClassName": "TestCallbackService",
        "Label": 1,
        "MethodName": "testService",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        final java.lang.String TOPIC_PREFIX = \"oozie.\";\n        services.destroy();\n        services = setupServicesForTopic();\n        services.getConf().set(org.apache.oozie.service.JMSTopicService.TOPIC_NAME, \"default=\" + org.apache.oozie.service.JMSTopicService.TopicType.JOBID.getValue());\n        services.getConf().set(org.apache.oozie.service.JMSTopicService.TOPIC_PREFIX, TOPIC_PREFIX);\n        services.init();\n        org.apache.oozie.service.JMSTopicService jmsTopicService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JMSTopicService.class);\n        org.apache.oozie.WorkflowJobBean wfj = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n        junit.framework.Assert.assertEquals(TOPIC_PREFIX, jmsTopicService.getTopicPrefix());\n        junit.framework.Assert.assertEquals(TOPIC_PREFIX + wfj.getId(), jmsTopicService.getTopic(wfj.getId()));\n        org.apache.oozie.WorkflowActionBean wab = addRecordToWfActionTable(wfj.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n        junit.framework.Assert.assertEquals(TOPIC_PREFIX + wfj.getId(), jmsTopicService.getTopic(wab.getId()));\n        org.apache.oozie.CoordinatorJobBean cjb = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, true, true);\n        junit.framework.Assert.assertEquals(TOPIC_PREFIX + cjb.getId(), jmsTopicService.getTopic(cjb.getId()));\n        org.apache.oozie.CoordinatorActionBean cab = addRecordToCoordActionTable(cjb.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-for-action-input-check.xml\", 0);\n        junit.framework.Assert.assertEquals(TOPIC_PREFIX + cjb.getId(), jmsTopicService.getTopic(cab.getId()));\n        org.apache.oozie.BundleJobBean bjb = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, true);\n        junit.framework.Assert.assertEquals(TOPIC_PREFIX + bjb.getId(), jmsTopicService.getTopic(bjb.getId()));\n        org.apache.oozie.BundleActionBean bab = addRecordToBundleActionTable(bjb.getId(), \"1\", 1, org.apache.oozie.client.Job.Status.RUNNING);\n        junit.framework.Assert.assertEquals(TOPIC_PREFIX + bjb.getId(), jmsTopicService.getTopic(bab.getBundleActionId()));\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSTopicService",
        "Label": 1,
        "MethodName": "testTopicAsJobId",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String xmlStr = \"<test1> <!-- Comment1 -->1234 <test2> ABCD <!-- Comment2 --> </test2> \" + \"<!-- Comment3 --> <test3> <!-- Comment4 -->EFGH  </test3> <!-- Comment5 --></test1>\";\n    java.lang.String result = org.apache.oozie.util.XmlUtils.removeComments(xmlStr);\n    java.lang.System.out.println(\"Result After Comments removal :\\n\" + result);\n}",
        "ClassName": "TestXmlUtils",
        "Label": 1,
        "MethodName": "testRemoveComments",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        org.apache.oozie.servlet.MyJsonRestServlet.ACTIVE = org.apache.oozie.servlet.MyJsonRestServlet.EMPTY;\n        new org.apache.oozie.servlet.MyJsonRestServlet();\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n    }\n}",
        "ClassName": "TestJsonRestServlet",
        "Label": 1,
        "MethodName": "testEmptyResources",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            java.util.Properties conf = wc.createConfiguration();\n            conf.setProperty(org.apache.oozie.client.OozieClient.USER_NAME, \"x\");\n            wc.suspend((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END);\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_SUSPEND, org.apache.oozie.servlet.MockDagEngineService.did);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testSuspend",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            java.util.Properties conf = wc.createConfiguration();\n            conf.setProperty(org.apache.oozie.client.OozieClient.USER_NAME, \"x\");\n            wc.start((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END);\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_START, org.apache.oozie.servlet.MockDagEngineService.did);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testStart",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.BundleJobBean bundleJob = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowJobBean subwfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJob.getId());\n    org.apache.oozie.WorkflowActionBean subwfAction = addRecordToWfActionTable(subwfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordAction = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.BundleActionBean bundleAction = addRecordToBundleActionTable(bundleJob.getId(), coordJob.getId(), coordJob.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction.getId());\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleJob.getId());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionGetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJob.getId(), coordJob.getAppName());\n    wfJob = jpaService.execute(wfJobGetCmd);\n    wfAction = jpaService.execute(wfActionGetCmd);\n    subwfJob = jpaService.execute(subwfJobGetCmd);\n    subwfAction = jpaService.execute(subwfActionGetCmd);\n    coordJob = jpaService.execute(coordJobGetCmd);\n    coordAction = jpaService.execute(coordActionGetCmd);\n    bundleJob = jpaService.execute(bundleJobGetCmd);\n    bundleAction = jpaService.execute(bundleActionGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, subwfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, subwfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleAction.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(wfJob.getEndTime()), org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob.getLastModifiedTime()), 7, 10).call();\n    try {\n        jpaService.execute(bundleJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(bundleActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Action should not have been purged\");\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeBundleWithCoordChildWithWFChildWithSubWF2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.command.TestXCommand.AXCommand command = new org.apache.oozie.command.TestXCommand.AXCommand(true);\n    command.setInterruptMode(false);\n    command.call();\n    junit.framework.Assert.assertTrue(command.execute);\n    command.resetCalledMethods();\n    command.setInterruptMode(true);\n    command.call();\n    junit.framework.Assert.assertTrue(command.execute);\n}",
        "ClassName": "TestXCommand",
        "Label": 1,
        "MethodName": "testXCommandPossibleReleaseLockWithoutAcquireEdgeCase",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-instances\");\n    java.lang.String expr = \"${coord:future(1, 20)}\";\n    init(\"coord-action-start\");\n    org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration();\n    eval.setVariable(org.apache.oozie.coord.CoordELFunctions.CONFIGURATION, conf);\n    java.lang.String testDir = getTestCaseDir();\n    ds.setUriTemplate((\"file://\" + testDir) + \"/${YEAR}/${MONTH}/${DAY}\");\n    createDir(testDir + \"/2009/09/10\");\n    createDir(testDir + \"/2009/09/11\");\n    junit.framework.Assert.assertEquals(\"2009-09-11T23:59Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    try {\n        expr = \"${coord:future(-1, 3)}\";\n        org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr);\n        junit.framework.Assert.fail(\"Should fail for negative instance value\");\n    } catch (java.lang.Exception ex) {\n    }\n    expr = \"${coord:future(4, 20)}\";\n    java.lang.String res = \"${coord:future(4, 20)}\";\n    junit.framework.Assert.assertEquals(res, org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testFuture",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-info\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"0\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO, org.apache.oozie.servlet.MockDagEngineService.did);\n            args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-info\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, \"-len\", \"3\", \"-offset\", \"1\" };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO, org.apache.oozie.servlet.MockDagEngineService.did);\n            args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-info\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"2\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, \"-len\", \"2\" };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO, org.apache.oozie.servlet.MockDagEngineService.did);\n            args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-info\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"3\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, \"-offset\", \"3\" };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO, org.apache.oozie.servlet.MockDagEngineService.did);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testJobInfo",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    services.destroy();\n    services = super.setupServicesForHCatalog();\n    java.lang.String jndiPropertiesString = (((\"java.naming.factory.initial#\" + org.apache.oozie.test.XTestCase.ActiveMQConnFactory) + \";\") + \"java.naming.provider.url#\") + \"tcp://localhost:12345;connectionFactoryNames#ConnectionFactory\";\n    org.apache.hadoop.conf.Configuration servicesConf = services.getConf();\n    servicesConf.set(org.apache.oozie.service.JMSAccessorService.CONF_RETRY_INITIAL_DELAY, \"1\");\n    servicesConf.set(org.apache.oozie.service.JMSAccessorService.CONF_RETRY_MAX_ATTEMPTS, \"1\");\n    servicesConf.set(org.apache.oozie.service.HCatAccessorService.JMS_CONNECTIONS_PROPERTIES, \"default=\" + jndiPropertiesString);\n    services.init();\n    org.apache.oozie.service.HCatAccessorService hcatService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HCatAccessorService.class);\n    org.apache.oozie.service.JMSAccessorService jmsService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JMSAccessorService.class);\n    java.lang.String publisherAuthority = \"hcat.server.com:5080\";\n    java.lang.String topic = \"topic.topic1\";\n    org.apache.oozie.jms.JMSConnectionInfo connInfo = hcatService.getJMSConnectionInfo(new java.net.URI(\"hcat://hcat.server.com:8020\"));\n    jmsService.registerForNotification(connInfo, topic, new org.apache.oozie.dependency.hcat.HCatMessageHandler(publisherAuthority));\n    junit.framework.Assert.assertTrue(jmsService.isConnectionInRetryList(connInfo));\n    junit.framework.Assert.assertTrue(jmsService.isTopicInRetryList(connInfo, topic));\n    junit.framework.Assert.assertFalse(jmsService.isListeningToTopic(connInfo, topic));\n    java.lang.Thread.sleep(1100);\n    junit.framework.Assert.assertTrue(jmsService.isConnectionInRetryList(connInfo));\n    junit.framework.Assert.assertTrue(jmsService.isTopicInRetryList(connInfo, topic));\n    junit.framework.Assert.assertFalse(jmsService.isListeningToTopic(connInfo, topic));\n    junit.framework.Assert.assertEquals(1, jmsService.getNumConnectionAttempts(connInfo));\n    junit.framework.Assert.assertFalse(jmsService.retryConnection(connInfo));\n    jmsService.destroy();\n}",
        "ClassName": "TestJMSAccessorService",
        "Label": 1,
        "MethodName": "testConnectionRetryMaxAttempt",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.test.TestXTestCase.MyXTestCase testcase = new org.apache.oozie.test.TestXTestCase.MyXTestCase();\n    testcase.setName(getName());\n    testcase.setUp();\n    testcase.testHadoopSysProps();\n    testcase.tearDown();\n}",
        "ClassName": "TestXTestCase",
        "Label": 1,
        "MethodName": "testHadopSysProps",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date curr = new java.util.Date();\n    java.util.Date pauseTime = new java.util.Date(curr.getTime() - 1000);\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTableWithPausedTime(org.apache.oozie.client.Job.Status.PAUSED, false, pauseTime);\n    this.addRecordToBundleActionTable(job.getId(), \"action1\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    this.addRecordToBundleActionTable(job.getId(), \"action2\", 0, org.apache.oozie.client.Job.Status.PAUSED);\n    addRecordToCoordJobTable(\"action1\", org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    addRecordToCoordJobTable(\"action2\", org.apache.oozie.client.Job.Status.PAUSED, false, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSED, job.getStatus());\n    new org.apache.oozie.command.bundle.BundleRerunXCommand(job.getId(), \"action2\", null, false, true).call();\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSED, job.getStatus());\n    junit.framework.Assert.assertNotNull(job.getPauseTime());\n    junit.framework.Assert.assertFalse(job.isPending());\n}",
        "ClassName": "TestBundleRerunXCommand",
        "Label": 1,
        "MethodName": "testBundleRerunInPaused",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorEngine ce = createCoordinatorEngine();\n    java.lang.String jobId = runJobsImpl(ce);\n    ce.streamLog(jobId, null, null, new java.io.StringWriter());\n    org.apache.oozie.TestCoordinatorEngineStreamLog.DummyXLogService service = ((org.apache.oozie.TestCoordinatorEngineStreamLog.DummyXLogService) (services.get(org.apache.oozie.service.XLogService.class)));\n    org.apache.oozie.util.XLogStreamer.Filter filter = service.filter;\n    junit.framework.Assert.assertEquals(filter.getFilterParams().get(org.apache.oozie.service.DagXLogInfoService.JOB), jobId);\n}",
        "ClassName": "TestCoordinatorEngineStreamLog",
        "Label": 1,
        "MethodName": "testStreamLog4NullNull",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = \"<coordinator-app name=\\\"${NAME}\\\" frequency=\\\"${coord:days(1)}\\\" start=\\\"2009-02-01T01:00Z\\\" end=\\\"2009-02-03T23:59Z\\\" timezone=\\\"UTC\\\" \" + ((((((((((((((((((\"xmlns=\\\"uri:oozie:coordinator:0.3\\\"> <controls> <timeout>10</timeout> <concurrency>2</concurrency> \" + \"<execution>LIFO</execution> </controls> <datasets> \") + \"<dataset name=\\\"a\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"<dataset name=\\\"local_a\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> \") + \"<done-flag>consume_me</done-flag> </dataset>\") + \"<dataset name=\\\"local_b\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflowsb/${YEAR}/${DAY}</uri-template> \") + \"<done-flag>${MY_DONE_FLAG}</done-flag> </dataset>\") + \"</datasets> <input-events> \") + \"<data-in name=\\\"A\\\" dataset=\\\"a\\\"> <instance>${coord:latest(0)}</instance> </data-in>  \") + \"<data-in name=\\\"B\\\" dataset=\\\"local_b\\\"> <instance>${coord:latest(0)}</instance> </data-in>  \") + \"</input-events> \") + \"<output-events> <data-out name=\\\"LOCAL_A\\\" dataset=\\\"local_a\\\"> \") + \"<instance>${coord:current(-1)}</instance> </data-out> </output-events> <action> <workflow> <app-path>hdfs:///tmp/workflows/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>${coord:dataIn('A')}</value> </property> \") + \"<property> <name>inputB</name> <value>${coord:dataOut('LOCAL_A')}</value> \") + \"</property></configuration> </workflow> </action> </coordinator-app>\");\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.set(\"MY_DONE_FLAG\", \"complete\");\n    conf.set(\"NAME\", \"test_app_name\");\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    java.lang.String jobId = sc.call();\n    junit.framework.Assert.assertEquals(jobId.substring(jobId.length() - 2), \"-C\");\n    org.apache.oozie.CoordinatorJobBean job = checkCoordJobs(jobId);\n    if (job != null) {\n        junit.framework.Assert.assertEquals(job.getAppName(), \"test_app_name\");\n    }\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testSubmitWithVarAppName",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"one\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"one\" }))).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0706, ex.getErrorCode());\n    }\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testSelfTransition",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.XLog log = org.apache.oozie.util.XLog.getLog(getClass());\n    junit.framework.Assert.assertNotNull(log);\n    junit.framework.Assert.assertEquals(org.apache.oozie.util.XLog.class, log.getClass());\n}",
        "ClassName": "TestXLog",
        "Label": 1,
        "MethodName": "testFactory",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/job/*\", org.apache.oozie.servlet.V1JobServlet.class, org.apache.oozie.servlet.TestV1JobServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockCoordinatorEngineService.reset();\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO);\n            java.net.URL url = createURL(org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + 1, params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject obj = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals(org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + 1, obj.get(org.apache.oozie.client.rest.JsonTags.COORDINATOR_JOB_ID));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO, org.apache.oozie.servlet.MockCoordinatorEngineService.did);\n            org.apache.oozie.servlet.MockCoordinatorEngineService.reset();\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO);\n            params.put(org.apache.oozie.client.rest.RestConstants.OFFSET_PARAM, \"1\");\n            params.put(org.apache.oozie.client.rest.RestConstants.LEN_PARAM, \"50\");\n            url = createURL(org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + 1, params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            obj = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals(org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + 1, obj.get(org.apache.oozie.client.rest.JsonTags.COORDINATOR_JOB_ID));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO, org.apache.oozie.servlet.MockCoordinatorEngineService.did);\n            org.apache.oozie.servlet.MockCoordinatorEngineService.reset();\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO);\n            url = createURL(org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + (org.apache.oozie.servlet.MockCoordinatorEngineService.coordJobs.size() + 1), params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode());\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO, org.apache.oozie.servlet.MockCoordinatorEngineService.did);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1JobServlet",
        "Label": 1,
        "MethodName": "testJobInfo",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action1 = addRecordToWfActionTable(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action2 = addRecordToWfActionTable(job.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    job.setStatus(org.apache.oozie.client.WorkflowJob.Status.RUNNING);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> deleteList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    deleteList.add(action1);\n    deleteList.add(action2);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> updateList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    updateList.add(job);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BulkUpdateDeleteJPAExecutor wfUpdateCmd1 = new org.apache.oozie.executor.jpa.BulkUpdateDeleteJPAExecutor(updateList, deleteList, true);\n    setSystemProperty(org.apache.oozie.FaultInjection.FAULT_INJECTION, \"true\");\n    setSystemProperty(org.apache.oozie.command.SkipCommitFaultInjection.ACTION_FAILOVER_FAULT_INJECTION, \"true\");\n    try {\n        jpaService.execute(wfUpdateCmd1);\n        junit.framework.Assert.fail(\"Expected exception due to commit failure but didn't get any\");\n    } catch (java.lang.Exception e) {\n    }\n    org.apache.oozie.FaultInjection.deactivate(\"org.apache.oozie.command.SkipCommitFaultInjection\");\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId());\n    org.apache.oozie.WorkflowJobBean wfBean = jpaService.execute(wfGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", wfBean.getStatusStr());\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action1.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"WF action should not be removed due to rollback but was not found\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action2.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"WF action should not be removed due to rollback but was not found\");\n    }\n}",
        "ClassName": "TestBulkUpdateDeleteJPAExecutor",
        "Label": 1,
        "MethodName": "testBulkUpdatesDeletesRollback",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.lang.String ret = jpaService.execute(new org.apache.oozie.service.TestJPAService.MyJPAExecutor());\n    junit.framework.Assert.assertEquals(\"ret\", ret);\n}",
        "ClassName": "TestJPAService",
        "Label": 1,
        "MethodName": "testExecute",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-data\");\n    java.lang.String expr = \"${coord:dataInPartitionMax('ABC', 'mypartition')}\";\n    eval.setVariable(\"oozie.dataname.ABC\", \"data-in\");\n    junit.framework.Assert.assertEquals(\"${coord:dataInPartitionMax('ABC', 'mypartition')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:dataInPartitionMax('ABCD')}\";\n    eval.setVariable(\"oozie.dataname.ABCD\", \"data-in\");\n    try {\n        junit.framework.Assert.assertEquals(\"${coord:dataInPartitionMax('ABCD')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n        junit.framework.Assert.fail(\"should throw exception because EL function requires 2 parameters\");\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestHCatELFunctions",
        "Label": 1,
        "MethodName": "testDataInPartitionMaxPh1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.client.HeaderTestingVersionServlet.OOZIE_HEADERS.clear();\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            wc.setHeader(\"header\", \"test\");\n            junit.framework.Assert.assertEquals(\"test\", wc.getHeader(\"header\"));\n            junit.framework.Assert.assertEquals(\"test\", wc.getHeaders().get(\"header\"));\n            boolean found = false;\n            for (java.util.Iterator<java.lang.String> headers = wc.getHeaderNames(); headers.hasNext();) {\n                if (\"header\".equals(headers.next())) {\n                    found = true;\n                }\n            }\n            junit.framework.Assert.assertTrue(\"headers does not contain header!\", found);\n            wc.validateWSVersion();\n            junit.framework.Assert.assertTrue(org.apache.oozie.client.HeaderTestingVersionServlet.OOZIE_HEADERS.containsKey(\"header\"));\n            junit.framework.Assert.assertTrue(org.apache.oozie.client.HeaderTestingVersionServlet.OOZIE_HEADERS.containsValue(\"test\"));\n            wc.removeHeader(\"header\");\n            junit.framework.Assert.assertNull(wc.getHeader(\"header\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testHeaders",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleEngine be = new org.apache.oozie.BundleEngine();\n    try {\n        org.apache.oozie.client.WorkflowJob wj = be.getJob(\"foo\", 0, 1);\n        junit.framework.Assert.fail(\"Expected BundleEngineException was not thrown.\");\n    } catch (org.apache.oozie.BundleEngineException bee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0301, bee.getErrorCode());\n    }\n}",
        "ClassName": "TestBundleEngineSimple",
        "Label": 1,
        "MethodName": "testGetJob3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    job.setKickoffTime(new java.util.Date(new java.util.Date().getTime() - (30 * 1000)));\n    jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobUpdateJPAExecutor(job));\n    java.lang.Runnable pauseStartRunnable = new org.apache.oozie.service.PauseTransitService.PauseTransitRunnable();\n    pauseStartRunnable.run();\n    final java.lang.String jobId = job.getId();\n    waitFor(10 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean job1 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n            return job1.getStatus() == org.apache.oozie.client.Job.Status.RUNNING;\n        }\n    });\n    job = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, job.getStatus());\n}",
        "ClassName": "TestPauseTransitService",
        "Label": 1,
        "MethodName": "testStart1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    new org.apache.oozie.service.Services().init();\n    try {\n        org.apache.oozie.action.ActionExecutor decision = new org.apache.oozie.action.decision.DecisionActionExecutor();\n        junit.framework.Assert.assertEquals(org.apache.oozie.action.decision.DecisionActionExecutor.ACTION_TYPE, decision.getType());\n        org.apache.oozie.WorkflowActionBean action = new org.apache.oozie.WorkflowActionBean();\n        action.setConf(\"<switch xmlns='uri:oozie:workflow:0.1'>\" + (((\"<case to='a'>true</case>\" + \"<case to='b'>true</case>\") + \"<case to='c'>false</case>\") + \"<default to='d'/></switch>\"));\n        decision.start(new org.apache.oozie.action.decision.TestDecisionActionExecutor.Context(action), action);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.DONE, action.getStatus());\n        decision.end(new org.apache.oozie.action.decision.TestDecisionActionExecutor.Context(action), action);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, action.getStatus());\n        junit.framework.Assert.assertEquals(\"a\", action.getExternalStatus());\n        action.setConf(\"<switch xmlns='uri:oozie:workflow:0.1'>\" + (((\"<case to='a'>false</case>\" + \"<case to='b'>true</case>\") + \"<case to='c'>false</case>\") + \"<default to='d'/></switch>\"));\n        decision.start(new org.apache.oozie.action.decision.TestDecisionActionExecutor.Context(action), action);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.DONE, action.getStatus());\n        decision.end(new org.apache.oozie.action.decision.TestDecisionActionExecutor.Context(action), action);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, action.getStatus());\n        junit.framework.Assert.assertEquals(\"b\", action.getExternalStatus());\n        action.setConf(\"<switch xmlns='uri:oozie:workflow:0.1'>\" + (((\"<case to='a'>false</case>\" + \"<case to='b'>false</case>\") + \"<case to='c'>false</case>\") + \"<default to='d'/></switch>\"));\n        decision.start(new org.apache.oozie.action.decision.TestDecisionActionExecutor.Context(action), action);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.DONE, action.getStatus());\n        decision.end(new org.apache.oozie.action.decision.TestDecisionActionExecutor.Context(action), action);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, action.getStatus());\n        junit.framework.Assert.assertEquals(\"d\", action.getExternalStatus());\n        try {\n            action.setConf(\"<wrong>\" + (((\"<case to='a'>false</case>\" + \"<case to='b'>false</case>\") + \"<case to='c'>false</case>\") + \"<default to='d'/></switch>\"));\n            decision.start(new org.apache.oozie.action.decision.TestDecisionActionExecutor.Context(action), action);\n            junit.framework.Assert.fail();\n        } catch (org.apache.oozie.action.ActionExecutorException ex) {\n            junit.framework.Assert.assertEquals(org.apache.oozie.action.ActionExecutorException.ErrorType.FAILED, ex.getErrorType());\n            junit.framework.Assert.assertEquals(org.apache.oozie.action.decision.DecisionActionExecutor.XML_ERROR, ex.getErrorCode());\n        } catch (java.lang.Exception ex) {\n            junit.framework.Assert.fail();\n        }\n    } finally {\n        org.apache.oozie.service.Services.get().destroy();\n    }\n}",
        "ClassName": "TestDecisionActionExecutor",
        "Label": 1,
        "MethodName": "testDecision",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    try {\n        services.init();\n        java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-schema-valid.xml\", -1);\n        java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n        org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n        createTestCaseSubDir(\"lib\");\n        writer = new java.io.FileWriter(getTestCaseDir() + \"/lib/maputil.jar\");\n        writer.write(\"bla bla\");\n        writer.close();\n        writer = new java.io.FileWriter(getTestCaseDir() + \"/lib/reduceutil.so\");\n        writer.write(\"bla bla\");\n        writer.close();\n        createTestCaseSubDir(\"libx\");\n        writer = new java.io.FileWriter(getTestCaseDir() + \"/libx/maputil_x.jar\");\n        writer.write(\"bla bla\");\n        writer.close();\n        createTestCaseSubDir(\"liby\");\n        writer = new java.io.FileWriter(getTestCaseDir() + \"/liby/maputil_y1.jar\");\n        writer.write(\"bla bla\");\n        writer.close();\n        writer = new java.io.FileWriter(getTestCaseDir() + \"/liby/maputil_y2.jar\");\n        writer.write(\"bla bla\");\n        writer.close();\n        createTestCaseSubDir(\"libz\");\n        writer = new java.io.FileWriter(getTestCaseDir() + \"/libz/maputil_z.jar\");\n        writer.write(\"bla bla\");\n        writer.close();\n        org.apache.oozie.service.WorkflowAppService wps = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.WorkflowAppService.class);\n        org.apache.hadoop.conf.Configuration jobConf = new org.apache.oozie.util.XConfiguration();\n        jobConf.set(org.apache.oozie.client.OozieClient.APP_PATH, (\"file://\" + getTestCaseDir()) + \"/workflow.xml\");\n        jobConf.setStrings(org.apache.oozie.client.OozieClient.LIBPATH, (\"file://\" + getTestCaseDir()) + \"/libx\", (\"file://\" + getTestCaseDir()) + \"/liby\", (\"file://\" + getTestCaseDir()) + \"/libz\");\n        jobConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n        org.apache.hadoop.conf.Configuration protoConf = wps.createProtoActionConf(jobConf, \"authToken\", true);\n        junit.framework.Assert.assertEquals(org.apache.oozie.test.XTestCase.getTestUser(), protoConf.get(org.apache.oozie.client.OozieClient.USER_NAME));\n        junit.framework.Assert.assertEquals(6, protoConf.getStrings(org.apache.oozie.service.WorkflowAppService.APP_LIB_PATH_LIST).length);\n        java.util.List<java.lang.String> found = new java.util.ArrayList<java.lang.String>();\n        found.add(protoConf.getStrings(org.apache.oozie.service.WorkflowAppService.APP_LIB_PATH_LIST)[0]);\n        found.add(protoConf.getStrings(org.apache.oozie.service.WorkflowAppService.APP_LIB_PATH_LIST)[1]);\n        found.add(protoConf.getStrings(org.apache.oozie.service.WorkflowAppService.APP_LIB_PATH_LIST)[2]);\n        found.add(protoConf.getStrings(org.apache.oozie.service.WorkflowAppService.APP_LIB_PATH_LIST)[3]);\n        found.add(protoConf.getStrings(org.apache.oozie.service.WorkflowAppService.APP_LIB_PATH_LIST)[4]);\n        found.add(protoConf.getStrings(org.apache.oozie.service.WorkflowAppService.APP_LIB_PATH_LIST)[5]);\n        java.util.List<java.lang.String> expected = new java.util.ArrayList<java.lang.String>();\n        expected.add((\"file://\" + getTestCaseDir()) + \"/lib/reduceutil.so\");\n        expected.add((\"file://\" + getTestCaseDir()) + \"/lib/maputil.jar\");\n        expected.add((\"file://\" + getTestCaseDir()) + \"/libx/maputil_x.jar\");\n        expected.add((\"file://\" + getTestCaseDir()) + \"/liby/maputil_y1.jar\");\n        expected.add((\"file://\" + getTestCaseDir()) + \"/liby/maputil_y2.jar\");\n        expected.add((\"file://\" + getTestCaseDir()) + \"/libz/maputil_z.jar\");\n        java.util.Collections.sort(found);\n        java.util.Collections.sort(expected);\n        junit.framework.Assert.assertEquals(expected, found);\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestLiteWorkflowAppService",
        "Label": 1,
        "MethodName": "testCreateprotoConfWithMulipleLibPath",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    final java.lang.String jobId = job.getId();\n    this.addRecordToBundleActionTable(job.getId(), \"action1\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    this.addRecordToBundleActionTable(job.getId(), \"action2\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, job.getStatus());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionGetExecutor1 = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(job.getId(), \"action1\");\n    org.apache.oozie.BundleActionBean action1 = jpaService.execute(bundleActionGetExecutor1);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, action1.getStatus());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionGetExecutor2 = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(job.getId(), \"action2\");\n    org.apache.oozie.BundleActionBean action2 = jpaService.execute(bundleActionGetExecutor2);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, action2.getStatus());\n    java.lang.Runnable purgeRunnable = new org.apache.oozie.service.PurgeService.PurgeRunnable(1, 1, 1, 100);\n    purgeRunnable.run();\n    final org.apache.oozie.BundleEngine engine = new org.apache.oozie.BundleEngine(\"u\", \"a\");\n    waitFor(10000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            try {\n                engine.getBundleJob(jobId).getStatus();\n            } catch (java.lang.Exception ex) {\n                return true;\n            }\n            return false;\n        }\n    });\n    try {\n        job = jpaService.execute(bundleJobGetExecutor);\n        junit.framework.Assert.fail(\"Job should be purged. Should fail.\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n    }\n    try {\n        jpaService.execute(bundleActionGetExecutor1);\n        junit.framework.Assert.fail(\"Action should be purged. Should fail.\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n    }\n    try {\n        jpaService.execute(bundleActionGetExecutor2);\n        junit.framework.Assert.fail(\"Action should be purged. Should fail.\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n    }\n}",
        "ClassName": "TestPurgeService",
        "Label": 1,
        "MethodName": "testPurgeServiceForBundle",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    java.lang.String jobId = job.getId();\n    addRecordToCoordActionTable(jobId, actionNum++, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(jobId, actionNum++, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(jobId, actionNum++, org.apache.oozie.client.CoordinatorAction.Status.FAILED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(jobId, actionNum++, org.apache.oozie.client.CoordinatorAction.Status.KILLED, \"coord-action-get.xml\", 0);\n    _testCoordActionsRunningSize(jobId, 2);\n}",
        "ClassName": "TestCoordJobGetActionsRunningJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionsRunningForSize",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleEngine be = new org.apache.oozie.BundleEngine();\n    try {\n        org.apache.hadoop.conf.Configuration c = new org.apache.hadoop.conf.Configuration();\n        be.reRun(\"foo\", c);\n        junit.framework.Assert.fail(\"Expected BundleEngineException was not thrown.\");\n    } catch (org.apache.oozie.BundleEngineException bee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0301, bee.getErrorCode());\n    }\n}",
        "ClassName": "TestBundleEngineSimple",
        "Label": 1,
        "MethodName": "testReRun2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.sla.service.SLAService slas = services.get(org.apache.oozie.sla.service.SLAService.class);\n    org.apache.oozie.sla.listener.SLAJobEventListener listener = new org.apache.oozie.sla.listener.SLAJobEventListener();\n    listener.init(services.getConf());\n    org.apache.oozie.sla.SLARegistrationBean job = _createSLARegBean(\"wf1\", org.apache.oozie.AppType.WORKFLOW_JOB);\n    job.setExpectedStart(org.apache.oozie.util.DateUtils.parseDateUTC(\"2012-07-22T00:00Z\"));\n    slas.addRegistrationEvent(job);\n    junit.framework.Assert.assertEquals(1, slas.getSLACalculator().size());\n    java.util.Date actualStart = org.apache.oozie.util.DateUtils.parseDateUTC(\"2012-07-22T01:00Z\");\n    org.apache.oozie.event.WorkflowJobEvent wfe = new org.apache.oozie.event.WorkflowJobEvent(\"wf1\", \"caId1\", org.apache.oozie.client.WorkflowJob.Status.RUNNING, \"user1\", \"wf-app-name1\", actualStart, null);\n    listener.onWorkflowJobEvent(wfe);\n    org.apache.oozie.sla.SLACalcStatus serviceObj = slas.getSLACalculator().get(\"wf1\");\n    junit.framework.Assert.assertTrue(serviceObj.isStartProcessed());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.SLAEvent.EventStatus.START_MISS, serviceObj.getEventStatus());\n    job = _createSLARegBean(\"wa1\", org.apache.oozie.AppType.WORKFLOW_ACTION);\n    slas.addRegistrationEvent(job);\n    junit.framework.Assert.assertEquals(2, slas.getSLACalculator().size());\n    job.setExpectedStart(org.apache.oozie.util.DateUtils.parseDateUTC(\"2012-07-22T00:00Z\"));\n    org.apache.oozie.event.WorkflowActionEvent wae = new org.apache.oozie.event.WorkflowActionEvent(\"wa1\", \"wfId1\", org.apache.oozie.client.WorkflowAction.Status.RUNNING, \"user1\", \"wf-app-name1\", actualStart, null);\n    listener.onWorkflowActionEvent(wae);\n    serviceObj = slas.getSLACalculator().get(\"wa1\");\n    junit.framework.Assert.assertTrue(serviceObj.isStartProcessed());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.SLAEvent.EventStatus.START_MISS, serviceObj.getEventStatus());\n    job = _createSLARegBean(\"cj1\", org.apache.oozie.AppType.COORDINATOR_JOB);\n    job.setExpectedEnd(org.apache.oozie.util.DateUtils.parseDateUTC(\"2012-07-22T01:00Z\"));\n    slas.addRegistrationEvent(job);\n    junit.framework.Assert.assertEquals(3, slas.getSLACalculator().size());\n    java.util.Date actualEnd = org.apache.oozie.util.DateUtils.parseDateUTC(\"2012-07-22T00:00Z\");\n    org.apache.oozie.event.CoordinatorJobEvent cje = new org.apache.oozie.event.CoordinatorJobEvent(\"cj1\", \"bj1\", org.apache.oozie.client.Job.Status.SUCCEEDED, \"user1\", \"coord-app-name1\", actualStart, actualEnd);\n    listener.onCoordinatorJobEvent(cje);\n    org.apache.oozie.sla.SLACalculatorBean calc = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class).execute(new org.apache.oozie.executor.jpa.sla.SLACalculatorGetJPAExecutor(\"cj1\"));\n    org.apache.oozie.sla.SLASummaryBean summary = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class).execute(new org.apache.oozie.executor.jpa.sla.SLASummaryGetJPAExecutor(\"cj1\"));\n    junit.framework.Assert.assertTrue(calc.isEndProcessed());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.SLAEvent.EventStatus.END_MET, summary.getEventStatus());\n    job = _createSLARegBean(\"ca1\", org.apache.oozie.AppType.COORDINATOR_ACTION);\n    actualEnd = org.apache.oozie.util.DateUtils.parseDateUTC(\"2012-07-22T02:00Z\");\n    slas.addRegistrationEvent(job);\n    junit.framework.Assert.assertEquals(3, slas.getSLACalculator().size());\n    org.apache.oozie.event.CoordinatorActionEvent cae = new org.apache.oozie.event.CoordinatorActionEvent(\"ca1\", \"cj1\", org.apache.oozie.client.CoordinatorAction.Status.KILLED, \"user1\", \"coord-app-name1\", null, actualEnd, null);\n    listener.onCoordinatorActionEvent(cae);\n    calc = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class).execute(new org.apache.oozie.executor.jpa.sla.SLACalculatorGetJPAExecutor(\"ca1\"));\n    summary = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class).execute(new org.apache.oozie.executor.jpa.sla.SLASummaryGetJPAExecutor(\"ca1\"));\n    junit.framework.Assert.assertTrue(calc.isEndProcessed());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.SLAEvent.EventStatus.END_MISS, summary.getEventStatus());\n}",
        "ClassName": "TestSLAJobEventListener",
        "Label": 1,
        "MethodName": "testOnJobEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowXClient.END_POINTS, org.apache.oozie.client.TestWorkflowXClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowXClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            int wfCount = org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT;\n            org.apache.oozie.client.XOozieClient wc = new org.apache.oozie.client.XOozieClient(oozieUrl);\n            java.util.Properties conf = wc.createConfiguration();\n            org.apache.hadoop.fs.Path libPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"lib\");\n            getFileSystem().mkdirs(libPath);\n            java.lang.String localPath = libPath.toUri().getPath();\n            int startPosition = libPath.toString().indexOf(localPath);\n            java.lang.String nn = libPath.toString().substring(0, startPosition);\n            try {\n                wc.submitMapReduce(conf);\n                junit.framework.Assert.fail(\"submit client without JT should throw exception\");\n            } catch (java.lang.RuntimeException exception) {\n                junit.framework.Assert.assertEquals(\"java.lang.RuntimeException: jobtracker is not specified in conf\", exception.toString());\n            }\n            conf.setProperty(org.apache.oozie.client.XOozieClient.JT, \"localhost:9001\");\n            try {\n                wc.submitMapReduce(conf);\n                junit.framework.Assert.fail(\"submit client without NN should throw exception\");\n            } catch (java.lang.RuntimeException exception) {\n                junit.framework.Assert.assertEquals(\"java.lang.RuntimeException: namenode is not specified in conf\", exception.toString());\n            }\n            conf.setProperty(org.apache.oozie.client.XOozieClient.NN, nn);\n            try {\n                wc.submitMapReduce(conf);\n                junit.framework.Assert.fail(\"submit client without LIBPATH should throw exception\");\n            } catch (java.lang.RuntimeException exception) {\n                junit.framework.Assert.assertEquals(\"java.lang.RuntimeException: libpath is not specified in conf\", exception.toString());\n            }\n            conf.remove(org.apache.oozie.client.XOozieClient.NN);\n            conf.setProperty(org.apache.oozie.client.XOozieClient.NN_2, nn);\n            try {\n                wc.submitMapReduce(conf);\n                junit.framework.Assert.fail(\"submit client without LIBPATH should throw exception\");\n            } catch (java.lang.RuntimeException exception) {\n                junit.framework.Assert.assertEquals(\"java.lang.RuntimeException: libpath is not specified in conf\", exception.toString());\n            }\n            conf.setProperty(org.apache.oozie.client.OozieClient.LIBPATH, localPath.substring(1));\n            try {\n                wc.submitMapReduce(conf);\n                junit.framework.Assert.fail(\"lib path can not be relative\");\n            } catch (java.lang.RuntimeException e) {\n                junit.framework.Assert.assertEquals(\"java.lang.RuntimeException: libpath should be absolute\", e.toString());\n            }\n            conf.setProperty(org.apache.oozie.client.OozieClient.LIBPATH, localPath);\n            junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + wfCount) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, wc.submitMapReduce(conf));\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowXClient",
        "Label": 1,
        "MethodName": "testSubmitMR",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.SLAEventBean bean = new org.apache.oozie.SLAEventBean();\n    set(bean);\n    junit.framework.Assert.assertEquals(\"ac\", bean.getAlertContact());\n    junit.framework.Assert.assertEquals(\"af\", bean.getAlertFrequency());\n    junit.framework.Assert.assertEquals(\"ap\", bean.getAlertPercentage());\n    junit.framework.Assert.assertEquals(\"an\", bean.getAppName());\n    junit.framework.Assert.assertTrue(org.apache.oozie.client.SLAEvent.SlaAppType.WORKFLOW_ACTION == bean.getAppType());\n    junit.framework.Assert.assertEquals(\"WORKFLOW_ACTION\", bean.getAppTypeStr());\n    junit.framework.Assert.assertEquals(\"dc\", bean.getDevContact());\n    junit.framework.Assert.assertEquals(1L, bean.getEvent_id());\n    junit.framework.Assert.assertEquals(\"et\", bean.getEventType());\n    junit.framework.Assert.assertEquals(\"gn\", bean.getGroupName());\n    junit.framework.Assert.assertEquals(\"jd\", bean.getJobData());\n    junit.framework.Assert.assertEquals(\"STARTED\", bean.getJobStatusStr());\n    junit.framework.Assert.assertEquals(\"nm\", bean.getNotificationMsg());\n    junit.framework.Assert.assertEquals(\"pci\", bean.getParentClientId());\n    junit.framework.Assert.assertEquals(\"psi\", bean.getParentSlaId());\n    junit.framework.Assert.assertEquals(\"qc\", bean.getQaContact());\n    junit.framework.Assert.assertEquals(\"sc\", bean.getSeContact());\n    junit.framework.Assert.assertEquals(\"si\", bean.getSlaId());\n    junit.framework.Assert.assertEquals(\"ua\", bean.getUpstreamApps());\n    junit.framework.Assert.assertEquals(\"u\", bean.getUser());\n    junit.framework.Assert.assertEquals(org.apache.oozie.TestSLAEventBean.ee, bean.getExpectedEnd());\n    junit.framework.Assert.assertEquals(org.apache.oozie.TestSLAEventBean.es, bean.getExpectedStart());\n    junit.framework.Assert.assertEquals(org.apache.oozie.TestSLAEventBean.st, bean.getStatusTimestamp());\n    junit.framework.Assert.assertEquals(org.apache.oozie.util.DateUtils.convertDateToTimestamp(org.apache.oozie.TestSLAEventBean.st), bean.getStatusTimestampTS());\n    junit.framework.Assert.assertEquals(org.apache.oozie.util.DateUtils.convertDateToTimestamp(org.apache.oozie.TestSLAEventBean.ee), bean.getExpectedEndTS());\n    junit.framework.Assert.assertEquals(org.apache.oozie.util.DateUtils.convertDateToTimestamp(org.apache.oozie.TestSLAEventBean.es), bean.getExpectedStartTS());\n}",
        "ClassName": "TestSLAEventBean",
        "Label": 1,
        "MethodName": "testSetGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    services.destroy();\n    services = super.setupServicesForHCatalog();\n    int randomPort = 30000 + org.apache.oozie.service.TestJMSAccessorService.random.nextInt(10000);\n    java.lang.String brokerURL = \"tcp://localhost:\" + randomPort;\n    java.lang.String jndiPropertiesString = ((((((\"java.naming.factory.initial#\" + org.apache.oozie.test.XTestCase.ActiveMQConnFactory) + \";\") + \"java.naming.provider.url#\") + brokerURL) + \";\") + \"connectionFactoryNames#\") + \"ConnectionFactory\";\n    org.apache.hadoop.conf.Configuration servicesConf = services.getConf();\n    servicesConf.set(org.apache.oozie.service.JMSAccessorService.CONF_RETRY_INITIAL_DELAY, \"1\");\n    servicesConf.set(org.apache.oozie.service.JMSAccessorService.CONF_RETRY_MAX_ATTEMPTS, \"3\");\n    servicesConf.set(org.apache.oozie.service.HCatAccessorService.JMS_CONNECTIONS_PROPERTIES, \"default=\" + jndiPropertiesString);\n    services.init();\n    org.apache.oozie.service.HCatAccessorService hcatService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HCatAccessorService.class);\n    org.apache.oozie.service.JMSAccessorService jmsService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JMSAccessorService.class);\n    java.lang.String publisherAuthority = \"hcat.server.com:5080\";\n    java.lang.String topic = \"topic.topic1\";\n    org.apache.activemq.broker.BrokerService broker = new org.apache.activemq.broker.BrokerService();\n    broker.addConnector(brokerURL);\n    broker.start();\n    org.apache.oozie.jms.JMSConnectionInfo connInfo = hcatService.getJMSConnectionInfo(new java.net.URI(\"hcat://hcat.server.com:8020\"));\n    jmsService.registerForNotification(connInfo, topic, new org.apache.oozie.dependency.hcat.HCatMessageHandler(publisherAuthority));\n    junit.framework.Assert.assertTrue(jmsService.isListeningToTopic(connInfo, topic));\n    junit.framework.Assert.assertFalse(jmsService.isConnectionInRetryList(connInfo));\n    junit.framework.Assert.assertFalse(jmsService.isTopicInRetryList(connInfo, topic));\n    org.apache.oozie.jms.ConnectionContext connCtxt = jmsService.createConnectionContext(connInfo);\n    broker.stop();\n    try {\n        connCtxt.createSession(Session.AUTO_ACKNOWLEDGE);\n        junit.framework.Assert.fail(\"Exception expected\");\n    } catch (java.lang.Exception e) {\n        java.lang.Thread.sleep(100);\n        junit.framework.Assert.assertFalse(jmsService.isListeningToTopic(connInfo, topic));\n        junit.framework.Assert.assertTrue(jmsService.isConnectionInRetryList(connInfo));\n        junit.framework.Assert.assertTrue(jmsService.isTopicInRetryList(connInfo, topic));\n    }\n    broker = new org.apache.activemq.broker.BrokerService();\n    broker.addConnector(brokerURL);\n    broker.start();\n    java.lang.Thread.sleep(1000);\n    junit.framework.Assert.assertTrue(jmsService.isListeningToTopic(connInfo, topic));\n    junit.framework.Assert.assertFalse(jmsService.isConnectionInRetryList(connInfo));\n    junit.framework.Assert.assertFalse(jmsService.isTopicInRetryList(connInfo, topic));\n    broker.stop();\n    jmsService.destroy();\n}",
        "ClassName": "TestJMSAccessorService",
        "Label": 1,
        "MethodName": "testConnectionRetryExceptionListener",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.TestCallableQueueService.EXEC_ORDER = new java.util.concurrent.atomic.AtomicLong();\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable1 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithSameKey\", \"QueueUniquenessWithSameKey\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable2 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithSameKey\", \"QueueUniquenessWithSameKey\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable3 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithSameKey\", \"QueueUniquenessWithSameKey\", 0, 100);\n    java.util.List<org.apache.oozie.service.TestCallableQueueService.MyCallable> callables = java.util.Arrays.asList(callable1, callable2, callable3);\n    org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    for (org.apache.oozie.service.TestCallableQueueService.MyCallable c : callables) {\n        queueservice.queue(c);\n    }\n    waitFor(200, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return ((callable1.executed != 0) && (callable2.executed == 0)) && (callable3.executed == 0);\n        }\n    });\n    junit.framework.Assert.assertTrue(callable1.executed != 0);\n    junit.framework.Assert.assertTrue(callable2.executed == 0);\n    junit.framework.Assert.assertTrue(callable3.executed == 0);\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testQueueUniquenessWithSameKey",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date curr = new java.util.Date();\n    java.util.Date pauseTime = new java.util.Date(curr.getTime() - 1000);\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_STATES_WITHOUT_ERROR, \"false\");\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTableWithPausedTime(org.apache.oozie.client.Job.Status.PAUSEDWITHERROR, false, pauseTime);\n    this.addRecordToBundleActionTable(job.getId(), \"action1\", 0, org.apache.oozie.client.Job.Status.FAILED);\n    this.addRecordToBundleActionTable(job.getId(), \"action2\", 0, org.apache.oozie.client.Job.Status.PAUSED);\n    addRecordToCoordJobTable(\"action1\", org.apache.oozie.client.Job.Status.FAILED, false, false);\n    addRecordToCoordJobTable(\"action2\", org.apache.oozie.client.Job.Status.PAUSED, false, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSEDWITHERROR, job.getStatus());\n    new org.apache.oozie.command.bundle.BundleRerunXCommand(job.getId(), \"action2\", null, false, true).call();\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSEDWITHERROR, job.getStatus());\n    junit.framework.Assert.assertNotNull(job.getPauseTime());\n    junit.framework.Assert.assertFalse(job.isPending());\n}",
        "ClassName": "TestBundleRerunXCommand",
        "Label": 1,
        "MethodName": "testBundleRerunInPausedWithError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-data\");\n    java.lang.String expr = \"${coord:actualTime()}\";\n    init(\"coord-action-start\");\n    expr = \"${coord:actualTime()}\";\n    junit.framework.Assert.assertEquals(\"2009-09-10T23:59Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testActualTime",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = org.apache.oozie.service.Services.get();\n    org.apache.oozie.service.HadoopAccessorService has = services.get(org.apache.oozie.service.HadoopAccessorService.class);\n    junit.framework.Assert.assertNotNull(has);\n    junit.framework.Assert.assertNotNull(has.createJobConf(\"*\"));\n    junit.framework.Assert.assertNotNull(has.createJobConf(\"jt\"));\n    junit.framework.Assert.assertEquals(\"bar\", has.createJobConf(\"jt\").get(\"foo\"));\n    junit.framework.Assert.assertNotNull(has.createActionDefaultConf(\"*\", \"action\"));\n    junit.framework.Assert.assertNotNull(has.createActionDefaultConf(\"jt\", \"action\"));\n    junit.framework.Assert.assertNotNull(has.createActionDefaultConf(\"jt\", \"actionx\"));\n    junit.framework.Assert.assertNotNull(has.createActionDefaultConf(\"jtx\", \"action\"));\n    junit.framework.Assert.assertEquals(\"action.bar\", has.createActionDefaultConf(\"jt\", \"action\").get(\"action.foo\"));\n    junit.framework.Assert.assertNull(has.createActionDefaultConf(\"*\", \"action\").get(\"action.foo\"));\n}",
        "ClassName": "TestHadoopAccessorService",
        "Label": 1,
        "MethodName": "testService",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.MapReduceActionExecutor ae = new org.apache.oozie.action.hadoop.MapReduceActionExecutor();\n    org.apache.hadoop.fs.Path jar = new org.apache.hadoop.fs.Path(ae.getOozieRuntimeDir(), ae.getLauncherJarName());\n    junit.framework.Assert.assertTrue(new java.io.File(jar.toString()).exists());\n}",
        "ClassName": "TestMapReduceActionError",
        "Label": 1,
        "MethodName": "testLauncherJar",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setSystemProperty(org.apache.oozie.service.XLogService.OOZIE_LOG_DIR, null);\n    java.lang.String logs = org.apache.oozie.service.Services.getOozieHome() + \"/logs\";\n    org.apache.oozie.service.XLogService ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertEquals(logs, java.lang.System.getProperty(org.apache.oozie.service.XLogService.OOZIE_LOG_DIR));\n    ls.destroy();\n}",
        "ClassName": "TestXLogService",
        "Label": 1,
        "MethodName": "testDefaultLogsDir",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String oozieLogPath = getTestCaseDir();\n    java.lang.String oozieLogName = \"oozie.log\";\n    final org.apache.oozie.service.XLogService xls = new org.apache.oozie.util.TestOozieRollingPolicy.MockXLogService(oozieLogPath, oozieLogName);\n    org.apache.oozie.util.OozieRollingPolicy orp = new org.apache.oozie.util.OozieRollingPolicy() {\n        @java.lang.Override\n        org.apache.oozie.service.XLogService getXLogService() {\n            return xls;\n        }\n    };\n    orp.setMaxHistory(3);\n    java.util.Calendar cal = new java.util.GregorianCalendar();\n    final java.io.File f0 = new java.io.File(oozieLogPath, oozieLogName);\n    f0.createNewFile();\n    f0.setLastModified(cal.getTimeInMillis());\n    cal.add(java.util.Calendar.HOUR_OF_DAY, 1);\n    final java.io.File f1 = new java.io.File(oozieLogPath, (oozieLogName + formatDateForFilename(cal)) + \".gz\");\n    f1.createNewFile();\n    cal.add(java.util.Calendar.HOUR_OF_DAY, 1);\n    final java.io.File f2 = new java.io.File(oozieLogPath, (oozieLogName + formatDateForFilename(cal)) + \".gz\");\n    f2.createNewFile();\n    cal.add(java.util.Calendar.HOUR_OF_DAY, 1);\n    final java.io.File f3 = new java.io.File(oozieLogPath, (oozieLogName + formatDateForFilename(cal)) + \".gz\");\n    f3.createNewFile();\n    cal.add(java.util.Calendar.HOUR_OF_DAY, 1);\n    final java.io.File f4 = new java.io.File(oozieLogPath, (oozieLogName + formatDateForFilename(cal)) + \".gz\");\n    f4.createNewFile();\n    orp.isTriggeringEvent(null, null, null, 0);\n    waitFor(60 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return (((f0.exists() && (!f1.exists())) && f2.exists()) && f3.exists()) && f4.exists();\n        }\n    });\n    junit.framework.Assert.assertTrue((((f0.exists() && (!f1.exists())) && f2.exists()) && f3.exists()) && f4.exists());\n    cal.add(java.util.Calendar.HOUR_OF_DAY, 1);\n    final java.io.File f5 = new java.io.File(oozieLogPath, oozieLogName + formatDateForFilename(cal));\n    f5.createNewFile();\n    f5.setLastModified(cal.getTimeInMillis());\n    cal.add(java.util.Calendar.HOUR_OF_DAY, -15);\n    final java.io.File f6 = new java.io.File(oozieLogPath, oozieLogName + formatDateForFilename(cal));\n    f6.createNewFile();\n    f6.setLastModified(cal.getTimeInMillis());\n    orp.isTriggeringEvent(null, null, null, 0);\n    waitFor(60 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return (((((f0.exists() && (!f1.exists())) && (!f2.exists())) && f3.exists()) && f4.exists()) && f5.exists()) && (!f6.exists());\n        }\n    });\n    junit.framework.Assert.assertTrue((((((f0.exists() && (!f1.exists())) && (!f2.exists())) && f3.exists()) && f4.exists()) && f5.exists()) && (!f6.exists()));\n    final java.io.File f7 = new java.io.File(oozieLogPath, \"blah.txt\");\n    f7.createNewFile();\n    f7.setLastModified(cal.getTimeInMillis());\n    cal.add(java.util.Calendar.HOUR_OF_DAY, 1);\n    final java.io.File f8 = new java.io.File(oozieLogPath, oozieLogName + formatDateForFilename(cal));\n    cal.add(java.util.Calendar.HOUR_OF_DAY, 15);\n    f8.createNewFile();\n    f8.setLastModified(cal.getTimeInMillis());\n    orp.isTriggeringEvent(null, null, null, 0);\n    waitFor(60 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return (((((((f0.exists() && (!f1.exists())) && (!f2.exists())) && (!f3.exists())) && f4.exists()) && f5.exists()) && (!f6.exists())) && f7.exists()) && f8.exists();\n        }\n    });\n    junit.framework.Assert.assertTrue((((((((f0.exists() && (!f1.exists())) && (!f2.exists())) && (!f3.exists())) && f4.exists()) && f5.exists()) && (!f6.exists())) && f7.exists()) && f8.exists());\n}",
        "ClassName": "TestOozieRollingPolicy",
        "Label": 1,
        "MethodName": "testDeletingOldFiles",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testAction(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_KILL, null);\n}",
        "ClassName": "TestV1JobServlet",
        "Label": 1,
        "MethodName": "testKill",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    java.lang.String jobId = job.getId();\n    org.apache.oozie.CoordinatorActionBean action1 = addRecordToCoordActionTable(jobId, actionNum, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\", 0);\n    java.util.List<org.apache.oozie.CoordinatorActionBean> coordActions = org.apache.oozie.coord.CoordUtils.getCoordActionsFromDates(jobId, \"2009-12-15T01:00Z\");\n    junit.framework.Assert.assertEquals(1, coordActions.size());\n    junit.framework.Assert.assertEquals(action1, coordActions.get(0));\n}",
        "ClassName": "TestCoordUtils",
        "Label": 1,
        "MethodName": "testGetCoordActionsFromDate",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path inputDir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"input\");\n    org.apache.hadoop.fs.Path outputDir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"output1\");\n    java.io.Writer w = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(inputDir, \"data.txt\")));\n    w.write(\"dummy\\n\");\n    w.write(\"dummy\\n\");\n    java.io.Writer ow = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(outputDir, \"data.txt\")));\n    ow.write(\"dummy\\n\");\n    ow.write(\"dummy\\n\");\n    ow.close();\n    java.lang.String actionXml = ((((((((((((((((((((\"<map-reduce>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<configuration>\") + \"<property><name>mapred.mapper.class</name><value>\") + org.apache.oozie.action.hadoop.MapperReducerForTest.class.getName()) + \"</value></property>\") + \"<property><name>mapred.reducer.class</name><value>\") + org.apache.oozie.action.hadoop.MapperReducerForTest.class.getName()) + \"</value></property>\") + \"<property><name>mapred.input.dir</name><value>\") + inputDir) + \"</value></property>\") + \"<property><name>mapred.output.dir</name><value>\") + outputDir) + \"</value></property>\") + \"</configuration>\") + \"</map-reduce>\";\n    _testSubmit(actionXml);\n}",
        "ClassName": "TestMapReduceActionError",
        "Label": 1,
        "MethodName": "testMapReduce",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    prepareOozieConfDir(\"oozie-site2.xml\");\n    setSystemProperty(org.apache.oozie.service.ConfigurationService.OOZIE_CONFIG_FILE, \"oozie-site-missing.xml\");\n    org.apache.oozie.service.ConfigurationService cl = new org.apache.oozie.service.ConfigurationService();\n    cl.init(null);\n    junit.framework.Assert.assertEquals(\"oozie-\" + java.lang.System.getProperty(\"user.name\"), cl.getConf().get(\"oozie.system.id\"));\n    junit.framework.Assert.assertNull(cl.getConf().get(\"oozie.dummy\"));\n    cl.destroy();\n}",
        "ClassName": "TestConfigurationService",
        "Label": 1,
        "MethodName": "testMissingSite",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        java.lang.System.getProperties().remove(org.apache.oozie.test.TestXTestCase.SYS_PROP);\n        org.apache.oozie.test.TestXTestCase.MyXTestCase testcase = new org.apache.oozie.test.TestXTestCase.MyXTestCase();\n        testcase.setName(getName());\n        testcase.setUp();\n        testcase.testUnsetSysProperty();\n        junit.framework.Assert.assertEquals(\"A\", java.lang.System.getProperty(org.apache.oozie.test.TestXTestCase.SYS_PROP));\n        testcase.tearDown();\n        junit.framework.Assert.assertNull(java.lang.System.getProperty(org.apache.oozie.test.TestXTestCase.SYS_PROP));\n        testcase = new org.apache.oozie.test.TestXTestCase.MyXTestCase();\n        testcase.setName(getName() + \"A\");\n        testcase.setUp();\n        java.lang.System.getProperties().setProperty(org.apache.oozie.test.TestXTestCase.SYS_PROP, \"B\");\n        testcase.testSetSysProperty();\n        junit.framework.Assert.assertEquals(\"C\", java.lang.System.getProperty(org.apache.oozie.test.TestXTestCase.SYS_PROP));\n        testcase.tearDown();\n        junit.framework.Assert.assertEquals(\"B\", java.lang.System.getProperty(org.apache.oozie.test.TestXTestCase.SYS_PROP));\n    } finally {\n        java.lang.System.getProperties().remove(org.apache.oozie.test.TestXTestCase.SYS_PROP);\n    }\n}",
        "ClassName": "TestXTestCase",
        "Label": 1,
        "MethodName": "testSysPropSetting",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.ActionExecutor.enableInit();\n    org.apache.oozie.action.ActionExecutor.resetInitInfo();\n    org.apache.oozie.action.ActionExecutor ae = new org.apache.oozie.action.TestActionExecutor.MyActionExecutor();\n    ae.initActionType();\n    org.apache.oozie.action.ActionExecutor.disableInit();\n    ae.start(null, null);\n    ae = new org.apache.oozie.action.TestActionExecutor.MyActionExecutor(1, 2);\n    ae.check(null, null);\n    java.lang.Exception cause = new java.io.IOException();\n    try {\n        throw ae.convertException(cause);\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(cause, ex.getCause());\n        junit.framework.Assert.assertEquals(org.apache.oozie.action.ActionExecutorException.ErrorType.TRANSIENT, ex.getErrorType());\n        junit.framework.Assert.assertEquals(\"IO\", ex.getErrorCode());\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    }\n    cause = new java.rmi.RemoteException();\n    try {\n        throw ae.convertException(cause);\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(cause, ex.getCause());\n        junit.framework.Assert.assertEquals(org.apache.oozie.action.ActionExecutorException.ErrorType.NON_TRANSIENT, ex.getErrorType());\n        junit.framework.Assert.assertEquals(\"RMI\", ex.getErrorCode());\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    }\n    cause = new java.lang.RuntimeException();\n    try {\n        throw ae.convertException(cause);\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(cause, ex.getCause());\n        junit.framework.Assert.assertEquals(org.apache.oozie.action.ActionExecutorException.ErrorType.ERROR, ex.getErrorType());\n        junit.framework.Assert.assertEquals(\"RuntimeException\", ex.getErrorCode());\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    }\n    cause = new org.apache.oozie.action.ActionExecutorException(org.apache.oozie.action.ActionExecutorException.ErrorType.ERROR, \"x\", \"x\");\n    try {\n        throw ae.convertException(cause);\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(cause, ex);\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    }\n    cause = new java.io.EOFException();\n    try {\n        throw ae.convertException(cause);\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(cause, ex.getCause());\n        junit.framework.Assert.assertEquals(org.apache.oozie.action.ActionExecutorException.ErrorType.TRANSIENT, ex.getErrorType());\n        junit.framework.Assert.assertEquals(\"IO\", ex.getErrorCode());\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    }\n    java.lang.Exception rootCause = new java.rmi.RemoteException();\n    cause = new java.lang.RuntimeException(rootCause);\n    try {\n        throw ae.convertException(cause);\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(rootCause, ex.getCause());\n        junit.framework.Assert.assertEquals(org.apache.oozie.action.ActionExecutorException.ErrorType.NON_TRANSIENT, ex.getErrorType());\n        junit.framework.Assert.assertEquals(\"RMI\", ex.getErrorCode());\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    }\n    rootCause = new java.rmi.RemoteException();\n    cause = new java.io.IOException(rootCause);\n    try {\n        throw ae.convertException(cause);\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(rootCause, ex.getCause());\n        junit.framework.Assert.assertEquals(org.apache.oozie.action.ActionExecutorException.ErrorType.NON_TRANSIENT, ex.getErrorType());\n        junit.framework.Assert.assertEquals(\"RMI\", ex.getErrorCode());\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    }\n    rootCause = new java.io.IOException();\n    cause = new java.rmi.RemoteException(\"x\", rootCause);\n    try {\n        throw ae.convertException(cause);\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(rootCause, ex.getCause());\n        junit.framework.Assert.assertEquals(org.apache.oozie.action.ActionExecutorException.ErrorType.TRANSIENT, ex.getErrorType());\n        junit.framework.Assert.assertEquals(\"IO\", ex.getErrorCode());\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    }\n    rootCause = new java.io.EOFException();\n    cause = new java.rmi.RemoteException(\"x\", rootCause);\n    try {\n        throw ae.convertException(cause);\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(rootCause, ex.getCause());\n        junit.framework.Assert.assertEquals(org.apache.oozie.action.ActionExecutorException.ErrorType.TRANSIENT, ex.getErrorType());\n        junit.framework.Assert.assertEquals(\"IO\", ex.getErrorCode());\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    }\n}",
        "ClassName": "TestActionExecutor",
        "Label": 1,
        "MethodName": "testActionExecutor",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-action-create\");\n    java.lang.String expr = \"${coord:tzOffset()}\";\n    junit.framework.Assert.assertEquals(\"0\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    appInst.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/New_York\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    junit.framework.Assert.assertEquals(\"-180\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testTZOffset",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String actionId = new java.util.Date().getTime() + \"-COORD-ActionStartCommand-C@1\";\n    addRecordToActionTable(actionId, 1, null);\n    new org.apache.oozie.command.coord.CoordActionStartXCommand(actionId, \"me\", \"myapp\", \"mytoken\", \"myjob\").call();\n    checkCoordAction(actionId);\n}",
        "ClassName": "TestCoordActionStartXCommand",
        "Label": 1,
        "MethodName": "testActionStartCommand",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTableForWaiting(\"coord-job-for-action-input-check.xml\", org.apache.oozie.client.Job.Status.RUNNING, false, true);\n        org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTableForWaiting(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-for-action-input-check.xml\");\n        createDir(getTestCaseDir() + \"/2009/01/29/\");\n        createDir(getTestCaseDir() + \"/2009/01/22/\");\n        createDir(getTestCaseDir() + \"/2009/01/15/\");\n        createDir(getTestCaseDir() + \"/2009/01/08/\");\n        sleep(3000);\n        new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(action.getId(), job.getId()).call();\n        sleep(3000);\n        final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n        org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action.getId());\n        org.apache.oozie.CoordinatorActionBean caBean = jpaService.execute(coordGetCmd);\n        org.jdom.Element eAction = org.apache.oozie.util.XmlUtils.parseXml(caBean.getActionXml());\n        org.jdom.Element configElem = eAction.getChild(\"action\", eAction.getNamespace()).getChild(\"workflow\", eAction.getNamespace()).getChild(\"configuration\", eAction.getNamespace());\n        java.util.List<?> elementList = configElem.getChildren(\"property\", configElem.getNamespace());\n        org.jdom.Element e1 = ((org.jdom.Element) (elementList.get(0)));\n        org.jdom.Element e2 = ((org.jdom.Element) (elementList.get(1)));\n        junit.framework.Assert.assertEquals(\"file://,testDir/2009/29,file://,testDir/2009/22,file://,testDir/2009/15,file://,testDir/2009/08\", e1.getChild(\"value\", e1.getNamespace()).getValue());\n        junit.framework.Assert.assertEquals(\"file://,testDir/2009/29\", e2.getChild(\"value\", e1.getNamespace()).getValue());\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Unexpected exception\");\n    }\n}",
        "ClassName": "TestCoordActionInputCheckXCommand",
        "Label": 1,
        "MethodName": "testResolveCoordConfiguration",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path inputDir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"input\");\n    org.apache.hadoop.fs.Path outputDir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"output\");\n    java.io.Writer w = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(inputDir, \"data.txt\")));\n    w.write(\"dummy\\n\");\n    w.write(\"dummy\\n\");\n    w.close();\n    java.lang.String actionXml = (((((((\"<map-reduce>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + getMapReduceCredentialsConfig(inputDir.toString(), outputDir.toString()).toXmlString(false)) + \"</map-reduce>\";\n    _testSubmitWithCredentials(\"map-reduce\", actionXml);\n}",
        "ClassName": "TestMapReduceActionExecutor",
        "Label": 1,
        "MethodName": "testMapReduceWithCredentials",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String testCaseDir = getTestCaseDir();\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(getConfString()));\n    java.util.Date actualTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-09-01T01:00Z\");\n    java.util.Date nominalTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-09-01T00:00Z\");\n    java.lang.String dataEvntXML = (\"<data-in name=\\\"A\\\" dataset=\\\"a\\\"><uris>file:///\" + testCaseDir) + \"/US/2009/1/30|file:///tmp/coord/US/2009/1/31</uris>\";\n    dataEvntXML += \"<dataset name=\\\"a\\\" frequency=\\\"1440\\\" initial-instance=\\\"2009-01-01T00:00Z\\\"  freq_timeunit=\\\"MINUTE\\\" timezone=\\\"UTC\\\" end_of_duration=\\\"NONE\\\">\";\n    dataEvntXML += (\"<uri-template>file:///\" + testCaseDir) + \"/${YEAR}/${MONTH}/${DAY}</uri-template></dataset></data-in>\";\n    org.jdom.Element dEvent = org.apache.oozie.util.XmlUtils.parseXml(dataEvntXML);\n    org.apache.oozie.util.ELEvaluator eval = org.apache.oozie.coord.CoordELEvaluator.createLazyEvaluator(actualTime, nominalTime, dEvent, conf);\n    createDir(testCaseDir + \"/2009/01/02\");\n    java.lang.String expr = \"${coord:latest(0)} ${coord:latest(-1)}\";\n    junit.framework.Assert.assertEquals(\"2009-01-02T00:00Z ${coord:latest(-1)}\", eval.evaluate(expr, java.lang.String.class));\n    createDir(testCaseDir + \"/2009/09/04\");\n    createDir(testCaseDir + \"/2009/09/05\");\n    expr = \"${coord:future(1, 30)}\";\n    junit.framework.Assert.assertEquals(\"2009-09-05T00:00Z\", eval.evaluate(expr, java.lang.String.class));\n}",
        "ClassName": "TestCoordELEvaluator",
        "Label": 1,
        "MethodName": "testCreateLazyEvaluator",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.BundleJobBean bundleJob = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowJobBean subwfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJob.getId());\n    org.apache.oozie.WorkflowActionBean subwfAction = addRecordToWfActionTable(subwfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordAction = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.BundleActionBean bundleAction = addRecordToBundleActionTable(bundleJob.getId(), coordJob.getId(), coordJob.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction.getId());\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleJob.getId());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionGetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJob.getId(), coordJob.getAppName());\n    wfJob = jpaService.execute(wfJobGetCmd);\n    wfAction = jpaService.execute(wfActionGetCmd);\n    subwfJob = jpaService.execute(subwfJobGetCmd);\n    subwfAction = jpaService.execute(subwfActionGetCmd);\n    coordJob = jpaService.execute(coordJobGetCmd);\n    coordAction = jpaService.execute(coordActionGetCmd);\n    bundleJob = jpaService.execute(bundleJobGetCmd);\n    bundleAction = jpaService.execute(bundleActionGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, subwfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, subwfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleAction.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(7, 7, 7, 10).call();\n    try {\n        jpaService.execute(bundleJobGetCmd);\n        junit.framework.Assert.fail(\"Bundle Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(bundleActionGetCmd);\n        junit.framework.Assert.fail(\"Bundle Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordJobGetCmd);\n        junit.framework.Assert.fail(\"Coordinator Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordActionGetCmd);\n        junit.framework.Assert.fail(\"Coordinator Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfJobGetCmd);\n        junit.framework.Assert.fail(\"Workflow Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfActionGetCmd);\n        junit.framework.Assert.fail(\"Workflow Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfJobGetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfActionGetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeBundleWithCoordChildWithWFChildWithSubWF3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    java.lang.String resourceXmlName = \"coord-action-get.xml\";\n    java.util.Date dummyCreationTime = new java.util.Date();\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = createCoordAction(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.WAITING, resourceXmlName, 0);\n    java.lang.String testDir = getTestCaseDir();\n    java.lang.String missDeps = \"file://#testDir/2009/29/_SUCCESS#file://#testDir/2009/22/_SUCCESS#file://#testDir/2009/15/_SUCCESS#file://#testDir/2009/08/_SUCCESS\";\n    missDeps = missDeps.replaceAll(\"#testDir\", testDir);\n    action.setMissingDependencies(missDeps);\n    action.setCreatedTime(dummyCreationTime);\n    insertRecordCoordAction(action);\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"coord\");\n    java.lang.String actionXml = getCoordActionXml(appPath, resourceXmlName);\n    org.apache.hadoop.conf.Configuration conf = getCoordConf(appPath);\n    java.lang.String actionNominalTime = getActionNominalTime(actionXml);\n    _testGetForInputCheckX(action.getId(), job.getId(), org.apache.oozie.client.CoordinatorAction.Status.WAITING, 0, actionXml, org.apache.oozie.util.XmlUtils.prettyPrint(conf).toString(), org.apache.oozie.util.DateUtils.parseDateOozieTZ(actionNominalTime), dummyCreationTime, missDeps);\n}",
        "ClassName": "TestCoordActionGetForInputCheckJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.CallbackService cs = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallbackService.class);\n    junit.framework.Assert.assertNotNull(cs);\n    java.lang.String callback = cs.createCallBackUrl(\"a\", \"@STATUS\");\n    junit.framework.Assert.assertTrue(callback.contains(\"http://\"));\n    junit.framework.Assert.assertTrue(callback.contains(\"id=a\"));\n    junit.framework.Assert.assertTrue(callback.contains(\"status=@STATUS\"));\n    callback = callback.replace(\"@STATUS\", \"OK\");\n    junit.framework.Assert.assertEquals(\"a\", cs.getActionId(callback));\n    junit.framework.Assert.assertEquals(\"OK\", cs.getExternalStatus(callback));\n}",
        "ClassName": "TestCallbackService",
        "Label": 1,
        "MethodName": "testCallbacks",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testErrorWithUserRetry(\"start.error\", \"error\", \"based_on_action_status\");\n    junit.framework.Assert.assertTrue(true);\n}",
        "ClassName": "TestActionErrors",
        "Label": 1,
        "MethodName": "testStartErrorWithUserRetry",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        services.destroy();\n        services = setupServicesForTopic();\n        services.getConf().set(org.apache.oozie.service.JMSTopicService.TOPIC_NAME, ((org.apache.oozie.service.JMSTopicService.JobType.WORKFLOW.getValue() + \" = workflow,\") + org.apache.oozie.service.JMSTopicService.JobType.COORDINATOR.getValue()) + \"=coord\");\n        services.init();\n        org.apache.oozie.service.JMSTopicService jmsTopicService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JMSTopicService.class);\n        org.apache.oozie.WorkflowJobBean wfj = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n        junit.framework.Assert.assertEquals(\"workflow\", jmsTopicService.getTopic(wfj.getId()));\n        org.apache.oozie.WorkflowActionBean wab = addRecordToWfActionTable(wfj.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n        junit.framework.Assert.assertEquals(\"workflow\", jmsTopicService.getTopic(wab.getId()));\n        org.apache.oozie.CoordinatorJobBean cjb = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, true, true);\n        junit.framework.Assert.assertEquals(\"coord\", jmsTopicService.getTopic(cjb.getId()));\n        org.apache.oozie.CoordinatorActionBean cab = addRecordToCoordActionTable(cjb.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-for-action-input-check.xml\", 0);\n        junit.framework.Assert.assertEquals(\"coord\", jmsTopicService.getTopic(cab.getId()));\n        org.apache.oozie.BundleJobBean bjb = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, true);\n        junit.framework.Assert.assertEquals(bjb.getUser(), jmsTopicService.getTopic(bjb.getId()));\n        org.apache.oozie.BundleActionBean bab = addRecordToBundleActionTable(bjb.getId(), \"1\", 1, org.apache.oozie.client.Job.Status.RUNNING);\n        junit.framework.Assert.assertEquals(bjb.getUser(), jmsTopicService.getTopic(bab.getBundleActionId()));\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSTopicService",
        "Label": 1,
        "MethodName": "testMixedTopic2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.DONEWITHERROR, false);\n    java.lang.String bundleId = job.getId();\n    addRecordToBundleActionTable(bundleId, \"action1\", 0, org.apache.oozie.client.Job.Status.KILLED);\n    addRecordToCoordJobTableWithBundle(bundleId, \"action1\", org.apache.oozie.client.Job.Status.KILLED, false, false, 1);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    new org.apache.oozie.command.bundle.BundleRerunXCommand(bundleId, \"action1\", null, false, true).call();\n    sleep(1000);\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionJPA = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleId, \"action1\");\n    org.apache.oozie.BundleActionBean ba = jpaService.execute(bundleActionJPA);\n    junit.framework.Assert.assertEquals(0, ba.getPending());\n}",
        "ClassName": "TestBundleRerunXCommand",
        "Label": 1,
        "MethodName": "testBundleRerunKilledCoordinator",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String request = ((\"bundle=\" + bundleName) + \";actionstatus=FAILED;\") + \"startcreatedtime=2012-07-21T00:00Z;endcreatedtime=2012-07-22T02:00Z\";\n    java.util.List<org.apache.oozie.client.rest.BulkResponseImpl> brList = _execQuery(request);\n    junit.framework.Assert.assertEquals(1, brList.size());\n    org.apache.oozie.client.rest.BulkResponseImpl br = brList.get(0);\n    junit.framework.Assert.assertEquals(bundleName, br.getBundle().getAppName());\n    junit.framework.Assert.assertEquals(\"Coord1\", br.getCoordinator().getAppName());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.FAILED, br.getAction().getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.util.DateUtils.parseDateUTC(CREATE_TIME).toString(), br.getAction().getCreatedTime().toString());\n}",
        "ClassName": "TestBulkMonitorJPAExecutor",
        "Label": 1,
        "MethodName": "testSingleRecord",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"coordinator.xml\")).close();\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-rerun\", org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + \"1\", \"-action\", \"1\" };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_COORD_ACTION_RERUN, org.apache.oozie.servlet.MockCoordinatorEngineService.did);\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockCoordinatorEngineService.started.get(1));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testCoordReRun1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowActionBean action = new org.apache.oozie.WorkflowActionBean();\n    action.setJobId(\"id\");\n    action.setExecutionPath(\"executionPath\");\n    action.setPending();\n    action.setPendingAge(new java.util.Date());\n    action.setSignalValue(\"signal\");\n    action.setLogToken(\"logToken\");\n    junit.framework.Assert.assertEquals(\"id\", action.getJobId());\n    junit.framework.Assert.assertEquals(\"executionPath\", action.getExecutionPath());\n    junit.framework.Assert.assertTrue(action.isPending());\n    junit.framework.Assert.assertNotNull(action.getPendingAge());\n    junit.framework.Assert.assertEquals(\"signal\", action.getSignalValue());\n    junit.framework.Assert.assertEquals(\"logToken\", action.getLogToken());\n    action.setExecutionData(\"externalStatus\", java.lang.System.getProperties());\n    junit.framework.Assert.assertEquals(\"externalStatus\", action.getExternalStatus());\n    junit.framework.Assert.assertNotNull(action.getData());\n    action.setEndData(org.apache.oozie.client.WorkflowAction.Status.OK, \"signal\");\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, action.getStatus());\n    junit.framework.Assert.assertEquals(\"externalStatus\", action.getExternalStatus());\n    action.setStartData(\"externalId\", \"trackerUri\", \"consoleUrl\");\n    junit.framework.Assert.assertEquals(\"externalId\", action.getExternalId());\n    junit.framework.Assert.assertEquals(\"trackerUri\", action.getTrackerUri());\n    junit.framework.Assert.assertEquals(\"consoleUrl\", action.getConsoleUrl());\n    action.setStats(\"jsonStats\");\n    action.setExternalChildIDs(\"job1,job2\");\n    junit.framework.Assert.assertEquals(\"jsonStats\", action.getStats());\n    junit.framework.Assert.assertEquals(\"job1,job2\", action.getExternalChildIDs());\n}",
        "ClassName": "TestActionBean",
        "Label": 1,
        "MethodName": "testAction",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.CoordinatorEngine ce = new org.apache.oozie.CoordinatorEngine();\n    java.util.Map<java.lang.String, java.util.List<java.lang.String>> map = ce.parseFilter(null);\n    junit.framework.Assert.assertNotNull(map);\n    junit.framework.Assert.assertEquals(0, map.size());\n    map = ce.parseFilter(\"\");\n    junit.framework.Assert.assertNotNull(map);\n    junit.framework.Assert.assertEquals(0, map.size());\n    try {\n        ce.parseFilter(\"winniethepooh\");\n        junit.framework.Assert.fail(\"CoordinatorEngineException expected.\");\n    } catch (org.apache.oozie.CoordinatorEngineException bee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0420, bee.getErrorCode());\n    }\n    try {\n        map = ce.parseFilter(\"kk=vv=zz\");\n        junit.framework.Assert.fail(\"CoordinatorEngineException expected.\");\n    } catch (org.apache.oozie.CoordinatorEngineException cee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0420, cee.getErrorCode());\n    }\n    try {\n        ce.parseFilter(\"foo=moo\");\n        junit.framework.Assert.fail(\"CoordinatorEngineException expected.\");\n    } catch (org.apache.oozie.CoordinatorEngineException bee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0420, bee.getErrorCode());\n    }\n    try {\n        ce.parseFilter(\"status=foo\");\n        junit.framework.Assert.fail(\"CoordinatorEngineException expected.\");\n    } catch (org.apache.oozie.CoordinatorEngineException bee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0420, bee.getErrorCode());\n    }\n    try {\n        ce.parseFilter(\"FreQuency=foo\");\n        junit.framework.Assert.fail(\"CoordinatorEngineException expected.\");\n    } catch (org.apache.oozie.CoordinatorEngineException bee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0420, bee.getErrorCode());\n    }\n    try {\n        ce.parseFilter(\"UniT=foo\");\n        junit.framework.Assert.fail(\"CoordinatorEngineException expected.\");\n    } catch (org.apache.oozie.CoordinatorEngineException bee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0420, bee.getErrorCode());\n    }\n    try {\n        ce.parseFilter(\"unit=minutes\");\n        junit.framework.Assert.fail(\"CoordinatorEngineException expected.\");\n    } catch (org.apache.oozie.CoordinatorEngineException bee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0420, bee.getErrorCode());\n    }\n}",
        "ClassName": "TestCoordinatorEngineSimple",
        "Label": 1,
        "MethodName": "testParseFilterNegative",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n    getFileSystem().mkdirs(appPath);\n    getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\")).close();\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, appPath.toString());\n    _testAction(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_RERUN, conf);\n}",
        "ClassName": "TestV0JobServlet",
        "Label": 1,
        "MethodName": "testReRun",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/jobs\", org.apache.oozie.servlet.V1JobsServlet.class, false, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String bulkRequest = \"bundle=BUNDLE-ABC\";\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOBS_BULK_PARAM, bulkRequest);\n            params.put(org.apache.oozie.client.rest.RestConstants.OFFSET_PARAM, \"1\");\n            params.put(org.apache.oozie.client.rest.RestConstants.LEN_PARAM, \"5\");\n            java.net.URL url = createURL(\"\", params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode());\n            return null;\n        }\n    });\n}",
        "ClassName": "TestBulkMonitorWebServiceAPI",
        "Label": 1,
        "MethodName": "testNoRecords",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_COORD_STATUS, \"true\");\n    services = new org.apache.oozie.service.Services();\n    setClassesToBeExcluded(services.getConf(), excludedServices);\n    services.init();\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.util.Date pauseTime = new java.util.Date(new java.util.Date().getTime() - (30 * 1000));\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean coordJob1 = addRecordToCoordJobTable(\"action1\", org.apache.oozie.client.Job.Status.RUNNING, start, end, false);\n    org.apache.oozie.CoordinatorJobBean coordJob2 = addRecordToCoordJobTable(\"action2\", org.apache.oozie.client.Job.Status.RUNNING, start, end, false);\n    coordJob1.setAppNamespace(org.apache.oozie.service.SchemaService.COORDINATOR_NAMESPACE_URI_1);\n    coordJob1.setPauseTime(pauseTime);\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob1));\n    coordJob2.setAppNamespace(org.apache.oozie.service.SchemaService.COORDINATOR_NAMESPACE_URI_1);\n    coordJob2.setPauseTime(pauseTime);\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob2));\n    java.lang.Runnable pauseStartRunnable = new org.apache.oozie.service.PauseTransitService.PauseTransitRunnable();\n    pauseStartRunnable.run();\n    final java.lang.String coordJobId1 = coordJob1.getId();\n    final java.lang.String coordJobId2 = coordJob2.getId();\n    waitFor(10 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean cJob1 = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJobId1));\n            return cJob1.getStatus() == org.apache.oozie.client.Job.Status.RUNNING;\n        }\n    });\n    coordJob1 = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJobId1));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, coordJob1.getStatus());\n    coordJob2 = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJobId2));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, coordJob2.getStatus());\n}",
        "ClassName": "TestPauseTransitService",
        "Label": 1,
        "MethodName": "testPauseCoordinatorForBackwardSupport",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date dateBeforeAction = new java.util.Date();\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job1 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    java.lang.String jobId1 = job1.getId();\n    org.apache.oozie.CoordinatorJobBean job2 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    java.lang.String jobId2 = job2.getId();\n    addRecordToCoordActionTable(jobId1, actionNum++, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(jobId2, actionNum++, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    _testCoordActionGetByLastModifiedTime(jobId1, jobId2, dateBeforeAction);\n}",
        "ClassName": "TestCoordActionGetByLastModifiedTimeJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"coordinator.xml\")).close();\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-rerun\", org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + \"0\", \"-action\", \"0\", \"-refresh\" };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_COORD_ACTION_RERUN, org.apache.oozie.servlet.MockCoordinatorEngineService.did);\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockCoordinatorEngineService.started.get(0));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testCoordReRun3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertEquals(120, org.apache.oozie.util.ParamChecker.checkGTZero(120, \"test\"));\n    try {\n        org.apache.oozie.util.ParamChecker.checkGTZero(0, \"test\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception ex) {\n    }\n    try {\n        org.apache.oozie.util.ParamChecker.checkGTZero(-1, \"test\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestParamChecker",
        "Label": 1,
        "MethodName": "testCheckGTZero",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.WorkflowApp app = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"testApp\", \"<workflow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration();\n    org.apache.hadoop.fs.Path appUri = new org.apache.hadoop.fs.Path(getAppPath(), \"workflow.xml\");\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, appUri.toString());\n    conf.set(org.apache.oozie.client.OozieClient.LOG_TOKEN, \"testToken\");\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    org.apache.oozie.WorkflowJobBean job = createWorkflow(app, conf, \"auth\", org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action1 = createWorkflowAction(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action2 = createWorkflowAction(job.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> insertList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    insertList.add(action1);\n    insertList.add(action2);\n    insertList.add(job);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BulkUpdateInsertForCoordActionStartJPAExecutor bulkInsertCmd = new org.apache.oozie.executor.jpa.BulkUpdateInsertForCoordActionStartJPAExecutor();\n    bulkInsertCmd.setInsertList(insertList);\n    jpaService.execute(bulkInsertCmd);\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action1.getId());\n    action1 = jpaService.execute(actionGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", action1.getStatusStr());\n    actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action2.getId());\n    action2 = jpaService.execute(actionGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", action2.getStatusStr());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(wfGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", job.getStatusStr());\n}",
        "ClassName": "TestBulkUpdateInsertForCoordActionStartJPAExecutor",
        "Label": 1,
        "MethodName": "testInserts",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.SchemaService wss = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.SchemaService.class);\n    javax.xml.validation.Validator validator = wss.getSchema(org.apache.oozie.service.SchemaService.SchemaName.COORDINATOR).newValidator();\n    java.lang.String COORD_APP1 = \"<coordinator-app name='NAME' frequency='${coord:days(1)}' start='2009-02-01T01:00Z' end='2009-02-03T23:59Z' timezone='UTC' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns='uri:oozie:coordinator:0.1' xmlns:sla='uri:oozie:sla:0.1'> \" + (\"<controls> <timeout>10</timeout> <concurrency>2</concurrency> <execution>LIFO</execution> </controls> <datasets> <dataset name='a' frequency='${coord:days(7)}' initial-instance='2009-02-01T01:00Z' timezone='UTC'> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> <dataset name='local_a' frequency='${coord:days(7)}' initial-instance='2009-02-01T01:00Z' timezone='UTC'> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> </datasets> <input-events> <data-in name='A' dataset='a'> <instance>${coord:latest(0)}</instance> </data-in>  </input-events> <output-events> <data-out name='LOCAL_A' dataset='local_a'> <instance>${coord:current(-1)}</instance> </data-out> </output-events> <action> <workflow> <app-path>hdfs:///tmp/workflows/</app-path> <configuration> <property> <name>inputA</name> <value>${coord:dataIn('A')}</value> </property> <property> <name>inputB</name> <value>${coord:dataOut('LOCAL_A')}</value> </property></configuration> </workflow>  \" + \"</action> </coordinator-app>\");\n    org.jdom.Element e = org.apache.oozie.util.XmlUtils.parseXml(COORD_APP1);\n    validator.validate(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(COORD_APP1)));\n}",
        "ClassName": "TestSchemaService",
        "Label": 1,
        "MethodName": "testCoordSchema",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.BundleJobBean bundleJob = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowJobBean subwfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJob.getId());\n    org.apache.oozie.WorkflowActionBean subwfAction = addRecordToWfActionTable(subwfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordAction = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.BundleActionBean bundleAction = addRecordToBundleActionTable(bundleJob.getId(), coordJob.getId(), coordJob.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction.getId());\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleJob.getId());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionGetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJob.getId(), coordJob.getAppName());\n    wfJob = jpaService.execute(wfJobGetCmd);\n    wfAction = jpaService.execute(wfActionGetCmd);\n    subwfJob = jpaService.execute(subwfJobGetCmd);\n    subwfAction = jpaService.execute(subwfActionGetCmd);\n    coordJob = jpaService.execute(coordJobGetCmd);\n    coordAction = jpaService.execute(coordActionGetCmd);\n    bundleJob = jpaService.execute(bundleJobGetCmd);\n    bundleAction = jpaService.execute(bundleActionGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, subwfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, subwfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleAction.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(7, 7, org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(bundleJob.getLastModifiedTime()), 10).call();\n    try {\n        jpaService.execute(bundleJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(bundleActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Action should not have been purged\");\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeBundleWithCoordChildWithWFChildWithSubWF1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.String> map = new java.util.HashMap<java.lang.String, java.lang.String>();\n    map.put(\"a\", \"A\");\n    map.put(\"b\", \"&\");\n    java.lang.String str = org.apache.oozie.util.ELConstantsFunctions.toPropertiesStr(map);\n    org.jdom.Element e = org.apache.oozie.util.XmlUtils.parseXml((\"<x>\" + str) + \"</x>\");\n    java.util.Properties map2 = org.apache.oozie.util.PropertiesUtils.stringToProperties(e.getText());\n    junit.framework.Assert.assertEquals(map, map2);\n}",
        "ClassName": "TestELConstantsFunctions",
        "Label": 1,
        "MethodName": "testToPropertiesStr",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertEquals(\"aefefd\", org.apache.oozie.util.ELConstantsFunctions.replaceAll(\"abcbcd\", \"bc\", \"ef\"));\n    junit.framework.Assert.assertEquals(\"d1 d2 d3\", org.apache.oozie.util.ELConstantsFunctions.replaceAll(\"d1,d2,d3\", \",\", \" \"));\n    junit.framework.Assert.assertEquals(\"ayyycd\", org.apache.oozie.util.ELConstantsFunctions.replaceAll(\"abcbcd\", \"bcb\", \"yyy\"));\n    junit.framework.Assert.assertEquals(\"acd\", org.apache.oozie.util.ELConstantsFunctions.replaceAll(\"abcbcd\", \"bcb\", \"\"));\n    junit.framework.Assert.assertEquals(null, org.apache.oozie.util.ELConstantsFunctions.replaceAll(null, \"bcb\", \"yyy\"));\n    junit.framework.Assert.assertEquals(\"abcbcd\", org.apache.oozie.util.ELConstantsFunctions.replaceAll(\"abcbcd\", null, \"XYZ\"));\n    junit.framework.Assert.assertEquals(\"acd\", org.apache.oozie.util.ELConstantsFunctions.replaceAll(\"abcbcd\", \"bcb\", null));\n}",
        "ClassName": "TestELConstantsFunctions",
        "Label": 1,
        "MethodName": "testReplaceAll",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean jobA = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false);\n    org.apache.oozie.BundleActionBean actionA1 = addRecordToBundleActionTable(jobA.getId(), \"actionA1\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean actionA2 = addRecordToBundleActionTable(jobA.getId(), \"actionA2\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleJobBean jobB = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false);\n    org.apache.oozie.BundleActionBean actionB1 = addRecordToBundleActionTable(jobB.getId(), \"actionB1\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean actionB2 = addRecordToBundleActionTable(jobB.getId(), \"actionB2\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleJobBean jobC = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false);\n    org.apache.oozie.BundleActionBean actionC1 = addRecordToBundleActionTable(jobC.getId(), \"actionC1\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean actionC2 = addRecordToBundleActionTable(jobC.getId(), \"actionC2\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    try {\n        setSystemProperty(org.apache.oozie.FaultInjection.FAULT_INJECTION, \"true\");\n        setSystemProperty(org.apache.oozie.command.SkipCommitFaultInjection.ACTION_FAILOVER_FAULT_INJECTION, \"true\");\n        java.util.List<java.lang.String> deleteList = new java.util.ArrayList<java.lang.String>();\n        deleteList.add(jobA.getId());\n        deleteList.add(jobB.getId());\n        deleteList.add(jobC.getId());\n        try {\n            jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobsDeleteJPAExecutor(deleteList));\n            junit.framework.Assert.fail(\"Should have skipped commit for failover testing\");\n        } catch (java.lang.RuntimeException re) {\n            junit.framework.Assert.assertEquals(\"Skipping Commit for Failover Testing\", re.getMessage());\n        }\n    } finally {\n        org.apache.oozie.FaultInjection.deactivate(\"org.apache.oozie.command.SkipCommitFaultInjection\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobA.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Job A should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(actionA1.getBundleId(), actionA1.getCoordName()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action A1 should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(actionA2.getBundleId(), actionA2.getCoordName()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action A2 should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobB.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Job B should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(actionB1.getBundleId(), actionB1.getCoordName()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action B1 should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(actionB2.getBundleId(), actionB2.getCoordName()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action B2 should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobC.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Job C should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(actionC1.getBundleId(), actionC1.getCoordName()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action C1 should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(actionC2.getBundleId(), actionC2.getCoordName()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action C2 should not have been deleted\");\n    }\n}",
        "ClassName": "TestBundleJobsDeleteJPAExecutor",
        "Label": 1,
        "MethodName": "testDeleteBundlesRollback",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.lang.String jobId1 = (\"00001-\" + new java.util.Date().getTime()) + \"-TestCoordJobsGetForPurgeJPAExecutor-C\";\n    insertJob(jobId1, org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    java.lang.String jobId2 = (\"00002-\" + new java.util.Date().getTime()) + \"-TestCoordJobsGetForPurgeJPAExecutor-C\";\n    insertJob(jobId2, org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    java.lang.String jobId3 = (\"00003-\" + new java.util.Date().getTime()) + \"-TestCoordJobsGetForPurgeJPAExecutor-C\";\n    insertJob(jobId3, org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    java.lang.String jobId4 = (\"00004-\" + new java.util.Date().getTime()) + \"-TestCoordJobsGetForPurgeJPAExecutor-C\";\n    insertJob(jobId4, org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    java.lang.String jobId5 = (\"00005-\" + new java.util.Date().getTime()) + \"-TestCoordJobsGetForPurgeJPAExecutor-C\";\n    insertJob(jobId5, org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>();\n    list.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsGetForPurgeJPAExecutor(1, 3)));\n    junit.framework.Assert.assertEquals(3, list.size());\n    list.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsGetForPurgeJPAExecutor(1, 3, 3)));\n    junit.framework.Assert.assertEquals(5, list.size());\n    checkCoordinators(list, jobId1, jobId2, jobId3, jobId4, jobId5);\n}",
        "ClassName": "TestCoordJobsGetForPurgeJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordJobsGetForPurgeJPAExecutorTooMany",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.StringBuffer sb = new java.lang.StringBuffer(\"\");\n    org.apache.oozie.util.TestMemoryLocks.Locker l1 = new org.apache.oozie.util.TestMemoryLocks.ReadLocker(\"a\", 1, -1, sb);\n    org.apache.oozie.util.TestMemoryLocks.Locker l2 = new org.apache.oozie.util.TestMemoryLocks.WriteLocker(\"a\", 2, -1, sb);\n    new java.lang.Thread(l1).start();\n    java.lang.Thread.sleep(500);\n    new java.lang.Thread(l2).start();\n    java.lang.Thread.sleep(500);\n    l1.finish();\n    java.lang.Thread.sleep(500);\n    l2.finish();\n    java.lang.Thread.sleep(500);\n    junit.framework.Assert.assertEquals(\"a:1-L a:1-U a:2-L a:2-U\", sb.toString().trim());\n}",
        "ClassName": "TestMemoryLocks",
        "Label": 1,
        "MethodName": "testReadWriteLock",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String actionXml = (((((((((((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<job-xml>job.xml</job-xml>\") + \"<job-xml>job2.xml</job-xml>\") + \"<configuration>\") + \"<property><name>oozie.launcher.a</name><value>LA</value></property>\") + \"<property><name>a</name><value>AA</value></property>\") + \"<property><name>b</name><value>BB</value></property>\") + \"</configuration>\") + \"<main-class>MAIN-CLASS</main-class>\") + \"<java-opts>JAVA-OPT1 JAVA-OPT2</java-opts>\") + \"<arg>A1</arg>\") + \"<arg>A2</arg>\") + \"<file>f.jar</file>\") + \"<archive>a.tar</archive>\") + \"</java>\";\n    org.apache.oozie.action.hadoop.JavaActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    org.apache.oozie.WorkflowJobBean wfBean = addRecordToWfJobTable(\"test1\", actionXml);\n    org.apache.oozie.WorkflowActionBean action = ((org.apache.oozie.WorkflowActionBean) (wfBean.getActions().get(0)));\n    action.setType(ae.getType());\n    action.setConf(actionXml);\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(wfBean, action);\n    org.jdom.Element actionXmlconf = org.apache.oozie.util.XmlUtils.parseXml(action.getConf());\n    org.apache.hadoop.conf.Configuration actionConf = ae.createBaseHadoopConf(context, actionXmlconf);\n    org.apache.hadoop.conf.Configuration conf = ae.createLauncherConf(getFileSystem(), context, action, actionXmlconf, actionConf);\n    junit.framework.Assert.assertTrue(conf.get(\"mapred.child.java.opts\").contains(\"JAVA-OPT1\"));\n    junit.framework.Assert.assertTrue(conf.get(\"mapred.child.java.opts\").contains(\"JAVA-OPT2\"));\n    actionXml = ((((((((((((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<job-xml>job.xml</job-xml>\") + \"<job-xml>job2.xml</job-xml>\") + \"<configuration>\") + \"<property><name>oozie.launcher.a</name><value>LA</value></property>\") + \"<property><name>a</name><value>AA</value></property>\") + \"<property><name>b</name><value>BB</value></property>\") + \"</configuration>\") + \"<main-class>MAIN-CLASS</main-class>\") + \"<java-opt>JAVA-OPT1</java-opt>\") + \"<java-opt>JAVA-OPT2</java-opt>\") + \"<arg>A1</arg>\") + \"<arg>A2</arg>\") + \"<file>f.jar</file>\") + \"<archive>a.tar</archive>\") + \"</java>\";\n    wfBean = addRecordToWfJobTable(\"test1\", actionXml);\n    action = ((org.apache.oozie.WorkflowActionBean) (wfBean.getActions().get(0)));\n    action.setType(ae.getType());\n    action.setConf(actionXml);\n    context = new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(wfBean, action);\n    actionXmlconf = org.apache.oozie.util.XmlUtils.parseXml(action.getConf());\n    actionConf = ae.createBaseHadoopConf(context, actionXmlconf);\n    conf = ae.createLauncherConf(getFileSystem(), context, action, actionXmlconf, actionConf);\n    junit.framework.Assert.assertTrue(conf.get(\"mapred.child.java.opts\").contains(\"JAVA-OPT1\"));\n    junit.framework.Assert.assertTrue(conf.get(\"mapred.child.java.opts\").contains(\"JAVA-OPT2\"));\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testJavaOpts",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.servlet.MyJsonRestServlet.WILDCARD_RESOURCE, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"GET\", \"/any/any\", \"\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestJsonRestServlet",
        "Label": 1,
        "MethodName": "testInvalidResource",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_STATES_WITHOUT_ERROR, \"false\");\n    services = new org.apache.oozie.service.Services();\n    setClassesToBeExcluded(services.getConf(), excludedServices);\n    services.init();\n    org.apache.oozie.BundleJobBean bundleJob = createBundleJob(org.apache.oozie.client.Job.Status.PAUSED, true);\n    bundleJob.setPauseTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T01:00Z\"));\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.executor.jpa.BundleJobInsertJPAExecutor bundleInsertjpa = new org.apache.oozie.executor.jpa.BundleJobInsertJPAExecutor(bundleJob);\n    jpaService.execute(bundleInsertjpa);\n    final java.lang.String bundleId = bundleJob.getId();\n    addRecordToBundleActionTable(bundleId, \"action1\", 1, org.apache.oozie.client.Job.Status.PAUSED);\n    addRecordToBundleActionTable(bundleId, \"action2\", 1, org.apache.oozie.client.Job.Status.PAUSED);\n    addRecordToBundleActionTable(bundleId, \"action3\", 0, org.apache.oozie.client.Job.Status.FAILED);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean bundle = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n            return bundle.getStatus() == org.apache.oozie.client.Job.Status.PAUSEDWITHERROR;\n        }\n    });\n    bundleJob = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSEDWITHERROR, bundleJob.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testBundleStatusTransitServicePausedWithError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-freq\");\n    java.lang.String expr = \"${coord:days(1)}\";\n    junit.framework.Assert.assertEquals(\"1\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    junit.framework.Assert.assertEquals(org.apache.oozie.coord.TimeUnit.DAY, ((org.apache.oozie.coord.TimeUnit) (eval.getVariable(\"timeunit\"))));\n    expr = \"${coord:days(256)}\";\n    junit.framework.Assert.assertEquals(\"256\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    junit.framework.Assert.assertEquals(org.apache.oozie.coord.TimeUnit.DAY, ((org.apache.oozie.coord.TimeUnit) (eval.getVariable(\"timeunit\"))));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testDay",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorEngine ce = createCoordinatorEngine();\n    java.lang.String jobId = runJobsImpl(ce);\n    ce.streamLog(jobId, \"678, 123-127, 946\", org.apache.oozie.client.rest.RestConstants.JOB_LOG_ACTION, new java.io.StringWriter());\n    org.apache.oozie.TestCoordinatorEngineStreamLog.DummyXLogService service = ((org.apache.oozie.TestCoordinatorEngineStreamLog.DummyXLogService) (services.get(org.apache.oozie.service.XLogService.class)));\n    org.apache.oozie.util.XLogStreamer.Filter filter = service.filter;\n    junit.framework.Assert.assertEquals(jobId, filter.getFilterParams().get(org.apache.oozie.service.DagXLogInfoService.JOB));\n    junit.framework.Assert.assertEquals((((((((((((((\"(\" + jobId) + \"@678|\") + jobId) + \"@123|\") + jobId) + \"@124|\") + jobId) + \"@125|\") + jobId) + \"@126|\") + jobId) + \"@127|\") + jobId) + \"@946)\", filter.getFilterParams().get(org.apache.oozie.service.DagXLogInfoService.ACTION));\n}",
        "ClassName": "TestCoordinatorEngineStreamLog",
        "Label": 1,
        "MethodName": "testStreamLog4JobLogAction",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowActionBean action = new org.apache.oozie.WorkflowActionBean();\n    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();\n    java.io.DataOutputStream dos = new java.io.DataOutputStream(baos);\n    action.write(dos);\n    dos.close();\n    java.io.DataInputStream dis = new java.io.DataInputStream(new java.io.ByteArrayInputStream(baos.toByteArray()));\n    action = new org.apache.oozie.WorkflowActionBean();\n    action.readFields(dis);\n}",
        "ClassName": "TestActionBean",
        "Label": 1,
        "MethodName": "testEmptyWriteRead",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.sql.Connection conn = org.apache.oozie.util.db.TestSchema.getDirectConnection();\n    org.apache.oozie.util.db.TestSchema.prepareDB(conn);\n    java.sql.ResultSet rs = conn.prepareStatement(\"SELECT COUNT(*) FROM \" + org.apache.oozie.util.db.TestSchema.TestTable.TEST_TABLE).executeQuery();\n    rs.next();\n    junit.framework.Assert.assertEquals(0, rs.getInt(1));\n    rs.close();\n    conn.prepareStatement(((((((\"INSERT INTO \" + org.apache.oozie.util.db.TestSchema.TestTable.TEST_TABLE) + \"(\") + org.apache.oozie.util.db.TestSchema.TestColumns.TEST_LONG) + \", \") + org.apache.oozie.util.db.TestSchema.TestColumns.TEST_STRING) + \")\") + \" VALUES(1, 'abcd')\").executeUpdate();\n    rs = conn.prepareStatement(\"SELECT COUNT(*) FROM \" + org.apache.oozie.util.db.TestSchema.TestTable.TEST_TABLE).executeQuery();\n    rs.next();\n    junit.framework.Assert.assertEquals(1, rs.getInt(1));\n    rs.close();\n    boolean pkeyTest = false;\n    try {\n        conn.prepareStatement(((((((\"INSERT INTO \" + org.apache.oozie.util.db.TestSchema.TestTable.TEST_TABLE) + \"(\") + org.apache.oozie.util.db.TestSchema.TestColumns.TEST_LONG) + \", \") + org.apache.oozie.util.db.TestSchema.TestColumns.TEST_STRING) + \")\") + \" VALUES(1, 'abcd')\").executeUpdate();\n    } catch (java.sql.SQLException e) {\n        pkeyTest = true;\n    }\n    junit.framework.Assert.assertEquals(true, pkeyTest);\n    java.lang.String indexStmt = org.apache.oozie.util.db.Schema.generateCreateIndexScript(org.apache.oozie.util.db.TestSchema.TestIndex.TEST_INDEX, org.apache.oozie.util.db.Schema.DBType.HSQL);\n    conn.prepareStatement(indexStmt).execute();\n    conn.prepareStatement(\"DROP TABLE \" + org.apache.oozie.util.db.TestSchema.TestTable.TEST_TABLE).execute();\n    org.apache.oozie.util.db.TestSchema.dropSchema(conn);\n    conn.close();\n}",
        "ClassName": "TestSchema",
        "Label": 1,
        "MethodName": "testGenerateCreateScript",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-TestCoordActionInputCheckXCommand-C\";\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T23:59\" + TZ);\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-02T23:59\" + TZ);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(jobId, startTime, endTime);\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    createDir(getTestCaseDir() + \"/2009/01/29/\");\n    createDir(getTestCaseDir() + \"/2009/01/15/\");\n    new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(job.getId() + \"@1\", job.getId()).call();\n    checkCoordAction(job.getId() + \"@1\");\n}",
        "ClassName": "TestCoordActionInputCheckXCommand",
        "Label": 1,
        "MethodName": "testActionInputCheck",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    conf.set(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, org.apache.hadoop.util.StringUtils.join(\",\", java.util.Arrays.asList(org.apache.oozie.service.GroupsService.class.getName(), org.apache.oozie.service.ProxyUserService.class.getName())));\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.groups\", \"*\");\n    try {\n        services.init();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.service.ServiceException ex) {\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestProxyUserService",
        "Label": 1,
        "MethodName": "testWrongConfigHosts",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String request = \"bundle=BUNDLE-ABC;actionstatus=FAILED\";\n    org.apache.oozie.executor.jpa.BulkJPAExecutor bulkjpa = new org.apache.oozie.executor.jpa.BulkJPAExecutor(org.apache.oozie.BundleEngine.parseBulkFilter(request), 1, 10);\n    try {\n        jpaService.execute(bulkjpa);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException jex) {\n        junit.framework.Assert.assertTrue(jex.getMessage().contains(\"No bundle entries found\"));\n    }\n}",
        "ClassName": "TestBulkMonitorJPAExecutor",
        "Label": 1,
        "MethodName": "testJavaNoRecords",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"rerun-wf.xml\", -1);\n    java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    org.apache.hadoop.fs.Path path = getFsTestCaseDir();\n    getFileSystem().create(new org.apache.hadoop.fs.Path(path, \"p2\"));\n    final org.apache.oozie.client.OozieClient wfClient = org.apache.oozie.local.LocalOozie.getClient();\n    java.util.Properties conf = wfClient.createConfiguration();\n    conf.setProperty(org.apache.oozie.client.OozieClient.APP_PATH, ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\");\n    conf.setProperty(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.setProperty(\"nnbase\", path.toString());\n    conf.setProperty(\"base\", path.toUri().getPath());\n    final java.lang.String jobId1 = wfClient.submit(conf);\n    wfClient.start(jobId1);\n    waitFor(15 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return wfClient.getJobInfo(jobId1).getStatus() == org.apache.oozie.client.WorkflowJob.Status.KILLED;\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.KILLED, wfClient.getJobInfo(jobId1).getStatus());\n    getFileSystem().delete(new org.apache.hadoop.fs.Path(path, \"p2\"), true);\n    conf.setProperty(org.apache.oozie.client.OozieClient.RERUN_FAIL_NODES, \"true\");\n    wfClient.reRun(jobId1, conf);\n    waitFor(15 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return wfClient.getJobInfo(jobId1).getStatus() == org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED;\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfClient.getJobInfo(jobId1).getStatus());\n}",
        "ClassName": "TestReRunXCommand",
        "Label": 1,
        "MethodName": "testRerunFromFailNodes",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration(false);\n    conf.set(\"hello\", \"planet\");\n    java.lang.String str = \"<root xmlns=\\\"uri:oozie:workflow:0.4\\\"><parameters>\" + (\"<property><name>hello</name></property>\" + \"</parameters></root>\");\n    org.apache.oozie.util.ParameterVerifier.verifyParameters(conf, org.apache.oozie.util.XmlUtils.parseXml(str));\n    junit.framework.Assert.assertEquals(1, conf.size());\n    junit.framework.Assert.assertEquals(\"planet\", conf.get(\"hello\"));\n    str = \"<root xmlns=\\\"uri:oozie:workflow:0.4\\\"><parameters>\" + (\"<property><name>hello</name><value>world</value></property>\" + \"</parameters></root>\");\n    org.apache.oozie.util.ParameterVerifier.verifyParameters(conf, org.apache.oozie.util.XmlUtils.parseXml(str));\n    junit.framework.Assert.assertEquals(1, conf.size());\n    junit.framework.Assert.assertEquals(\"planet\", conf.get(\"hello\"));\n}",
        "ClassName": "TestParameterVerifier",
        "Label": 1,
        "MethodName": "testVerifyParametersDefined",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    fs.mkdirs(new org.apache.hadoop.fs.Path(appPath, \"lib\"));\n    java.io.File jarFile = org.apache.oozie.util.IOUtils.createJar(new java.io.File(getTestCaseDir()), \"test.jar\", org.apache.oozie.action.hadoop.MapperReducerForTest.class);\n    java.io.InputStream is = new java.io.FileInputStream(jarFile);\n    java.io.OutputStream os = fs.create(new org.apache.hadoop.fs.Path(appPath, \"lib/test.jar\"));\n    org.apache.oozie.util.IOUtils.copyStream(is, os);\n    org.apache.hadoop.fs.Path input = new org.apache.hadoop.fs.Path(appPath, \"input\");\n    org.apache.hadoop.fs.Path output = new org.apache.hadoop.fs.Path(appPath, \"output\");\n    fs.mkdirs(input);\n    java.io.Writer writer = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(input, \"test.txt\")));\n    writer.write(\"hello\");\n    writer.close();\n    final java.lang.String APP1 = \"<workflow-app xmlns='uri:oozie:workflow:0.1' name='app'>\" + ((\"<start to='end'/>\" + \"<end name='end'/>\") + \"</workflow-app>\");\n    java.lang.String subWorkflowAppPath = new org.apache.hadoop.fs.Path(appPath, \"subwf\").toString();\n    fs.mkdirs(new org.apache.hadoop.fs.Path(appPath, \"subwf\"));\n    java.io.Writer writer2 = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(subWorkflowAppPath, \"workflow.xml\")));\n    writer2.write(APP1);\n    writer2.close();\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"recovery-wf.xml\", -1);\n    java.io.Writer writer1 = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(appPath + \"/workflow.xml\")));\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer1);\n    final org.apache.oozie.client.OozieClient wfClient = org.apache.oozie.local.LocalOozie.getClient();\n    java.util.Properties conf = wfClient.createConfiguration();\n    conf.setProperty(org.apache.oozie.client.OozieClient.APP_PATH, (appPath.toString() + java.io.File.separator) + \"workflow.xml\");\n    conf.setProperty(\"jobTracker\", getJobTrackerUri());\n    conf.setProperty(\"nameNode\", getNameNodeUri());\n    conf.setProperty(\"mrclass\", org.apache.oozie.action.hadoop.MapperReducerForTest.class.getName());\n    conf.setProperty(\"input\", input.toString());\n    conf.setProperty(\"output\", output.toString());\n    conf.setProperty(\"delPath\", output.toString());\n    conf.setProperty(\"subWfApp\", appPath.toString() + \"/subwf/workflow.xml\");\n    final java.lang.String jobId1 = wfClient.submit(conf);\n    wfClient.start(jobId1);\n    waitFor(120 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return wfClient.getJobInfo(jobId1).getStatus() == org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED;\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfClient.getJobInfo(jobId1).getStatus());\n    java.util.Map<java.lang.String, java.lang.String> extId0 = loadExtIds(wfClient.getJobInfo(jobId1).getActions());\n    conf.setProperty(org.apache.oozie.client.OozieClient.RERUN_SKIP_NODES, \"\");\n    wfClient.reRun(jobId1, conf);\n    waitFor(120 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return wfClient.getJobInfo(jobId1).getStatus() == org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED;\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfClient.getJobInfo(jobId1).getStatus());\n    java.util.Map<java.lang.String, java.lang.String> extId1 = loadExtIds(wfClient.getJobInfo(jobId1).getActions());\n    junit.framework.Assert.assertNotSame(extId0, extId1);\n}",
        "ClassName": "TestRerun",
        "Label": 1,
        "MethodName": "testRerun",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/admin/*\", org.apache.oozie.servlet.V1AdminServlet.class, org.apache.oozie.servlet.TestV1AdminServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.net.URL url = createURL(org.apache.oozie.client.rest.RestConstants.ADMIN_QUEUE_DUMP_RESOURCE, java.util.Collections.EMPTY_MAP);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertTrue(json.containsKey(org.apache.oozie.client.rest.JsonTags.QUEUE_DUMP));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1AdminServlet",
        "Label": 1,
        "MethodName": "testV1QueueDump",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.IOUtils.getResourceAsReader(\"test-ioutils.txt\", 10);\n}",
        "ClassName": "TestIOUtils",
        "Label": 1,
        "MethodName": "testGetResourceAsReader",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testBundleEnginePutImpl(org.apache.oozie.client.rest.RestConstants.JOB_BUNDLE_ACTION_RERUN);\n}",
        "ClassName": "TestV1JobServletBundleEngine",
        "Label": 1,
        "MethodName": "testBundleEngineReRun",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    java.lang.String errorCode = \"000\";\n    java.lang.String errorMessage = \"Dummy\";\n    java.lang.String resourceXmlName = \"coord-action-get.xml\";\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = createCoordAction(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.WAITING, resourceXmlName, 0);\n    action.setSlaXml(org.apache.oozie.test.XDataTestCase.slaXml);\n    action.setErrorCode(errorCode);\n    action.setErrorMessage(errorMessage);\n    insertRecordCoordAction(action);\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"coord\");\n    java.lang.String actionXml = getCoordActionXml(appPath, resourceXmlName);\n    org.apache.hadoop.conf.Configuration conf = getCoordConf(appPath);\n    _testGetForStartX(action.getId(), job.getId(), org.apache.oozie.client.CoordinatorAction.Status.WAITING, 0, action.getId() + \"_E\", org.apache.oozie.test.XDataTestCase.slaXml, resourceXmlName, org.apache.oozie.util.XmlUtils.prettyPrint(conf).toString(), actionXml, errorCode, errorMessage);\n}",
        "ClassName": "TestCoordActionGetForStartJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    job.setKickoffTime(new java.util.Date(new java.util.Date().getTime() - (30 * 1000)));\n    jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobUpdateJPAExecutor(job));\n    java.lang.Runnable pauseStartRunnable = new org.apache.oozie.service.PauseTransitService.PauseTransitRunnable();\n    pauseStartRunnable.run();\n    final java.lang.String jobId = job.getId();\n    waitFor(10 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean job1 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n            return job1.getStatus() == org.apache.oozie.client.Job.Status.RUNNING;\n        }\n    });\n    job = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, job.getStatus());\n}",
        "ClassName": "TestPauseTransitService",
        "Label": 1,
        "MethodName": "testStart2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"name\", \"def\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"one\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"f\", \"end\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\", \"three\" }))).addNode(new org.apache.oozie.workflow.lite.DecisionNodeDef(\"two\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestDecisionNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"four\", \"k\", \"four\" }))).addNode(new org.apache.oozie.workflow.lite.DecisionNodeDef(\"three\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestDecisionNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"k\", \"five\", \"k\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"four\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"five\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.KillNodeDef(\"k\", \"kill\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class)).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    try {\n        invokeForkJoin(parser, def);\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Unexpected Exception\");\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testDecisionsToKillForkJoin",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.KILLED, false, false);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.KILLED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetExecutor = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetExecutor = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action.getId());\n    job = jpaService.execute(coordJobGetExecutor);\n    action = jpaService.execute(coordActionGetExecutor);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.KILLED);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.KILLED);\n    new org.apache.oozie.command.PurgeXCommand(1, 7, 1, 10).call();\n    try {\n        jpaService.execute(coordJobGetExecutor);\n        junit.framework.Assert.fail(\"Coordinator Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordActionGetExecutor);\n        junit.framework.Assert.fail(\"Coordinator Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testKillCoordPurgeXCommand",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.test.EmbeddedServletContainer container = new org.apache.oozie.test.EmbeddedServletContainer(\"blah\");\n    container.addServletEndpoint(\"/ping/*\", org.apache.oozie.test.PingServlet.class);\n    container.addFilter(\"/ping/*\", org.apache.oozie.test.PingServlet.class);\n    try {\n        org.apache.oozie.test.PingServlet.FILTER_INIT = false;\n        org.apache.oozie.test.PingServlet.DO_FILTER = false;\n        container.start();\n        java.net.URL url = new java.net.URL(container.getServletURL(\"/ping/*\") + \"bla\");\n        java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n        conn.connect();\n        junit.framework.Assert.assertEquals(java.net.HttpURLConnection.HTTP_OK, conn.getResponseCode());\n        java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(conn.getInputStream()));\n        junit.framework.Assert.assertEquals(\"ping\", reader.readLine());\n        junit.framework.Assert.assertEquals(null, reader.readLine());\n        junit.framework.Assert.assertTrue(org.apache.oozie.test.PingServlet.FILTER_INIT);\n        junit.framework.Assert.assertTrue(org.apache.oozie.test.PingServlet.DO_FILTER);\n    } finally {\n        container.stop();\n    }\n}",
        "ClassName": "TestEmbeddedServletContainer",
        "Label": 1,
        "MethodName": "testEmbeddedServletContainer",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\")).close();\n            java.lang.String oozieUrl = getContextURL();\n            int wfCount = org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT;\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-run\", \"-oozie\", oozieUrl, \"-config\", createConfigFile(appPath.toString()), \"-debug\" };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(\"submit\", org.apache.oozie.servlet.MockDagEngineService.did);\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testRunWithDebug",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    this.addRecordToBundleActionTable(job.getId(), \"action1\", 0, org.apache.oozie.client.Job.Status.RUNNING);\n    this.addRecordToBundleActionTable(job.getId(), \"action2\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, job.getStatus());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionGetExecutor1 = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(job.getId(), \"action1\");\n    org.apache.oozie.BundleActionBean action1 = jpaService.execute(bundleActionGetExecutor1);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, action1.getStatus());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionGetExecutor2 = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(job.getId(), \"action2\");\n    org.apache.oozie.BundleActionBean action2 = jpaService.execute(bundleActionGetExecutor2);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, action2.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(1, 1, 7, 10).call();\n    try {\n        jpaService.execute(bundleJobGetExecutor);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(bundleActionGetExecutor1);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(bundleActionGetExecutor2);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action should not have been purged\");\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testBundlePurgeXCommandFailed",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T01:00Z\");\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-02T23:59Z\");\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUSPENDED, start, end, false, false, 1);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    final java.lang.String wfJobId = wfJob.getId();\n    addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUSPENDED, \"coord-action-get.xml\", wfJobId, \"RUNNING\", 1);\n    sleep(3000);\n    java.lang.Runnable recoveryRunnable = new org.apache.oozie.service.RecoveryService.RecoveryRunnable(0, 1, 1);\n    recoveryRunnable.run();\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    waitFor(10000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJobId);\n            org.apache.oozie.WorkflowJobBean ret = jpaService.execute(wfGetCmd);\n            return ret.getStatus() == org.apache.oozie.client.WorkflowJob.Status.SUSPENDED;\n        }\n    });\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJobId);\n    org.apache.oozie.WorkflowJobBean ret = jpaService.execute(wfGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, ret.getStatus());\n}",
        "ClassName": "TestRecoveryService",
        "Label": 1,
        "MethodName": "testCoordActionRecoveryServiceForSuspended",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleEngine be = new org.apache.oozie.BundleEngine();\n    try {\n        org.apache.oozie.client.WorkflowJob wj = be.getJob(\"foo\");\n        junit.framework.Assert.fail(\"Expected BundleEngineException was not thrown.\");\n    } catch (org.apache.oozie.BundleEngineException bee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0301, bee.getErrorCode());\n    }\n}",
        "ClassName": "TestBundleEngineSimple",
        "Label": 1,
        "MethodName": "testGetJob1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.KILLED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    this.addRecordToBundleActionTable(job.getId(), \"action1\", 0, org.apache.oozie.client.Job.Status.KILLED);\n    this.addRecordToBundleActionTable(job.getId(), \"action2\", 0, org.apache.oozie.client.Job.Status.KILLED);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, job.getStatus());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionGetExecutor1 = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(job.getId(), \"action1\");\n    org.apache.oozie.BundleActionBean action1 = jpaService.execute(bundleActionGetExecutor1);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, action1.getStatus());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionGetExecutor2 = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(job.getId(), \"action2\");\n    org.apache.oozie.BundleActionBean action2 = jpaService.execute(bundleActionGetExecutor2);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, action2.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(1, 1, 7, 10).call();\n    try {\n        jpaService.execute(bundleJobGetExecutor);\n        junit.framework.Assert.fail(\"Bundle Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(bundleActionGetExecutor1);\n        junit.framework.Assert.fail(\"Bundle Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(bundleActionGetExecutor2);\n        junit.framework.Assert.fail(\"Bundle Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testKillBundlePurgeXCommand",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.ParamChecker.notEmptyElements(new java.util.ArrayList<java.lang.String>(), \"name\");\n    org.apache.oozie.util.ParamChecker.notEmptyElements(java.util.Arrays.asList(\"a\"), \"name\");\n    try {\n        org.apache.oozie.util.ParamChecker.notEmptyElements(null, \"name\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n    }\n    try {\n        org.apache.oozie.util.ParamChecker.notEmptyElements(java.util.Arrays.asList(\"a\", null), \"name\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n    }\n}",
        "ClassName": "TestParamChecker",
        "Label": 1,
        "MethodName": "testNotNullElements",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    conf.set(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, org.apache.hadoop.util.StringUtils.join(\",\", java.util.Arrays.asList(org.apache.oozie.service.GroupsService.class.getName())));\n    conf.set(\"oozie.service.GroupsService.hadoop.security.group.mapping\", java.lang.String.class.getName());\n    try {\n        services.init();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.service.ServiceException ex) {\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail(ex.toString());\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestGroupsService",
        "Label": 1,
        "MethodName": "testInvalidGroupsMapping",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.XLogStreamer.Filter.reset();\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"USER\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"GROUP\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"TOKEN\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"APP\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"JOB\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"ACTION\");\n    org.apache.oozie.util.XLogStreamer.Filter xf = new org.apache.oozie.util.XLogStreamer.Filter();\n    xf.setParameter(\"USER\", \"oozie\");\n    xf.setLogLevel(\"DEBUG|INFO\");\n    java.io.File log4jFile = new java.io.File(getTestCaseConfDir(), \"test-log4j.properties\");\n    java.lang.ClassLoader cl = java.lang.Thread.currentThread().getContextClassLoader();\n    java.io.InputStream is = cl.getResourceAsStream(\"test-no-dash-log4j.properties\");\n    org.apache.oozie.util.IOUtils.copyStream(is, new java.io.FileOutputStream(log4jFile));\n    setSystemProperty(org.apache.oozie.service.XLogService.LOG4J_FILE, \"test-log4j.properties\");\n    final org.apache.oozie.service.XLogService ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertFalse(doStreamDisabledCheck(ls));\n    org.apache.commons.logging.LogFactory.getLog(\"a\").info(\"2009-06-24 02:43:14,505 INFO _L1_:317 - USER[oozie] GROUP[oozie] TOKEN[-] APP[-] JOB[-] \" + \"ACTION[-] Released Lock\");\n    org.apache.commons.logging.LogFactory.getLog(\"a\").info(\"2009-06-24 02:43:14,505 INFO _L2_:317 - USER[blah] GROUP[oozie] TOKEN[-] APP[-] JOB[-] \" + \"ACTION[-] Released Lock\");\n    org.apache.commons.logging.LogFactory.getLog(\"a\").info(\"2009-06-24 02:43:14,505 INFO _L3_:317 USER[oozie] GROUP[oozie] TOKEN[-] APP[-] JOB[-] \" + \"ACTION[-] Released Lock\");\n    org.apache.commons.logging.LogFactory.getLog(\"a\").info(\"2009-06-24 02:43:14,505 INFO _L4_:317 USER[blah] GROUP[oozie] TOKEN[-] APP[-] JOB[-] \" + \"ACTION[-] Released Lock\");\n    java.lang.String out = doStreamLog(ls, xf);\n    java.lang.String[] outArr = out.split(\"\\n\");\n    junit.framework.Assert.assertEquals(2, outArr.length);\n    junit.framework.Assert.assertTrue(outArr[0].contains(\"_L1_\"));\n    junit.framework.Assert.assertFalse(out.contains(\"_L2_\"));\n    junit.framework.Assert.assertTrue(outArr[1].contains(\"_L3_\"));\n    junit.framework.Assert.assertFalse(out.contains(\"_L4_\"));\n    ls.destroy();\n}",
        "ClassName": "TestXLogService",
        "Label": 1,
        "MethodName": "testNoDashInConversionPattern",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, true, true);\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action1 = createWorkflowAction(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action2 = createWorkflowAction(job.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    job.setStatus(org.apache.oozie.client.WorkflowJob.Status.RUNNING);\n    coordJob.setStatus(org.apache.oozie.client.Job.Status.SUCCEEDED);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> insertList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    insertList.add(action1);\n    insertList.add(action2);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> updateList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    updateList.add(coordJob);\n    updateList.add(job);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BulkUpdateInsertJPAExecutor bulkUpdateCmd = new org.apache.oozie.executor.jpa.BulkUpdateInsertJPAExecutor(updateList, insertList);\n    jpaService.execute(bulkUpdateCmd);\n    coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId()));\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", coordJob.getStatusStr());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId());\n    org.apache.oozie.WorkflowJobBean wfBean = jpaService.execute(wfGetCmd);\n    junit.framework.Assert.assertEquals(\"RUNNING\", wfBean.getStatusStr());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action1.getId());\n    action1 = jpaService.execute(actionGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", action1.getStatusStr());\n    actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action2.getId());\n    action2 = jpaService.execute(actionGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", action2.getStatusStr());\n}",
        "ClassName": "TestBulkUpdateInsertJPAExecutor",
        "Label": 1,
        "MethodName": "testBulkInsertUpdates",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.CoordinatorJobBean bean = new org.apache.oozie.CoordinatorJobBean();\n    set(bean);\n    _testGet(bean, true);\n}",
        "ClassName": "TestCoordinatorJobBean",
        "Label": 1,
        "MethodName": "testSetGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        java.lang.String actionId1 = \"1234465451\";\n        java.lang.String actionId2 = \"1234465452\";\n        java.lang.String actionId3 = \"1234465453\";\n        java.lang.String actionId4 = \"1234465454\";\n        org.apache.oozie.util.HCatURI dep1 = new org.apache.oozie.util.HCatURI(\"hcat://hcat.server.com:5080/mydb/mytbl/dt=20120101;country=us\");\n        org.apache.oozie.util.HCatURI dep2 = new org.apache.oozie.util.HCatURI(\"hcat://hcat.server.com:5080/mydb/mytbl/country=us;dt=20120101\");\n        org.apache.oozie.util.HCatURI dep3 = new org.apache.oozie.util.HCatURI(\"hcat://hcat.server.com:5080/mydb/mytbl/dt=20120102;country=us\");\n        org.apache.oozie.util.HCatURI dep4 = new org.apache.oozie.util.HCatURI(\"hcat://hcat.server.com:5080/mydb/mytbl/dt=20120102;country=us;state=CA\");\n        org.apache.oozie.service.PartitionDependencyManagerService pdms = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.PartitionDependencyManagerService.class);\n        pdms.addMissingDependency(dep1, actionId1);\n        pdms.addMissingDependency(dep2, actionId2);\n        pdms.addMissingDependency(dep3, actionId3);\n        pdms.addMissingDependency(dep4, actionId4);\n        junit.framework.Assert.assertTrue(pdms.getWaitingActions(dep1).contains(actionId1));\n        junit.framework.Assert.assertTrue(pdms.getWaitingActions(dep2).contains(actionId2));\n        junit.framework.Assert.assertTrue(pdms.getWaitingActions(dep3).contains(actionId3));\n        junit.framework.Assert.assertTrue(pdms.getWaitingActions(dep4).contains(actionId4));\n        java.util.List<java.util.Map<java.lang.String, java.lang.String>> partitionsList = new java.util.ArrayList<java.util.Map<java.lang.String, java.lang.String>>();\n        partitionsList.add(getPartitionMap(\"dt=20120101;country=us;state=CA\"));\n        partitionsList.add(getPartitionMap(\"dt=20120101;country=us;state=NY\"));\n        org.apache.hcatalog.messaging.json.JSONAddPartitionMessage jsonMsg = new org.apache.hcatalog.messaging.json.JSONAddPartitionMessage(\"thrift://\" + dep1.getServer(), \"\", dep1.getDb(), dep1.getTable(), partitionsList, java.lang.System.currentTimeMillis());\n        javax.jms.Message msg = session.createTextMessage(jsonMsg.toString());\n        msg.setStringProperty(HCatConstants.HCAT_EVENT, HCatEventMessage.EventType.ADD_PARTITION.toString());\n        org.apache.oozie.dependency.hcat.HCatMessageHandler hcatHandler = new org.apache.oozie.dependency.hcat.HCatMessageHandler(\"hcat.server.com:5080\");\n        hcatHandler.process(msg);\n        junit.framework.Assert.assertNull(pdms.getWaitingActions(dep1));\n        junit.framework.Assert.assertNull(pdms.getWaitingActions(dep2));\n        junit.framework.Assert.assertTrue(pdms.getWaitingActions(dep3).contains(actionId3));\n        junit.framework.Assert.assertTrue(pdms.getWaitingActions(dep4).contains(actionId4));\n        partitionsList.clear();\n        partitionsList.add(getPartitionMap(\"dt=20120102;country=us;state=CA\"));\n        partitionsList.add(getPartitionMap(\"dt=20120102;country=us;state=NY\"));\n        jsonMsg = new org.apache.hcatalog.messaging.json.JSONAddPartitionMessage(\"thrift://\" + dep1.getServer(), \"\", dep1.getDb(), dep1.getTable(), partitionsList, java.lang.System.currentTimeMillis());\n        msg = session.createTextMessage(jsonMsg.toString());\n        msg.setStringProperty(HCatConstants.HCAT_EVENT, HCatEventMessage.EventType.ADD_PARTITION.toString());\n        org.apache.oozie.service.HCatAccessorService hcatService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HCatAccessorService.class);\n        hcatService.registerForNotification(dep1, \"hcat.topic1\", hcatHandler);\n        javax.jms.Topic topic = session.createTopic(\"hcat.topic1\");\n        javax.jms.MessageProducer producer = session.createProducer(topic);\n        producer.send(msg);\n        java.lang.Thread.sleep(500);\n        junit.framework.Assert.assertNull(pdms.getWaitingActions(dep3));\n        junit.framework.Assert.assertNull(pdms.getWaitingActions(dep4));\n        junit.framework.Assert.assertTrue(pdms.getAvailableDependencyURIs(actionId1).contains(dep1.getURI().toString()));\n        junit.framework.Assert.assertTrue(pdms.getAvailableDependencyURIs(actionId2).contains(dep2.getURI().toString()));\n        junit.framework.Assert.assertTrue(pdms.getAvailableDependencyURIs(actionId3).contains(dep3.getURI().toString()));\n        junit.framework.Assert.assertTrue(pdms.getAvailableDependencyURIs(actionId4).contains(dep4.getURI().toString()));\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Exception: \" + e.getMessage());\n    }\n}",
        "ClassName": "TestHCatMessageHandler",
        "Label": 1,
        "MethodName": "testCacheUpdateByMessage",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_STATES_WITHOUT_ERROR, \"false\");\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.DONEWITHERROR, false);\n    this.addRecordToBundleActionTable(job.getId(), \"action1\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    this.addRecordToBundleActionTable(job.getId(), \"action2\", 0, org.apache.oozie.client.Job.Status.FAILED);\n    addRecordToCoordJobTable(\"action1\", org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    addRecordToCoordJobTable(\"action2\", org.apache.oozie.client.Job.Status.FAILED, false, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.DONEWITHERROR, job.getStatus());\n    new org.apache.oozie.command.bundle.BundleRerunXCommand(job.getId(), null, \"2009-02-01T00:00Z\", false, true).call();\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNINGWITHERROR, job.getStatus());\n}",
        "ClassName": "TestBundleRerunXCommand",
        "Label": 1,
        "MethodName": "testBundleRerunWithError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.servlet.MyJsonRestServlet.PARAM_TYPES, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"\", \"boolean=true\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"\", \"boolean=false\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"GET\", \"\", \"boolean=x\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"\", \"integer=1\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"GET\", \"\", \"integer=x\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"\", \"string=a\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestJsonRestServlet",
        "Label": 1,
        "MethodName": "testParamTypes",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.JavaActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    org.apache.hadoop.fs.Path jar = new org.apache.hadoop.fs.Path(ae.getOozieRuntimeDir(), ae.getLauncherJarName());\n    junit.framework.Assert.assertTrue(new java.io.File(jar.toString()).exists());\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testLauncherJar",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setSystemProperty(\"oozie.authentication.simple.anonymous.allowed\", \"true\");\n    runTest(new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"admin\", \"-status\", \"-oozie\", oozieUrl };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestAuthFilterAuthOozieClient",
        "Label": 1,
        "MethodName": "testClientWithAnonymous",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertNotNull(getFsTestCaseDir());\n    junit.framework.Assert.assertNotNull(getFileSystem());\n    java.lang.String testDir = getTestCaseDir();\n    java.lang.String nameNode = getNameNodeUri();\n    java.lang.String user = org.apache.oozie.test.XTestCase.getTestUser();\n    org.apache.hadoop.fs.Path fsTestDir = getFsTestCaseDir();\n    junit.framework.Assert.assertTrue(fsTestDir.toString().startsWith(nameNode));\n    junit.framework.Assert.assertTrue(fsTestDir.toString().contains(user + testDir));\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    junit.framework.Assert.assertTrue(fs.getUri().toString().startsWith(getNameNodeUri()));\n    junit.framework.Assert.assertTrue(fs.exists(fsTestDir));\n    junit.framework.Assert.assertTrue(fs.listStatus(fsTestDir).length == 0);\n}",
        "ClassName": "TestXFsTestCase",
        "Label": 1,
        "MethodName": "testFsDir",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable = new org.apache.oozie.service.TestCallableQueueService.MyCallable();\n    queueservice.queue(callable);\n    waitFor(1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return callable.executed != 0;\n        }\n    });\n    junit.framework.Assert.assertTrue(callable.executed != 0);\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testQueuing",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-data\");\n    java.lang.String expr = \"${coord:dataInPartitionMin('ABC', 'mypartition')}\";\n    eval.setVariable(\"oozie.dataname.ABC\", \"data-in\");\n    junit.framework.Assert.assertEquals(\"${coord:dataInPartitionMin('ABC', 'mypartition')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:dataInPartitionMin('ABCD')}\";\n    eval.setVariable(\"oozie.dataname.ABCD\", \"data-in\");\n    try {\n        junit.framework.Assert.assertEquals(\"${coord:dataInPartitionMin('ABCD')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n        junit.framework.Assert.fail(\"should throw exception because EL function requires 2 parameters\");\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestHCatELFunctions",
        "Label": 1,
        "MethodName": "testDataInPartitionMinPh1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    junit.framework.Assert.assertEquals(new org.apache.hadoop.fs.Path(\"hdfs://x/bla\"), ae.resolveToFullPath(null, new org.apache.hadoop.fs.Path(\"hdfs://x/bla\"), true));\n    junit.framework.Assert.assertEquals(new org.apache.hadoop.fs.Path(\"bla\"), ae.resolveToFullPath(null, new org.apache.hadoop.fs.Path(\"bla\"), false));\n    junit.framework.Assert.assertEquals(new org.apache.hadoop.fs.Path(\"hdfs://x/bla\"), ae.resolveToFullPath(new org.apache.hadoop.fs.Path(\"hdfs://x\"), new org.apache.hadoop.fs.Path(\"/bla\"), true));\n    junit.framework.Assert.assertEquals(new org.apache.hadoop.fs.Path(\"hdfs://x/bla\"), ae.resolveToFullPath(new org.apache.hadoop.fs.Path(\"hdfs://x/ha\"), new org.apache.hadoop.fs.Path(\"/bla\"), true));\n    junit.framework.Assert.assertEquals(new org.apache.hadoop.fs.Path(\"hdfs://x/bla\"), ae.resolveToFullPath(new org.apache.hadoop.fs.Path(\"hdfs://z\"), new org.apache.hadoop.fs.Path(\"hdfs://x/bla\"), true));\n    junit.framework.Assert.assertEquals(new org.apache.hadoop.fs.Path(\"hdfs://x/bla\"), ae.resolveToFullPath(new org.apache.hadoop.fs.Path(\"hdfs://x\"), new org.apache.hadoop.fs.Path(\"hdfs://x/bla\"), true));\n    try {\n        ae.resolveToFullPath(null, new org.apache.hadoop.fs.Path(\"hdfs://x/bla\"), false);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(\"FS002\", ex.getErrorCode());\n    }\n    try {\n        ae.resolveToFullPath(null, new org.apache.hadoop.fs.Path(\"bla\"), true);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(\"FS001\", ex.getErrorCode());\n    }\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.HadoopAccessorService.SUPPORTED_FILESYSTEMS, null);\n    new org.apache.oozie.service.Services().init();\n    try {\n        ae.resolveToFullPath(null, new org.apache.hadoop.fs.Path(\"file://bla\"), true);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertTrue(ex.getMessage().contains(\"E0904\"));\n    }\n    try {\n        ae.resolveToFullPath(new org.apache.hadoop.fs.Path(\"hdfs://z\"), new org.apache.hadoop.fs.Path(\"hdfs://x/bla\"), false);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(\"FS002\", ex.getErrorCode());\n    }\n    try {\n        ae.resolveToFullPath(new org.apache.hadoop.fs.Path(\"hdfs://z\"), new org.apache.hadoop.fs.Path(\"bla\"), true);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(\"FS011\", ex.getErrorCode());\n    }\n    try {\n        ae.resolveToFullPath(new org.apache.hadoop.fs.Path(\"hdfs://z\"), new org.apache.hadoop.fs.Path(\"file://bla\"), true);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertTrue(ex.getMessage().contains(\"E0904\"));\n    }\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testResolveToFullPath",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String wfApp = \"<workflow-app xmlns='uri:oozie:workflow:0.1' name='test-wf'>\" + ((\"    <start to='end'/>\" + \"    <end name='end'/>\") + \"</workflow-app>\");\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n    fs.mkdirs(appPath);\n    fs.mkdirs(new org.apache.hadoop.fs.Path(appPath, \"lib\"));\n    fs.mkdirs(new org.apache.hadoop.fs.Path(\"input-data\"));\n    java.io.Writer inputWriter = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(\"input-data/data1.txt\")));\n    inputWriter.write(\"Hello. This is my input data set.\");\n    inputWriter.close();\n    java.io.Writer writer = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\")));\n    writer.write(wfApp);\n    writer.close();\n    try {\n        org.apache.oozie.local.LocalOozie.start();\n        final org.apache.oozie.client.OozieClient wc = org.apache.oozie.local.LocalOozie.getClient();\n        java.util.Properties conf = wc.createConfiguration();\n        conf.setProperty(org.apache.oozie.client.OozieClient.APP_PATH, (appPath.toString() + java.io.File.separator) + \"workflow.xml\");\n        conf.setProperty(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n        conf.setProperty(org.apache.oozie.client.OozieClient.GROUP_NAME, org.apache.oozie.test.XTestCase.getTestGroup());\n        final java.lang.String jobId = wc.submit(conf);\n        junit.framework.Assert.assertNotNull(jobId);\n        org.apache.oozie.client.WorkflowJob wf = wc.getJobInfo(jobId);\n        junit.framework.Assert.assertNotNull(wf);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.PREP, wf.getStatus());\n        boolean dateTest = (wf.getLastModifiedTime().compareTo(wf.getCreatedTime()) >= 0) ? true : false;\n        junit.framework.Assert.assertEquals(true, dateTest);\n        wc.start(jobId);\n        wf = wc.getJobInfo(jobId);\n        java.util.Date lastModTime = wf.getLastModifiedTime();\n        wc.suspend(jobId);\n        wf = wc.getJobInfo(jobId);\n        dateTest = (wf.getLastModifiedTime().compareTo(lastModTime) >= 0) ? true : false;\n        junit.framework.Assert.assertEquals(true, dateTest);\n        lastModTime = wf.getLastModifiedTime();\n        sleep(1000);\n        wc.resume(jobId);\n        wf = wc.getJobInfo(jobId);\n        dateTest = (wf.getLastModifiedTime().compareTo(lastModTime) >= 0) ? true : false;\n        junit.framework.Assert.assertEquals(true, dateTest);\n        waitFor(600000, new org.apache.oozie.test.XTestCase.Predicate() {\n            public boolean evaluate() throws java.lang.Exception {\n                org.apache.oozie.client.WorkflowJob wf = wc.getJobInfo(jobId);\n                return wf.getStatus() == org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED;\n            }\n        });\n        wf = wc.getJobInfo(jobId);\n        junit.framework.Assert.assertNotNull(wf);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wf.getStatus());\n        dateTest = (wf.getLastModifiedTime().compareTo(wf.getEndTime()) >= 0) ? true : false;\n        junit.framework.Assert.assertEquals(true, dateTest);\n    } finally {\n        org.apache.oozie.local.LocalOozie.stop();\n    }\n}",
        "ClassName": "TestLastModified",
        "Label": 1,
        "MethodName": "testWorkflowRun",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        services.destroy();\n        services = setupServicesForTopic();\n        services.getConf().set(org.apache.oozie.service.JMSTopicService.TOPIC_NAME, (((org.apache.oozie.service.JMSTopicService.JobType.WORKFLOW.getValue() + \" = workflow,\") + org.apache.oozie.service.JMSTopicService.JobType.COORDINATOR.getValue()) + \"=coord, default = \") + org.apache.oozie.service.JMSTopicService.TopicType.JOBID.getValue());\n        services.init();\n        org.apache.oozie.service.JMSTopicService jmsTopicService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JMSTopicService.class);\n        org.apache.oozie.WorkflowJobBean wfj = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n        junit.framework.Assert.assertEquals(\"workflow\", jmsTopicService.getTopic(wfj.getId()));\n        org.apache.oozie.WorkflowActionBean wab = addRecordToWfActionTable(wfj.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n        junit.framework.Assert.assertEquals(\"workflow\", jmsTopicService.getTopic(wab.getId()));\n        org.apache.oozie.CoordinatorJobBean cjb = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, true, true);\n        junit.framework.Assert.assertEquals(\"coord\", jmsTopicService.getTopic(cjb.getId()));\n        org.apache.oozie.CoordinatorActionBean cab = addRecordToCoordActionTable(cjb.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-for-action-input-check.xml\", 0);\n        junit.framework.Assert.assertEquals(\"coord\", jmsTopicService.getTopic(cab.getId()));\n        org.apache.oozie.BundleJobBean bjb = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, true);\n        junit.framework.Assert.assertEquals(bjb.getId(), jmsTopicService.getTopic(bjb.getId()));\n        org.apache.oozie.BundleActionBean bab = addRecordToBundleActionTable(bjb.getId(), \"1\", 1, org.apache.oozie.client.Job.Status.RUNNING);\n        junit.framework.Assert.assertEquals(bjb.getId(), jmsTopicService.getTopic(bab.getBundleActionId()));\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSTopicService",
        "Label": 1,
        "MethodName": "testMixedTopic1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.util.List<java.lang.String>> filterListAction1 = createFilterList(\"jobid\", coordActionId1);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.SLAEventsGetForFilterJPAExecutor slaEventsGetCmd = new org.apache.oozie.executor.jpa.SLAEventsGetForFilterJPAExecutor(0, 100, filterListAction1, new long[1]);\n    java.util.List<org.apache.oozie.SLAEventBean> list = jpaService.execute(slaEventsGetCmd);\n    junit.framework.Assert.assertNotNull(list);\n    junit.framework.Assert.assertEquals(3, list.size());\n}",
        "ClassName": "TestSLAEventsGetForFilterJPAExecutor",
        "Label": 1,
        "MethodName": "testGetSLAEventsForCoordActionId",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        services.destroy();\n        services = setupServicesForTopic();\n        services.getConf().set(org.apache.oozie.service.JMSTopicService.TOPIC_NAME, \"default=\" + \"invalidvalue\");\n        services.init();\n        junit.framework.Assert.fail(\"Expected Service Exception\");\n    } catch (org.apache.oozie.service.ServiceException se) {\n        junit.framework.Assert.assertTrue(se.getMessage().contains(\"not allowed in default\"));\n    }\n}",
        "ClassName": "TestJMSTopicService",
        "Label": 1,
        "MethodName": "testIncorrectConfigurationDefault",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"coordinator.xml\")).close();\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-rerun\", org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + \"1\", \"-date\", \"2009-12-15T01:00Z::2009-12-16T01:00Z\" };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_COORD_ACTION_RERUN, org.apache.oozie.servlet.MockCoordinatorEngineService.did);\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockCoordinatorEngineService.started.get(1));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testCoordReRun2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        new org.apache.oozie.util.XConfiguration(new java.io.StringReader(\"<configurationx></configurationx>\"));\n        junit.framework.Assert.fail();\n    } catch (java.io.IOException ex) {\n    } catch (java.lang.Throwable ex) {\n        junit.framework.Assert.fail();\n    }\n}",
        "ClassName": "TestXConfiguration",
        "Label": 1,
        "MethodName": "testInvalidParsing",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.servlet.MyJsonRestServlet.FIXED_RESOURCE, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"GET\", \"\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"/resource\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"POST\", \"/resource\", \"\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestJsonRestServlet",
        "Label": 1,
        "MethodName": "testFixedResource",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.JavaActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor() {\n        @java.lang.Override\n        protected java.lang.String getDefaultShareLibName(org.jdom.Element actionXml) {\n            return \"java-action-executor\";\n        }\n    };\n    org.apache.oozie.WorkflowJobBean wfBean = new org.apache.oozie.WorkflowJobBean();\n    java.lang.String jobConf = \"<configuration/>\";\n    wfBean.setConf(jobConf);\n    org.apache.oozie.WorkflowActionBean action = new org.apache.oozie.WorkflowActionBean();\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(wfBean, action);\n    org.apache.hadoop.conf.Configuration actionConf = new org.apache.oozie.util.XConfiguration();\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"java-action-executor\" }, ae.getShareLibNames(context, new org.jdom.Element(\"java\"), actionConf));\n    org.apache.oozie.service.Services.get().getConf().set(\"oozie.action.sharelib.for.java\", \"java-oozie-conf\");\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"java-oozie-conf\" }, ae.getShareLibNames(context, new org.jdom.Element(\"java\"), actionConf));\n    jobConf = \"<configuration>\" + ((((\"<property>\" + \"<name>oozie.action.sharelib.for.java</name>\") + \"<value>java-job-conf</value>\") + \"</property>\") + \"</configuration>\");\n    wfBean.setConf(jobConf);\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"java-job-conf\" }, ae.getShareLibNames(context, new org.jdom.Element(\"java\"), actionConf));\n    actionConf.set(\"oozie.action.sharelib.for.java\", \"java-action-conf\");\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"java-action-conf\" }, ae.getShareLibNames(context, new org.jdom.Element(\"java\"), actionConf));\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testActionSharelibResolution",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String pigStats = \"{\\\"ACTION_TYPE\\\":\\\"PIG\\\",\" + ((((((((((((\"\\\"PIG_VERSION\\\":\\\"0.9.0\\\",\" + \"\\\"FEATURES\\\":\\\"UNKNOWN\\\",\") + \"\\\"ERROR_MESSAGE\\\":null,\") + \"\\\"NUMBER_JOBS\\\":\\\"2\\\",\") + \"\\\"RECORD_WRITTEN\\\":\\\"33\\\",\") + \"\\\"JOB_GRAPH\\\":\\\"job_201111300933_0004,job_201111300933_0005\\\",\") + \"\\\"job_201111300933_0004\\\":{\\\"MAP_INPUT_RECORDS\\\":\\\"33\\\",\\\"MIN_REDUCE_TIME\\\":\\\"0\\\",\\\"MULTI_STORE_COUNTERS\\\":{},\\\"ERROR_MESSAGE\\\":null,\\\"JOB_ID\\\":\\\"job_201111300933_0004\\\"},\") + \"\\\"job_201111300933_0005\\\":{\\\"MAP_INPUT_RECORDS\\\":\\\"37\\\",\\\"MIN_REDUCE_TIME\\\":\\\"0\\\",\\\"MULTI_STORE_COUNTERS\\\":{},\\\"ERROR_MESSAGE\\\":null,\\\"JOB_ID\\\":\\\"job_201111300933_0005\\\"},\") + \"\\\"BYTES_WRITTEN\\\":\\\"1410\\\",\") + \"\\\"HADOOP_VERSION\\\":\\\"0.20.2\\\",\") + \"\\\"RETURN_CODE\\\":\\\"0\\\",\") + \"\\\"ERROR_CODE\\\":\\\"-1\\\",\") + \"}\");\n    org.apache.oozie.WorkflowJobBean workflow = new org.apache.oozie.WorkflowJobBean();\n    workflow.setProtoActionConf(\"<configuration/>\");\n    org.apache.oozie.workflow.lite.LiteWorkflowApp wfApp = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"x\", \"<workflow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"a\"));\n    wfApp.addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"a\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    org.apache.oozie.workflow.WorkflowInstance wi = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(wfApp, new org.apache.oozie.util.XConfiguration(), \"1\");\n    workflow.setWorkflowInstance(wi);\n    workflow.setId(org.apache.oozie.service.Services.get().get(org.apache.oozie.service.UUIDService.class).generateId(org.apache.oozie.service.UUIDService.ApplicationType.WORKFLOW));\n    final org.apache.oozie.WorkflowActionBean action = new org.apache.oozie.WorkflowActionBean();\n    action.setName(\"H\");\n    org.apache.oozie.command.wf.ActionXCommand.ActionExecutorContext context = new org.apache.oozie.command.wf.ActionXCommand.ActionExecutorContext(workflow, action, false, false);\n    context.setVar(org.apache.oozie.action.hadoop.MapReduceActionExecutor.HADOOP_COUNTERS, pigStats);\n    org.apache.oozie.util.ELEvaluator eval = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.ELService.class).createEvaluator(\"workflow\");\n    org.apache.oozie.DagELFunctions.configureEvaluator(eval, workflow, action);\n    java.lang.String version = \"0.9.0\";\n    java.lang.String jobGraph = \"job_201111300933_0004,job_201111300933_0005\";\n    java.util.HashMap<java.lang.String, java.lang.String> job1StatusMap = new java.util.HashMap<java.lang.String, java.lang.String>();\n    job1StatusMap.put(\"\\\"MAP_INPUT_RECORDS\\\"\", \"\\\"33\\\"\");\n    job1StatusMap.put(\"\\\"MIN_REDUCE_TIME\\\"\", \"\\\"0\\\"\");\n    job1StatusMap.put(\"\\\"MULTI_STORE_COUNTERS\\\"\", \"{}\");\n    job1StatusMap.put(\"\\\"ERROR_MESSAGE\\\"\", \"null\");\n    job1StatusMap.put(\"\\\"JOB_ID\\\"\", \"\\\"job_201111300933_0004\\\"\");\n    java.util.HashMap<java.lang.String, java.lang.String> job2StatusMap = new java.util.HashMap<java.lang.String, java.lang.String>();\n    job2StatusMap.put(\"\\\"MAP_INPUT_RECORDS\\\"\", \"\\\"37\\\"\");\n    job2StatusMap.put(\"\\\"MIN_REDUCE_TIME\\\"\", \"\\\"0\\\"\");\n    job2StatusMap.put(\"\\\"MULTI_STORE_COUNTERS\\\"\", \"{}\");\n    job2StatusMap.put(\"\\\"ERROR_MESSAGE\\\"\", \"null\");\n    job2StatusMap.put(\"\\\"JOB_ID\\\"\", \"\\\"job_201111300933_0005\\\"\");\n    junit.framework.Assert.assertEquals(org.apache.oozie.action.hadoop.ActionType.PIG.toString(), eval.evaluate(\"${hadoop:counters('H')['ACTION_TYPE']}\", java.lang.String.class));\n    junit.framework.Assert.assertEquals(version, eval.evaluate(\"${hadoop:counters('H')['PIG_VERSION']}\", java.lang.String.class));\n    junit.framework.Assert.assertEquals(jobGraph, eval.evaluate(\"${hadoop:counters('H')['JOB_GRAPH']}\", java.lang.String.class));\n    java.lang.String[] jobStatusItems = new java.lang.String[]{ \"\\\"MAP_INPUT_RECORDS\\\"\", \"\\\"MIN_REDUCE_TIME\\\"\", \"\\\"MULTI_STORE_COUNTERS\\\"\", \"\\\"ERROR_MESSAGE\\\"\", \"\\\"JOB_ID\\\"\" };\n    java.lang.String job1StatusResult = eval.evaluate(\"${hadoop:counters('H')['job_201111300933_0004']}\", java.lang.String.class);\n    job1StatusResult = job1StatusResult.substring(job1StatusResult.indexOf('{') + 1, job1StatusResult.lastIndexOf('}'));\n    java.lang.String[] job1StatusResArray = job1StatusResult.split(\",\");\n    java.util.HashMap<java.lang.String, java.lang.String> job1StatusResMap = new java.util.HashMap<java.lang.String, java.lang.String>();\n    for (java.lang.String status : job1StatusResArray) {\n        java.lang.String[] tmp = status.split(\":\");\n        job1StatusResMap.put(tmp[0], tmp[1]);\n    }\n    for (java.lang.String item : jobStatusItems) {\n        junit.framework.Assert.assertEquals(job1StatusMap.get(item), job1StatusResMap.get(item));\n    }\n    java.lang.String job2StatusResult = eval.evaluate(\"${hadoop:counters('H')['job_201111300933_0005']}\", java.lang.String.class);\n    job2StatusResult = job2StatusResult.substring(job2StatusResult.indexOf('{') + 1, job2StatusResult.lastIndexOf('}'));\n    java.lang.String[] job2StatusResArray = job2StatusResult.split(\",\");\n    java.util.HashMap<java.lang.String, java.lang.String> job2StatusResMap = new java.util.HashMap<java.lang.String, java.lang.String>();\n    for (java.lang.String status : job2StatusResArray) {\n        java.lang.String[] tmp = status.split(\":\");\n        job2StatusResMap.put(tmp[0], tmp[1]);\n    }\n    for (java.lang.String item : jobStatusItems) {\n        junit.framework.Assert.assertEquals(job2StatusMap.get(item), job2StatusResMap.get(item));\n    }\n    junit.framework.Assert.assertEquals(new java.lang.Long(33), eval.evaluate(\"${hadoop:counters('H')['job_201111300933_0004']['MAP_INPUT_RECORDS']}\", java.lang.Long.class));\n}",
        "ClassName": "TestHadoopELFunctions",
        "Label": 1,
        "MethodName": "testELFunctionsReturningPigStats",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path actionDir = getFsTestCaseDir();\n    org.apache.hadoop.mapred.JobConf jobConf = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HadoopAccessorService.class).createJobConf(new java.net.URI(getNameNodeUri()).getAuthority());\n    jobConf.set(\"user.name\", org.apache.oozie.test.XTestCase.getTestUser());\n    jobConf.set(\"fs.default.name\", getNameNodeUri());\n    org.apache.oozie.action.hadoop.LauncherMapper lm = new org.apache.oozie.action.hadoop.LauncherMapper();\n    org.apache.hadoop.conf.Configuration actionConf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String prepareBlock = \"\";\n    lm.setupLauncherInfo(jobConf, \"1\", \"1@a\", actionDir, \"1@a-0\", actionConf, prepareBlock);\n    junit.framework.Assert.assertTrue(jobConf.get(\"oozie.action.prepare.xml\").equals(\"\"));\n}",
        "ClassName": "TestLauncher",
        "Label": 1,
        "MethodName": "testSetupLauncherInfoWithEmptyPrepareXML",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean coordinatorJob1 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.KILLED, false, false);\n    _testGetJobInfoForStatus();\n    _testGetJobInfoForGroup();\n    addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.KILLED, false, false);\n    _testGetJobInfoForAppName();\n    _testGetJobInfoForUser();\n    _testGetJobInfoForUserAndStatus();\n    _testGetJobInfoForFrequency();\n    _testGetJobInfoForId(coordinatorJob1.getId());\n    _testGetJobInfoForFrequencyAndUnit();\n}",
        "ClassName": "TestCoordJobInfoGetJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordJobGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.EventHandlerService ehs = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.EventHandlerService.class);\n    ehs.setAppTypes(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(new java.lang.String[]{ \"coordinator_action\" })));\n    junit.framework.Assert.assertEquals(queue.size(), 0);\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2013-01-01T10:00Z\");\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2013-01-01T10:14Z\");\n    org.apache.oozie.CoordinatorJobBean coord = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, startTime, endTime, false, false, 0);\n    modifyCoordForRunning(coord);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(coord.getId(), 3600).call();\n    final org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coord.getId() + \"@1\");\n    org.apache.oozie.CoordinatorActionBean action = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.WAITING, action.getStatus());\n    junit.framework.Assert.assertEquals(1, queue.size());\n    org.apache.oozie.event.CoordinatorActionEvent event = ((org.apache.oozie.event.CoordinatorActionEvent) (queue.poll()));\n    junit.framework.Assert.assertNotNull(event);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.JobEvent.EventStatus.WAITING, event.getEventStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.AppType.COORDINATOR_ACTION, event.getAppType());\n    junit.framework.Assert.assertEquals(action.getId(), event.getId());\n    junit.framework.Assert.assertEquals(action.getJobId(), event.getParentId());\n    junit.framework.Assert.assertEquals(action.getNominalTime(), event.getNominalTime());\n    junit.framework.Assert.assertEquals(action.getCreatedTime(), event.getStartTime());\n    junit.framework.Assert.assertEquals(coord.getUser(), event.getUser());\n    junit.framework.Assert.assertEquals(coord.getAppName(), event.getAppName());\n    junit.framework.Assert.assertEquals(0, queue.size());\n    new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(action.getId(), coord.getId()).call();\n    action = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.READY, action.getStatus());\n    waitFor(1 * 100, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return jpaService.execute(coordGetCmd).getStatus() == org.apache.oozie.client.CoordinatorAction.Status.RUNNING;\n        }\n    });\n    event = _pollQueue();\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.JobEvent.EventStatus.STARTED, event.getEventStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.AppType.COORDINATOR_ACTION, event.getAppType());\n    junit.framework.Assert.assertEquals(action.getId(), event.getId());\n    junit.framework.Assert.assertEquals(action.getJobId(), event.getParentId());\n    junit.framework.Assert.assertEquals(action.getNominalTime(), event.getNominalTime());\n    junit.framework.Assert.assertEquals(action.getCreatedTime(), event.getStartTime());\n    junit.framework.Assert.assertEquals(coord.getUser(), event.getUser());\n    junit.framework.Assert.assertEquals(coord.getAppName(), event.getAppName());\n    action = jpaService.execute(coordGetCmd);\n    org.apache.oozie.WorkflowJobBean wfJob = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(action.getExternalId()));\n    wfJob.setStatus(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED);\n    jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobUpdateJPAExecutor(wfJob));\n    new org.apache.oozie.command.coord.CoordActionCheckXCommand(action.getId(), 0).call();\n    action = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, action.getStatus());\n    event = _pollQueue();\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.JobEvent.EventStatus.SUCCESS, event.getEventStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.AppType.COORDINATOR_ACTION, event.getAppType());\n    junit.framework.Assert.assertEquals(action.getId(), event.getId());\n    junit.framework.Assert.assertEquals(action.getJobId(), event.getParentId());\n    junit.framework.Assert.assertEquals(action.getNominalTime(), event.getNominalTime());\n    junit.framework.Assert.assertEquals(action.getCreatedTime(), event.getStartTime());\n    junit.framework.Assert.assertEquals(coord.getUser(), event.getUser());\n    junit.framework.Assert.assertEquals(coord.getAppName(), event.getAppName());\n    action.setStatus(org.apache.oozie.client.CoordinatorAction.Status.RUNNING);\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionUpdateJPAExecutor(action));\n    wfJob.setStatus(org.apache.oozie.client.WorkflowJob.Status.KILLED);\n    jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobUpdateJPAExecutor(wfJob));\n    new org.apache.oozie.command.coord.CoordActionCheckXCommand(action.getId(), 0).call();\n    action = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.KILLED, action.getStatus());\n    event = _pollQueue();\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.JobEvent.EventStatus.FAILURE, event.getEventStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.AppType.COORDINATOR_ACTION, event.getAppType());\n    junit.framework.Assert.assertEquals(action.getId(), event.getId());\n    junit.framework.Assert.assertEquals(action.getJobId(), event.getParentId());\n    junit.framework.Assert.assertEquals(action.getNominalTime(), event.getNominalTime());\n    junit.framework.Assert.assertEquals(action.getCreatedTime(), event.getStartTime());\n    junit.framework.Assert.assertEquals(coord.getUser(), event.getUser());\n    junit.framework.Assert.assertEquals(coord.getAppName(), event.getAppName());\n}",
        "ClassName": "TestEventGeneration",
        "Label": 1,
        "MethodName": "testCoordinatorActionEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.TestCallableQueueService.EXEC_ORDER = new java.util.concurrent.atomic.AtomicLong();\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.CallableQueueService.CONF_THREADS, \"1\");\n    setSystemProperty(org.apache.oozie.service.CallableQueueService.CONF_CALLABLE_INTERRUPT_TYPES, \"testKill\");\n    new org.apache.oozie.service.Services().init();\n    org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    final org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand initialCallable = new org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand(\"initialKey\", \"initialType\", 2, 200, \"initialLockKey\");\n    final java.util.List<org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand> callables = new java.util.ArrayList<org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand>();\n    for (int i = 0; i < 10; i++) {\n        callables.add(new org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand(\"key\" + i, \"type\" + i, 1, 100, \"lockKey\"));\n    }\n    final org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand intCallable = new org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand(\"key5\", \"testKill\", 0, 200, \"lockKey\");\n    queueservice.queue(initialCallable);\n    queueservice.queueSerial(((java.util.List<? extends org.apache.oozie.util.XCallable<?>>) (callables)), 0);\n    queueservice.queue(intCallable);\n    waitFor(3000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            boolean retValue = (initialCallable.executed != 0) && (intCallable.executed != 0);\n            for (org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand c : callables) {\n                retValue = retValue && (c.executed != 0);\n            }\n            return retValue;\n        }\n    });\n    junit.framework.Assert.assertTrue(initialCallable.executed > 0);\n    junit.framework.Assert.assertTrue(intCallable.executed > 0);\n    for (org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand c : callables) {\n        junit.framework.Assert.assertTrue(intCallable.executed < c.executed);\n    }\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testInterruptsWithCompositeCallable",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    services.destroy();\n    setSystemProperty(org.apache.oozie.executor.jpa.CoordActionGetForInfoJPAExecutor.COORD_GET_ALL_COLS_FOR_ACTION, \"true\");\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    int actionNum = 1;\n    java.lang.String slaXml = \"slaXml\";\n    java.lang.String resourceXmlName = \"coord-action-get.xml\";\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = createCoordAction(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.WAITING, resourceXmlName, 0);\n    action.setSlaXml(slaXml);\n    insertRecordCoordAction(action);\n    _testGetForInfoAllActions(job.getId(), slaXml, 1, 1);\n}",
        "ClassName": "TestCoordJobGetActionsSubsetJPAExecutor",
        "Label": 1,
        "MethodName": "testGetActionAllColumns",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_COORD_STATUS, \"true\");\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T01:00Z\");\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-02T23:59Z\");\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, start, end, false, false, 3);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    coordJob.setAppNamespace(org.apache.oozie.service.SchemaService.COORDINATOR_NAMESPACE_URI_1);\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob));\n    org.apache.oozie.CoordinatorActionBean action1 = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean action2 = addRecordToCoordActionTable(coordJob.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean action3 = addRecordToCoordActionTable(coordJob.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\", 0);\n    java.lang.String rerunScope = (java.lang.Integer.toString(1) + \"-\") + java.lang.Integer.toString(2);\n    final org.apache.oozie.client.OozieClient coordClient = org.apache.oozie.local.LocalOozie.getCoordClient();\n    coordClient.reRunCoord(coordJob.getId(), org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_ACTION, rerunScope, false, true);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    coordJob = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action1.getId());\n    action1 = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertNotSame(action1.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action2.getId());\n    action2 = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertNotSame(action2.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunForBackwardSupport3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String jobId = _testSubmitJob(appPath);\n    _testGetJob(jobId, appPath);\n    _testGetJobs(jobId);\n    _testStatus(jobId);\n    _testGetDefinition(jobId);\n    _testSubsetActions(jobId);\n}",
        "ClassName": "TestCoordinatorEngine",
        "Label": 1,
        "MethodName": "testEngine",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    ae.validateSameNN(new org.apache.hadoop.fs.Path(\"hdfs://x/bla\"), new org.apache.hadoop.fs.Path(\"hdfs://x/foo\"));\n    try {\n        ae.validateSameNN(new org.apache.hadoop.fs.Path(\"hdfs://x/bla\"), new org.apache.hadoop.fs.Path(\"viefs://x/bla\"));\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(\"FS007\", ex.getErrorCode());\n    }\n    try {\n        ae.validateSameNN(new org.apache.hadoop.fs.Path(\"hdfs://x/bla\"), new org.apache.hadoop.fs.Path(\"hdfs://y/bla\"));\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(\"FS007\", ex.getErrorCode());\n    }\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testvalidateSameNN",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-schema-valid.xml\", -1), new org.apache.hadoop.conf.Configuration());\n    try {\n        parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-loop1-invalid.xml\", -1), new org.apache.hadoop.conf.Configuration());\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0707, ex.getErrorCode());\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    }\n    try {\n        parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-unsupported-action.xml\", -1), new org.apache.hadoop.conf.Configuration());\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0723, ex.getErrorCode());\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    }\n    try {\n        parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-loop2-invalid.xml\", -1), new org.apache.hadoop.conf.Configuration());\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0706, ex.getErrorCode());\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    }\n    try {\n        parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-transition-invalid.xml\", -1), new org.apache.hadoop.conf.Configuration());\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0708, ex.getErrorCode());\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testParser",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.toDate(new java.sql.Timestamp(java.lang.System.currentTimeMillis() + (360 * 1000)));\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2099-02-03T23:59Z\");\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, startTime, endTime, false, false, 0);\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    checkCoordJobs(job.getId(), org.apache.oozie.client.Job.Status.PREP);\n}",
        "ClassName": "TestCoordMaterializeTransitionXCommand",
        "Label": 1,
        "MethodName": "testMatLookupCommand4",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNINGWITHERROR, start, end, true, false, 4);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 4, org.apache.oozie.client.CoordinatorAction.Status.SUSPENDED, \"coord-action-get.xml\", 0);\n    final java.lang.String jobId = job.getId();\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(10 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(jobId));\n            return coordJob.getStatus() == org.apache.oozie.client.Job.Status.RUNNING;\n        }\n    });\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertFalse(job.isPending());\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNING);\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServiceRunning2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean workflowJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    _testGetWFInfos();\n    _testGetWFInfoForId(workflowJob.getId());\n    java.lang.System.out.println(\"testWfJobsGet Successful\");\n}",
        "ClassName": "TestWorkflowsJobGetJPAExecutor",
        "Label": 1,
        "MethodName": "testWfJobsGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String shellScript = \"ls -ltr\\necho var1=$var1\\necho var2=$var2\";\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path script = new org.apache.hadoop.fs.Path(getAppPath(), \"script.sh\");\n    java.io.Writer w = new java.io.OutputStreamWriter(fs.create(script));\n    w.write(shellScript);\n    w.close();\n    java.lang.String envValueHavingEqualSign = \"a=b;c=d\";\n    java.lang.String actionXml = (((((((((((((((((((((\"<shell>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<exec>sh</exec>\") + \"<argument>-c</argument>\") + \"<argument>script.sh</argument>\") + \"<argument>A</argument>\") + \"<argument>B</argument>\") + \"<env-var>var1=val1</env-var>\") + \"<env-var>var2=\") + envValueHavingEqualSign) + \"</env-var>\") + \"<file>\") + script.toString()) + \"#\") + script.getName()) + \"</file>\") + \"<capture-output />\") + \"</shell>\";\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml);\n    final org.apache.hadoop.mapred.RunningJob launcherJob = submitAction(context);\n    waitFor(30 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return launcherJob.isComplete();\n        }\n    });\n    org.apache.oozie.action.hadoop.ShellActionExecutor ae = new org.apache.oozie.action.hadoop.ShellActionExecutor();\n    org.apache.oozie.client.WorkflowAction action = context.getAction();\n    ae.check(context, action);\n    ae.end(context, action);\n    junit.framework.Assert.assertEquals(envValueHavingEqualSign, org.apache.oozie.util.PropertiesUtils.stringToProperties(action.getData()).getProperty(\"var2\"));\n}",
        "ClassName": "TestShellActionExecutor",
        "Label": 1,
        "MethodName": "testEnvVar",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum1 = 1;\n    int actionNum2 = 2;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    java.lang.String jobId = job.getId();\n    addRecordToCoordActionTable(jobId, actionNum1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\", 0);\n    addRecordToCoordActionTable(jobId, actionNum2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action2.xml\", 0);\n    java.lang.String rerunScope = \"2009-12-15T01:00Z\" + (\"::\" + \"2009-12-16T01:00Z\");\n    java.util.List<org.apache.oozie.CoordinatorActionBean> coordActions = org.apache.oozie.coord.CoordUtils.getCoordActionsFromDates(jobId, rerunScope);\n    junit.framework.Assert.assertEquals(2, coordActions.size());\n}",
        "ClassName": "TestCoordUtils",
        "Label": 1,
        "MethodName": "testGetCoordActionsFromDateRange",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String inherit = \"false\";\n    java.lang.String inheritWF = \"false\";\n    java.lang.String[] expectedLibs1 = new java.lang.String[]{ \"child1.jar\", \"child2.so\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 1, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs1, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs1, expectedLibs1);\n    java.lang.String[] expectedLibs2 = new java.lang.String[]{  };\n    checkSubworkflowLibHelper(inherit, inheritWF, 2, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs2, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs2, expectedLibs2);\n    java.lang.String[] expectedLibs3 = new java.lang.String[]{ \"child1.jar\", \"child2.so\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 3, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs3, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs3, expectedLibs3);\n    java.lang.String[] expectedLibs4 = new java.lang.String[]{  };\n    checkSubworkflowLibHelper(inherit, inheritWF, 4, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs4, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs4, expectedLibs4);\n    java.lang.String[] expectedLibs5 = new java.lang.String[]{ \"child1.jar\", \"child2.so\", \"same.jar\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 5, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs5, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs5, expectedLibs5);\n}",
        "ClassName": "TestLiteWorkflowAppService",
        "Label": 1,
        "MethodName": "testCreateProtoConfWithSubWorkflowLib6",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/jobs\", org.apache.oozie.servlet.V1JobsServlet.class, false, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String bulkRequest = (\"bundle=\" + bundleName) + \";coordinators=Coord1,Coord2;actionstatus=KILLED\";\n            org.json.simple.JSONArray array = _requestToServer(bulkRequest);\n            junit.framework.Assert.assertEquals(2, array.size());\n            org.json.simple.JSONObject jbundle = ((org.json.simple.JSONObject) (((org.json.simple.JSONObject) (array.get(0))).get(org.apache.oozie.client.rest.JsonTags.BULK_RESPONSE_BUNDLE)));\n            junit.framework.Assert.assertNotNull(jbundle);\n            org.json.simple.JSONObject jaction1 = ((org.json.simple.JSONObject) (((org.json.simple.JSONObject) (array.get(0))).get(org.apache.oozie.client.rest.JsonTags.BULK_RESPONSE_ACTION)));\n            org.json.simple.JSONObject jaction2 = ((org.json.simple.JSONObject) (((org.json.simple.JSONObject) (array.get(1))).get(org.apache.oozie.client.rest.JsonTags.BULK_RESPONSE_ACTION)));\n            junit.framework.Assert.assertNotNull(jaction1);\n            junit.framework.Assert.assertNotNull(jaction2);\n            junit.framework.Assert.assertEquals(jaction1.get(org.apache.oozie.client.rest.JsonTags.COORDINATOR_ACTION_ID), \"Coord1@2\");\n            junit.framework.Assert.assertEquals(jaction2.get(org.apache.oozie.client.rest.JsonTags.COORDINATOR_ACTION_ID), \"Coord2@1\");\n            return null;\n        }\n    });\n}",
        "ClassName": "TestBulkMonitorWebServiceAPI",
        "Label": 1,
        "MethodName": "testMultipleCoordinators",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date curr = new java.util.Date();\n    java.util.Date pauseTime = new java.util.Date(curr.getTime() - 1000);\n    org.apache.oozie.CoordinatorJobBean job = this.addRecordToCoordJobTableWithPausedTime(org.apache.oozie.client.Job.Status.PAUSED, false, false, pauseTime);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\", 0);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetExecutor = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSED, job.getStatus());\n    new org.apache.oozie.command.coord.CoordRerunXCommand(job.getId(), org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_DATE, \"2009-12-15T01:00Z\", false, true).call();\n    job = jpaService.execute(coordJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSED, job.getStatus());\n    junit.framework.Assert.assertNotNull(job.getPauseTime());\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunInPaused",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setSystemProperty(org.apache.oozie.service.ConfigurationService.OOZIE_CONFIG_FILE, \"oozie-dummy.xml\");\n    setSystemProperty(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, \"\");\n    setSystemProperty(org.apache.oozie.service.Services.CONF_SERVICE_EXT_CLASSES, \"\");\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    services.init();\n    try {\n        junit.framework.Assert.assertNotNull(services.get(org.apache.oozie.service.XLogService.class));\n        junit.framework.Assert.assertNotNull(services.get(org.apache.oozie.service.ConfigurationService.class));\n        java.lang.String shouldBe = \"oozie-\" + java.lang.System.getProperty(\"user.name\");\n        junit.framework.Assert.assertTrue(shouldBe.startsWith(services.getSystemId()));\n        junit.framework.Assert.assertNotNull(services.getRuntimeDir());\n        junit.framework.Assert.assertTrue(new java.io.File(services.getRuntimeDir()).exists());\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestServices",
        "Label": 1,
        "MethodName": "testDefaultServices",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-ext-schema-valid.xml\", -1);\n    java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    final org.apache.oozie.DagEngine engine = new org.apache.oozie.DagEngine(org.apache.oozie.test.XTestCase.getTestUser(), \"a\");\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\");\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.set(org.apache.oozie.client.OozieClient.LOG_TOKEN, \"t\");\n    conf.set(\"signal-value\", \"OK\");\n    conf.set(\"external-status\", \"ok\");\n    conf.set(\"error\", \"end.error\");\n    java.lang.String jobId1 = engine.submitJob(conf, false);\n    java.lang.String def = engine.getDefinition(jobId1);\n    junit.framework.Assert.assertNotNull(def);\n}",
        "ClassName": "TestDagEngine",
        "Label": 1,
        "MethodName": "testJobDefinition",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            java.util.List<org.apache.oozie.client.WorkflowJob> list = wc.getJobsInfo(null);\n            junit.framework.Assert.assertEquals(org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT, list.size());\n            for (int i = 0; i < org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT; i++) {\n                junit.framework.Assert.assertNotNull(list.get(i).getAppPath());\n                junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + i) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, list.get(i).getId());\n            }\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            list = wc.getJobsInfo(\"name=x\", 3, 4);\n            junit.framework.Assert.assertEquals(org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT, list.size());\n            for (int i = 0; i < org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT; i++) {\n                junit.framework.Assert.assertNotNull(list.get(i).getAppPath());\n                junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + i) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, list.get(i).getId());\n            }\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testJobsStatus",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"name\", \"def\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"one\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"f\", \"end\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\", \"three\" }))).addNode(new org.apache.oozie.workflow.lite.DecisionNodeDef(\"two\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestDecisionNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"four\", \"five\", \"four\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"four\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"five\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"three\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.KillNodeDef(\"k\", \"kill\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class)).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    try {\n        invokeForkJoin(parser, def);\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Unexpected Exception\");\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testDecisionForkJoin",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.Instrumentation inst = new org.apache.oozie.util.Instrumentation();\n    junit.framework.Assert.assertEquals(0, inst.getCounters().size());\n    inst.incr(\"a\", \"1\", 1);\n    junit.framework.Assert.assertEquals(1, inst.getCounters().size());\n    junit.framework.Assert.assertEquals(1, inst.getCounters().get(\"a\").size());\n    inst.incr(\"a\", \"2\", 2);\n    junit.framework.Assert.assertEquals(1, inst.getCounters().size());\n    junit.framework.Assert.assertEquals(2, inst.getCounters().get(\"a\").size());\n    inst.incr(\"b\", \"1\", 3);\n    junit.framework.Assert.assertEquals(2, inst.getCounters().size());\n    junit.framework.Assert.assertEquals(2, inst.getCounters().get(\"a\").size());\n    junit.framework.Assert.assertEquals(1, inst.getCounters().get(\"b\").size());\n    junit.framework.Assert.assertEquals(new java.lang.Long(1), inst.getCounters().get(\"a\").get(\"1\").getValue());\n    junit.framework.Assert.assertEquals(new java.lang.Long(2), inst.getCounters().get(\"a\").get(\"2\").getValue());\n    junit.framework.Assert.assertEquals(new java.lang.Long(3), inst.getCounters().get(\"b\").get(\"1\").getValue());\n}",
        "ClassName": "TestInstrumentation",
        "Label": 1,
        "MethodName": "testInstrumentationCounter",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.io.File log4jFile = new java.io.File(getTestCaseConfDir(), org.apache.oozie.service.XLogService.DEFAULT_LOG4J_PROPERTIES);\n    java.lang.ClassLoader cl = java.lang.Thread.currentThread().getContextClassLoader();\n    java.io.InputStream is = cl.getResourceAsStream(\"test-oozie-log4j.properties\");\n    org.apache.oozie.util.IOUtils.copyStream(is, new java.io.FileOutputStream(log4jFile));\n    org.apache.oozie.service.XLogService ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertFalse(ls.getFromClasspath());\n    junit.framework.Assert.assertEquals(org.apache.oozie.service.XLogService.DEFAULT_LOG4J_PROPERTIES, ls.getLog4jProperties());\n    ls.destroy();\n}",
        "ClassName": "TestXLogService",
        "Label": 1,
        "MethodName": "testDefaultLog4jFromConfigDir",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    _testGetReadyActions(job.getId(), 0);\n    cleanUpDBTables();\n    job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.READY, \"coord-action-get.xml\", 0);\n    _testGetReadyActions(job.getId(), 1);\n}",
        "ClassName": "TestCoordJobGetReadyActionsJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-action-start\");\n    eval.setVariable(\".dataout.ABC\", \"file:///tmp/coord/US/2009/1/30,file:///tmp/coord/US/2009/1/31\");\n    java.lang.String expr = \"${coord:dataOut('ABC')}\";\n    junit.framework.Assert.assertEquals(\"file:///tmp/coord/US/2009/1/30,file:///tmp/coord/US/2009/1/31\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testDataOut",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-action-start\", \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=12;region=us\");\n    eval.setVariable(\".datain.ABC\", \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=12;region=us\");\n    eval.setVariable(\".datain.ABC.unresolved\", java.lang.Boolean.FALSE);\n    java.lang.String expr = \"${coord:databaseIn('ABC')}\";\n    junit.framework.Assert.assertEquals(\"mydb\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    eval.setVariable(\".dataout.ABC\", \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=12;region=us\");\n    eval.setVariable(\".dataout.ABC.unresolved\", java.lang.Boolean.FALSE);\n    expr = \"${coord:databaseOut('ABC')}\";\n    junit.framework.Assert.assertEquals(\"mydb\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestHCatELFunctions",
        "Label": 1,
        "MethodName": "testDatabase",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"one\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"two\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"one\" }))).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    try {\n        job.start();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0709, ex.getErrorCode());\n    }\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.FAILED, job.getStatus());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testLoopSimple",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    services.destroy();\n    setSystemProperty(org.apache.oozie.service.LiteWorkflowStoreService.CONF_NODE_DEF_VERSION, org.apache.oozie.service.LiteWorkflowStoreService.NODE_DEF_VERSION_0);\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    org.apache.oozie.WorkflowJobBean job = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    org.apache.oozie.WorkflowActionBean action = this.addRecordToWfActionTable(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action.getId());\n    job = jpaService.execute(wfJobGetCmd);\n    action = jpaService.execute(wfActionGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.WorkflowJob.Status.RUNNING);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.workflow.WorkflowInstance wfInstance = job.getWorkflowInstance();\n    junit.framework.Assert.assertEquals(wfInstance.getStatus(), org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    services.destroy();\n    sleep(5000);\n    setSystemProperty(org.apache.oozie.service.LiteWorkflowStoreService.CONF_NODE_DEF_VERSION, org.apache.oozie.service.LiteWorkflowStoreService.NODE_DEF_VERSION_1);\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    sleep(5000);\n    new org.apache.oozie.command.wf.KillXCommand(job.getId()).call();\n    jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    job = jpaService.execute(wfJobGetCmd);\n    action = jpaService.execute(wfActionGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.WorkflowJob.Status.KILLED);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.WorkflowAction.Status.KILLED);\n    wfInstance = job.getWorkflowInstance();\n    junit.framework.Assert.assertEquals(wfInstance.getStatus(), org.apache.oozie.workflow.WorkflowInstance.Status.KILLED);\n}",
        "ClassName": "TestWorkflowKillXCommand",
        "Label": 1,
        "MethodName": "testWfKillSuccessAfterNodeDefUpgrade",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-freq\");\n    eval.setVariable(\"my.test.variable\", \"test\");\n    java.lang.String expr = \"${coord:conf('my.test.variable')}\";\n    junit.framework.Assert.assertEquals(\"test\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testConf",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String parentXml = \"parentXml\";\n    prepareXmlWithInclude(parentXml);\n    try {\n        org.apache.oozie.util.XConfiguration conf = new org.apache.oozie.util.XConfiguration(new java.io.FileInputStream(new java.io.File(getTestCaseDir(), parentXml)));\n        junit.framework.Assert.assertEquals(\"DEFAULT\", conf.get(\"oozie.dummy\"));\n        junit.framework.Assert.assertEquals(\"bar\", conf.get(\"foo\"));\n        junit.framework.Assert.assertEquals(\"def\", conf.get(\"abc\"));\n    } catch (java.io.IOException e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"XInclude failed\");\n    }\n}",
        "ClassName": "TestXConfiguration",
        "Label": 1,
        "MethodName": "testAddXIncludeFromStream",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path inputDir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"input\");\n    org.apache.hadoop.fs.Path outputDir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"output\");\n    java.io.Writer w = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(inputDir, \"data.txt\")));\n    w.write(\"dummy\\n\");\n    w.write(\"dummy\\n\");\n    w.close();\n    java.lang.String actionXml = (((((((\"<map-reduce>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + getOozieActionExternalStatsWriteProperty(inputDir.toString(), outputDir.toString(), \"true\").toXmlString(false)) + \"</map-reduce>\";\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(\"map-reduce\", actionXml);\n    final org.apache.hadoop.mapred.RunningJob launcherJob = submitAction(context);\n    java.lang.String launcherId = context.getAction().getExternalId();\n    waitFor(120 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return launcherJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(launcherJob.isSuccessful());\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.hasIdSwap(launcherJob));\n    org.apache.oozie.action.hadoop.MapReduceActionExecutor ae = new org.apache.oozie.action.hadoop.MapReduceActionExecutor();\n    ae.check(context, context.getAction());\n    junit.framework.Assert.assertTrue(launcherId.equals(context.getAction().getExternalId()));\n    org.apache.hadoop.mapred.JobConf conf = ae.createBaseHadoopConf(context, org.apache.oozie.util.XmlUtils.parseXml(actionXml));\n    java.lang.String user = conf.get(\"user.name\");\n    java.lang.String group = conf.get(\"group.name\");\n    org.apache.hadoop.mapred.JobClient jobClient = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HadoopAccessorService.class).createJobClient(user, conf);\n    final org.apache.hadoop.mapred.RunningJob mrJob = jobClient.getJob(org.apache.hadoop.mapred.JobID.forName(context.getAction().getExternalChildIDs()));\n    waitFor(120 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return mrJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(mrJob.isSuccessful());\n    ae.check(context, context.getAction());\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", context.getAction().getExternalStatus());\n    junit.framework.Assert.assertNull(context.getAction().getData());\n    ae.end(context, context.getAction());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, context.getAction().getStatus());\n    junit.framework.Assert.assertNotNull(context.getExecutionStats());\n    junit.framework.Assert.assertTrue(context.getExecutionStats().contains(\"ACTION_TYPE\"));\n    junit.framework.Assert.assertTrue(context.getExecutionStats().contains(\"Counter\"));\n    junit.framework.Assert.assertNotNull(context.getExternalChildIDs());\n    junit.framework.Assert.assertNotNull(context.getVar(\"hadoop.counters\"));\n    java.lang.String counters = context.getVar(\"hadoop.counters\");\n    junit.framework.Assert.assertTrue(counters.contains(\"Counter\"));\n}",
        "ClassName": "TestMapReduceActionExecutor",
        "Label": 1,
        "MethodName": "testSetExecutionStats_when_user_has_specified_stats_write_TRUE",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path actionDir = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path newDir = new org.apache.hadoop.fs.Path(actionDir, \"newDir\");\n    java.lang.String prepareXML = (((\"<prepare>\" + \"<mkdir path='\") + newDir) + \"'/>\") + \"</prepare>\";\n    if (fs.exists(newDir)) {\n        fs.delete(newDir, true);\n    }\n    org.apache.hadoop.mapred.JobConf conf = createJobConf();\n    org.apache.oozie.action.hadoop.LauncherMapper.setupLauncherURIHandlerConf(conf);\n    org.apache.oozie.action.hadoop.PrepareActionsDriver.doOperations(prepareXML, conf);\n    junit.framework.Assert.assertTrue(fs.exists(actionDir));\n}",
        "ClassName": "TestPrepareActionsDriver",
        "Label": 1,
        "MethodName": "testDoOperationsWithValidXML",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.EventHandlerService ehs = services.get(org.apache.oozie.service.EventHandlerService.class);\n    junit.framework.Assert.assertNotNull(ehs);\n    junit.framework.Assert.assertTrue(org.apache.oozie.sla.service.SLAService.isEnabled());\n    junit.framework.Assert.assertTrue(ehs.listEventListeners().contains(org.apache.oozie.sla.listener.SLAJobEventListener.class.getCanonicalName()));\n}",
        "ClassName": "TestSLAJobEventListener",
        "Label": 1,
        "MethodName": "testListenerConfigured",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-action-start\");\n    eval.setVariable(\".datain.ABC\", \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=20;region=us,\" + ((\"hcat://hcat.server.com:5080/mydb/clicks/datastamp=12;region=us,\" + \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=13;region=us,\") + \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=10;region=us\"));\n    eval.setVariable(\".datain.ABC.unresolved\", java.lang.Boolean.FALSE);\n    java.lang.String expr = \"${coord:dataInPartitionMax('ABC','datastamp')}\";\n    java.lang.String res = org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr);\n    junit.framework.Assert.assertTrue(res.equals(\"20\"));\n}",
        "ClassName": "TestHCatELFunctions",
        "Label": 1,
        "MethodName": "testDataInPartitionMax",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T010:00Z\");\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-11T10:00Z\");\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, startTime, endTime, false, false, 0);\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    checkCoordAction(job.getId() + \"@1\");\n}",
        "ClassName": "TestCoordMaterializeTransitionXCommand",
        "Label": 1,
        "MethodName": "testActionMater",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, start, end, false, false, 0);\n    final java.lang.String jobId = job.getId();\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetExecutor = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetExecutor = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action.getId());\n    job = jpaService.execute(coordJobGetExecutor);\n    action = jpaService.execute(coordActionGetExecutor);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.SUCCEEDED);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    java.lang.Runnable purgeRunnable = new org.apache.oozie.service.PurgeService.PurgeRunnable(1, 1, 1, 100);\n    purgeRunnable.run();\n    final org.apache.oozie.CoordinatorEngine engine = new org.apache.oozie.CoordinatorEngine(\"u\", \"a\");\n    waitFor(10000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            try {\n                engine.getCoordJob(jobId).getStatus();\n            } catch (java.lang.Exception ex) {\n                return true;\n            }\n            return false;\n        }\n    });\n    try {\n        job = jpaService.execute(coordJobGetExecutor);\n        junit.framework.Assert.fail(\"Job should be purged. Should fail.\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n    }\n    try {\n        jpaService.execute(coordActionGetExecutor);\n        junit.framework.Assert.fail(\"Action should be purged. Should fail.\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n    }\n}",
        "ClassName": "TestPurgeService",
        "Label": 1,
        "MethodName": "testPurgeServiceForCoordinator",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.BundleJobBean bundleJob = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordAction = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.BundleActionBean bundleAction = addRecordToBundleActionTable(bundleJob.getId(), coordJob.getId(), coordJob.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction.getId());\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleJob.getId());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionGetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJob.getId(), coordJob.getAppName());\n    wfJob = jpaService.execute(wfJobGetCmd);\n    wfAction = jpaService.execute(wfActionGetCmd);\n    coordJob = jpaService.execute(coordJobGetCmd);\n    coordAction = jpaService.execute(coordActionGetCmd);\n    bundleJob = jpaService.execute(bundleJobGetCmd);\n    bundleAction = jpaService.execute(bundleActionGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleAction.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(wfJob.getEndTime()), org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob.getLastModifiedTime()), 7, 10).call();\n    try {\n        jpaService.execute(bundleJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(bundleActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action should not have been purged\");\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeBundleWithCoordChildWithWFChild2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertTrue(org.apache.oozie.util.ClassUtils.findContainingJar(org.json.simple.JSONArray.class).contains(\"json-simple\"));\n}",
        "ClassName": "TestClassUtils",
        "Label": 1,
        "MethodName": "testContainingJar",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"coordinator.xml\")).close();\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-config\", createConfigFile(appPath.toString()), \"-rerun\", org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + \"0\" };\n            junit.framework.Assert.assertEquals(-1, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertNull(org.apache.oozie.servlet.MockCoordinatorEngineService.did);\n            junit.framework.Assert.assertFalse(org.apache.oozie.servlet.MockCoordinatorEngineService.started.get(1));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testCoordReRunNeg3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.XConfiguration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(org.apache.oozie.client.OozieClient.COORD_ACTION_NOTIFICATION_URL, container.getServletURL(\"/hang/*\"));\n    java.lang.String runConf = conf.toXmlString(false);\n    org.apache.oozie.CoordinatorActionBean coord = org.mockito.Mockito.mock(org.apache.oozie.CoordinatorActionBean.class);\n    org.mockito.Mockito.when(coord.getId()).thenReturn(\"1\");\n    org.mockito.Mockito.when(coord.getStatus()).thenReturn(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    org.mockito.Mockito.when(coord.getRunConf()).thenReturn(runConf);\n    org.apache.oozie.command.coord.CoordActionNotificationXCommand command = new org.apache.oozie.command.coord.CoordActionNotificationXCommand(coord);\n    command.retries = 3;\n    long start = java.lang.System.currentTimeMillis();\n    command.call();\n    long end = java.lang.System.currentTimeMillis();\n    org.junit.Assert.assertTrue((end - start) >= 50);\n    org.junit.Assert.assertTrue((end - start) <= 100);\n}",
        "ClassName": "TestCoordActionNotificationXCommand",
        "Label": 1,
        "MethodName": "testCoordNotificationTimeout",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String parentXml = \"parentXml\";\n    prepareXmlWithInclude(parentXml);\n    try {\n        org.apache.oozie.util.XConfiguration conf = new org.apache.oozie.util.XConfiguration(new java.io.FileReader(new java.io.File(getTestCaseDir(), parentXml)));\n        junit.framework.Assert.assertEquals(\"DEFAULT\", conf.get(\"oozie.dummy\"));\n        junit.framework.Assert.assertEquals(\"bar\", conf.get(\"foo\"));\n        junit.framework.Assert.assertEquals(\"def\", conf.get(\"abc\"));\n    } catch (java.io.IOException e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"XInclude failed\");\n    }\n}",
        "ClassName": "TestXConfiguration",
        "Label": 1,
        "MethodName": "testAddXIncludeFromReader",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.jms.JMSJobEventListener coordEventListener = new org.apache.oozie.jms.JMSJobEventListener();\n    coordEventListener.init(conf);\n    java.util.Date startDate = org.apache.oozie.util.DateUtils.parseDateUTC(\"2012-07-22T00:00Z\");\n    java.util.Date nominalTime = org.apache.oozie.util.DateUtils.parseDateUTC(\"2011-07-11T00:00Z\");\n    org.apache.oozie.event.CoordinatorActionEvent cae = new org.apache.oozie.event.CoordinatorActionEvent(\"caId1\", \"caJobId1\", org.apache.oozie.client.CoordinatorAction.Status.FAILED, \"user1\", \"wf-app-name1\", nominalTime, startDate, null);\n    org.apache.oozie.jms.ConnectionContext jmsContext = getConnectionContext();\n    try {\n        javax.jms.Session session = jmsContext.createSession(Session.AUTO_ACKNOWLEDGE);\n        java.lang.String selector = org.apache.oozie.client.event.jms.JMSHeaderConstants.USER + \"='user1'\";\n        javax.jms.MessageConsumer consumer = jmsContext.createConsumer(session, coordEventListener.getTopic(cae), selector);\n        coordEventListener.onCoordinatorActionEvent(cae);\n        javax.jms.TextMessage message = ((javax.jms.TextMessage) (consumer.receive(5000)));\n        org.apache.oozie.client.event.message.CoordinatorActionMessage coordActionFailMessage = org.apache.oozie.client.event.jms.JMSMessagingUtils.getEventMessage(message);\n        org.junit.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.FAILED, coordActionFailMessage.getStatus());\n        junit.framework.Assert.assertEquals(\"user1\", coordActionFailMessage.getUser());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.Event.MessageType.JOB, coordActionFailMessage.getMessageType());\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSJobEventListener",
        "Label": 1,
        "MethodName": "testCoordinatorActionSelectors",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.SchemaService wss = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.SchemaService.class);\n    javax.xml.validation.Validator validator = wss.getSchema(org.apache.oozie.service.SchemaService.SchemaName.BUNDLE).newValidator();\n    java.lang.String BUNDLE_APP = \"<bundle-app name='NAME' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns='uri:oozie:bundle:0.1'> \" + (((((\"<controls> <kick-off-time>2009-02-02T00:00Z</kick-off-time> </controls> \" + \"<coordinator name='c12'> \") + \"<app-path>hdfs://localhost:9001/tmp/bundle-apps/coordinator1.xml</app-path>\") + \"<configuration> \") + \"<property> <name>START_TIME</name> <value>2009-02-01T00:00Z</value> </property> </configuration> \") + \"</coordinator></bundle-app>\");\n    org.jdom.Element e = org.apache.oozie.util.XmlUtils.parseXml(BUNDLE_APP);\n    validator.validate(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(BUNDLE_APP)));\n}",
        "ClassName": "TestSchemaService",
        "Label": 1,
        "MethodName": "testBundleSchema",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date startTime = new java.util.Date();\n    java.util.Date endTime = new java.util.Date(startTime.getTime() + ((20 * 60) * 1000));\n    final org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, startTime, endTime, true, true, 0);\n    java.lang.String pauseTime = org.apache.oozie.command.coord.TestCoordChangeXCommand.convertDateToString(startTime.getTime() + ((10 * 60) * 1000));\n    java.lang.String newEndTime = org.apache.oozie.command.coord.TestCoordChangeXCommand.convertDateToString(startTime.getTime() + ((40 * 60) * 1000));\n    new org.apache.oozie.command.coord.CoordChangeXCommand(job.getId(), ((\"endtime=\" + newEndTime) + \";pausetime=\") + pauseTime).call();\n    try {\n        checkCoordJobs(job.getId(), org.apache.oozie.util.DateUtils.parseDateOozieTZ(newEndTime), null, org.apache.oozie.util.DateUtils.parseDateOozieTZ(pauseTime), true);\n    } catch (java.lang.Exception ex) {\n        ex.printStackTrace();\n        junit.framework.Assert.fail(\"Invalid date\" + ex);\n    }\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, coordJob.getStatus());\n    junit.framework.Assert.assertFalse(coordJob.isDoneMaterialization());\n}",
        "ClassName": "TestCoordChangeXCommand",
        "Label": 1,
        "MethodName": "testCoordChangeEndTime",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.BundleJobBean bundleJob = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false);\n    java.lang.String bundleJobId = bundleJob.getId();\n    int days = 1;\n    junit.framework.Assert.assertEquals(0, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    org.apache.oozie.CoordinatorJobBean coordJob1 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    coordJob1 = org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJob1, \"2009-12-01T01:00Z\");\n    coordJob1.setAppName(\"coord1\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob1));\n    addRecordToBundleActionTable(bundleJobId, coordJob1.getId(), coordJob1.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    days = 1;\n    junit.framework.Assert.assertEquals(0, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob1.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(1, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    org.apache.oozie.CoordinatorJobBean coordJob2 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.DONEWITHERROR, false, false);\n    coordJob2 = org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJob2, \"2009-11-01T01:00Z\");\n    coordJob2.setAppName(\"coord2\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob2));\n    addRecordToBundleActionTable(bundleJobId, coordJob2.getId(), coordJob2.getAppName(), 0, org.apache.oozie.client.Job.Status.DONEWITHERROR);\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob1.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(1, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob2.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(2, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    org.apache.oozie.CoordinatorJobBean coordJob3 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.FAILED, false, false);\n    coordJob3 = org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJob3, \"2009-10-01T01:00Z\");\n    coordJob3.setAppName(\"coord3\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob3));\n    addRecordToBundleActionTable(bundleJobId, coordJob3.getId(), coordJob3.getAppName(), 0, org.apache.oozie.client.Job.Status.FAILED);\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob2.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(2, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob3.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(3, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    org.apache.oozie.CoordinatorJobBean coordJob4 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.KILLED, false, false);\n    coordJob4 = org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJob4, \"2009-09-01T01:00Z\");\n    coordJob4.setAppName(\"coord4\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob4));\n    addRecordToBundleActionTable(bundleJobId, coordJob4.getId(), coordJob4.getAppName(), 0, org.apache.oozie.client.Job.Status.KILLED);\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob3.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(3, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob4.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(4, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    org.apache.oozie.CoordinatorJobBean coordJob5 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PAUSED, false, false);\n    coordJob5 = org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJob5, \"2009-08-01T01:00Z\");\n    coordJob5.setAppName(\"coord5\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob5));\n    addRecordToBundleActionTable(bundleJobId, coordJob5.getId(), coordJob5.getAppName(), 0, org.apache.oozie.client.Job.Status.PAUSED);\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob4.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(5, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob5.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(5, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    org.apache.oozie.CoordinatorJobBean coordJob6 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PAUSEDWITHERROR, false, false);\n    coordJob5 = org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJob6, \"2009-07-01T01:00Z\");\n    coordJob5.setAppName(\"coord6\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob6));\n    addRecordToBundleActionTable(bundleJobId, coordJob6.getId(), coordJob6.getAppName(), 0, org.apache.oozie.client.Job.Status.PAUSEDWITHERROR);\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob5.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(6, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob6.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(6, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    org.apache.oozie.CoordinatorJobBean coordJob7 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREMATER, false, false);\n    coordJob5 = org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJob7, \"2009-06-01T01:00Z\");\n    coordJob5.setAppName(\"coord7\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob6));\n    addRecordToBundleActionTable(bundleJobId, coordJob7.getId(), coordJob7.getAppName(), 0, org.apache.oozie.client.Job.Status.PREMATER);\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob6.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(7, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob7.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(7, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    org.apache.oozie.CoordinatorJobBean coordJob8 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, false, false);\n    coordJob8 = org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJob8, \"2009-05-01T01:00Z\");\n    coordJob8.setAppName(\"coord8\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob8));\n    addRecordToBundleActionTable(bundleJobId, coordJob8.getId(), coordJob8.getAppName(), 0, org.apache.oozie.client.Job.Status.PREP);\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob7.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(8, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob8.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(8, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    org.apache.oozie.CoordinatorJobBean coordJob9 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREPPAUSED, false, false);\n    coordJob9 = org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJob9, \"2009-04-01T01:00Z\");\n    coordJob9.setAppName(\"coord9\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob9));\n    addRecordToBundleActionTable(bundleJobId, coordJob9.getId(), coordJob9.getAppName(), 0, org.apache.oozie.client.Job.Status.PREPPAUSED);\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob8.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(9, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob9.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(9, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    org.apache.oozie.CoordinatorJobBean coordJob10 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREPSUSPENDED, false, false);\n    coordJob10 = org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJob10, \"2009-03-01T01:00Z\");\n    coordJob10.setAppName(\"coord10\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob10));\n    addRecordToBundleActionTable(bundleJobId, coordJob10.getId(), coordJob10.getAppName(), 0, org.apache.oozie.client.Job.Status.PREPSUSPENDED);\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob9.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(10, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob10.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(10, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    org.apache.oozie.CoordinatorJobBean coordJob11 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    coordJob11 = org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJob11, \"2009-02-01T01:00Z\");\n    coordJob11.setAppName(\"coord11\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob11));\n    addRecordToBundleActionTable(bundleJobId, coordJob11.getId(), coordJob11.getAppName(), 0, org.apache.oozie.client.Job.Status.RUNNING);\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob10.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(11, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob11.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(11, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    org.apache.oozie.CoordinatorJobBean coordJob12 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNINGWITHERROR, false, false);\n    coordJob12 = org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJob12, \"2009-01-01T01:00Z\");\n    coordJob12.setAppName(\"coord12\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob12));\n    addRecordToBundleActionTable(bundleJobId, coordJob12.getId(), coordJob12.getAppName(), 0, org.apache.oozie.client.Job.Status.RUNNINGWITHERROR);\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob11.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(12, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob12.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(12, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    org.apache.oozie.CoordinatorJobBean coordJob13 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUSPENDED, false, false);\n    coordJob13 = org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJob13, \"2008-12-01T01:00Z\");\n    coordJob13.setAppName(\"coord13\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob13));\n    addRecordToBundleActionTable(bundleJobId, coordJob13.getId(), coordJob13.getAppName(), 0, org.apache.oozie.client.Job.Status.SUSPENDED);\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob12.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(13, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob13.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(13, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    org.apache.oozie.CoordinatorJobBean coordJob14 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUSPENDEDWITHERROR, false, false);\n    coordJob14 = org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJob14, \"2008-11-01T01:00Z\");\n    coordJob14.setAppName(\"coord14\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob14));\n    addRecordToBundleActionTable(bundleJobId, coordJob14.getId(), coordJob14.getAppName(), 0, org.apache.oozie.client.Job.Status.SUSPENDEDWITHERROR);\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob13.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(14, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n    days = org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob14.getLastModifiedTime());\n    junit.framework.Assert.assertEquals(14, ((long) (jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsCountNotForPurgeFromParentIdJPAExecutor(days, bundleJobId)))));\n}",
        "ClassName": "TestCoordJobsCountNotForPurgeFromParentIdJPAExecutor",
        "Label": 1,
        "MethodName": "testCount",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v0/job/*\", org.apache.oozie.servlet.V0JobServlet.class, org.apache.oozie.servlet.TestV0JobServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_SHOW_GRAPH);\n            java.net.URL url = createURL((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + 1) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode());\n            junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0306.name(), conn.getHeaderField(org.apache.oozie.client.rest.RestConstants.OOZIE_ERROR_CODE));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV0JobServlet",
        "Label": 1,
        "MethodName": "testGraph",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"coordinator.xml\")).close();\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-rerun\", (org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END };\n            junit.framework.Assert.assertEquals(-1, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertNull(org.apache.oozie.servlet.MockCoordinatorEngineService.did);\n            junit.framework.Assert.assertFalse(org.apache.oozie.servlet.MockCoordinatorEngineService.started.get(1));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testCoordReRunNeg2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.BundleJobBean bundleJob = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordAction = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.BundleActionBean bundleAction = addRecordToBundleActionTable(bundleJob.getId(), coordJob.getId(), coordJob.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction.getId());\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleJob.getId());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionGetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJob.getId(), coordJob.getAppName());\n    wfJob = jpaService.execute(wfJobGetCmd);\n    wfAction = jpaService.execute(wfActionGetCmd);\n    coordJob = jpaService.execute(coordJobGetCmd);\n    coordAction = jpaService.execute(coordActionGetCmd);\n    bundleJob = jpaService.execute(bundleJobGetCmd);\n    bundleAction = jpaService.execute(bundleActionGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleAction.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(7, 7, 7, 10).call();\n    try {\n        jpaService.execute(bundleJobGetCmd);\n        junit.framework.Assert.fail(\"Bundle Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(bundleActionGetCmd);\n        junit.framework.Assert.fail(\"Bundle Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordJobGetCmd);\n        junit.framework.Assert.fail(\"Coordinator Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordActionGetCmd);\n        junit.framework.Assert.fail(\"Coordinator Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfJobGetCmd);\n        junit.framework.Assert.fail(\"Workflow Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfActionGetCmd);\n        junit.framework.Assert.fail(\"Workflow Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeBundleWithCoordChildWithWFChild3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = \"<coordinator-app name=\\\"NAME\\\" frequency=\\\"10\\\" start=\\\"2009-02-01T01:00Z\\\" end=\\\"2009-02-03T23:59Z\\\" timezone=\\\"UTC\\\" \" + (((((((((((((\"xmlns=\\\"uri:oozie:coordinator:0.2\\\"> <controls> <timeout>10</timeout> <concurrency>2</concurrency> \" + \"<execution>LIFO</execution> </controls> <datasets> \") + \"<dataset name=\\\"a\\\" frequency=\\\"60\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"<dataset name=\\\"local_a\\\" frequency=\\\"120\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"</datasets> <input-events> \") + \"<data-in name=\\\"A\\\" dataset=\\\"a\\\"> <instance>${coord:latest(0)}</instance> </data-in>  \") + \"</input-events> \") + \"<output-events> <data-out name=\\\"LOCAL_A\\\" dataset=\\\"local_a\\\"> \") + \"<instance>${coord:current(-1)}</instance> </data-out> </output-events> <action> <workflow> <app-path>hdfs:///tmp/workflows/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>${coord:dataIn('A')}</value> </property> \") + \"<property> <name>inputB</name> <value>${coord:dataOut('LOCAL_A')}</value> \") + \"</property></configuration> </workflow> </action> </coordinator-app>\");\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    java.lang.String jobId = sc.call();\n    junit.framework.Assert.assertEquals(jobId.substring(jobId.length() - 2), \"-C\");\n    checkCoordJobs(jobId);\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testSubmitFixedValues",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testError(\"end.error\", \"ok\", \"OK\");\n    junit.framework.Assert.assertTrue(true);\n}",
        "ClassName": "TestActionErrors",
        "Label": 1,
        "MethodName": "testEndError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:00Z\");\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:14Z\");\n    java.util.Date pauseTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:04Z\");\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, startTime, endTime, pauseTime);\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    checkCoordActions(job.getId(), 1, null);\n}",
        "ClassName": "TestCoordMaterializeTransitionXCommand",
        "Label": 1,
        "MethodName": "testActionMaterWithPauseTime1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    java.lang.String errorCode = \"000\";\n    java.lang.String errorMessage = \"Dummy\";\n    java.lang.String resourceXmlName = \"coord-action-get.xml\";\n    java.lang.String consoleUrl = \"consoleUrl\";\n    java.lang.String externalStatus = \"externalStatus\";\n    java.lang.String trackerUri = \"trackerUri\";\n    java.lang.String missingDeps = \"missingDeps\";\n    java.lang.String slaXml = \"slaXml\";\n    java.util.Date createdTime = new java.util.Date();\n    java.util.Date lastModifiedTime = new java.util.Date();\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = createCoordAction(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.WAITING, resourceXmlName, 0);\n    action.setErrorCode(errorCode);\n    action.setErrorMessage(errorMessage);\n    action.setConsoleUrl(consoleUrl);\n    action.setExternalStatus(externalStatus);\n    action.setTrackerUri(trackerUri);\n    action.setCreatedTime(createdTime);\n    action.setMissingDependencies(missingDeps);\n    action.setLastModifiedTime(lastModifiedTime);\n    action.setSlaXml(slaXml);\n    insertRecordCoordAction(action);\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"coord\");\n    java.lang.String actionXml = getCoordActionXml(appPath, resourceXmlName);\n    java.lang.String actionNominalTime = getActionNominalTime(actionXml);\n    _testGetForInfo(action.getId(), job.getId(), org.apache.oozie.client.CoordinatorAction.Status.WAITING, action.getId() + \"_E\", errorCode, errorMessage, consoleUrl, externalStatus, trackerUri, createdTime, missingDeps, org.apache.oozie.util.DateUtils.parseDateOozieTZ(actionNominalTime), actionNum, lastModifiedTime);\n}",
        "ClassName": "TestCoordActionGetForInfoJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false);\n    this.addRecordToBundleActionTable(job.getId(), \"action1\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    this.addRecordToBundleActionTable(job.getId(), \"action2\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    addRecordToCoordJobTable(\"action1\", org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    addRecordToCoordJobTable(\"action2\", org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, job.getStatus());\n    new org.apache.oozie.command.bundle.BundleRerunXCommand(job.getId(), \"action1\", null, false, true).call();\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, job.getStatus());\n}",
        "ClassName": "TestBundleRerunXCommand",
        "Label": 1,
        "MethodName": "testBundleRerun2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.DONEWITHERROR, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    this.addRecordToBundleActionTable(job.getId(), \"action1\", 0, org.apache.oozie.client.Job.Status.FAILED);\n    this.addRecordToBundleActionTable(job.getId(), \"action2\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.DONEWITHERROR, job.getStatus());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionGetExecutor1 = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(job.getId(), \"action1\");\n    org.apache.oozie.BundleActionBean action1 = jpaService.execute(bundleActionGetExecutor1);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.FAILED, action1.getStatus());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionGetExecutor2 = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(job.getId(), \"action2\");\n    org.apache.oozie.BundleActionBean action2 = jpaService.execute(bundleActionGetExecutor2);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, action2.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(1, 1, 7, 10).call();\n    try {\n        jpaService.execute(bundleJobGetExecutor);\n        junit.framework.Assert.fail(\"Bundle Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(bundleActionGetExecutor1);\n        junit.framework.Assert.fail(\"Bundle Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(bundleActionGetExecutor2);\n        junit.framework.Assert.fail(\"Bundle Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testFailBundlePurgeXCommand",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(org.apache.oozie.dependency.DependencyChecker.class);\n    java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream();\n    org.apache.log4j.Layout layout = new org.apache.log4j.SimpleLayout();\n    org.apache.log4j.Appender appender = new org.apache.log4j.WriterAppender(layout, out);\n    logger.addAppender(appender);\n    java.lang.String db = \"default\";\n    java.lang.String table = \"tablename\";\n    populateTable(db, table);\n    java.lang.String newHCatDependency = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=brazil\";\n    java.lang.String actionId1 = addInitRecords(newHCatDependency);\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId1).call();\n    junit.framework.Assert.assertTrue(out.toString().contains((\"ACTION[\" + actionId1) + \"]\"));\n    out.reset();\n    java.lang.String actionId2 = addInitRecords(newHCatDependency);\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId2).call();\n    junit.framework.Assert.assertFalse(out.toString().contains((\"ACTION[\" + actionId1) + \"]\"));\n    junit.framework.Assert.assertTrue(out.toString().contains((\"ACTION[\" + actionId2) + \"]\"));\n}",
        "ClassName": "TestCoordPushDependencyCheckXCommand",
        "Label": 1,
        "MethodName": "testLogMessagePrefix",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testError(\"start.error\", \"error\", \"based_on_action_status\");\n    junit.framework.Assert.assertTrue(true);\n}",
        "ClassName": "TestActionErrors",
        "Label": 1,
        "MethodName": "testStartError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services serv = org.apache.oozie.service.Services.get();\n    boolean originalUberJarDisabled = serv.getConf().getBoolean(\"oozie.action.mapreduce.uber.jar.enable\", false);\n    try {\n        serv.getConf().setBoolean(\"oozie.action.mapreduce.uber.jar.enable\", false);\n        _testMapReduceWithUberJar();\n    } catch (org.apache.oozie.action.ActionExecutorException aee) {\n        junit.framework.Assert.assertEquals(\"MR003\", aee.getErrorCode());\n        junit.framework.Assert.assertEquals(org.apache.oozie.action.ActionExecutorException.ErrorType.ERROR, aee.getErrorType());\n        junit.framework.Assert.assertTrue(aee.getMessage().contains(\"oozie.action.mapreduce.uber.jar.enable\"));\n        junit.framework.Assert.assertTrue(aee.getMessage().contains(\"oozie.mapreduce.uber.jar\"));\n    } catch (java.lang.Exception e) {\n        throw e;\n    } finally {\n        serv.getConf().setBoolean(\"oozie.action.mapreduce.uber.jar.enable\", originalUberJarDisabled);\n    }\n}",
        "ClassName": "TestMapReduceActionExecutor",
        "Label": 1,
        "MethodName": "testMapReduceWithUberJarDisabled",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-data\");\n    java.lang.String expr = \"${coord:dateOffset(\\\"2009-09-08T23:59Z\\\", 2, \\\"DAY\\\")}\";\n    init(\"coord-action-start\");\n    expr = \"${coord:dateOffset(\\\"2009-09-08T23:59Z\\\", 2, \\\"DAY\\\")}\";\n    junit.framework.Assert.assertEquals(\"2009-09-10T23:59Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:dateOffset(\\\"2009-09-08T23:59Z\\\", -1, \\\"DAY\\\")}\";\n    junit.framework.Assert.assertEquals(\"2009-09-07T23:59Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:dateOffset(\\\"2009-09-08T23:59Z\\\", 1, \\\"YEAR\\\")}\";\n    junit.framework.Assert.assertEquals(\"2010-09-08T23:59Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testDateOffset",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.XConfiguration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(\"a\", \" A \");\n    conf.set(\"b\", \"B\");\n    conf = conf.trim();\n    junit.framework.Assert.assertEquals(\"A\", conf.get(\"a\"));\n    junit.framework.Assert.assertEquals(\"B\", conf.get(\"b\"));\n}",
        "ClassName": "TestXConfiguration",
        "Label": 1,
        "MethodName": "testTrim",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean action1 = addRecordToCoordActionTable(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-for-action-input-check.xml\", 0);\n    _testGetActionsSubsetOrderBy(job.getId(), 2, 1, 2);\n}",
        "ClassName": "TestCoordJobGetActionsSubsetJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionOrderBy",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"coord-dataset-initial-instance.xml\", -1);\n    java.io.Writer writer = new java.io.FileWriter(new java.net.URI(appPath).getPath());\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    try {\n        sc.call();\n        junit.framework.Assert.fail(\"Expected to catch errors due to invalid dataset initial instance\");\n    } catch (org.apache.oozie.command.CommandException cx) {\n        junit.framework.Assert.assertEquals(sc.getJob().getStatus(), org.apache.oozie.client.Job.Status.FAILED);\n        junit.framework.Assert.assertEquals(cx.getErrorCode(), org.apache.oozie.ErrorCode.E1021);\n        if (!cx.getMessage().contains(\"earlier than the default initial instance\")) {\n            junit.framework.Assert.fail(\"Unexpected failure - \" + cx.getMessage());\n        }\n    }\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testSubmitDatasetInitialInstance",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-12-15T01:00Z\");\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-12-16T01:00Z\");\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, false, false, 1);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUBMITTED, \"coord-action-start-escape-strings.xml\", 0);\n    java.lang.String actionId = action.getId();\n    new org.apache.oozie.command.coord.CoordActionStartXCommand(actionId, org.apache.oozie.test.XTestCase.getTestUser(), \"myapp\", \"undef\", \"myjob\").call();\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(actionId));\n    if (action.getStatus() == org.apache.oozie.client.CoordinatorAction.Status.SUBMITTED) {\n        junit.framework.Assert.fail((((\"CoordActionStartCommand didn't work because the status for action id\" + actionId) + \" is :\") + action.getStatus()) + \" expected to be NOT SUBMITTED (i.e. RUNNING)\");\n    }\n    final java.lang.String wfId = action.getExternalId();\n    waitFor(3000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            java.util.List<org.apache.oozie.WorkflowActionBean> wfActions = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionsGetForJobJPAExecutor(wfId));\n            return wfActions.size() > 0;\n        }\n    });\n    java.util.List<org.apache.oozie.WorkflowActionBean> wfActions = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionsGetForJobJPAExecutor(wfId));\n    junit.framework.Assert.assertTrue(wfActions.size() > 0);\n    final java.lang.String wfActionId = wfActions.get(0).getId();\n    waitFor(20 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.WorkflowActionBean wfAction = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfActionId));\n            return wfAction.getExternalId() != null;\n        }\n    });\n    org.apache.oozie.WorkflowActionBean wfAction = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfActionId));\n    junit.framework.Assert.assertNotNull(wfAction.getExternalId());\n}",
        "ClassName": "TestCoordActionStartXCommand",
        "Label": 1,
        "MethodName": "testActionStartWithEscapeStrings",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.JavaActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor() {\n        @java.lang.Override\n        protected java.lang.String getDefaultShareLibName(org.jdom.Element actionXml) {\n            return \"java-action-executor\";\n        }\n    };\n    java.lang.String actionXml = (((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<main-class>\") + org.apache.oozie.action.hadoop.LauncherMainTester.class.getName()) + \"</main-class>\") + \"</java>\";\n    org.jdom.Element eActionXml = org.apache.oozie.util.XmlUtils.parseXml(actionXml);\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml, null);\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.WorkflowAppService.SYSTEM_LIB_PATH, (\"/user/\" + org.apache.oozie.test.XTestCase.getOozieUser()) + \"/share/\");\n    new org.apache.oozie.service.Services().init();\n    org.apache.hadoop.fs.Path appPath = getAppPath();\n    org.apache.hadoop.mapred.JobConf conf = ae.createBaseHadoopConf(context, eActionXml);\n    ae.addShareLib(appPath, conf, new java.lang.String[]{ \"java-action-executor\" });\n    appPath = new org.apache.hadoop.fs.Path(\"foo://bar:1234/blah\");\n    conf = ae.createBaseHadoopConf(context, eActionXml);\n    try {\n        ae.addShareLib(appPath, conf, new java.lang.String[]{ \"java-action-executor\" });\n    } catch (org.apache.oozie.action.ActionExecutorException aee) {\n        junit.framework.Assert.assertEquals(\"E0902\", aee.getErrorCode());\n        junit.framework.Assert.assertTrue(aee.getMessage().contains(\"[No FileSystem for scheme: foo]\"));\n    }\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.WorkflowAppService.SYSTEM_LIB_PATH, ((getNameNodeUri() + \"/user/\") + org.apache.oozie.test.XTestCase.getOozieUser()) + \"/share/\");\n    new org.apache.oozie.service.Services().init();\n    appPath = new org.apache.hadoop.fs.Path(\"foo://bar:1234/blah\");\n    conf = ae.createBaseHadoopConf(context, eActionXml);\n    ae.addShareLib(appPath, conf, new java.lang.String[]{ \"java-action-executor\" });\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testAddShareLibSchemeAndAuthority",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/admin/*\", org.apache.oozie.servlet.V1AdminServlet.class, org.apache.oozie.servlet.TestV1AdminServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.net.URL url = createURL(org.apache.oozie.client.rest.RestConstants.ADMIN_CONFIG_RESOURCE, java.util.Collections.EMPTY_MAP);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertTrue(json.containsKey(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1AdminServlet",
        "Label": 1,
        "MethodName": "testConfiguration",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-data\");\n    java.lang.String expr = \"${coord:nominalTime()}\";\n    init(\"coord-action-start\");\n    expr = \"${coord:nominalTime()}\";\n    junit.framework.Assert.assertEquals(\"2009-09-09T23:59Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testNominalTime",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.SchemaService wss = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.SchemaService.class);\n    javax.xml.validation.Validator validator = wss.getSchema(org.apache.oozie.service.SchemaService.SchemaName.WORKFLOW).newValidator();\n    validator.validate(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(org.apache.oozie.service.TestSchemaService.APP1)));\n}",
        "ClassName": "TestSchemaService",
        "Label": 1,
        "MethodName": "testWfSchema",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.TestXLog.TestLog log = new org.apache.oozie.util.TestXLog.TestLog();\n    org.apache.oozie.util.TestXLog.TestLog ops = new org.apache.oozie.util.TestXLog.TestLog();\n    org.apache.oozie.util.XLog xLog = new org.apache.oozie.util.XLog(log);\n    junit.framework.Assert.assertEquals(\"\", xLog.getMsgPrefix());\n    xLog.setMsgPrefix(\"prefix\");\n    junit.framework.Assert.assertEquals(\"prefix\", xLog.getMsgPrefix());\n    xLog.setMsgPrefix(null);\n    xLog.loggers[1] = ops;\n    log.setLevel(SimpleLog.LOG_LEVEL_OFF);\n    ops.setLevel(SimpleLog.LOG_LEVEL_OFF);\n    junit.framework.Assert.assertFalse(xLog.isDebugEnabled());\n    junit.framework.Assert.assertFalse(xLog.isErrorEnabled());\n    junit.framework.Assert.assertFalse(xLog.isFatalEnabled());\n    junit.framework.Assert.assertFalse(xLog.isInfoEnabled());\n    junit.framework.Assert.assertFalse(xLog.isWarnEnabled());\n    junit.framework.Assert.assertFalse(xLog.isTraceEnabled());\n    log.setLevel(SimpleLog.LOG_LEVEL_ALL);\n    ops.setLevel(SimpleLog.LOG_LEVEL_OFF);\n    junit.framework.Assert.assertTrue(xLog.isDebugEnabled());\n    junit.framework.Assert.assertTrue(xLog.isErrorEnabled());\n    junit.framework.Assert.assertTrue(xLog.isFatalEnabled());\n    junit.framework.Assert.assertTrue(xLog.isInfoEnabled());\n    junit.framework.Assert.assertTrue(xLog.isWarnEnabled());\n    junit.framework.Assert.assertTrue(xLog.isTraceEnabled());\n    log.setLevel(SimpleLog.LOG_LEVEL_OFF);\n    ops.setLevel(SimpleLog.LOG_LEVEL_ALL);\n    junit.framework.Assert.assertTrue(xLog.isDebugEnabled());\n    junit.framework.Assert.assertTrue(xLog.isErrorEnabled());\n    junit.framework.Assert.assertTrue(xLog.isFatalEnabled());\n    junit.framework.Assert.assertTrue(xLog.isInfoEnabled());\n    junit.framework.Assert.assertTrue(xLog.isWarnEnabled());\n    junit.framework.Assert.assertTrue(xLog.isTraceEnabled());\n    log.setLevel(SimpleLog.LOG_LEVEL_ALL);\n    ops.setLevel(SimpleLog.LOG_LEVEL_ALL);\n    junit.framework.Assert.assertTrue(xLog.isDebugEnabled());\n    junit.framework.Assert.assertTrue(xLog.isErrorEnabled());\n    junit.framework.Assert.assertTrue(xLog.isFatalEnabled());\n    junit.framework.Assert.assertTrue(xLog.isInfoEnabled());\n    junit.framework.Assert.assertTrue(xLog.isWarnEnabled());\n    junit.framework.Assert.assertTrue(xLog.isTraceEnabled());\n    log.setLevel(SimpleLog.LOG_LEVEL_OFF);\n    ops.setLevel(SimpleLog.LOG_LEVEL_OFF);\n    log.resetMessage();\n    xLog.debug(\"\");\n    junit.framework.Assert.assertNull(log.getMessage());\n    xLog.error(\"\");\n    junit.framework.Assert.assertNull(log.getMessage());\n    xLog.fatal(\"\");\n    junit.framework.Assert.assertNull(log.getMessage());\n    xLog.info(\"\");\n    junit.framework.Assert.assertNull(log.getMessage());\n    xLog.warn(\"\");\n    junit.framework.Assert.assertNull(log.getMessage());\n    xLog.trace(\"\");\n    junit.framework.Assert.assertNull(log.getMessage());\n    log.setLevel(SimpleLog.LOG_LEVEL_ALL);\n    ops.setLevel(SimpleLog.LOG_LEVEL_OFF);\n    log.resetMessage();\n    ops.resetMessage();\n    xLog.debug(\"debug\");\n    junit.framework.Assert.assertTrue(log.getMessage().endsWith(\"debug\"));\n    junit.framework.Assert.assertNull(ops.getMessage());\n    xLog.error(\"error\");\n    junit.framework.Assert.assertTrue(log.getMessage().endsWith(\"error\"));\n    junit.framework.Assert.assertNull(ops.getMessage());\n    xLog.fatal(\"fatal\");\n    junit.framework.Assert.assertTrue(log.getMessage().endsWith(\"fatal\"));\n    junit.framework.Assert.assertNull(ops.getMessage());\n    xLog.info(\"info\");\n    junit.framework.Assert.assertTrue(log.getMessage().endsWith(\"info\"));\n    junit.framework.Assert.assertNull(ops.getMessage());\n    xLog.warn(\"warn\");\n    junit.framework.Assert.assertTrue(log.getMessage().endsWith(\"warn\"));\n    junit.framework.Assert.assertNull(ops.getMessage());\n    xLog.trace(\"trace\");\n    junit.framework.Assert.assertTrue(log.getMessage().endsWith(\"trace\"));\n    junit.framework.Assert.assertNull(ops.getMessage());\n    log.setLevel(SimpleLog.LOG_LEVEL_ALL);\n    ops.setLevel(SimpleLog.LOG_LEVEL_ALL);\n    log.resetMessage();\n    ops.resetMessage();\n    xLog.debug(\"debug\");\n    junit.framework.Assert.assertTrue(log.getMessage().endsWith(\"debug\"));\n    junit.framework.Assert.assertNull(ops.getMessage());\n    log.setLevel(SimpleLog.LOG_LEVEL_ALL);\n    ops.setLevel(SimpleLog.LOG_LEVEL_ALL);\n    log.resetMessage();\n    ops.resetMessage();\n    xLog.debug(\"debug\");\n    junit.framework.Assert.assertTrue(log.getMessage().endsWith(\"debug\"));\n    junit.framework.Assert.assertNull(ops.getMessage());\n    log.setLevel(SimpleLog.LOG_LEVEL_ALL);\n    ops.setLevel(SimpleLog.LOG_LEVEL_ALL);\n    log.resetMessage();\n    ops.resetMessage();\n    xLog.debug(org.apache.oozie.util.XLog.OPS, \"debug\");\n    junit.framework.Assert.assertTrue(log.getMessage().endsWith(\"debug\"));\n    junit.framework.Assert.assertTrue(ops.getMessage().endsWith(\"debug\"));\n    log.setLevel(SimpleLog.LOG_LEVEL_ALL);\n    ops.setLevel(SimpleLog.LOG_LEVEL_ALL);\n    log.resetMessage();\n    ops.resetMessage();\n    xLog.debug(org.apache.oozie.util.XLog.OPS, \"debug {0}\", \"debug\");\n    junit.framework.Assert.assertTrue(log.getMessage().endsWith(\"debug debug\"));\n    junit.framework.Assert.assertTrue(ops.getMessage().endsWith(\"debug debug\"));\n    junit.framework.Assert.assertNull(org.apache.oozie.util.XLog.getCause(\"a\", \"b\"));\n    junit.framework.Assert.assertNotNull(org.apache.oozie.util.XLog.getCause(\"a\", \"b\", new java.lang.Exception()));\n}",
        "ClassName": "TestXLog",
        "Label": 1,
        "MethodName": "testXLogFunctionality",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_STATES_WITHOUT_ERROR, \"false\");\n    services = new org.apache.oozie.service.Services();\n    setClassesToBeExcluded(services.getConf(), excludedServices);\n    services.init();\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, true, false, 3);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.KILLED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    final java.lang.String jobId = job.getId();\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(jobId));\n            return coordJob.isPending() == false;\n        }\n    });\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertFalse(job.isPending());\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNINGWITHERROR);\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServiceRunning3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"sla\", \"-oozie\", oozieUrl, \"-len\", \"1\" };\n            junit.framework.Assert.assertEquals(-1, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testSlaEvents",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T01:00Z\");\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-03T23:59Z\");\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, startTime, endTime, false, false, 0);\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    checkCoordWaiting(job.getId(), job.getMatThrottling());\n}",
        "ClassName": "TestCoordMaterializeTransitionXCommand",
        "Label": 1,
        "MethodName": "testMatThrottle",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String newHCatDependency = \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=12;region=us\";\n    org.apache.oozie.util.HCatURI hcatUri = new org.apache.oozie.util.HCatURI(newHCatDependency);\n    java.lang.String actionId = addInitRecords(newHCatDependency);\n    checkCoordAction(actionId, newHCatDependency, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    org.apache.oozie.service.PartitionDependencyManagerService pdms = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.PartitionDependencyManagerService.class);\n    pdms.addMissingDependency(hcatUri, actionId);\n    pdms.partitionAvailable(\"hcat.server.com:5080\", \"mydb\", \"clicks\", getPartitionMap(\"src=search;datastamp=12;region=us\"));\n    java.util.Collection<java.lang.String> availableURIs = pdms.getAvailableDependencyURIs(actionId);\n    junit.framework.Assert.assertEquals(availableURIs.size(), 1);\n    junit.framework.Assert.assertTrue(availableURIs.contains(newHCatDependency));\n    new org.apache.oozie.command.coord.CoordActionUpdatePushMissingDependency(actionId).call();\n    checkCoordAction(actionId, \"\", org.apache.oozie.client.CoordinatorAction.Status.READY);\n    junit.framework.Assert.assertNull(pdms.getAvailableDependencyURIs(actionId));\n}",
        "ClassName": "TestCoordActionUpdatePushMissingDependency",
        "Label": 1,
        "MethodName": "testUpdateCoordTableBasic",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        services.destroy();\n        services = setupServicesForTopic();\n        services.getConf().set(org.apache.oozie.service.JMSTopicService.TOPIC_NAME, ((\"InvalidJobType\" + \" = workflow,\") + org.apache.oozie.service.JMSTopicService.JobType.COORDINATOR.getValue()) + \"=coord\");\n        services.init();\n        junit.framework.Assert.fail(\"Expected Service Exception\");\n    } catch (org.apache.oozie.service.ServiceException se) {\n        junit.framework.Assert.assertTrue(se.getMessage().contains(\"Incorrect job type\"));\n    }\n}",
        "ClassName": "TestJMSTopicService",
        "Label": 1,
        "MethodName": "testIncorrectConfigurationJobType",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_COORD_STATUS, \"true\");\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T01:00Z\");\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-02T23:59Z\");\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUSPENDED, start, end, false, true, 3);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    coordJob.setAppNamespace(org.apache.oozie.service.SchemaService.COORDINATOR_NAMESPACE_URI_1);\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob));\n    org.apache.oozie.CoordinatorActionBean action1 = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.FAILED, \"coord-rerun-action1.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean action2 = addRecordToCoordActionTable(coordJob.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean action3 = addRecordToCoordActionTable(coordJob.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\", 0);\n    java.lang.String rerunScope = (java.lang.Integer.toString(1) + \"-\") + java.lang.Integer.toString(2);\n    final org.apache.oozie.client.OozieClient coordClient = org.apache.oozie.local.LocalOozie.getCoordClient();\n    coordClient.reRunCoord(coordJob.getId(), org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_ACTION, rerunScope, false, true);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    coordJob = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDED, coordJob.getStatus());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action1.getId());\n    action1 = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertNotSame(action1.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.FAILED);\n    coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action2.getId());\n    action2 = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertNotSame(action2.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunForBackwardSupport2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.BundleJobBean bundleJobBean = xDataTestCase.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    runTest(\"/v1/jobs\", org.apache.oozie.servlet.V1JobsServlet.class, org.apache.oozie.TestV1JobsServletBundleEngine.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOBTYPE_PARAM, \"bundle\");\n            params.put(org.apache.oozie.client.rest.RestConstants.JOBS_FILTER_PARAM, (((((org.apache.oozie.client.OozieClient.FILTER_STATUS + \"=PREP;\") + org.apache.oozie.client.OozieClient.FILTER_NAME) + \"=BUNDLE-TEST;\") + org.apache.oozie.client.OozieClient.FILTER_USER) + \"=\") + org.apache.oozie.test.XTestCase.getTestUser());\n            java.net.URL url = createURL(\"\", params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals(java.lang.Long.valueOf(1L), json.get(\"total\"));\n            org.json.simple.JSONArray array = ((org.json.simple.JSONArray) (json.get(\"bundlejobs\")));\n            org.json.simple.JSONObject jo = ((org.json.simple.JSONObject) (array.get(0)));\n            junit.framework.Assert.assertEquals(bundleJobBean.getId(), jo.get(\"bundleJobId\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1JobsServletBundleEngine",
        "Label": 1,
        "MethodName": "testGetBundleJobs",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/job/*\", org.apache.oozie.servlet.V1JobServlet.class, org.apache.oozie.servlet.TestV1JobServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockCoordinatorEngineService.reset();\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ACTION_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_ACTION_CHANGE);\n            java.lang.String changeValue = \"endtime=2011-12-01T05:00Z\";\n            params.put(org.apache.oozie.client.rest.RestConstants.JOB_CHANGE_VALUE, changeValue);\n            java.net.URL url = createURL(org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + 1, params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"PUT\");\n            conn.setRequestProperty(\"content-type\", org.apache.oozie.client.rest.RestConstants.XML_CONTENT_TYPE);\n            conn.setDoOutput(true);\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_CHANGE, org.apache.oozie.servlet.MockCoordinatorEngineService.did);\n            org.apache.oozie.servlet.MockCoordinatorEngineService.reset();\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ACTION_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_ACTION_CHANGE);\n            changeValue = \"concurrency=200\";\n            params.put(org.apache.oozie.client.rest.RestConstants.JOB_CHANGE_VALUE, changeValue);\n            url = createURL(org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + 1, params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"PUT\");\n            conn.setRequestProperty(\"content-type\", org.apache.oozie.client.rest.RestConstants.XML_CONTENT_TYPE);\n            conn.setDoOutput(true);\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_CHANGE, org.apache.oozie.servlet.MockCoordinatorEngineService.did);\n            org.apache.oozie.servlet.MockCoordinatorEngineService.reset();\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ACTION_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_ACTION_CHANGE);\n            changeValue = \"endtime=2011-12-01T05:00Z;concurrency=200\";\n            params.put(org.apache.oozie.client.rest.RestConstants.JOB_CHANGE_VALUE, changeValue);\n            url = createURL(org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + 1, params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"PUT\");\n            conn.setRequestProperty(\"content-type\", org.apache.oozie.client.rest.RestConstants.XML_CONTENT_TYPE);\n            conn.setDoOutput(true);\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_CHANGE, org.apache.oozie.servlet.MockCoordinatorEngineService.did);\n            org.apache.oozie.servlet.MockCoordinatorEngineService.reset();\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ACTION_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_ACTION_CHANGE);\n            changeValue = \"endtime=2011-12-01T05:00\";\n            params.put(org.apache.oozie.client.rest.RestConstants.JOB_CHANGE_VALUE, changeValue);\n            url = createURL(org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + (org.apache.oozie.servlet.MockCoordinatorEngineService.coordJobs.size() + 1), params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"PUT\");\n            conn.setRequestProperty(\"content-type\", org.apache.oozie.client.rest.RestConstants.XML_CONTENT_TYPE);\n            conn.setDoOutput(true);\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode());\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_CHANGE, org.apache.oozie.servlet.MockCoordinatorEngineService.did);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1JobServlet",
        "Label": 1,
        "MethodName": "testCoordChange",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTableForWaiting(\"coord-job-for-matd-hcat.xml\", org.apache.oozie.client.Job.Status.RUNNING, false, true);\n        org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"coord\");\n        java.lang.String actionXml = getCoordActionXml(appPath, \"coord-action-for-action-input-check.xml\");\n        org.apache.oozie.CoordinatorActionBean actionBean = createCoordinatorActionBean(job);\n        java.lang.String testDir = getTestCaseDir();\n        java.lang.String missDeps = getPullMissingDependencies(testDir);\n        actionBean.setMissingDependencies(missDeps);\n        java.lang.String db = \"default\";\n        java.lang.String table = \"tablename\";\n        java.lang.String hcatDependency = getPushMissingDependencies(db, table);\n        actionBean.setPushMissingDependencies(hcatDependency);\n        createDir(getTestCaseDir() + \"/2009/29/\");\n        createDir(getTestCaseDir() + \"/2009/22/\");\n        createDir(getTestCaseDir() + \"/2009/15/\");\n        createDir(getTestCaseDir() + \"/2009/08/\");\n        sleep(1000);\n        org.jdom.Element eAction = createActionElement(actionXml);\n        java.lang.String newactionXml = org.apache.oozie.command.coord.CoordCommandUtils.dryRunCoord(eAction, actionBean);\n        eAction = org.apache.oozie.util.XmlUtils.parseXml(newactionXml);\n        org.jdom.Element configElem = eAction.getChild(\"action\", eAction.getNamespace()).getChild(\"workflow\", eAction.getNamespace()).getChild(\"configuration\", eAction.getNamespace());\n        java.util.List<?> elementList = configElem.getChildren(\"property\", configElem.getNamespace());\n        org.jdom.Element e1 = ((org.jdom.Element) (elementList.get(0)));\n        org.jdom.Element e2 = ((org.jdom.Element) (elementList.get(1)));\n        junit.framework.Assert.assertEquals(\"${coord:dataIn('A')}\", e1.getChild(\"value\", e1.getNamespace()).getValue());\n        junit.framework.Assert.assertEquals(\"${coord:dataOut('LOCAL_A')}\", e2.getChild(\"value\", e2.getNamespace()).getValue());\n        populateTable(db, table);\n        newactionXml = org.apache.oozie.command.coord.CoordCommandUtils.dryRunCoord(eAction, actionBean);\n        eAction = org.apache.oozie.util.XmlUtils.parseXml(newactionXml);\n        configElem = eAction.getChild(\"action\", eAction.getNamespace()).getChild(\"workflow\", eAction.getNamespace()).getChild(\"configuration\", eAction.getNamespace());\n        elementList = configElem.getChildren(\"property\", configElem.getNamespace());\n        e1 = ((org.jdom.Element) (elementList.get(0)));\n        e2 = ((org.jdom.Element) (elementList.get(1)));\n        junit.framework.Assert.assertEquals(\"file://,testDir/2009/29,file://,testDir/2009/22,file://,testDir/2009/15,file://,testDir/2009/08\", e1.getChild(\"value\", e1.getNamespace()).getValue());\n        junit.framework.Assert.assertEquals(\"file://,testDir/2009/29\", e2.getChild(\"value\", e1.getNamespace()).getValue());\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestCoordCommandUtils",
        "Label": 1,
        "MethodName": "testDryRunPullAndPushDeps",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            java.io.PrintStream oldStream = java.lang.System.out;\n            java.io.ByteArrayOutputStream data = new java.io.ByteArrayOutputStream();\n            java.lang.System.setOut(new java.io.PrintStream(data));\n            try {\n                wc.getSlaInfo(0, 10, null);\n            } finally {\n                java.lang.System.setOut(oldStream);\n            }\n            junit.framework.Assert.assertTrue(data.toString().contains(\"<sla-message>\"));\n            junit.framework.Assert.assertTrue(data.toString().contains(\"<last-sequence-id>0</last-sequence-id>\"));\n            junit.framework.Assert.assertTrue(data.toString().contains(\"</sla-message>\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testSla",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n    fs.mkdirs(appPath);\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-suspendpoints.xml\", -1);\n    java.io.Writer writer = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\")));\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    writer.close();\n    reader.close();\n    final org.apache.oozie.client.OozieClient oc = org.apache.oozie.local.LocalOozie.getClient();\n    java.util.Properties conf = oc.createConfiguration();\n    conf.setProperty(org.apache.oozie.client.OozieClient.APP_PATH, (appPath.toString() + java.io.File.separator) + \"workflow.xml\");\n    conf.setProperty(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.setProperty(\"oozie.suspend.on.nodes\", \"action1,nonexistant_action_name,decision1, action3,join1 ,fork1,action4b\");\n    final java.lang.String jobId = oc.submit(conf);\n    junit.framework.Assert.assertNotNull(jobId);\n    org.apache.oozie.client.WorkflowJob wf = oc.getJobInfo(jobId);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.PREP, wf.getStatus());\n    oc.start(jobId);\n    checkSuspendActions(wf, oc, jobId, org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, new java.lang.String[]{ \"action1\" }, new java.lang.String[]{ \":start:\" });\n    oc.resume(jobId);\n    checkSuspendActions(wf, oc, jobId, org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, new java.lang.String[]{ \"decision1\" }, new java.lang.String[]{ \":start:\", \"action1\", \"action2\" });\n    oc.resume(jobId);\n    checkSuspendActions(wf, oc, jobId, org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, new java.lang.String[]{ \"action3\" }, new java.lang.String[]{ \":start:\", \"action1\", \"action2\", \"decision1\" });\n    oc.resume(jobId);\n    checkSuspendActions(wf, oc, jobId, org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, new java.lang.String[]{ \"fork1\" }, new java.lang.String[]{ \":start:\", \"action1\", \"action2\", \"decision1\", \"action3\" });\n    oc.resume(jobId);\n    checkSuspendActions(wf, oc, jobId, org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, new java.lang.String[]{ \"action4a\", \"action4b\", \"action4c\" }, new java.lang.String[]{ \":start:\", \"action1\", \"action2\", \"decision1\", \"action3\", \"fork1\" });\n    oc.resume(jobId);\n    checkSuspendActions(wf, oc, jobId, org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, new java.lang.String[]{ \"join1\" }, new java.lang.String[]{ \":start:\", \"action1\", \"action2\", \"decision1\", \"action3\", \"fork1\", \"action4a\", \"action4b\", \"action4c\" });\n    oc.resume(jobId);\n    checkSuspendActions(wf, oc, jobId, org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, new java.lang.String[]{  }, new java.lang.String[]{ \":start:\", \"action1\", \"action2\", \"decision1\", \"action3\", \"fork1\", \"action4a\", \"action4b\", \"action4c\", \"join1\", \"end\" });\n}",
        "ClassName": "TestSignalXCommand",
        "Label": 1,
        "MethodName": "testSuspendPoints",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date start = new java.util.Date();\n    java.util.Date end = new java.util.Date(start.getTime() + (((4 * 60) * 60) * 1000));\n    java.util.Date pauseTime = new java.util.Date(start.getTime() + (((2 * 60) * 60) * 1000));\n    java.lang.String pauseTimeChangeStr = \"pausetime=\" + org.apache.oozie.util.DateUtils.formatDateOozieTZ(pauseTime);\n    final org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTableForPauseTimeTest(org.apache.oozie.client.Job.Status.RUNNING, start, end, end, true, false, 4);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 4, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    new org.apache.oozie.command.coord.CoordChangeXCommand(job.getId(), pauseTimeChangeStr).call();\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.util.DateUtils.formatDateOozieTZ(coordJob.getPauseTime()), org.apache.oozie.util.DateUtils.formatDateOozieTZ(pauseTime));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, coordJob.getStatus());\n    junit.framework.Assert.assertEquals(2, coordJob.getLastActionNumber());\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetActionByActionNumberJPAExecutor(job.getId(), 3));\n        junit.framework.Assert.fail(\"Expected to fail as action 3 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException jpae) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0603, jpae.getErrorCode());\n        jpae.printStackTrace();\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetActionByActionNumberJPAExecutor(job.getId(), 4));\n        junit.framework.Assert.fail(\"Expected to fail as action 4 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException jpae) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0603, jpae.getErrorCode());\n        jpae.printStackTrace();\n    }\n}",
        "ClassName": "TestCoordChangeXCommand",
        "Label": 1,
        "MethodName": "testCoordChangePauseTime",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertNotNull(org.apache.oozie.service.Services.get().get(org.apache.oozie.service.DagXLogInfoService.class));\n    java.lang.String prefix = org.apache.oozie.util.XLog.Info.get().createPrefix();\n    junit.framework.Assert.assertTrue(prefix.contains(org.apache.oozie.service.DagXLogInfoService.TOKEN));\n    junit.framework.Assert.assertTrue(prefix.contains(org.apache.oozie.service.DagXLogInfoService.APP));\n    junit.framework.Assert.assertTrue(prefix.contains(org.apache.oozie.service.DagXLogInfoService.JOB));\n    junit.framework.Assert.assertTrue(prefix.contains(org.apache.oozie.service.DagXLogInfoService.ACTION));\n}",
        "ClassName": "TestDagXLogInfoService",
        "Label": 1,
        "MethodName": "testLogInfo",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    addRecordToCoordActionTable(\"Coord3\", 1, org.apache.oozie.client.CoordinatorAction.Status.FAILED, \"coord-action-get.xml\", 0);\n    java.lang.String request = (\"bundle=\" + bundleName) + \";\";\n    java.util.List<org.apache.oozie.client.rest.BulkResponseImpl> brList = _execQuery(request);\n    junit.framework.Assert.assertEquals(4, brList.size());\n    java.util.List<java.lang.String> possibleStatus = new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(\"FAILED\", \"KILLED\"));\n    java.util.List<java.lang.String> resultStatus = new java.util.ArrayList<java.lang.String>();\n    resultStatus.add(brList.get(0).getAction().getStatus().toString());\n    resultStatus.add(brList.get(1).getAction().getStatus().toString());\n    junit.framework.Assert.assertEquals(possibleStatus, resultStatus);\n}",
        "ClassName": "TestBulkMonitorJPAExecutor",
        "Label": 1,
        "MethodName": "testDefaultStatus",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testNonTransient(\"start.non-transient\", org.apache.oozie.client.WorkflowAction.Status.START_MANUAL, \"start\");\n    junit.framework.Assert.assertTrue(true);\n}",
        "ClassName": "TestActionErrors",
        "Label": 1,
        "MethodName": "testStartNonTransient",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.TestCallableQueueService.EXEC_ORDER = new java.util.concurrent.atomic.AtomicLong();\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable1 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithDiffKey1\", \"QueueUniquenessWithDiffKey\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable2 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithDiffKey2\", \"QueueUniquenessWithDiffKey\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable3 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithDiffKey3\", \"QueueUniquenessWithDiffKey\", 0, 100);\n    java.util.List<org.apache.oozie.service.TestCallableQueueService.MyCallable> callables = java.util.Arrays.asList(callable1, callable2, callable3);\n    org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    for (org.apache.oozie.service.TestCallableQueueService.MyCallable c : callables) {\n        queueservice.queue(c);\n    }\n    waitFor(200, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return ((callable1.executed != 0) && (callable2.executed != 0)) && (callable3.executed != 0);\n        }\n    });\n    junit.framework.Assert.assertTrue(callable1.executed != 0);\n    junit.framework.Assert.assertTrue(callable2.executed != 0);\n    junit.framework.Assert.assertTrue(callable3.executed != 0);\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testQueueUniquenessWithDiffKey",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetExecutor = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetExecutor = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action.getId());\n    job = jpaService.execute(coordJobGetExecutor);\n    action = jpaService.execute(coordActionGetExecutor);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNING);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    new org.apache.oozie.command.PurgeXCommand(1, 7, 1, 10).call();\n    try {\n        jpaService.execute(coordJobGetExecutor);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordActionGetExecutor);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action should not have been purged\");\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testCoordPurgeXCommandFailed",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testCoordRerun-C\";\n    final int actionNum1 = 1;\n    final int actionNum2 = 2;\n    final java.lang.String actionId1 = (jobId + \"@\") + actionNum1;\n    final java.lang.String actionId2 = (jobId + \"@\") + actionNum2;\n    org.apache.oozie.store.CoordinatorStore store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store.beginTrx();\n    try {\n        addRecordToJobTable(jobId, store, org.apache.oozie.client.Job.Status.SUCCEEDED);\n        addRecordToActionTable(jobId, actionNum1, actionId1, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\");\n        addRecordToActionTable(jobId, actionNum2, actionId2, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action2.xml\");\n        store.commitTrx();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Could not update db.\");\n    } finally {\n        store.closeTrx();\n    }\n    java.lang.String rerunScope = \"2009-12-15T01:00Z\" + (\"::\" + \"2009-12-17T01:00Z\");\n    final org.apache.oozie.client.OozieClient coordClient = org.apache.oozie.local.LocalOozie.getCoordClient();\n    coordClient.reRunCoord(jobId, org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_DATE, rerunScope, false, true);\n    org.apache.oozie.store.CoordinatorStore store1 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store1.beginTrx();\n    org.apache.oozie.CoordinatorActionBean action1 = store1.getCoordinatorAction(actionId1, false);\n    junit.framework.Assert.assertNotSame(action1.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    org.apache.oozie.CoordinatorActionBean action2 = store1.getCoordinatorAction(actionId2, false);\n    junit.framework.Assert.assertNotSame(action2.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    store1.commitTrx();\n    store1.closeTrx();\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunDate4",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, true, false, 3);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    final java.lang.String jobId = job.getId();\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(jobId));\n            return coordJob.isPending() == false;\n        }\n    });\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertFalse(job.isPending());\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNING);\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServiceRunning1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.XLog.Info logInfo = new org.apache.oozie.util.XLog.Info();\n    junit.framework.Assert.assertEquals(\"\", logInfo.createPrefix());\n    org.apache.oozie.util.XLog.Info.defineParameter(\"A\");\n    junit.framework.Assert.assertEquals(\"A[-]\", logInfo.createPrefix());\n    org.apache.oozie.util.XLog.Info.defineParameter(\"B\");\n    junit.framework.Assert.assertEquals(\"A[-] B[-]\", logInfo.createPrefix());\n    logInfo.setParameter(\"A\", \"a\");\n    junit.framework.Assert.assertEquals(\"A[a] B[-]\", logInfo.createPrefix());\n    logInfo.setParameter(\"B\", \"b\");\n    junit.framework.Assert.assertEquals(\"A[a] B[b]\", logInfo.createPrefix());\n}",
        "ClassName": "TestXLog",
        "Label": 1,
        "MethodName": "testInfoParameters",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v0/jobs\", org.apache.oozie.servlet.V0JobsServlet.class, org.apache.oozie.servlet.TestJobsServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            int wfCount = org.apache.oozie.servlet.MockDagEngineService.workflows.size();\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOBS_FILTER_PARAM, \"name=x\");\n            java.net.URL url = createURL(\"\", params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            org.json.simple.JSONArray array = ((org.json.simple.JSONArray) (json.get(org.apache.oozie.client.rest.JsonTags.WORKFLOWS_JOBS)));\n            junit.framework.Assert.assertEquals(org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT, array.size());\n            for (int i = 0; i < org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT; i++) {\n                junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + i) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, ((org.json.simple.JSONObject) (array.get(i))).get(org.apache.oozie.client.rest.JsonTags.WORKFLOW_ID));\n                junit.framework.Assert.assertNotNull(((org.json.simple.JSONObject) (array.get(i))).get(org.apache.oozie.client.rest.JsonTags.WORKFLOW_APP_PATH));\n            }\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOBS_FILTER_PARAM, \"name=x\");\n            params.put(org.apache.oozie.client.rest.RestConstants.OFFSET_PARAM, \"2\");\n            params.put(org.apache.oozie.client.rest.RestConstants.LEN_PARAM, \"100\");\n            url = createURL(\"\", params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            array = ((org.json.simple.JSONArray) (json.get(org.apache.oozie.client.rest.JsonTags.WORKFLOWS_JOBS)));\n            junit.framework.Assert.assertEquals(org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT, array.size());\n            for (int i = 0; i < org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT; i++) {\n                junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + i) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, ((org.json.simple.JSONObject) (array.get(i))).get(org.apache.oozie.client.rest.JsonTags.WORKFLOW_ID));\n                junit.framework.Assert.assertNotNull(((org.json.simple.JSONObject) (array.get(i))).get(org.apache.oozie.client.rest.JsonTags.WORKFLOW_APP_PATH));\n            }\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOBS_EXTERNAL_ID_PARAM, \"external-valid\");\n            url = createURL(\"\", params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject obj = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals(\"id-valid\", obj.get(org.apache.oozie.client.rest.JsonTags.JOB_ID));\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOBS_EXTERNAL_ID_PARAM, \"external-invalid\");\n            url = createURL(\"\", params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            obj = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertNull(obj.get(org.apache.oozie.client.rest.JsonTags.JOB_ID));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestJobsServlet",
        "Label": 1,
        "MethodName": "testJobs",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    conf.set(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, org.apache.hadoop.util.StringUtils.join(\",\", java.util.Arrays.asList(org.apache.oozie.service.GroupsService.class.getName())));\n    services.init();\n    try {\n        org.apache.oozie.service.GroupsService groups = services.get(org.apache.oozie.service.GroupsService.class);\n        junit.framework.Assert.assertNotNull(groups);\n        java.util.List<java.lang.String> g = groups.getGroups(java.lang.System.getProperty(\"user.name\"));\n        junit.framework.Assert.assertNotSame(g.size(), 0);\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestGroupsService",
        "Label": 1,
        "MethodName": "testService",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.BundleJobBean bundleJob = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false);\n    org.apache.oozie.CoordinatorJobBean coordJob1 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    coordJob1.setAppName(\"coordJob1\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob1));\n    org.apache.oozie.CoordinatorJobBean coordJob2 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    coordJob2.setAppName(\"coordJob2\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob2));\n    org.apache.oozie.CoordinatorJobBean coordJob3 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    coordJob3.setAppName(\"coordJob3\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob3));\n    org.apache.oozie.CoordinatorJobBean coordJob4 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    coordJob4.setAppName(\"coordJob4\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob4));\n    org.apache.oozie.CoordinatorJobBean coordJob5 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    coordJob5.setAppName(\"coordJob5\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob5));\n    org.apache.oozie.CoordinatorActionBean coordAction1 = addRecordToCoordActionTable(coordJob1.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction2 = addRecordToCoordActionTable(coordJob2.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction3 = addRecordToCoordActionTable(coordJob3.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction4 = addRecordToCoordActionTable(coordJob4.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction5 = addRecordToCoordActionTable(coordJob5.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.BundleActionBean bundleAction1 = addRecordToBundleActionTable(bundleJob.getId(), coordJob1.getId(), coordJob1.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean bundleAction2 = addRecordToBundleActionTable(bundleJob.getId(), coordJob2.getId(), coordJob2.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean bundleAction3 = addRecordToBundleActionTable(bundleJob.getId(), coordJob3.getId(), coordJob3.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean bundleAction4 = addRecordToBundleActionTable(bundleJob.getId(), coordJob4.getId(), coordJob4.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean bundleAction5 = addRecordToBundleActionTable(bundleJob.getId(), coordJob5.getId(), coordJob5.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    java.util.List<java.lang.String> children = new java.util.ArrayList<java.lang.String>();\n    children.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsGetFromParentIdJPAExecutor(bundleJob.getId(), 3)));\n    junit.framework.Assert.assertEquals(3, children.size());\n    children.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsGetFromParentIdJPAExecutor(bundleJob.getId(), 3, 3)));\n    junit.framework.Assert.assertEquals(5, children.size());\n    checkChildren(children, coordJob1.getId(), coordJob2.getId(), coordJob3.getId(), coordJob4.getId(), coordJob5.getId());\n}",
        "ClassName": "TestCoordJobsGetFromParentIdJPAExecutor",
        "Label": 1,
        "MethodName": "testGetBundleParentTooMany",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-log\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"0\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_LOG, org.apache.oozie.servlet.MockDagEngineService.did);\n            args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-log\", org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + \"0\" };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_LOG, org.apache.oozie.servlet.MockDagEngineService.did);\n            args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-log\", org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + \"0\", \"-action\", \"0\", \"-date\", \"2009-12-16T01:00Z\" };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_LOG, org.apache.oozie.servlet.MockDagEngineService.did);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testJobLog",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction1 = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction2 = addRecordToWfActionTable(wfJob.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction3 = addRecordToWfActionTable(wfJob.getId(), \"3\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction4 = addRecordToWfActionTable(wfJob.getId(), \"4\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction5 = addRecordToWfActionTable(wfJob.getId(), \"5\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowJobBean subwfJob1 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJob.getId());\n    org.apache.oozie.WorkflowJobBean subwfJob2 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJob.getId());\n    org.apache.oozie.WorkflowJobBean subwfJob3 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJob.getId());\n    org.apache.oozie.WorkflowJobBean subwfJob4 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJob.getId());\n    org.apache.oozie.WorkflowJobBean subwfJob5 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJob.getId());\n    org.apache.oozie.WorkflowActionBean subwfAction1 = addRecordToWfActionTable(subwfJob1.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean subwfAction2 = addRecordToWfActionTable(subwfJob2.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean subwfAction3 = addRecordToWfActionTable(subwfJob3.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean subwfAction4 = addRecordToWfActionTable(subwfJob4.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean subwfAction5 = addRecordToWfActionTable(subwfJob5.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction1GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction1.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction2GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction2.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction3GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction3.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction4GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction4.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction5GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction5.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJob1GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob1.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJob2GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob2.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJob3GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob3.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJob4GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob4.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJob5GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob5.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfAction1GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction1.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfAction2GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction2.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfAction3GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction3.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfAction4GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction4.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfAction5GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction5.getId());\n    wfJob = jpaService.execute(wfJobGetCmd);\n    wfAction1 = jpaService.execute(wfAction1GetCmd);\n    wfAction2 = jpaService.execute(wfAction2GetCmd);\n    wfAction3 = jpaService.execute(wfAction3GetCmd);\n    wfAction4 = jpaService.execute(wfAction4GetCmd);\n    wfAction5 = jpaService.execute(wfAction5GetCmd);\n    subwfJob1 = jpaService.execute(subwfJob1GetCmd);\n    subwfJob2 = jpaService.execute(subwfJob2GetCmd);\n    subwfJob3 = jpaService.execute(subwfJob3GetCmd);\n    subwfJob4 = jpaService.execute(subwfJob4GetCmd);\n    subwfJob5 = jpaService.execute(subwfJob5GetCmd);\n    subwfAction1 = jpaService.execute(subwfAction1GetCmd);\n    subwfAction2 = jpaService.execute(subwfAction2GetCmd);\n    subwfAction3 = jpaService.execute(subwfAction3GetCmd);\n    subwfAction4 = jpaService.execute(subwfAction4GetCmd);\n    subwfAction5 = jpaService.execute(subwfAction5GetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction5.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, subwfJob1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, subwfJob2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, subwfJob3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, subwfJob4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, subwfJob5.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, subwfAction1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, subwfAction2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, subwfAction3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, subwfAction4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, subwfAction5.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(7, 1, 1, 3).call();\n    try {\n        jpaService.execute(wfJobGetCmd);\n        junit.framework.Assert.fail(\"Workflow Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfAction1GetCmd);\n        junit.framework.Assert.fail(\"Workflow Action 1 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfAction2GetCmd);\n        junit.framework.Assert.fail(\"Workflow Action 2 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfAction3GetCmd);\n        junit.framework.Assert.fail(\"Workflow Action 3 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfAction4GetCmd);\n        junit.framework.Assert.fail(\"Workflow Action 4 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfAction5GetCmd);\n        junit.framework.Assert.fail(\"Workflow Action 5 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfJob1GetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Job 1 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfJob2GetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Job 2 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfJob3GetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Job 3 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfJob4GetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Job 4 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfJob5GetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Job 5 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfAction1GetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Action 1 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfAction2GetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Action 2 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfAction3GetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Action 3 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfAction4GetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Action 4 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfAction5GetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Action 5 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeWFWithSubWF3MoreThanLimit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration(false);\n    java.lang.String str = \"<root xmlns=\\\"uri:oozie:workflow:0.4\\\"><parameters>\" + (\"<property><name>hello</name></property>\" + \"</parameters></root>\");\n    try {\n        org.apache.oozie.util.ParameterVerifier.verifyParameters(conf, org.apache.oozie.util.XmlUtils.parseXml(str));\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.util.ParameterVerifierException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0738, ex.getErrorCode());\n        junit.framework.Assert.assertTrue(ex.getMessage().endsWith(\"hello\"));\n        junit.framework.Assert.assertTrue(ex.getMessage().contains(\"1\"));\n        junit.framework.Assert.assertEquals(0, conf.size());\n    }\n    conf = new org.apache.hadoop.conf.Configuration(false);\n    str = \"<root xmlns=\\\"uri:oozie:workflow:0.4\\\"><parameters>\" + (\"<property><name>hello</name><value>world</value></property>\" + \"</parameters></root>\");\n    org.apache.oozie.util.ParameterVerifier.verifyParameters(conf, org.apache.oozie.util.XmlUtils.parseXml(str));\n    junit.framework.Assert.assertEquals(1, conf.size());\n    junit.framework.Assert.assertEquals(\"world\", conf.get(\"hello\"));\n    conf = new org.apache.hadoop.conf.Configuration(false);\n    str = \"<root xmlns=\\\"uri:oozie:workflow:0.4\\\"><parameters>\" + (((\"<property><name>hello</name></property>\" + \"<property><name>foo</name><value>bar</value></property>\") + \"<property><name>meh</name></property>\") + \"</parameters></root>\");\n    try {\n        org.apache.oozie.util.ParameterVerifier.verifyParameters(conf, org.apache.oozie.util.XmlUtils.parseXml(str));\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.util.ParameterVerifierException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0738, ex.getErrorCode());\n        junit.framework.Assert.assertTrue(ex.getMessage().endsWith(\"hello, meh\"));\n        junit.framework.Assert.assertFalse(ex.getMessage().contains(\"foo\"));\n        junit.framework.Assert.assertTrue(ex.getMessage().contains(\"2\"));\n        junit.framework.Assert.assertEquals(1, conf.size());\n        junit.framework.Assert.assertEquals(\"bar\", conf.get(\"foo\"));\n    }\n}",
        "ClassName": "TestParameterVerifier",
        "Label": 1,
        "MethodName": "testVerifyParametersMissing",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String db = \"default\";\n    java.lang.String table = \"tablename\";\n    java.lang.String newHCatDependency = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=usa\";\n    populateTable(db, table);\n    java.lang.String actionId = addInitRecords(newHCatDependency);\n    checkCoordAction(actionId, newHCatDependency, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId).call();\n    checkCoordAction(actionId, \"\", org.apache.oozie.client.CoordinatorAction.Status.READY);\n}",
        "ClassName": "TestCoordPushDependencyCheckXCommand",
        "Label": 1,
        "MethodName": "testUpdateCoordTableSingleDep",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.ShellActionExecutor ae = new org.apache.oozie.action.hadoop.ShellActionExecutor();\n    junit.framework.Assert.assertEquals(\"shell\", ae.getType());\n    junit.framework.Assert.assertEquals(\"shell-launcher.jar\", ae.getLauncherJarName());\n    java.util.List<java.lang.Class> classes = new java.util.ArrayList<java.lang.Class>();\n    classes.add(org.apache.oozie.action.hadoop.LauncherMapper.class);\n    classes.add(org.apache.oozie.action.hadoop.LauncherSecurityManager.class);\n    classes.add(org.apache.oozie.action.hadoop.LauncherException.class);\n    classes.add(org.apache.oozie.action.hadoop.LauncherMainException.class);\n    classes.add(org.apache.oozie.action.hadoop.PrepareActionsDriver.class);\n    classes.addAll(org.apache.oozie.service.Services.get().get(org.apache.oozie.service.URIHandlerService.class).getClassesForLauncher());\n    classes.add(org.apache.oozie.action.hadoop.ActionStats.class);\n    classes.add(org.apache.oozie.action.hadoop.ActionType.class);\n    classes.add(org.apache.oozie.action.hadoop.LauncherMain.class);\n    classes.add(org.apache.oozie.action.hadoop.MapReduceMain.class);\n    classes.add(org.apache.oozie.action.hadoop.ShellMain.class);\n    classes.add(org.apache.oozie.action.hadoop.ShellMain.OutputWriteThread.class);\n    junit.framework.Assert.assertEquals(classes, ae.getLauncherClasses());\n    org.jdom.Element actionXml = org.apache.oozie.util.XmlUtils.parseXml((((((((((\"<shell>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<exec>SCRIPT</exec>\") + \"<argument>a=A</argument>\") + \"<argument>b=B</argument>\") + \"</shell>\");\n    org.apache.oozie.util.XConfiguration protoConf = new org.apache.oozie.util.XConfiguration();\n    protoConf.set(org.apache.oozie.service.WorkflowAppService.HADOOP_USER, org.apache.oozie.test.XTestCase.getTestUser());\n    org.apache.oozie.WorkflowJobBean wf = createBaseWorkflow(protoConf, \"pig-action\");\n    org.apache.oozie.WorkflowActionBean action = ((org.apache.oozie.WorkflowActionBean) (wf.getActions().get(0)));\n    action.setType(ae.getType());\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(wf, action);\n    org.apache.hadoop.conf.Configuration conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());\n    junit.framework.Assert.assertEquals(\"SCRIPT\", conf.get(\"oozie.shell.exec\"));\n    junit.framework.Assert.assertEquals(\"2\", conf.get(\"oozie.shell.args.size\"));\n    junit.framework.Assert.assertEquals(\"a=A\", conf.get(\"oozie.shell.args.0\"));\n    junit.framework.Assert.assertEquals(\"b=B\", conf.get(\"oozie.shell.args.1\"));\n}",
        "ClassName": "TestShellActionExecutor",
        "Label": 1,
        "MethodName": "testSetupMethods",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String inherit = \"true\";\n    java.lang.String inheritWF = \"false\";\n    java.lang.String[] expectedLibs1 = new java.lang.String[]{ \"child1.jar\", \"child2.so\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 1, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs1, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs1, expectedLibs1);\n    java.lang.String[] expectedLibs2 = new java.lang.String[]{  };\n    checkSubworkflowLibHelper(inherit, inheritWF, 2, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs2, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs2, expectedLibs2);\n    java.lang.String[] expectedLibs3 = new java.lang.String[]{ \"child1.jar\", \"child2.so\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 3, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs3, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs3, expectedLibs3);\n    java.lang.String[] expectedLibs4 = new java.lang.String[]{  };\n    checkSubworkflowLibHelper(inherit, inheritWF, 4, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs4, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs4, expectedLibs4);\n    java.lang.String[] expectedLibs5 = new java.lang.String[]{ \"child1.jar\", \"child2.so\", \"same.jar\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 5, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs5, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs5, expectedLibs5);\n}",
        "ClassName": "TestLiteWorkflowAppService",
        "Label": 1,
        "MethodName": "testCreateProtoConfWithSubWorkflowLib5",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean coordJob = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = \"<coordinator-app name=\\\"NAME\\\" frequency=\\\"${coord:days(1)}\\\" start=\\\"2009-02-01T01:00Z\\\" end=\\\"2009-02-03T23:59Z\\\" timezone=\\\"UTC\\\" \" + (((((((((((((\"xmlns=\\\"uri:oozie:coordinator:0.2\\\"> <controls> <concurrency>2</concurrency> \" + \"<execution>LIFO</execution> </controls> <datasets> \") + \"<dataset name=\\\"a\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"<dataset name=\\\"local_a\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"</datasets> <input-events> \") + \"<data-in name=\\\"A\\\" dataset=\\\"a\\\"> <instance>${coord:latest(0)}</instance> </data-in>  \") + \"</input-events> \") + \"<output-events> <data-out name=\\\"LOCAL_A\\\" dataset=\\\"local_a\\\"> \") + \"<instance>${coord:current(-1)}</instance> </data-out> </output-events> <action> <workflow> <app-path>hdfs:///tmp/workflows/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>${coord:dataIn('A')}</value> </property> \") + \"<property> <name>inputB</name> <value>${coord:dataOut('LOCAL_A')}</value> \") + \"</property></configuration> </workflow> </action> </coordinator-app>\");\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    this.addRecordToBundleActionTable(coordJob.getId(), \"COORD-NAME\", 0, org.apache.oozie.client.Job.Status.PREP);\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\", coordJob.getId(), \"COORD-NAME\");\n    java.lang.String jobId = sc.call();\n    junit.framework.Assert.assertEquals(jobId.substring(jobId.length() - 2), \"-C\");\n    org.apache.oozie.CoordinatorJobBean job = checkCoordJobs(jobId);\n    if (job != null) {\n        junit.framework.Assert.assertEquals(coordJob.getId(), job.getBundleId());\n        junit.framework.Assert.assertEquals(\"COORD-NAME\", job.getAppName());\n        junit.framework.Assert.assertEquals(\"uri:oozie:coordinator:0.2\", job.getAppNamespace());\n    } else {\n        junit.framework.Assert.fail();\n    }\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testBasicSubmitWithBundleId",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.ELEvaluator.Context support = new org.apache.oozie.util.ELEvaluator.Context();\n    support.addFunction(\"a\", \"a\", org.apache.oozie.util.TestELEvaluator.functionA);\n    org.apache.oozie.util.ELEvaluator evaluator = new org.apache.oozie.util.ELEvaluator(support);\n    junit.framework.Assert.assertEquals(org.apache.oozie.util.TestELEvaluator.functionA, evaluator.getContext().resolveFunction(\"a\", \"a\"));\n}",
        "ClassName": "TestELEvaluator",
        "Label": 1,
        "MethodName": "testFunctions",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date start = new java.util.Date();\n    java.util.Date end = new java.util.Date(start.getTime() + (((4 * 60) * 60) * 1000));\n    java.util.Date pauseTime = new java.util.Date(start.getTime() + (((2 * 60) * 60) * 1000));\n    java.lang.String pauseTimeChangeStr = \"pausetime=\" + org.apache.oozie.util.DateUtils.formatDateOozieTZ(pauseTime);\n    final org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTableForPauseTimeTest(org.apache.oozie.client.Job.Status.RUNNING, start, end, end, true, false, 4);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 4, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    try {\n        new org.apache.oozie.command.coord.CoordChangeXCommand(job.getId(), pauseTimeChangeStr).call();\n        junit.framework.Assert.fail(\"Should not reach here.\");\n    } catch (org.apache.oozie.command.CommandException e) {\n        if (e.getErrorCode() != org.apache.oozie.ErrorCode.E1022)\n            junit.framework.Assert.fail(\"Error code should be E1022\");\n\n    }\n}",
        "ClassName": "TestCoordChangeXCommand",
        "Label": 1,
        "MethodName": "testCoordActionDelete",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.hadoop.conf.Configuration jobConf = null;\n    try {\n        jobConf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(job.getConf()));\n    } catch (java.io.IOException ioe) {\n        log.warn(\"Configuration parse error. read from DB :\" + job.getConf(), ioe);\n        throw new org.apache.oozie.command.CommandException(org.apache.oozie.ErrorCode.E1005, ioe);\n    }\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(jobConf.get(org.apache.oozie.client.OozieClient.BUNDLE_APP_PATH), \"bundle.xml\");\n    jobConf.set(org.apache.oozie.client.OozieClient.BUNDLE_APP_PATH, appPath.toString());\n    org.apache.oozie.command.bundle.BundleSubmitXCommand command = new org.apache.oozie.command.bundle.BundleSubmitXCommand(true, jobConf, CREATE_TIME);\n    org.apache.oozie.BundleJobBean bundleBean = ((org.apache.oozie.BundleJobBean) (command.getJob()));\n    bundleBean.setStartTime(new java.util.Date());\n    bundleBean.setEndTime(new java.util.Date());\n    command.call();\n    java.lang.String result = command.submit();\n    junit.framework.Assert.assertTrue(\"submit result should not contain <!-- \", !result.contains(\"<!--\"));\n    junit.framework.Assert.assertTrue(\"submit result should not contain --> \", !result.contains(\"-->\"));\n}",
        "ClassName": "TestBundleSubmitXCommand",
        "Label": 1,
        "MethodName": "testJobXmlCommentRemoved",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path mkdir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"mkdir\");\n    org.apache.hadoop.fs.Path delete = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"delete\");\n    fs.mkdirs(delete);\n    java.lang.String actionXml = (((((((((((((((((((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<prepare>\") + \"<mkdir path='\") + mkdir) + \"'/>\") + \"<delete path='\") + delete) + \"'/>\") + \"</prepare>\") + \"<configuration>\") + \"<property>\") + \"<name>dfs.umaskmode</name>\") + \"<value>026</value>\") + \"</property>\") + \"<property>\") + \"<name>fs.hdfs.impl.disable.cache</name>\") + \"<value>true</value>\") + \"</property>\") + \"</configuration>\") + \"<main-class>\") + org.apache.oozie.action.hadoop.LauncherMainTester.class.getName()) + \"</main-class>\") + \"</java>\";\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml, null);\n    final org.apache.hadoop.mapred.RunningJob runningJob = submitAction(context);\n    waitFor(60 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return runningJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(runningJob.isSuccessful());\n    org.apache.oozie.action.ActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    ae.check(context, context.getAction());\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", context.getAction().getExternalStatus());\n    junit.framework.Assert.assertNull(context.getAction().getData());\n    ae.end(context, context.getAction());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, context.getAction().getStatus());\n    junit.framework.Assert.assertTrue(fs.exists(mkdir));\n    junit.framework.Assert.assertEquals(\"rwxr-x--x\", fs.getFileStatus(mkdir).getPermission().toString());\n    junit.framework.Assert.assertFalse(fs.exists(delete));\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testPrepare",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:00Z\");\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:14Z\");\n    java.util.Date pauseTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T09:58Z\");\n    final org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, startTime, endTime, pauseTime);\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    waitFor(1000 * 60, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return getStatus(job.getId()) == org.apache.oozie.client.Job.Status.PAUSED ? true : false;\n        }\n    });\n    checkCoordActions(job.getId(), 0, org.apache.oozie.client.Job.Status.PAUSED);\n}",
        "ClassName": "TestCoordMaterializeTransitionXCommand",
        "Label": 1,
        "MethodName": "testActionMaterWithPauseTime3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n}",
        "ClassName": "TestActionBean",
        "Label": 1,
        "MethodName": "testFullWriteRead",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, true, true);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    coordJob.setStatus(org.apache.oozie.client.Job.Status.RUNNING);\n    wfJob.setStatus(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED);\n    action.setStatus(org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> updateList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    updateList.add(coordJob);\n    updateList.add(wfJob);\n    updateList.add(action);\n    org.apache.oozie.executor.jpa.BulkUpdateInsertForCoordActionStatusJPAExecutor bulkUpdateCmd = new org.apache.oozie.executor.jpa.BulkUpdateInsertForCoordActionStatusJPAExecutor();\n    bulkUpdateCmd.setUpdateList(updateList);\n    jpaService.execute(bulkUpdateCmd);\n    coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId()));\n    junit.framework.Assert.assertEquals(\"RUNNING\", coordJob.getStatusStr());\n    wfJob = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId()));\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", wfJob.getStatusStr());\n    org.apache.oozie.WorkflowActionBean action2 = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action.getId()));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.RUNNING, action2.getStatus());\n}",
        "ClassName": "TestBulkUpdateInsertForCoordActionStatusJPAExecutor",
        "Label": 1,
        "MethodName": "testUpdates",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setSystemProperty(\"oozie.authentication.simple.anonymous.allowed\", \"false\");\n    org.apache.oozie.client.AuthOozieClient.AUTH_TOKEN_CACHE_FILE.delete();\n    junit.framework.Assert.assertFalse(org.apache.oozie.client.AuthOozieClient.AUTH_TOKEN_CACHE_FILE.exists());\n    runTest(new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"admin\", \"-status\", \"-oozie\", oozieUrl };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n    junit.framework.Assert.assertFalse(org.apache.oozie.client.AuthOozieClient.AUTH_TOKEN_CACHE_FILE.exists());\n    setSystemProperty(\"oozie.auth.token.cache\", \"true\");\n    setSystemProperty(\"oozie.authentication.simple.anonymous.allowed\", \"false\");\n    setSystemProperty(\"oozie.authentication.signature.secret\", \"secret\");\n    org.apache.oozie.client.AuthOozieClient.AUTH_TOKEN_CACHE_FILE.delete();\n    junit.framework.Assert.assertFalse(org.apache.oozie.client.AuthOozieClient.AUTH_TOKEN_CACHE_FILE.exists());\n    runTest(new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"admin\", \"-status\", \"-oozie\", oozieUrl };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n    junit.framework.Assert.assertTrue(org.apache.oozie.client.AuthOozieClient.AUTH_TOKEN_CACHE_FILE.exists());\n    java.lang.String currentCache = org.apache.oozie.util.IOUtils.getReaderAsString(new java.io.FileReader(org.apache.oozie.client.AuthOozieClient.AUTH_TOKEN_CACHE_FILE), -1);\n    setSystemProperty(\"oozie.auth.token.cache\", \"true\");\n    setSystemProperty(\"oozie.authentication.simple.anonymous.allowed\", \"false\");\n    setSystemProperty(\"oozie.authentication.signature.secret\", \"secret\");\n    runTest(new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"admin\", \"-status\", \"-oozie\", oozieUrl };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n    junit.framework.Assert.assertTrue(org.apache.oozie.client.AuthOozieClient.AUTH_TOKEN_CACHE_FILE.exists());\n    java.lang.String newCache = org.apache.oozie.util.IOUtils.getReaderAsString(new java.io.FileReader(org.apache.oozie.client.AuthOozieClient.AUTH_TOKEN_CACHE_FILE), -1);\n    junit.framework.Assert.assertEquals(currentCache, newCache);\n}",
        "ClassName": "TestAuthFilterAuthOozieClient",
        "Label": 1,
        "MethodName": "testClientAuthTokenCache",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.EventHandlerService ehs = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.EventHandlerService.class);\n    org.apache.oozie.event.EventQueue eventQ = ehs.getEventQueue();\n    junit.framework.Assert.assertEquals(eventQ.size(), 0);\n    junit.framework.Assert.assertEquals(eventQ.getBatchSize(), 3);\n    org.apache.oozie.event.WorkflowJobEvent wfEvent = new org.apache.oozie.event.WorkflowJobEvent(\"1234-W\", \"1234-C\", org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.test.XTestCase.getTestUser(), \"myapp\", null, null);\n    for (int i = 0; i < 10; i++) {\n        ehs.queueEvent(wfEvent);\n    }\n    junit.framework.Assert.assertEquals(eventQ.size(), 10);\n    int numThreads = 1;\n    java.lang.Thread[] thread = new java.lang.Thread[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n        thread[i] = new java.lang.Thread(ehs.new EventWorker());\n        thread[i].run();\n    }\n    junit.framework.Assert.assertEquals(eventQ.size(), 7);\n    for (int i = 0; i < 3; i++) {\n        ehs.queueEvent(wfEvent);\n    }\n    junit.framework.Assert.assertEquals(eventQ.size(), 10);\n    numThreads = 2;\n    thread = new java.lang.Thread[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n        thread[i] = new java.lang.Thread(ehs.new EventWorker());\n        thread[i].run();\n    }\n    junit.framework.Assert.assertEquals(eventQ.size(), 4);\n    for (int i = 0; i < 6; i++) {\n        ehs.queueEvent(wfEvent);\n    }\n    junit.framework.Assert.assertEquals(eventQ.size(), 10);\n    int repetition = 3;\n    int r = 0;\n    while (r < repetition) {\n        if (eventQ.isEmpty()) {\n            break;\n        }\n        for (int i = 0; i < numThreads; i++) {\n            thread[i].run();\n        }\n        r++;\n    } \n    junit.framework.Assert.assertEquals(eventQ.size(), 0);\n}",
        "ClassName": "TestEventQueue",
        "Label": 1,
        "MethodName": "testQueueOperations",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorEngine ce = createCoordinatorEngine();\n    java.lang.String jobId = runJobsImpl(ce);\n    ce.streamLog(jobId, new java.io.StringWriter());\n    org.apache.oozie.TestCoordinatorEngineStreamLog.DummyXLogService service = ((org.apache.oozie.TestCoordinatorEngineStreamLog.DummyXLogService) (services.get(org.apache.oozie.service.XLogService.class)));\n    org.apache.oozie.util.XLogStreamer.Filter filter = service.filter;\n    junit.framework.Assert.assertEquals(filter.getFilterParams().get(org.apache.oozie.service.DagXLogInfoService.JOB), jobId);\n}",
        "ClassName": "TestCoordinatorEngineStreamLog",
        "Label": 1,
        "MethodName": "testStreamLog2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.BundleJobBean bundleJob = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordAction = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.BundleActionBean bundleAction = addRecordToBundleActionTable(bundleJob.getId(), coordJob.getId(), coordJob.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction.getId());\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleJob.getId());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionGetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJob.getId(), coordJob.getAppName());\n    wfJob = jpaService.execute(wfJobGetCmd);\n    wfAction = jpaService.execute(wfActionGetCmd);\n    coordJob = jpaService.execute(coordJobGetCmd);\n    coordAction = jpaService.execute(coordActionGetCmd);\n    bundleJob = jpaService.execute(bundleJobGetCmd);\n    bundleAction = jpaService.execute(bundleActionGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleAction.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(7, 7, org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(bundleJob.getLastModifiedTime()), 10).call();\n    try {\n        jpaService.execute(bundleJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(bundleActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action should not have been purged\");\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeBundleWithCoordChildWithWFChild1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String actionXml = (((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<main-class>\") + org.apache.oozie.action.hadoop.LauncherMainTester.class.getName()) + \"</main-class>\") + \"</java>\";\n    final org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml, null);\n    final org.apache.hadoop.mapred.RunningJob runningJob = submitAction(context);\n    junit.framework.Assert.assertFalse(runningJob.isComplete());\n    org.apache.oozie.action.ActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    ae.kill(context, context.getAction());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.DONE, context.getAction().getStatus());\n    junit.framework.Assert.assertEquals(\"KILLED\", context.getAction().getExternalStatus());\n    junit.framework.Assert.assertTrue(ae.isCompleted(context.getAction().getExternalStatus()));\n    waitFor(60 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return runningJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertFalse(runningJob.isSuccessful());\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testKill",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testBundleEnginePutImpl(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_RESUME);\n}",
        "ClassName": "TestV1JobServletBundleEngine",
        "Label": 1,
        "MethodName": "testBundleEngineResume",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.XLog.Info.defineParameter(\"A\");\n    org.apache.oozie.util.XLog.Info.get().setParameter(\"A\", \"a\");\n    org.apache.oozie.util.XLog log = org.apache.oozie.util.XLog.getLog(getClass());\n    junit.framework.Assert.assertEquals(\"A[a]\", log.getMsgPrefix());\n}",
        "ClassName": "TestXLog",
        "Label": 1,
        "MethodName": "testFactoryLogInfoPrefix",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    @java.lang.SuppressWarnings(\"serial\")\n    org.apache.oozie.servlet.V1JobServlet testV1JobServlet = new org.apache.oozie.servlet.V1JobServlet() {\n        @java.lang.Override\n        protected java.lang.String getResourceName(javax.servlet.http.HttpServletRequest request) {\n            return \"-C\";\n        }\n    };\n    try {\n        testV1JobServlet.startJob(null, null);\n        junit.framework.Assert.fail(\"Negative test to test an exception. Should not be succeeding!\");\n    } catch (org.apache.oozie.servlet.XServletException xse) {\n        junit.framework.Assert.assertEquals(xse.getErrorCode(), org.apache.oozie.ErrorCode.E0303);\n        junit.framework.Assert.assertTrue(xse.getMessage().contains(\"Invalid parameter value, [action] = [start]\"));\n    } catch (java.lang.Exception e) {\n        junit.framework.Assert.fail(\"Did not expect a generic exception. Was expecting XServletException\");\n    }\n}",
        "ClassName": "TestV1JobServlet",
        "Label": 1,
        "MethodName": "testStartForErrorCode",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.WorkflowJobBean job1 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean job2 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.FAILED, org.apache.oozie.workflow.WorkflowInstance.Status.FAILED);\n    org.apache.oozie.WorkflowJobBean job3 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean job4 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean job5 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>();\n    list.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobsGetForPurgeJPAExecutor(1, 3)));\n    junit.framework.Assert.assertEquals(3, list.size());\n    list.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobsGetForPurgeJPAExecutor(1, 3, 3)));\n    junit.framework.Assert.assertEquals(5, list.size());\n    checkWorkflows(list, job1.getId(), job2.getId(), job3.getId(), job4.getId(), job5.getId());\n}",
        "ClassName": "TestWorkflowJobsGetForPurgeJPAExecutor",
        "Label": 1,
        "MethodName": "testWfJobsGetForPurgeTooMany",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.BundleJobBean job1 = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    org.apache.oozie.BundleJobBean job2 = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.FAILED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    org.apache.oozie.BundleJobBean job3 = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    org.apache.oozie.BundleJobBean job4 = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    org.apache.oozie.BundleJobBean job5 = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-01-01T01:00Z\"));\n    java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>();\n    list.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobsGetForPurgeJPAExecutor(1, 3)));\n    junit.framework.Assert.assertEquals(3, list.size());\n    list.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobsGetForPurgeJPAExecutor(1, 3, 3)));\n    junit.framework.Assert.assertEquals(5, list.size());\n    checkBundles(list, job1.getId(), job2.getId(), job3.getId(), job4.getId(), job5.getId());\n}",
        "ClassName": "TestBundleJobsGetForPurgeJPAExecutor",
        "Label": 1,
        "MethodName": "testBundleJobsGetForPurgeJPAExecutorTooMany",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v0/admin/*\", org.apache.oozie.servlet.V0AdminServlet.class, org.apache.oozie.servlet.TestAdminServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.net.URL url = createURL(org.apache.oozie.client.rest.RestConstants.ADMIN_CONFIG_RESOURCE, java.util.Collections.EMPTY_MAP);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertTrue(json.containsKey(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestAdminServlet",
        "Label": 1,
        "MethodName": "testConfiguration",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"coordinator.xml\")).close();\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-rerun\", (org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, \"-date\", \"2009-12-15T01:00Z\", \"-action\", \"1\" };\n            junit.framework.Assert.assertEquals(-1, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertNull(org.apache.oozie.servlet.MockCoordinatorEngineService.did);\n            junit.framework.Assert.assertFalse(org.apache.oozie.servlet.MockCoordinatorEngineService.started.get(1));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testCoordReRunNeg1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    _testCoordActionRunningGet(action);\n}",
        "ClassName": "TestCoordActionsRunningGetJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionRunningGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testBundleEnginePutImpl(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_SUSPEND);\n}",
        "ClassName": "TestV1JobServletBundleEngine",
        "Label": 1,
        "MethodName": "testBundleEngineSuspend",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNINGWITHERROR, false, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNINGWITHERROR);\n    new org.apache.oozie.command.coord.CoordSuspendXCommand(job.getId()).call();\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.SUSPENDEDWITHERROR);\n    new org.apache.oozie.command.coord.CoordResumeXCommand(job.getId()).call();\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNINGWITHERROR);\n}",
        "ClassName": "TestCoordResumeXCommand",
        "Label": 1,
        "MethodName": "testCoordSuspendWithErrorAndResumeWithErrorForRunning",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:00Z\");\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:14Z\");\n    java.util.Date pauseTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:08Z\");\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, startTime, endTime, pauseTime);\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    checkCoordActions(job.getId(), 2, null);\n}",
        "ClassName": "TestCoordMaterializeTransitionXCommand",
        "Label": 1,
        "MethodName": "testActionMaterWithPauseTime2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.Instrumentation inst = new org.apache.oozie.util.Instrumentation();\n    junit.framework.Assert.assertEquals(0, inst.getTimers().size());\n    org.apache.oozie.util.Instrumentation.Cron cron1 = new org.apache.oozie.util.Instrumentation.Cron();\n    inst.addCron(\"a\", \"1\", cron1);\n    junit.framework.Assert.assertEquals(1, inst.getTimers().size());\n    junit.framework.Assert.assertEquals(1, inst.getTimers().get(\"a\").size());\n    org.apache.oozie.util.Instrumentation.Cron cron2 = new org.apache.oozie.util.Instrumentation.Cron();\n    cron2.start();\n    java.lang.Thread.sleep(org.apache.oozie.util.TestInstrumentation.INTERVAL);\n    cron2.stop();\n    inst.addCron(\"a\", \"2\", cron2);\n    junit.framework.Assert.assertEquals(1, inst.getTimers().size());\n    junit.framework.Assert.assertEquals(2, inst.getTimers().get(\"a\").size());\n    org.apache.oozie.util.Instrumentation.Cron cron3 = new org.apache.oozie.util.Instrumentation.Cron();\n    cron3.start();\n    java.lang.Thread.sleep(org.apache.oozie.util.TestInstrumentation.INTERVAL * 2);\n    cron3.stop();\n    inst.addCron(\"b\", \"1\", cron3);\n    junit.framework.Assert.assertEquals(2, inst.getTimers().size());\n    junit.framework.Assert.assertEquals(2, inst.getTimers().get(\"a\").size());\n    junit.framework.Assert.assertEquals(1, inst.getTimers().get(\"b\").size());\n    junit.framework.Assert.assertEquals(cron1.getOwn(), inst.getTimers().get(\"a\").get(\"1\").getValue().getOwn());\n    junit.framework.Assert.assertEquals(cron2.getOwn(), inst.getTimers().get(\"a\").get(\"2\").getValue().getOwn());\n    junit.framework.Assert.assertEquals(cron3.getOwn(), inst.getTimers().get(\"b\").get(\"1\").getValue().getOwn());\n}",
        "ClassName": "TestInstrumentation",
        "Label": 1,
        "MethodName": "testInstrumentationTimer",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String db = \"default\";\n    java.lang.String table = \"tablename\";\n    java.lang.String newHCatDependency1 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120412;country=brazil\";\n    java.lang.String newHCatDependency2 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=usa\";\n    java.lang.String newHCatDependency = (newHCatDependency1 + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + newHCatDependency2;\n    populateTable(db, table);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTableForWaiting(\"coord-job-for-action-input-check.xml\", org.apache.oozie.client.Job.Status.RUNNING, false, true);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTableForWaiting(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-for-action-push-check.xml\", null, newHCatDependency, \"Z\");\n    java.lang.String actionId = action.getId();\n    checkCoordAction(actionId, newHCatDependency, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId).call();\n    org.apache.oozie.CoordinatorActionBean caBean = checkCoordAction(actionId, \"\", org.apache.oozie.client.CoordinatorAction.Status.READY);\n    org.jdom.Element eAction = org.apache.oozie.util.XmlUtils.parseXml(caBean.getActionXml());\n    org.jdom.Element configElem = eAction.getChild(\"action\", eAction.getNamespace()).getChild(\"workflow\", eAction.getNamespace()).getChild(\"configuration\", eAction.getNamespace());\n    java.util.List<?> elementList = configElem.getChildren(\"property\", configElem.getNamespace());\n    org.jdom.Element e1 = ((org.jdom.Element) (elementList.get(0)));\n    org.jdom.Element e2 = ((org.jdom.Element) (elementList.get(1)));\n    junit.framework.Assert.assertEquals(\"hcat://dummyhcat:1000/db1/table1/ds=/2009-29,hcat://dummyhcat:1000/db1/table1/ds=/2009-29,\" + \"hcat://dummyhcat:1000/db1/table1/ds=/2009-29\", e1.getChild(\"value\", e1.getNamespace()).getValue());\n    junit.framework.Assert.assertEquals(\"hcat://dummyhcat:1000/db1/table1/ds=/2009-29\", e2.getChild(\"value\", e1.getNamespace()).getValue());\n}",
        "ClassName": "TestCoordPushDependencyCheckXCommand",
        "Label": 1,
        "MethodName": "testResolveCoordConfiguration",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false);\n    this.addRecordToBundleActionTable(job.getId(), \"action1\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    this.addRecordToBundleActionTable(job.getId(), \"action2\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    addRecordToCoordJobTable(\"action1\", org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    addRecordToCoordJobTable(\"action2\", org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, job.getStatus());\n    new org.apache.oozie.command.bundle.BundleRerunXCommand(job.getId(), null, \"2009-02-01T00:00Z\", false, true).call();\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, job.getStatus());\n}",
        "ClassName": "TestBundleRerunXCommand",
        "Label": 1,
        "MethodName": "testBundleRerun1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.lang.String wfId = \"workflow-1\";\n    org.apache.oozie.sla.SLACalculatorBean bean1 = _createSLACalcBean(wfId, false, false);\n    cal.setTime(new java.util.Date());\n    cal.add(java.util.Calendar.DAY_OF_MONTH, -2);\n    java.util.Date expStart = cal.getTime();\n    cal.add(java.util.Calendar.DAY_OF_MONTH, -1);\n    java.util.Date expEnd = cal.getTime();\n    java.util.Date actStart = new java.util.Date();\n    org.apache.oozie.sla.SLASummaryBean bean2 = _createSLASummaryBean(wfId, \"RUNNING\", org.apache.oozie.client.event.SLAEvent.EventStatus.START_MISS, expStart, expEnd, 1000, actStart, null, 2000);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> list = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    list.add(bean1);\n    list.add(bean2);\n    org.apache.oozie.executor.jpa.sla.SLACalculationInsertUpdateJPAExecutor writeCmd = new org.apache.oozie.executor.jpa.sla.SLACalculationInsertUpdateJPAExecutor();\n    writeCmd.setInsertList(list);\n    jpaService.execute(writeCmd);\n    java.util.Date newDate = new java.util.Date();\n    bean1 = _createSLACalcBean(wfId, true, true);\n    bean2 = _createSLASummaryBean(wfId, \"RUNNING\", org.apache.oozie.client.event.SLAEvent.EventStatus.DURATION_MISS, expStart, expEnd, 1000, actStart, newDate, 2000);\n    list = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    list.add(bean1);\n    list.add(bean2);\n    writeCmd.setUpdateList(list);\n    writeCmd.setInsertList(null);\n    jpaService.execute(writeCmd);\n    org.apache.oozie.executor.jpa.sla.SLACalculatorGetJPAExecutor readCmd1 = new org.apache.oozie.executor.jpa.sla.SLACalculatorGetJPAExecutor(wfId);\n    org.apache.oozie.sla.SLACalculatorBean scBean = jpaService.execute(readCmd1);\n    junit.framework.Assert.assertNotNull(scBean);\n    junit.framework.Assert.assertEquals(wfId, scBean.getJobId());\n    junit.framework.Assert.assertTrue(scBean.isStartProcessed());\n    junit.framework.Assert.assertTrue(scBean.isEndProcessed());\n    org.apache.oozie.executor.jpa.sla.SLASummaryGetJPAExecutor readCmd2 = new org.apache.oozie.executor.jpa.sla.SLASummaryGetJPAExecutor(wfId);\n    org.apache.oozie.sla.SLASummaryBean sdBean = jpaService.execute(readCmd2);\n    junit.framework.Assert.assertEquals(wfId, sdBean.getJobId());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.SLAEvent.EventStatus.DURATION_MISS, sdBean.getEventStatus());\n    junit.framework.Assert.assertEquals(expStart, sdBean.getExpectedStart());\n    junit.framework.Assert.assertEquals(expEnd, sdBean.getExpectedEnd());\n    junit.framework.Assert.assertEquals(1000, sdBean.getExpectedDuration());\n    junit.framework.Assert.assertEquals(actStart, sdBean.getActualStart());\n    junit.framework.Assert.assertEquals(newDate, sdBean.getActualEnd());\n    junit.framework.Assert.assertEquals(2000, sdBean.getActualDuration());\n}",
        "ClassName": "TestSLACalculationJPAExecutor",
        "Label": 1,
        "MethodName": "testInsertUpdate",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleEngine be = new org.apache.oozie.BundleEngine();\n    java.lang.String job = be.getJobIdForExternalId(\"externalFoo\");\n    junit.framework.Assert.assertNull(job);\n}",
        "ClassName": "TestBundleEngineSimple",
        "Label": 1,
        "MethodName": "testGetJobForExternalId",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.JavaActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    junit.framework.Assert.assertEquals(\"java\", ae.getType());\n    junit.framework.Assert.assertEquals(\"java-launcher.jar\", ae.getLauncherJarName());\n    java.util.List<java.lang.Class> classes = new java.util.ArrayList<java.lang.Class>();\n    classes.add(org.apache.oozie.action.hadoop.LauncherMapper.class);\n    classes.add(org.apache.oozie.action.hadoop.LauncherSecurityManager.class);\n    classes.add(org.apache.oozie.action.hadoop.LauncherException.class);\n    classes.add(org.apache.oozie.action.hadoop.LauncherMainException.class);\n    classes.add(org.apache.oozie.action.hadoop.PrepareActionsDriver.class);\n    classes.addAll(org.apache.oozie.service.Services.get().get(org.apache.oozie.service.URIHandlerService.class).getClassesForLauncher());\n    classes.add(org.apache.oozie.action.hadoop.ActionStats.class);\n    classes.add(org.apache.oozie.action.hadoop.ActionType.class);\n    junit.framework.Assert.assertEquals(classes, ae.getLauncherClasses());\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(\"user.name\", \"a\");\n    try {\n        org.apache.oozie.action.hadoop.JavaActionExecutor.checkForDisallowedProps(conf, \"x\");\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n    }\n    conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(\"mapred.job.tracker\", \"a\");\n    try {\n        org.apache.oozie.action.hadoop.JavaActionExecutor.checkForDisallowedProps(conf, \"x\");\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n    }\n    conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(\"fs.default.name\", \"a\");\n    try {\n        org.apache.oozie.action.hadoop.JavaActionExecutor.checkForDisallowedProps(conf, \"x\");\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n    }\n    conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(\"a\", \"a\");\n    try {\n        org.apache.oozie.action.hadoop.JavaActionExecutor.checkForDisallowedProps(conf, \"x\");\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.fail();\n    }\n    org.jdom.Element actionXml = org.apache.oozie.util.XmlUtils.parseXml((((((((((((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<job-xml>job.xml</job-xml>\") + \"<job-xml>job2.xml</job-xml>\") + \"<configuration>\") + \"<property><name>oozie.launcher.a</name><value>LA</value></property>\") + \"<property><name>a</name><value>AA</value></property>\") + \"<property><name>b</name><value>BB</value></property>\") + \"</configuration>\") + \"<main-class>MAIN-CLASS</main-class>\") + \"<java-opts>JAVA-OPTS</java-opts>\") + \"<arg>A1</arg>\") + \"<arg>A2</arg>\") + \"<file>f.jar</file>\") + \"<archive>a.tar</archive>\") + \"</java>\");\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"wf\");\n    org.apache.hadoop.fs.Path appJarPath = new org.apache.hadoop.fs.Path(\"lib/a.jar\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, appJarPath)).close();\n    org.apache.hadoop.fs.Path appSoPath = new org.apache.hadoop.fs.Path(\"lib/a.so\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, appSoPath)).close();\n    org.apache.hadoop.fs.Path appSo1Path = new org.apache.hadoop.fs.Path(\"lib/a.so.1\");\n    java.lang.String expectedSo1Path = \"lib/a.so.1#a.so.1\";\n    getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, appSo1Path)).close();\n    org.apache.hadoop.fs.Path filePath = new org.apache.hadoop.fs.Path(\"f.jar\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, filePath)).close();\n    org.apache.hadoop.fs.Path archivePath = new org.apache.hadoop.fs.Path(\"a.tar\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, archivePath)).close();\n    org.apache.oozie.util.XConfiguration protoConf = new org.apache.oozie.util.XConfiguration();\n    protoConf.set(org.apache.oozie.service.WorkflowAppService.HADOOP_USER, org.apache.oozie.test.XTestCase.getTestUser());\n    protoConf.setStrings(org.apache.oozie.service.WorkflowAppService.APP_LIB_PATH_LIST, appJarPath.toString(), appSoPath.toString());\n    org.apache.oozie.WorkflowJobBean wf = createBaseWorkflow(protoConf, \"action\");\n    org.apache.oozie.WorkflowActionBean action = ((org.apache.oozie.WorkflowActionBean) (wf.getActions().get(0)));\n    action.setType(ae.getType());\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(wf, action);\n    conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(\"c\", \"C\");\n    conf.set(\"oozie.launcher.d\", \"D\");\n    java.io.OutputStream os = getFileSystem().create(new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"job.xml\"));\n    conf.writeXml(os);\n    os.close();\n    conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(\"e\", \"E\");\n    conf.set(\"oozie.launcher.f\", \"F\");\n    os = getFileSystem().create(new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"job2.xml\"));\n    conf.writeXml(os);\n    os.close();\n    conf = ae.createBaseHadoopConf(context, actionXml);\n    junit.framework.Assert.assertEquals(protoConf.get(org.apache.oozie.service.WorkflowAppService.HADOOP_USER), conf.get(org.apache.oozie.service.WorkflowAppService.HADOOP_USER));\n    junit.framework.Assert.assertEquals(getJobTrackerUri(), conf.get(\"mapred.job.tracker\"));\n    junit.framework.Assert.assertEquals(getNameNodeUri(), conf.get(\"fs.default.name\"));\n    conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupLauncherConf(conf, actionXml, getFsTestCaseDir(), context);\n    junit.framework.Assert.assertEquals(\"LA\", conf.get(\"oozie.launcher.a\"));\n    junit.framework.Assert.assertEquals(\"LA\", conf.get(\"a\"));\n    junit.framework.Assert.assertNull(conf.get(\"b\"));\n    junit.framework.Assert.assertNull(conf.get(\"oozie.launcher.d\"));\n    junit.framework.Assert.assertNull(conf.get(\"d\"));\n    junit.framework.Assert.assertNull(conf.get(\"action.foo\"));\n    junit.framework.Assert.assertEquals(\"action.barbar\", conf.get(\"action.foofoo\"));\n    conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());\n    junit.framework.Assert.assertEquals(\"LA\", conf.get(\"oozie.launcher.a\"));\n    junit.framework.Assert.assertEquals(\"AA\", conf.get(\"a\"));\n    junit.framework.Assert.assertEquals(\"BB\", conf.get(\"b\"));\n    junit.framework.Assert.assertEquals(\"C\", conf.get(\"c\"));\n    junit.framework.Assert.assertEquals(\"D\", conf.get(\"oozie.launcher.d\"));\n    junit.framework.Assert.assertEquals(\"E\", conf.get(\"e\"));\n    junit.framework.Assert.assertEquals(\"F\", conf.get(\"oozie.launcher.f\"));\n    junit.framework.Assert.assertEquals(\"action.bar\", conf.get(\"action.foo\"));\n    conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupLauncherConf(conf, actionXml, getFsTestCaseDir(), context);\n    ae.addToCache(conf, appPath, appJarPath.toString(), false);\n    junit.framework.Assert.assertTrue(conf.get(\"mapred.job.classpath.files\").contains(appJarPath.toUri().getPath()));\n    ae.addToCache(conf, appPath, appSoPath.toString(), false);\n    junit.framework.Assert.assertTrue(conf.get(\"mapred.cache.files\").contains(appSoPath.toUri().getPath()));\n    ae.addToCache(conf, appPath, appSo1Path.toString(), false);\n    junit.framework.Assert.assertTrue(conf.get(\"mapred.cache.files\").contains(expectedSo1Path));\n    junit.framework.Assert.assertTrue(ae.getOozieLauncherJar(context).startsWith(context.getActionDir().toString()));\n    junit.framework.Assert.assertTrue(ae.getOozieLauncherJar(context).endsWith(ae.getLauncherJarName()));\n    junit.framework.Assert.assertFalse(getFileSystem().exists(context.getActionDir()));\n    ae.prepareActionDir(getFileSystem(), context);\n    junit.framework.Assert.assertTrue(getFileSystem().exists(context.getActionDir()));\n    junit.framework.Assert.assertTrue(getFileSystem().exists(new org.apache.hadoop.fs.Path(context.getActionDir(), ae.getLauncherJarName())));\n    ae.cleanUpActionDir(getFileSystem(), context);\n    junit.framework.Assert.assertFalse(getFileSystem().exists(context.getActionDir()));\n    conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupLauncherConf(conf, actionXml, getFsTestCaseDir(), context);\n    ae.setLibFilesArchives(context, actionXml, appPath, conf);\n    junit.framework.Assert.assertTrue(conf.get(\"mapred.cache.files\").contains(filePath.toUri().getPath()));\n    junit.framework.Assert.assertTrue(conf.get(\"mapred.cache.archives\").contains(archivePath.toUri().getPath()));\n    conf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());\n    ae.setLibFilesArchives(context, actionXml, appPath, conf);\n    junit.framework.Assert.assertTrue(conf.get(\"mapred.cache.files\").contains(filePath.toUri().getPath()));\n    junit.framework.Assert.assertTrue(conf.get(\"mapred.cache.archives\").contains(archivePath.toUri().getPath()));\n    org.apache.hadoop.conf.Configuration actionConf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(actionConf, context, actionXml, getFsTestCaseDir());\n    conf = ae.createLauncherConf(getFileSystem(), context, action, actionXml, actionConf);\n    ae.setupLauncherConf(conf, actionXml, getFsTestCaseDir(), context);\n    junit.framework.Assert.assertEquals(\"MAIN-CLASS\", ae.getLauncherMain(conf, actionXml));\n    junit.framework.Assert.assertTrue(conf.get(\"mapred.child.java.opts\").contains(\"JAVA-OPTS\"));\n    junit.framework.Assert.assertEquals(java.util.Arrays.asList(\"A1\", \"A2\"), java.util.Arrays.asList(org.apache.oozie.action.hadoop.LauncherMapper.getMainArguments(conf)));\n    junit.framework.Assert.assertTrue(getFileSystem().exists(new org.apache.hadoop.fs.Path(context.getActionDir(), org.apache.oozie.action.hadoop.LauncherMapper.ACTION_CONF_XML)));\n    actionXml = org.apache.oozie.util.XmlUtils.parseXml(((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node> <configuration>\") + \"<property><name>mapred.job.queue.name</name><value>AQ</value></property>\") + \"<property><name>oozie.action.sharelib.for.java</name><value>sharelib-java</value></property>\") + \"</configuration>\") + \"<main-class>MAIN-CLASS</main-class>\") + \"</java>\");\n    actionConf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(actionConf, context, actionXml, appPath);\n    conf = ae.createLauncherConf(getFileSystem(), context, action, actionXml, actionConf);\n    junit.framework.Assert.assertEquals(\"AQ\", conf.get(\"mapred.job.queue.name\"));\n    junit.framework.Assert.assertEquals(\"AQ\", actionConf.get(\"mapred.job.queue.name\"));\n    junit.framework.Assert.assertEquals(\"sharelib-java\", actionConf.get(\"oozie.action.sharelib.for.java\"));\n    actionXml = org.apache.oozie.util.XmlUtils.parseXml((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node> <configuration>\") + \"<property><name>oozie.launcher.mapred.job.queue.name</name><value>LQ</value></property>\") + \"</configuration>\") + \"<main-class>MAIN-CLASS</main-class>\") + \"</java>\");\n    actionConf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(actionConf, context, actionXml, appPath);\n    conf = ae.createLauncherConf(getFileSystem(), context, action, actionXml, actionConf);\n    junit.framework.Assert.assertEquals(\"LQ\", conf.get(\"mapred.job.queue.name\"));\n    actionXml = org.apache.oozie.util.XmlUtils.parseXml(((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node> <configuration>\") + \"<property><name>oozie.launcher.mapred.job.queue.name</name><value>LQ</value></property>\") + \"<property><name>mapred.job.queue.name</name><value>AQ</value></property>\") + \"</configuration>\") + \"<main-class>MAIN-CLASS</main-class>\") + \"</java>\");\n    actionConf = ae.createBaseHadoopConf(context, actionXml);\n    ae.setupActionConf(actionConf, context, actionXml, appPath);\n    conf = ae.createLauncherConf(getFileSystem(), context, action, actionXml, actionConf);\n    junit.framework.Assert.assertEquals(\"LQ\", conf.get(\"mapred.job.queue.name\"));\n    junit.framework.Assert.assertEquals(\"AQ\", actionConf.get(\"mapred.job.queue.name\"));\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testSetupMethods",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-freq\");\n    java.lang.String expr = \"${coord:endOfMonths(1)}\";\n    expr = \"${coord:endOfMonths(3)}\";\n    junit.framework.Assert.assertEquals(\"3\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    junit.framework.Assert.assertEquals(org.apache.oozie.coord.TimeUnit.MONTH, ((org.apache.oozie.coord.TimeUnit) (eval.getVariable(\"timeunit\"))));\n    junit.framework.Assert.assertEquals(org.apache.oozie.coord.TimeUnit.END_OF_MONTH, ((org.apache.oozie.coord.TimeUnit) (eval.getVariable(\"endOfDuration\"))));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testEndOfMonths",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v0/job/*\", org.apache.oozie.servlet.V0JobServlet.class, org.apache.oozie.servlet.TestV0JobServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO);\n            java.net.URL url = createURL((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + 1) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject obj = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + 1) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, obj.get(org.apache.oozie.client.rest.JsonTags.WORKFLOW_ID));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO, org.apache.oozie.servlet.MockDagEngineService.did);\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO);\n            url = createURL((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + (org.apache.oozie.servlet.MockDagEngineService.workflows.size() + 1)) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode());\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_INFO, org.apache.oozie.servlet.MockDagEngineService.did);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV0JobServlet",
        "Label": 1,
        "MethodName": "testJobInfo",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String inherit = \"false\";\n    java.lang.String inheritWF = \"true\";\n    java.lang.String[] expectedLibs1 = new java.lang.String[]{ \"parent1.jar\", \"parent2.jar\", \"child1.jar\", \"child2.so\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 1, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs1, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs1, expectedLibs1);\n    java.lang.String[] expectedLibs2 = new java.lang.String[]{ \"parent1.jar\", \"parent2.jar\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 2, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs2, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs2, expectedLibs2);\n    java.lang.String[] expectedLibs3 = new java.lang.String[]{ \"child1.jar\", \"child2.so\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 3, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs3, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs3, expectedLibs3);\n    java.lang.String[] expectedLibs4 = new java.lang.String[]{  };\n    checkSubworkflowLibHelper(inherit, inheritWF, 4, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs4, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs4, expectedLibs4);\n    java.lang.String[] expectedLibs5 = new java.lang.String[]{ \"parent1.jar\", \"parent2.jar\", \"child1.jar\", \"child2.so\", \"same.jar\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 5, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs5, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs5, expectedLibs5);\n}",
        "ClassName": "TestLiteWorkflowAppService",
        "Label": 1,
        "MethodName": "testCreateProtoConfWithSubWorkflowLib4",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testAction(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_RESUME, null);\n}",
        "ClassName": "TestV1JobServlet",
        "Label": 1,
        "MethodName": "testResume",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"rerun-elerr-wf.xml\", -1);\n    java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    final org.apache.oozie.client.OozieClient wfClient = org.apache.oozie.local.LocalOozie.getClient();\n    java.util.Properties conf = wfClient.createConfiguration();\n    conf.setProperty(org.apache.oozie.client.OozieClient.APP_PATH, ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\");\n    conf.setProperty(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.setProperty(\"inPath\", getFsTestCaseDir().toString());\n    conf.setProperty(\"checkDir\", getFsTestCaseDir().toString() + \"/check\");\n    final java.lang.String jobId1 = wfClient.submit(conf);\n    wfClient.start(jobId1);\n    waitFor(15 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return wfClient.getJobInfo(jobId1).getStatus() == org.apache.oozie.client.WorkflowJob.Status.FAILED;\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.FAILED, wfClient.getJobInfo(jobId1).getStatus());\n    reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"rerun-el-wf.xml\", -1);\n    writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    sleep(5000);\n    conf.setProperty(org.apache.oozie.client.OozieClient.RERUN_SKIP_NODES, \"hdfs11\");\n    wfClient.reRun(jobId1, conf);\n    waitFor(15 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return wfClient.getJobInfo(jobId1).getStatus() == org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED;\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfClient.getJobInfo(jobId1).getStatus());\n}",
        "ClassName": "TestReRunXCommand",
        "Label": 1,
        "MethodName": "testRedeploy",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.WorkflowJobBean wfJob1 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, coordJob.getId());\n    org.apache.oozie.WorkflowJobBean wfJob2 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, coordJob.getId());\n    org.apache.oozie.WorkflowJobBean wfJob3 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, coordJob.getId());\n    org.apache.oozie.WorkflowJobBean wfJob4 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, coordJob.getId());\n    org.apache.oozie.WorkflowJobBean wfJob5 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, coordJob.getId());\n    org.apache.oozie.WorkflowActionBean wfAction1 = addRecordToWfActionTable(wfJob1.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction2 = addRecordToWfActionTable(wfJob2.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction3 = addRecordToWfActionTable(wfJob3.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction4 = addRecordToWfActionTable(wfJob4.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction5 = addRecordToWfActionTable(wfJob5.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordAction1 = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob1.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction2 = addRecordToCoordActionTable(coordJob.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob2.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction3 = addRecordToCoordActionTable(coordJob.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob3.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction4 = addRecordToCoordActionTable(coordJob.getId(), 4, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob4.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction5 = addRecordToCoordActionTable(coordJob.getId(), 5, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob5.getId(), \"SUCCEEDED\", 0);\n    java.util.List<java.lang.String> children = new java.util.ArrayList<java.lang.String>();\n    children.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobsGetFromParentIdJPAExecutor(coordJob.getId(), 3)));\n    junit.framework.Assert.assertEquals(3, children.size());\n    children.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobsGetFromParentIdJPAExecutor(coordJob.getId(), 3, 3)));\n    junit.framework.Assert.assertEquals(5, children.size());\n    checkChildren(children, wfJob1.getId(), wfJob2.getId(), wfJob3.getId(), wfJob4.getId(), wfJob5.getId());\n}",
        "ClassName": "TestWorkflowJobsGetFromParentIdJPAExecutor",
        "Label": 1,
        "MethodName": "testGetWorkflowParentTooMany",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.SchemaService wss = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.SchemaService.class);\n    javax.xml.validation.Validator validator = wss.getSchema(org.apache.oozie.service.SchemaService.SchemaName.WORKFLOW).newValidator();\n    validator.validate(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(org.apache.oozie.service.TestSchemaService.WF_4_MULTIPLE_JAVA_OPTS)));\n}",
        "ClassName": "TestSchemaService",
        "Label": 1,
        "MethodName": "testWfMultipleJavaOpts",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    _testGetJob(job.getId(), job.getExternalId());\n}",
        "ClassName": "TestWorkflowJobGetJPAExecutor",
        "Label": 1,
        "MethodName": "testWfJobGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.EventHandlerService ehs = services.get(org.apache.oozie.service.EventHandlerService.class);\n    junit.framework.Assert.assertNotNull(ehs);\n    ehs.setAppTypes(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(new java.lang.String[]{ \"coordinator_action\" })));\n    org.apache.oozie.sla.service.SLAService slas = services.get(org.apache.oozie.sla.service.SLAService.class);\n    junit.framework.Assert.assertNotNull(slas);\n    java.lang.String coordXml = org.apache.oozie.util.IOUtils.getResourceAsString(\"coord-action-sla.xml\", -1);\n    org.apache.hadoop.fs.Path appPath = getFsTestCaseDir();\n    writeToFile(coordXml, appPath, \"coordinator.xml\");\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath.toString());\n    java.lang.String wfXml = org.apache.oozie.util.IOUtils.getResourceAsString(\"wf-credentials.xml\", -1);\n    writeToFile(wfXml, appPath, \"workflow.xml\");\n    conf.set(\"wfAppPath\", appPath.toString());\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    cal.setTime(new java.util.Date());\n    cal.add(java.util.Calendar.MINUTE, -20);\n    java.util.Date nominal = cal.getTime();\n    java.lang.String nominalTime = org.apache.oozie.util.DateUtils.formatDateOozieTZ(nominal);\n    conf.set(\"nominal_time\", nominalTime);\n    cal.setTime(nominal);\n    cal.add(java.util.Calendar.MINUTE, 10);\n    java.lang.String expectedStart = org.apache.oozie.util.DateUtils.formatDateOozieTZ(cal.getTime());\n    cal.setTime(nominal);\n    cal.add(java.util.Calendar.MINUTE, 30);\n    java.lang.String expectedEnd = org.apache.oozie.util.DateUtils.formatDateOozieTZ(cal.getTime());\n    java.lang.String appName = \"test-coord-sla\";\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    java.lang.String jobId = sc.call();\n    java.lang.Thread.sleep(500);\n    final org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor getCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(jobId + \"@1\");\n    org.apache.oozie.CoordinatorActionBean action = jpa.execute(getCmd);\n    java.lang.String actionId = action.getId();\n    org.apache.oozie.sla.SLACalcStatus slaEvent = slas.getSLACalculator().get(actionId);\n    junit.framework.Assert.assertEquals(actionId, slaEvent.getJobId());\n    junit.framework.Assert.assertEquals(appName, slaEvent.getAppName());\n    junit.framework.Assert.assertEquals(org.apache.oozie.AppType.COORDINATOR_ACTION, slaEvent.getAppType());\n    junit.framework.Assert.assertEquals(nominalTime, org.apache.oozie.util.DateUtils.formatDateOozieTZ(slaEvent.getNominalTime()));\n    junit.framework.Assert.assertEquals(expectedStart, org.apache.oozie.util.DateUtils.formatDateOozieTZ(slaEvent.getExpectedStart()));\n    junit.framework.Assert.assertEquals(expectedEnd, org.apache.oozie.util.DateUtils.formatDateOozieTZ(slaEvent.getExpectedEnd()));\n    junit.framework.Assert.assertEquals((30 * 60) * 1000, slaEvent.getExpectedDuration());\n    junit.framework.Assert.assertEquals(alert_events, slaEvent.getAlertEvents());\n    ehs.getEventQueue().clear();\n    slas.runSLAWorker();\n    slaEvent = ((org.apache.oozie.sla.SLACalcStatus) (ehs.getEventQueue().poll()));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.SLAEvent.SLAStatus.NOT_STARTED, slaEvent.getSLAStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.SLAEvent.EventStatus.START_MISS, slaEvent.getEventStatus());\n    action.setStatus(org.apache.oozie.client.CoordinatorAction.Status.SUBMITTED);\n    final org.apache.oozie.executor.jpa.CoordActionUpdateJPAExecutor writeCmd = new org.apache.oozie.executor.jpa.CoordActionUpdateJPAExecutor(action);\n    jpa.execute(writeCmd);\n    new org.apache.oozie.command.coord.CoordActionStartXCommand(actionId, org.apache.oozie.test.XTestCase.getTestUser(), appName, \"authtoken\", jobId).call();\n    slaEvent = slas.getSLACalculator().get(actionId);\n    slaEvent.setStartProcessed(false);\n    ehs.new EventWorker().run();\n    java.lang.Thread.sleep(300);\n    slaEvent = ((org.apache.oozie.sla.SLACalcStatus) (ehs.getEventQueue().poll()));\n    junit.framework.Assert.assertEquals(actionId, slaEvent.getJobId());\n    junit.framework.Assert.assertNotNull(slaEvent.getActualStart());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.SLAEvent.SLAStatus.IN_PROCESS, slaEvent.getSLAStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.RUNNING.name(), slaEvent.getJobStatus());\n    new org.apache.oozie.command.coord.CoordKillXCommand(jobId).call();\n    ehs.new EventWorker().run();\n    java.lang.Thread.sleep(300);\n    slaEvent = ((org.apache.oozie.sla.SLACalcStatus) (ehs.getEventQueue().poll()));\n    junit.framework.Assert.assertEquals(actionId, slaEvent.getJobId());\n    junit.framework.Assert.assertNotNull(slaEvent.getActualEnd());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.SLAEvent.EventStatus.END_MISS, slaEvent.getEventStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.SLAEvent.SLAStatus.MISS, slaEvent.getSLAStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.KILLED.name(), slaEvent.getJobStatus());\n}",
        "ClassName": "TestSLAEventGeneration",
        "Label": 1,
        "MethodName": "testCoordinatorActionCommands",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertNotNull(org.apache.oozie.service.Services.get().get(org.apache.oozie.service.SchemaService.class));\n}",
        "ClassName": "TestSchemaService",
        "Label": 1,
        "MethodName": "testService",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_COORD_STATUS, \"true\");\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T01:00Z\");\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-02T23:59Z\");\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, start, end, false, true, 3);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    coordJob.setAppNamespace(org.apache.oozie.service.SchemaService.COORDINATOR_NAMESPACE_URI_1);\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob));\n    org.apache.oozie.CoordinatorActionBean action1 = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.FAILED, \"coord-rerun-action1.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean action2 = addRecordToCoordActionTable(coordJob.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean action3 = addRecordToCoordActionTable(coordJob.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\", 0);\n    java.lang.String rerunScope = (java.lang.Integer.toString(1) + \"-\") + java.lang.Integer.toString(2);\n    final org.apache.oozie.client.OozieClient coordClient = org.apache.oozie.local.LocalOozie.getCoordClient();\n    coordClient.reRunCoord(coordJob.getId(), org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_ACTION, rerunScope, false, true);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    coordJob = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action1.getId());\n    action1 = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertNotSame(action1.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.FAILED);\n    coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action2.getId());\n    action2 = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertNotSame(action2.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunForBackwardSupport1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.Instrumentation.Timer timer = new org.apache.oozie.util.Instrumentation.Timer();\n    junit.framework.Assert.assertEquals(0, timer.getTicks());\n    junit.framework.Assert.assertEquals(0, timer.getTotal());\n    junit.framework.Assert.assertEquals(0, timer.getOwn());\n    junit.framework.Assert.assertEquals(0, timer.getOwnAvg());\n    junit.framework.Assert.assertEquals(0, timer.getTotalAvg());\n    junit.framework.Assert.assertEquals(0, timer.getOwnSquareSum());\n    junit.framework.Assert.assertEquals(0, timer.getTotalSquareSum());\n    junit.framework.Assert.assertEquals(0, timer.getOwnMin());\n    junit.framework.Assert.assertEquals(0, timer.getOwnMax());\n    junit.framework.Assert.assertEquals(0, timer.getTotalMin());\n    junit.framework.Assert.assertEquals(0, timer.getTotalMax());\n    junit.framework.Assert.assertEquals(0, timer.getValue().getTicks());\n    junit.framework.Assert.assertEquals(0, timer.getValue().getTotal());\n    junit.framework.Assert.assertEquals(0, timer.getValue().getOwn());\n    junit.framework.Assert.assertEquals(0, timer.getValue().getOwnAvg());\n    junit.framework.Assert.assertEquals(0, timer.getValue().getTotalAvg());\n    junit.framework.Assert.assertEquals(0, timer.getValue().getOwnSquareSum());\n    junit.framework.Assert.assertEquals(0, timer.getValue().getTotalSquareSum());\n    junit.framework.Assert.assertEquals(0, timer.getValue().getOwnMin());\n    junit.framework.Assert.assertEquals(0, timer.getValue().getOwnMax());\n    junit.framework.Assert.assertEquals(0, timer.getValue().getTotalMin());\n    junit.framework.Assert.assertEquals(0, timer.getValue().getTotalMax());\n    org.apache.oozie.util.Instrumentation.Cron cron1 = new org.apache.oozie.util.Instrumentation.Cron();\n    cron1.start();\n    java.lang.Thread.sleep(org.apache.oozie.util.TestInstrumentation.INTERVAL);\n    cron1.stop();\n    timer.addCron(cron1);\n    junit.framework.Assert.assertEquals(1, timer.getTicks());\n    junit.framework.Assert.assertEquals(cron1.getTotal(), timer.getTotal());\n    junit.framework.Assert.assertEquals(cron1.getOwn(), timer.getOwn());\n    junit.framework.Assert.assertEquals(cron1.getOwn(), timer.getOwnAvg());\n    junit.framework.Assert.assertEquals(cron1.getTotal(), timer.getTotalAvg());\n    junit.framework.Assert.assertEquals(cron1.getOwn() * cron1.getOwn(), timer.getOwnSquareSum());\n    junit.framework.Assert.assertEquals(cron1.getTotal() * cron1.getTotal(), timer.getTotalSquareSum());\n    junit.framework.Assert.assertEquals(cron1.getOwn(), timer.getOwnMin());\n    junit.framework.Assert.assertEquals(cron1.getOwn(), timer.getOwnMax());\n    junit.framework.Assert.assertEquals(cron1.getTotal(), timer.getTotalMin());\n    junit.framework.Assert.assertEquals(cron1.getTotal(), timer.getTotalMax());\n    junit.framework.Assert.assertEquals(1, timer.getValue().getTicks());\n    junit.framework.Assert.assertEquals(cron1.getTotal(), timer.getValue().getTotal());\n    junit.framework.Assert.assertEquals(cron1.getOwn(), timer.getValue().getOwn());\n    junit.framework.Assert.assertEquals(cron1.getOwn(), timer.getValue().getOwnAvg());\n    junit.framework.Assert.assertEquals(cron1.getTotal(), timer.getValue().getTotalAvg());\n    junit.framework.Assert.assertEquals(cron1.getOwn() * cron1.getOwn(), timer.getValue().getOwnSquareSum());\n    junit.framework.Assert.assertEquals(cron1.getTotal() * cron1.getTotal(), timer.getValue().getTotalSquareSum());\n    junit.framework.Assert.assertEquals(cron1.getOwn(), timer.getValue().getOwnMin());\n    junit.framework.Assert.assertEquals(cron1.getOwn(), timer.getValue().getOwnMax());\n    junit.framework.Assert.assertEquals(cron1.getTotal(), timer.getValue().getTotalMin());\n    junit.framework.Assert.assertEquals(cron1.getTotal(), timer.getValue().getTotalMax());\n    org.apache.oozie.util.Instrumentation.Cron cron2 = new org.apache.oozie.util.Instrumentation.Cron();\n    cron2.start();\n    java.lang.Thread.sleep(org.apache.oozie.util.TestInstrumentation.INTERVAL * 2);\n    cron2.stop();\n    timer.addCron(cron2);\n    junit.framework.Assert.assertEquals(2, timer.getTicks());\n    junit.framework.Assert.assertEquals(cron1.getTotal() + cron2.getTotal(), timer.getTotal());\n    junit.framework.Assert.assertEquals(cron1.getOwn() + cron2.getOwn(), timer.getOwn());\n    junit.framework.Assert.assertEquals((cron1.getOwn() + cron2.getOwn()) / 2, timer.getOwnAvg());\n    junit.framework.Assert.assertEquals((cron1.getTotal() + cron2.getTotal()) / 2, timer.getTotalAvg());\n    junit.framework.Assert.assertEquals((cron1.getOwn() * cron1.getOwn()) + (cron2.getOwn() * cron2.getOwn()), timer.getOwnSquareSum());\n    junit.framework.Assert.assertEquals((cron1.getTotal() * cron1.getTotal()) + (cron2.getTotal() * cron2.getTotal()), timer.getTotalSquareSum());\n    junit.framework.Assert.assertEquals(cron1.getOwn(), timer.getOwnMin());\n    junit.framework.Assert.assertEquals(cron2.getOwn(), timer.getOwnMax());\n    junit.framework.Assert.assertEquals(cron1.getTotal(), timer.getTotalMin());\n    junit.framework.Assert.assertEquals(cron2.getTotal(), timer.getTotalMax());\n}",
        "ClassName": "TestInstrumentation",
        "Label": 1,
        "MethodName": "testTimer",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertNotNull(org.apache.oozie.service.Services.get().get(org.apache.oozie.service.ELService.class));\n    org.apache.oozie.util.ELEvaluator eval = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.ELService.class).createEvaluator(\"workflow\");\n    junit.framework.Assert.assertNotNull(eval.evaluate(\"${KB}\", java.lang.Long.class));\n    junit.framework.Assert.assertNotNull(eval.evaluate(\"${MB}\", java.lang.Long.class));\n    junit.framework.Assert.assertNotNull(eval.evaluate(\"${GB}\", java.lang.Long.class));\n    junit.framework.Assert.assertNotNull(eval.evaluate(\"${TB}\", java.lang.Long.class));\n    junit.framework.Assert.assertNotNull(eval.evaluate(\"${PB}\", java.lang.Long.class));\n    junit.framework.Assert.assertNotNull(eval.evaluate(\"${trim(' ')}\", java.lang.String.class));\n    junit.framework.Assert.assertNotNull(eval.evaluate(\"${concat('a', 'b')}\", java.lang.String.class));\n    junit.framework.Assert.assertNotNull(eval.evaluate(\"${firstNotNull(null, 'b')}\", java.lang.String.class));\n    junit.framework.Assert.assertNotNull(eval.evaluate(\"${timestamp()}\", java.lang.String.class));\n    junit.framework.Assert.assertNotNull(eval.evaluate(\"${urlEncode('abc')}\", java.lang.String.class));\n}",
        "ClassName": "TestELService",
        "Label": 1,
        "MethodName": "testELForWorkflow",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = \"<coordinator-app name=\\\"${appName}-foo\\\" frequency=\\\"${coord:days(1)}\\\" start=\\\"2009-02-01T01:00Z\\\" end=\\\"2009-02-03T23:59Z\\\" timezone=\\\"UTC\\\" \" + (((((((((((((\"xmlns=\\\"uri:oozie:coordinator:0.2\\\"> <controls> \" + \"<execution>LIFO</execution> </controls> <datasets> \") + \"<dataset name=\\\"a\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"<dataset name=\\\"local_a\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"</datasets> <input-events> \") + \"<data-in name=\\\"A\\\" dataset=\\\"a\\\"> <instance>${coord:latest(0)}</instance> </data-in>  \") + \"</input-events> \") + \"<output-events> <data-out name=\\\"LOCAL_A\\\" dataset=\\\"local_a\\\"> \") + \"<instance>${coord:current(-1)}</instance> </data-out> </output-events> <action> <workflow> <app-path>hdfs:///tmp/workflows/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>${coord:dataIn('A')}</value> </property> \") + \"<property> <name>inputB</name> <value>${coord:dataOut('LOCAL_A')}</value> \") + \"</property></configuration> </workflow> </action> </coordinator-app>\");\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.set(\"appName\", \"var-app-name\");\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    java.lang.String jobId = sc.call();\n    junit.framework.Assert.assertEquals(jobId.substring(jobId.length() - 2), \"-C\");\n    org.apache.oozie.CoordinatorJobBean job = checkCoordJobs(jobId);\n    junit.framework.Assert.assertNotNull(job);\n    junit.framework.Assert.assertEquals(\"var-app-name-foo\", job.getAppName());\n    junit.framework.Assert.assertEquals(job.getTimeout(), org.apache.oozie.service.Services.get().getConf().getInt(\"oozie.service.coord.normal.default.timeout\", -2));\n    junit.framework.Assert.assertEquals(job.getConcurrency(), org.apache.oozie.service.Services.get().getConf().getInt(\"oozie.service.coord.default.concurrency\", 1));\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testBasicSubmit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String actionXml = (((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<main-class>\") + org.apache.oozie.action.hadoop.LauncherMainTester.class.getName()) + \"</main-class>\") + \"<arg>id</arg>\") + \"<capture-output/>\") + \"</java>\";\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml, null);\n    final org.apache.hadoop.mapred.RunningJob runningJob = submitAction(context);\n    waitFor(60 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return runningJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(runningJob.isSuccessful());\n    org.apache.oozie.action.ActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    try {\n        ae.check(context, context.getAction());\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        if (!ex.getMessage().contains(\"IDSWAP\")) {\n            junit.framework.Assert.fail();\n        }\n    }\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testIdSwapSubmitOK",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.Thread t = new org.apache.oozie.command.TestXCommand.LockGetter();\n    t.start();\n    sleep(150);\n    org.apache.oozie.command.TestXCommand.AXCommand command = new org.apache.oozie.command.TestXCommand.AXCommand(true);\n    try {\n        command.call();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.command.CommandException ex) {\n    } catch (java.lang.Exception ex) {\n    }\n    t.interrupt();\n}",
        "ClassName": "TestXCommand",
        "Label": 1,
        "MethodName": "testXCommandLifecycleLockingFailingToLock",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.client.HeaderTestingVersionServlet.OOZIE_HEADERS.clear();\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"admin\", \"-version\", \"-oozie\", oozieUrl };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testServerBuildVersion",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"one\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"f\", \"end\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\", \"three\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"two\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"three\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"four\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"four\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"end\", \"end\")).addNode(new org.apache.oozie.workflow.lite.KillNodeDef(\"k\", \"kill\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class)).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    try {\n        invokeForkJoin(parser, def);\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Unexpected Exception\");\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testSimpleForkJoin",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path actionDir = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    final org.apache.hadoop.mapred.RunningJob runningJob = _test(\"exit1\");\n    waitFor(2000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return runningJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(runningJob.isSuccessful());\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainDone(runningJob));\n    junit.framework.Assert.assertFalse(org.apache.oozie.action.hadoop.LauncherMapper.isMainSuccessful(runningJob));\n    junit.framework.Assert.assertFalse(org.apache.oozie.action.hadoop.LauncherMapper.hasOutputData(runningJob));\n    junit.framework.Assert.assertFalse(org.apache.oozie.action.hadoop.LauncherMapper.hasIdSwap(runningJob));\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainDone(runningJob));\n    junit.framework.Assert.assertTrue(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getErrorPath(actionDir)));\n    junit.framework.Assert.assertFalse(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getIdSwapPath(actionDir)));\n    junit.framework.Assert.assertFalse(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getOutputDataPath(actionDir)));\n}",
        "ClassName": "TestLauncher",
        "Label": 1,
        "MethodName": "testExit1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.Thread t = new org.apache.oozie.command.TestXCommand.LockGetter();\n    t.start();\n    org.apache.oozie.command.TestXCommand.AXCommand command = new org.apache.oozie.command.TestXCommand.AXCommand(false);\n    command.call();\n    junit.framework.Assert.assertTrue(command.execute);\n    t.interrupt();\n}",
        "ClassName": "TestXCommand",
        "Label": 1,
        "MethodName": "testXCommandLifecycleNotLocking",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PAUSED, false);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    job.setPauseTime(null);\n    jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobUpdateJPAExecutor(job));\n    org.apache.oozie.BundleActionBean bundleAction1 = this.addRecordToBundleActionTable(job.getId(), \"action1\", 0, org.apache.oozie.client.Job.Status.PAUSED);\n    org.apache.oozie.BundleActionBean bundleAction2 = this.addRecordToBundleActionTable(job.getId(), \"action2\", 0, org.apache.oozie.client.Job.Status.PAUSED);\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean coordJob1 = addRecordToCoordJobTable(\"action1\", org.apache.oozie.client.Job.Status.PAUSED, start, end, false);\n    org.apache.oozie.CoordinatorJobBean coordJob2 = addRecordToCoordJobTable(\"action2\", org.apache.oozie.client.Job.Status.PAUSED, start, end, false);\n    coordJob1.setPauseTime(null);\n    coordJob1.setBundleId(job.getId());\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob1));\n    coordJob2.setPauseTime(null);\n    coordJob2.setBundleId(job.getId());\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob2));\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSED, job.getStatus());\n    java.lang.Runnable pauseStartRunnable = new org.apache.oozie.service.PauseTransitService.PauseTransitRunnable();\n    pauseStartRunnable.run();\n    final java.lang.String jobId = job.getId();\n    waitFor(10 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean bJob1 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n            return bJob1.getStatus() == org.apache.oozie.client.Job.Status.RUNNING;\n        }\n    });\n    final java.lang.String coordJobId1 = coordJob1.getId();\n    final java.lang.String coordJobId2 = coordJob2.getId();\n    waitFor(10 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean cJob1 = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJobId1));\n            return cJob1.getStatus() == org.apache.oozie.client.Job.Status.RUNNING;\n        }\n    });\n    job = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, job.getStatus());\n    coordJob1 = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJobId1));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, coordJob1.getStatus());\n    coordJob2 = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJobId2));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, coordJob2.getStatus());\n    bundleAction1 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(job.getId(), \"action1\"));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, bundleAction1.getStatus());\n    bundleAction2 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(job.getId(), \"action2\"));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, bundleAction2.getStatus());\n}",
        "ClassName": "TestPauseTransitService",
        "Label": 1,
        "MethodName": "testUnpauseBundleAndCoordinator",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testCoordRerun-C\";\n    final int actionNum = 1;\n    final java.lang.String actionId = (jobId + \"@\") + actionNum;\n    org.apache.oozie.store.CoordinatorStore store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store.beginTrx();\n    try {\n        addRecordToJobTable(jobId, store, org.apache.oozie.client.Job.Status.SUCCEEDED);\n        addRecordToActionTable(jobId, actionNum, actionId, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\");\n        store.commitTrx();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Could not update db.\");\n    } finally {\n        store.closeTrx();\n    }\n    org.apache.oozie.store.CoordinatorStore store1 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store1.beginTrx();\n    org.apache.oozie.CoordinatorActionBean action1 = store1.getCoordinatorAction(actionId, false);\n    junit.framework.Assert.assertEquals(action1.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    store1.commitTrx();\n    store1.closeTrx();\n    final org.apache.oozie.client.OozieClient coordClient = org.apache.oozie.local.LocalOozie.getCoordClient();\n    coordClient.reRunCoord(jobId, org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_DATE, \"2009-12-15T01:00Z\", false, true);\n    org.apache.oozie.store.CoordinatorStore store2 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store2.beginTrx();\n    org.apache.oozie.CoordinatorActionBean action2 = store2.getCoordinatorAction(actionId, false);\n    junit.framework.Assert.assertNotSame(action2.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    store2.commitTrx();\n    store2.closeTrx();\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunDate1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.ParamChecker.checkTimeZone(\"UTC\", \"test\");\n    try {\n        org.apache.oozie.util.ParamChecker.checkTimeZone(\"UTZ\", \"test\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception ex) {\n    }\n    org.apache.oozie.util.ParamChecker.checkTimeZone(\"America/Los_Angeles\", \"test\");\n    try {\n        org.apache.oozie.util.ParamChecker.checkTimeZone(\"America/Los_Angles\", \"test\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestParamChecker",
        "Label": 1,
        "MethodName": "testCheckTimeZone",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2099-02-01T01:00Z\");\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2099-02-03T23:59Z\");\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, startTime, endTime, false, false, 0);\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    checkCoordJobs(job.getId(), org.apache.oozie.client.Job.Status.PREP);\n}",
        "ClassName": "TestCoordMaterializeTransitionXCommand",
        "Label": 1,
        "MethodName": "testMatLookupCommand2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            wc.getJobsInfo(\"name=x\");\n            wc.getJobsInfo(\"user=x\");\n            wc.getJobsInfo(\"group=x\");\n            wc.getJobsInfo(\"status=RUNNING\");\n            wc.getJobsInfo(\"name=x;name=y\");\n            try {\n                wc.getJobsInfo(\"name=\");\n                junit.framework.Assert.fail();\n            } catch (org.apache.oozie.client.OozieClientException ex) {\n            }\n            try {\n                wc.getJobsInfo(\"x=x\");\n                junit.framework.Assert.fail();\n            } catch (org.apache.oozie.client.OozieClientException ex) {\n            }\n            try {\n                wc.getJobsInfo(\"status=X\");\n                junit.framework.Assert.fail();\n            } catch (org.apache.oozie.client.OozieClientException ex) {\n            }\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testJobsStatusFilter",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    job.setPauseTime(new java.util.Date(new java.util.Date().getTime() - (30 * 1000)));\n    job.setKickoffTime(new java.util.Date(new java.util.Date().getTime() + (3600 * 1000)));\n    jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobUpdateJPAExecutor(job));\n    java.lang.Runnable pauseStartRunnable = new org.apache.oozie.service.PauseTransitService.PauseTransitRunnable();\n    pauseStartRunnable.run();\n    final java.lang.String jobId = job.getId();\n    waitFor(10 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean job1 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n            return job1.getStatus() == org.apache.oozie.client.Job.Status.PREPPAUSED;\n        }\n    });\n    job = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PREPPAUSED, job.getStatus());\n    job.setPauseTime(new java.util.Date(new java.util.Date().getTime() + (3600 * 1000)));\n    jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobUpdateJPAExecutor(job));\n    pauseStartRunnable.run();\n    waitFor(10 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean job1 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n            return job1.getStatus() == org.apache.oozie.client.Job.Status.PREP;\n        }\n    });\n    job = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PREP, job.getStatus());\n}",
        "ClassName": "TestPauseTransitService",
        "Label": 1,
        "MethodName": "testPauseUnpause1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, true);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action.getId());\n    job = jpaService.execute(coordJobGetCmd);\n    action = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.SUCCEEDED);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    new org.apache.oozie.command.coord.CoordKillXCommand(job.getId()).call();\n    job = jpaService.execute(coordJobGetCmd);\n    action = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.SUCCEEDED);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n}",
        "ClassName": "TestCoordKillXCommand",
        "Label": 1,
        "MethodName": "testCoordKillFailedOnAction",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\")).close();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-submit\", \"-oozie\", oozieUrl, \"-config\", createPropertiesFileWithTrailingSpaces(appPath.toString()) };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(\"submit\", org.apache.oozie.servlet.MockDagEngineService.did);\n            java.lang.String confStr = org.apache.oozie.servlet.MockDagEngineService.workflows.get(org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT).getConf();\n            org.apache.oozie.util.XConfiguration conf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(confStr));\n            junit.framework.Assert.assertNotNull(conf.get(org.apache.oozie.client.OozieClient.RERUN_SKIP_NODES));\n            junit.framework.Assert.assertEquals(\"node\", conf.get(org.apache.oozie.client.OozieClient.RERUN_SKIP_NODES));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testPropertiesWithTrailingSpaces",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testActionMater-C\";\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:00Z\");\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:14Z\");\n    java.util.Date pauseTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:04Z\");\n    addRecordToJobTable(jobId, startTime, endTime, pauseTime);\n    new org.apache.oozie.command.coord.CoordActionMaterializeCommand(jobId, startTime, endTime).call();\n    checkCoordActions(jobId, 1, null);\n}",
        "ClassName": "TestCoordActionMaterializeCommand",
        "Label": 1,
        "MethodName": "testActionMaterWithPauseTime1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean jobA = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean actionA1 = this.addRecordToWfActionTable(jobA.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean actionA2 = this.addRecordToWfActionTable(jobA.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowJobBean jobB = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean actionB1 = this.addRecordToWfActionTable(jobB.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean actionB2 = this.addRecordToWfActionTable(jobB.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowJobBean jobC = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean actionC1 = this.addRecordToWfActionTable(jobC.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean actionC2 = this.addRecordToWfActionTable(jobC.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    try {\n        setSystemProperty(org.apache.oozie.FaultInjection.FAULT_INJECTION, \"true\");\n        setSystemProperty(org.apache.oozie.command.SkipCommitFaultInjection.ACTION_FAILOVER_FAULT_INJECTION, \"true\");\n        java.util.List<java.lang.String> deleteList = new java.util.ArrayList<java.lang.String>();\n        deleteList.add(jobA.getId());\n        deleteList.add(jobB.getId());\n        deleteList.add(jobC.getId());\n        try {\n            jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobsDeleteJPAExecutor(deleteList));\n            junit.framework.Assert.fail(\"Should have skipped commit for failover testing\");\n        } catch (java.lang.RuntimeException re) {\n            junit.framework.Assert.assertEquals(\"Skipping Commit for Failover Testing\", re.getMessage());\n        }\n    } finally {\n        org.apache.oozie.FaultInjection.deactivate(\"org.apache.oozie.command.SkipCommitFaultInjection\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(jobA.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job A should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(actionA1.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action A1 should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(actionA2.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action A2 should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(jobB.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job B should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(actionB1.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action B1 should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(actionB2.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action B2 should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(jobC.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job C should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(actionC1.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action C1 should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(actionC2.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action C2 should not have been deleted\");\n    }\n}",
        "ClassName": "TestWorkflowJobsDeleteJPAExecutor",
        "Label": 1,
        "MethodName": "testDeleteWorkflowsRollback",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-freq\");\n    java.lang.String expr = \"${coord:minutes(1)}\";\n    expr = \"${coord:minutes(1)}\";\n    junit.framework.Assert.assertEquals(\"1\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    junit.framework.Assert.assertEquals(org.apache.oozie.coord.TimeUnit.MINUTE, ((org.apache.oozie.coord.TimeUnit) (eval.getVariable(\"timeunit\"))));\n    expr = \"${coord:minutes(coord:minutes(1))}\";\n    junit.framework.Assert.assertEquals(\"1\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    junit.framework.Assert.assertEquals(org.apache.oozie.coord.TimeUnit.MINUTE, ((org.apache.oozie.coord.TimeUnit) (eval.getVariable(\"timeunit\"))));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testMinutes",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.command.TestXCommand.AXCommand command = new org.apache.oozie.command.TestXCommand.AXCommand(false);\n    command.mark_fail = true;\n    try {\n        command.call();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.command.CommandException ex) {\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestXCommand",
        "Label": 1,
        "MethodName": "testXCommandeagerVerifyPreconditionFailing",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-freq\");\n    java.lang.String expr = \"${coord:user()}\";\n    junit.framework.Assert.assertEquals(\"test_user\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    init(\"coord-job-submit-instances\");\n    expr = \"${coord:user()}\";\n    junit.framework.Assert.assertEquals(\"test_user\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    init(\"coord-job-submit-data\");\n    expr = \"${coord:user()}\";\n    junit.framework.Assert.assertEquals(\"test_user\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    init(\"coord-sla-submit\");\n    expr = \"${coord:user()}\";\n    junit.framework.Assert.assertEquals(\"test_user\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    init(\"coord-action-create\");\n    expr = \"${coord:user()}\";\n    junit.framework.Assert.assertEquals(\"test_user\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    init(\"coord-action-create-inst\");\n    expr = \"${coord:user()}\";\n    junit.framework.Assert.assertEquals(\"test_user\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    init(\"coord-sla-create\");\n    expr = \"${coord:user()}\";\n    junit.framework.Assert.assertEquals(\"test_user\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    init(\"coord-action-start\");\n    expr = \"${coord:user()}\";\n    junit.framework.Assert.assertEquals(\"test_user\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    init(\"coord-action-create-inst\");\n    expr = \"${coord:user()}\";\n    junit.framework.Assert.assertEquals(\"test_user\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testUser",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testCoordRerun-C\";\n    final int actionNum1 = 1;\n    final int actionNum2 = 2;\n    final java.lang.String actionId1 = (jobId + \"@\") + actionNum1;\n    final java.lang.String actionId2 = (jobId + \"@\") + actionNum2;\n    org.apache.oozie.store.CoordinatorStore store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store.beginTrx();\n    try {\n        addRecordToJobTable(jobId, store, org.apache.oozie.client.Job.Status.SUCCEEDED);\n        addRecordToActionTable(jobId, actionNum1, actionId1, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\");\n        addRecordToActionTable(jobId, actionNum2, actionId2, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action2.xml\");\n        store.commitTrx();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Could not update db.\");\n    } finally {\n        store.closeTrx();\n    }\n    java.lang.String rerunScope = \"1-3\";\n    try {\n        final org.apache.oozie.client.OozieClient coordClient = org.apache.oozie.local.LocalOozie.getCoordClient();\n        coordClient.reRunCoord(jobId, org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_ACTION, rerunScope, false, true);\n        junit.framework.Assert.fail(\"Exception expected because one action is missing from db.\");\n    } catch (org.apache.oozie.client.OozieClientException ex) {\n    }\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunActionsNeg1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testAdminUsers(false, org.apache.oozie.test.XTestCase.getTestUser(), org.apache.oozie.test.XTestCase.getTestUser2());\n}",
        "ClassName": "TestAuthorizationService",
        "Label": 1,
        "MethodName": "testAdminUsersWithAdminGroup",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.email.EmailActionExecutor email = new org.apache.oozie.action.email.EmailActionExecutor();\n    email.validateAndMail(createAuthContext(\"email-action\"), prepareEmailElement(true));\n    junit.framework.Assert.assertEquals(\"bod\", com.icegreen.greenmail.util.GreenMailUtil.getBody(server.getReceivedMessages()[0]));\n}",
        "ClassName": "TestEmailActionExecutor",
        "Label": 1,
        "MethodName": "testDoAuthEmail",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setupServices(\"testevictionontimetoidle\");\n    org.apache.oozie.service.PartitionDependencyManagerService pdms = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.PartitionDependencyManagerService.class);\n    int numItems = 50;\n    long startTime = java.lang.System.currentTimeMillis();\n    for (int i = 0; i < numItems; i++) {\n        org.apache.oozie.util.HCatURI dep = new org.apache.oozie.util.HCatURI(\"hcat://hcat.server.com:5080/mydb/mytbl/id=\" + i);\n        pdms.addMissingDependency(dep, \"\" + i);\n    }\n    verifyWaitingAction(pdms, numItems);\n    org.apache.oozie.service.TestPartitionDependencyManagerEhcache.LOG.info(((\"Time taken to insert and retrive \" + numItems) + \" items is \") + (java.lang.System.currentTimeMillis() - startTime));\n    java.lang.Thread.sleep(1000);\n    for (int i = 0; i < numItems; i++) {\n        junit.framework.Assert.assertNull(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI((\"hcat://hcat.server.com:5080/mydb/mytbl/id=\" + \"\") + i)));\n    }\n}",
        "ClassName": "TestPartitionDependencyManagerEhcache",
        "Label": 1,
        "MethodName": "testEvictionOnTimeToIdle",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.BundleJobBean bundleJobBean = xDataTestCase.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    runTest(\"/v1/job/*\", org.apache.oozie.servlet.V1JobServlet.class, org.apache.oozie.servlet.TestV1JobServletBundleEngine.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockCoordinatorEngineService.reset();\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ACTION_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_ACTION_CHANGE);\n            java.lang.String changeValue = \"endtime=2011-12-01T05:00Z\";\n            params.put(org.apache.oozie.client.rest.RestConstants.JOB_CHANGE_VALUE, changeValue);\n            final java.lang.String id = bundleJobBean.getId();\n            java.net.URL url = createURL(id, params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"PUT\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1JobServletBundleEngine",
        "Label": 1,
        "MethodName": "testBundleEngineChange",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.hadoop.conf.Configuration jobConf = null;\n    try {\n        jobConf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(job.getConf()));\n    } catch (java.io.IOException ioe) {\n        log.warn(\"Configuration parse error. read from DB :\" + job.getConf(), ioe);\n        throw new org.apache.oozie.command.CommandException(org.apache.oozie.ErrorCode.E1005, ioe);\n    }\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(jobConf.get(org.apache.oozie.client.OozieClient.BUNDLE_APP_PATH), \"bundle.xml\");\n    jobConf.set(org.apache.oozie.client.OozieClient.BUNDLE_APP_PATH, appPath.toString());\n    org.apache.oozie.command.bundle.BundleSubmitXCommand submitCmd = new org.apache.oozie.command.bundle.BundleSubmitXCommand(jobConf, job.getAuthToken());\n    submitCmd.call();\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(submitCmd.getJob().getId());\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PREP, job.getStatus());\n    new org.apache.oozie.command.bundle.BundleStartXCommand(job.getId()).call();\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, job.getStatus());\n    sleep(2000);\n    org.apache.oozie.executor.jpa.BundleActionsGetJPAExecutor bundleActionsGetCmd = new org.apache.oozie.executor.jpa.BundleActionsGetJPAExecutor(job.getId());\n    java.util.List<org.apache.oozie.BundleActionBean> actions = jpaService.execute(bundleActionsGetCmd);\n    junit.framework.Assert.assertEquals(2, actions.size());\n    junit.framework.Assert.assertNotNull(actions.get(0).getCoordId());\n    junit.framework.Assert.assertNotNull(actions.get(1).getCoordId());\n    new org.apache.oozie.command.bundle.BundleKillXCommand(job.getId()).call();\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, job.getStatus());\n    actions = jpaService.execute(bundleActionsGetCmd);\n    junit.framework.Assert.assertEquals(true, actions.get(0).isPending());\n    junit.framework.Assert.assertEquals(true, actions.get(1).isPending());\n    final org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd1 = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(actions.get(0).getCoordId());\n    final org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd2 = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(actions.get(1).getCoordId());\n    waitFor(200000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean job1 = jpaService.execute(coordGetCmd1);\n            return job1.getStatus().equals(org.apache.oozie.client.Job.Status.KILLED);\n        }\n    });\n    org.apache.oozie.CoordinatorJobBean job1 = jpaService.execute(coordGetCmd1);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, job1.getStatus());\n    waitFor(200000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean job2 = jpaService.execute(coordGetCmd2);\n            return job2.getStatus().equals(org.apache.oozie.client.Job.Status.KILLED);\n        }\n    });\n    org.apache.oozie.CoordinatorJobBean job2 = jpaService.execute(coordGetCmd2);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, job2.getStatus());\n}",
        "ClassName": "TestBundleKillXCommand",
        "Label": 1,
        "MethodName": "testBundleKill2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testCoordRerun-C\";\n    final int actionNum1 = 1;\n    final int actionNum2 = 2;\n    final java.lang.String actionId1 = (jobId + \"@\") + actionNum1;\n    final java.lang.String actionId2 = (jobId + \"@\") + actionNum2;\n    org.apache.oozie.store.CoordinatorStore store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store.beginTrx();\n    try {\n        addRecordToJobTable(jobId, store, org.apache.oozie.client.Job.Status.SUCCEEDED);\n        addRecordToActionTable(jobId, actionNum1, actionId1, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\");\n        addRecordToActionTable(jobId, actionNum2, actionId2, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action2.xml\");\n        store.commitTrx();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Could not update db.\");\n    } finally {\n        store.closeTrx();\n    }\n    java.lang.String rerunScope = (java.lang.Integer.toString(actionNum1) + \"-\") + java.lang.Integer.toString(actionNum2);\n    final org.apache.oozie.client.OozieClient coordClient = org.apache.oozie.local.LocalOozie.getCoordClient();\n    coordClient.reRunCoord(jobId, org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_ACTION, rerunScope, false, true);\n    org.apache.oozie.store.CoordinatorStore store1 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store1.beginTrx();\n    org.apache.oozie.CoordinatorActionBean action1 = store1.getCoordinatorAction(actionId1, false);\n    junit.framework.Assert.assertNotSame(action1.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    org.apache.oozie.CoordinatorActionBean action2 = store1.getCoordinatorAction(actionId2, false);\n    junit.framework.Assert.assertNotSame(action2.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    store1.commitTrx();\n    store1.closeTrx();\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunActions2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, true, true, 3);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.KILLED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    sleep(1000);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.DONEWITHERROR, coordJob.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServiceDoneWithError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.PREP);\n    new org.apache.oozie.command.bundle.BundleStartXCommand(job.getId()).call();\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNING);\n    sleep(2000);\n    org.apache.oozie.executor.jpa.BundleActionsGetJPAExecutor bundleActionsGetExecutor = new org.apache.oozie.executor.jpa.BundleActionsGetJPAExecutor(job.getId());\n    java.util.List<org.apache.oozie.BundleActionBean> actions = jpaService.execute(bundleActionsGetExecutor);\n    junit.framework.Assert.assertEquals(2, actions.size());\n    junit.framework.Assert.assertEquals(true, actions.get(0).isCritical());\n    junit.framework.Assert.assertEquals(job.getId(), actions.get(0).getBundleId());\n    junit.framework.Assert.assertEquals(false, actions.get(1).isCritical());\n    junit.framework.Assert.assertEquals(job.getId(), actions.get(0).getBundleId());\n}",
        "ClassName": "TestBundleStartXCommand",
        "Label": 1,
        "MethodName": "testBundleStart1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorActionBean action4 = new org.apache.oozie.CoordinatorActionBean();\n    action4.setId(\"Coord3@1\");\n    action4.setStatus(org.apache.oozie.client.CoordinatorAction.Status.FAILED);\n    action4.setCreatedTime(org.apache.oozie.util.DateUtils.parseDateUTC(CREATE_TIME));\n    action4.setJobId(\"Coord3\");\n    java.util.Calendar cal = java.util.Calendar.getInstance();\n    cal.setTime(org.apache.oozie.util.DateUtils.parseDateUTC(CREATE_TIME));\n    cal.add(java.util.Calendar.DATE, -1);\n    action4.setNominalTime(cal.getTime());\n    org.apache.oozie.executor.jpa.CoordActionInsertJPAExecutor actionInsert = new org.apache.oozie.executor.jpa.CoordActionInsertJPAExecutor(action4);\n    jpaService.execute(actionInsert);\n    runTest(\"/v1/jobs\", org.apache.oozie.servlet.V1JobsServlet.class, false, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String bulkRequest = \"bundle=\" + bundleName;\n            org.json.simple.JSONArray array = _requestToServer(bulkRequest);\n            junit.framework.Assert.assertEquals(4, array.size());\n            return null;\n        }\n    });\n}",
        "ClassName": "TestBulkMonitorWebServiceAPI",
        "Label": 1,
        "MethodName": "testDefaultStatus",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\")).close();\n            java.lang.String oozieUrl = getContextURL();\n            int wfCount = org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT;\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-run\", \"-oozie\", oozieUrl, \"-config\", createConfigFile(appPath.toString()) };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(\"submit\", org.apache.oozie.servlet.MockDagEngineService.did);\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testRun",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = \"<coordinator-app name=\\\"NAME\\\" frequency=\\\"10\\\" start=\\\"2009-02-01T01:00Z\\\" end=\\\"2009-02-03T23:59Z\\\" timezone=\\\"UTC\\\" \" + (((((\"xmlns=\\\"uri:oozie:coordinator:0.2\\\"> \" + \"<controls> <timeout>10</timeout> <concurrency>2</concurrency> \") + \"<execution>LIFO</execution> </controls> \") + \"<action> <workflow> <app-path>hdfs:///tmp/workflows/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>blah</value> </property> \") + \"</configuration> </workflow> </action> </coordinator-app>\");\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    try {\n        sc.call();\n        junit.framework.Assert.fail(\"Exception expected if user.name is not set!\");\n    } catch (org.apache.oozie.command.CommandException e) {\n    }\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testSubmitNoUsername",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            junit.framework.Assert.assertEquals(org.apache.oozie.BuildInfo.getBuildInfo().getProperty(org.apache.oozie.BuildInfo.BUILD_VERSION), wc.getClientBuildVersion());\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testClientBuildVersion",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date current = new java.util.Date();\n    final java.lang.String jobId = (\"0000000-\" + current.getTime()) + \"-TestSLARegGetJPAExecutor-W\";\n    _addRecordToSLARegistrationTable(jobId, org.apache.oozie.AppType.WORKFLOW_JOB, current, new java.util.Date(), \"END_MISS\", \"alert@example.com\");\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.sla.SLARegistrationGetJPAExecutor readCmd = new org.apache.oozie.executor.jpa.sla.SLARegistrationGetJPAExecutor(jobId);\n    org.apache.oozie.sla.SLARegistrationBean bean = jpaService.execute(readCmd);\n    junit.framework.Assert.assertEquals(jobId, bean.getJobId());\n    junit.framework.Assert.assertEquals(org.apache.oozie.AppType.WORKFLOW_JOB, bean.getAppType());\n    junit.framework.Assert.assertEquals(current, bean.getExpectedStart());\n    junit.framework.Assert.assertEquals(2, bean.getSlaConfigMap().size());\n    junit.framework.Assert.assertEquals(\"END_MISS\", bean.getAlertEvents());\n    junit.framework.Assert.assertEquals(\"alert@example.com\", bean.getAlertContact());\n}",
        "ClassName": "TestSLARegistrationGetJPAExecutor",
        "Label": 1,
        "MethodName": "testSLARegistrationGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-action-create\");\n    java.lang.String expr = \"${coord:daysInMonth(1)}\";\n    junit.framework.Assert.assertEquals(\"30\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:daysInMonth(coord:daysInMonth(1))}\";\n    junit.framework.Assert.assertEquals(\"31\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    org.apache.oozie.coord.SyncCoordAction appInst = new org.apache.oozie.coord.SyncCoordAction();\n    org.apache.oozie.coord.SyncCoordDataset ds = new org.apache.oozie.coord.SyncCoordDataset();\n    ds.setFrequency(1);\n    ds.setTimeUnit(org.apache.oozie.coord.TimeUnit.MONTH);\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-02T00:00Z\"));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"UTC\"));\n    ds.setName(\"test1\");\n    ds.setType(\"SYNC\");\n    appInst.setActualTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-09-10T23:59Z\"));\n    appInst.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"UTC\"));\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-01T00:00Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T11:00Z\"));\n    appInst.setActualTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2010-10-01T00:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:daysInMonth(0)}\";\n    junit.framework.Assert.assertEquals(\"28\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:daysInMonth(-1)}\";\n    junit.framework.Assert.assertEquals(\"31\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:daysInMonth(2)}\";\n    junit.framework.Assert.assertEquals(\"30\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:daysInMonth(-3)}\";\n    junit.framework.Assert.assertEquals(\"30\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:daysInMonth(3)}\";\n    junit.framework.Assert.assertEquals(\"31\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T11:00Z\"));\n    appInst.setActualTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2010-10-01T00:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:daysInMonth(0)}\";\n    junit.framework.Assert.assertEquals(\"28\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setFrequency(1);\n    ds.setTimeUnit(org.apache.oozie.coord.TimeUnit.MONTH);\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_MONTH);\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-02T00:00Z\"));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"UTC\"));\n    ds.setName(\"test1\");\n    ds.setType(\"SYNC\");\n    appInst.setActualTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-09-10T23:59Z\"));\n    appInst.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"UTC\"));\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-01T00:00Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T11:00Z\"));\n    appInst.setActualTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2010-10-01T00:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:daysInMonth(0)}\";\n    junit.framework.Assert.assertEquals(\"28\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:daysInMonth(-1)}\";\n    junit.framework.Assert.assertEquals(\"31\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:daysInMonth(2)}\";\n    junit.framework.Assert.assertEquals(\"30\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:daysInMonth(-3)}\";\n    junit.framework.Assert.assertEquals(\"30\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:daysInMonth(3)}\";\n    junit.framework.Assert.assertEquals(\"31\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T11:00Z\"));\n    appInst.setActualTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2010-10-01T00:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:daysInMonth(0)}\";\n    junit.framework.Assert.assertEquals(\"28\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testDaysInMonth",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    java.lang.String jobId = job.getId();\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(jobId, actionNum++, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    _testCoordActionForCorrectColumnValues(jobId, action.getId(), action.getStatus(), action.getPending());\n}",
        "ClassName": "TestCoordJobGetActionsRunningJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionsRunningForColumnValues",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId());\n    org.apache.oozie.WorkflowJobBean wfBean = jpaService.execute(wfGetCmd);\n    wfBean.setStatus(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED);\n    org.apache.oozie.executor.jpa.WorkflowJobDeleteJPAExecutor wfDeleteCmd1 = new org.apache.oozie.executor.jpa.WorkflowJobDeleteJPAExecutor(wfBean.getId());\n    jpaService.execute(wfDeleteCmd1);\n    try {\n        jpaService.execute(wfGetCmd);\n        junit.framework.Assert.fail(\"JPAExecutorException should be thrown because job has been deleted.\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n    }\n}",
        "ClassName": "TestWorkflowJobDeleteJPAExecutor",
        "Label": 1,
        "MethodName": "testWorkflowJobDelete",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-action-create\");\n    java.lang.String expr = \"${coord:current(-1)}\";\n    junit.framework.Assert.assertEquals(\"2009-09-08T23:59Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-05-30T00:45Z\"));\n    ds.setFrequency(1);\n    ds.setTimeUnit(org.apache.oozie.coord.TimeUnit.DAY);\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-02T00:00Z\"));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    expr = \"${coord:current(0)} ${coord:current(1)} ${coord:current(-1)} ${coord:current(-3)}\";\n    junit.framework.Assert.assertEquals(\"2009-05-29T23:00Z 2009-05-30T23:00Z 2009-05-28T23:00Z 2009-05-26T23:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-05-30T00:45Z\"));\n    ds.setFrequency(30);\n    ds.setTimeUnit(org.apache.oozie.coord.TimeUnit.MINUTE);\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-08T00:00Z\"));\n    expr = \"${coord:current(0)} ${coord:current(1)} ${coord:current(-1)} ${coord:current(-3)}\";\n    junit.framework.Assert.assertEquals(\"2009-05-30T00:30Z 2009-05-30T01:00Z 2009-05-30T00:00Z 2009-05-29T23:00Z\", eval.evaluate(expr, java.lang.String.class));\n    org.apache.oozie.coord.SyncCoordAction appInst = new org.apache.oozie.coord.SyncCoordAction();\n    org.apache.oozie.coord.SyncCoordDataset ds = new org.apache.oozie.coord.SyncCoordDataset();\n    ds.setFrequency(1);\n    ds.setTimeUnit(org.apache.oozie.coord.TimeUnit.DAY);\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-02T00:00Z\"));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"UTC\"));\n    ds.setName(\"test1\");\n    ds.setType(\"SYNC\");\n    appInst.setActualTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-09-10T23:59Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-05-30T00:00Z \"));\n    appInst.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"UTC\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"2009-05-30T00:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"2009-05-31T00:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(-1)}\";\n    junit.framework.Assert.assertEquals(\"2009-05-29T00:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(-3)}\";\n    junit.framework.Assert.assertEquals(\"2009-05-27T00:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setFrequency(7);\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-08T00:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"2009-05-28T00:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"2009-06-04T00:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(-1)}\";\n    junit.framework.Assert.assertEquals(\"2009-05-21T00:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(-3)}\";\n    junit.framework.Assert.assertEquals(\"2009-05-07T00:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-08T10:45Z\"));\n    ds.setFrequency(1);\n    ds.setTimeUnit(org.apache.oozie.coord.TimeUnit.DAY);\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:00Z\"));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    expr = \"${coord:current(-2)} ${coord:current(-1)} ${coord:current(0)} ${coord:current(1)} ${coord:current(2)}\";\n    junit.framework.Assert.assertEquals(\"2009-03-06T10:00Z 2009-03-07T10:00Z 2009-03-08T09:00Z 2009-03-09T09:00Z 2009-03-10T09:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-11-01T08:00Z\"));\n    ds.setFrequency(1);\n    ds.setTimeUnit(org.apache.oozie.coord.TimeUnit.DAY);\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-10-30T08:00Z\"));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    expr = \"${coord:current(-2)} ${coord:current(-1)} ${coord:current(0)} ${coord:current(1)} ${coord:current(2)}\";\n    junit.framework.Assert.assertEquals(\"2009-10-30T08:00Z 2009-10-31T08:00Z 2009-11-01T08:00Z 2009-11-02T09:00Z 2009-11-03T09:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setFrequency(1);\n    ds.setTimeUnit(org.apache.oozie.coord.TimeUnit.DAY);\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-02T09:00Z\"));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"UTC\"));\n    ds.setName(\"test1\");\n    ds.setType(\"SYNC\");\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-05-30T12:00Z \"));\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_DAY);\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"2009-05-30T00:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"2009-05-31T00:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_DAY);\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-01T08:00Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-01T08:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_DAY);\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-01T08:00Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-01T08:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_DAY);\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-01T07:01Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-01T08:01Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"2009-01-01T08:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"2009-01-02T08:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_DAY);\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-01T7:00Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-01T18:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"2009-01-01T08:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"2009-01-02T08:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_DAY);\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-07T07:00Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-07T09:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"2009-03-07T08:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"2009-03-08T08:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_DAY);\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-08T07:00Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-08T08:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"2009-03-08T08:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"2009-03-09T07:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_DAY);\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-09T07:00Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-10T08:01Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"2009-03-10T07:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"2009-03-11T07:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_DAY);\n    ds.setFrequency(2);\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-09T07:00Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-10T07:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"2009-03-10T07:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"2009-03-12T07:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setTimeUnit(org.apache.oozie.coord.TimeUnit.MONTH);\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_MONTH);\n    ds.setFrequency(1);\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"UTC\"));\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-01T00:00Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T00:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"2009-02-01T00:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"2009-03-01T00:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_MONTH);\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"UTC\"));\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-01T08:00Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T08:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"2009-02-01T00:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"2009-03-01T00:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_MONTH);\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"UTC\"));\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-31T08:00Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T08:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"2009-02-01T00:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"2009-03-01T00:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_MONTH);\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-01T08:00Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T08:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"2009-02-01T08:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"2009-03-01T08:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_MONTH);\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-02T08:00Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-02T08:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"2009-03-01T08:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"2009-04-01T07:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_MONTH);\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T08:00Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-01T08:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"2009-03-01T08:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"2009-04-01T07:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_MONTH);\n    ds.setFrequency(3);\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T08:00Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-01T08:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:current(0)}\";\n    junit.framework.Assert.assertEquals(\"2009-03-01T08:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:current(1)}\";\n    junit.framework.Assert.assertEquals(\"2009-06-01T07:00Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testCurrent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"coordinator.xml\")).close();\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-config\", createConfigFile(appPath.toString()), \"-rerun\", org.apache.oozie.servlet.MockCoordinatorEngineService.JOB_ID + \"0\", \"-date\", \"2009-12-15T01:00Z\", \"-action\", \"1\" };\n            junit.framework.Assert.assertEquals(-1, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertNull(org.apache.oozie.servlet.MockCoordinatorEngineService.did);\n            junit.framework.Assert.assertFalse(org.apache.oozie.servlet.MockCoordinatorEngineService.started.get(1));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testCoordReRunNeg4",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testCoordRerun-C\";\n    final int actionNum1 = 1;\n    final int actionNum2 = 2;\n    final java.lang.String actionId1 = (jobId + \"@\") + actionNum1;\n    final java.lang.String actionId2 = (jobId + \"@\") + actionNum2;\n    org.apache.oozie.store.CoordinatorStore store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store.beginTrx();\n    try {\n        addRecordToJobTable(jobId, store, org.apache.oozie.client.Job.Status.SUCCEEDED);\n        addRecordToActionTable(jobId, actionNum1, actionId1, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\");\n        addRecordToActionTable(jobId, actionNum2, actionId2, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action2.xml\");\n        store.commitTrx();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Could not update db.\");\n    } finally {\n        store.closeTrx();\n    }\n    java.lang.String rerunScope = (java.lang.Integer.toString(actionNum1) + \",\") + java.lang.Integer.toString(actionNum2);\n    final org.apache.oozie.client.OozieClient coordClient = org.apache.oozie.local.LocalOozie.getCoordClient();\n    coordClient.reRunCoord(jobId, org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_ACTION, rerunScope, false, true);\n    org.apache.oozie.store.CoordinatorStore store1 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store1.beginTrx();\n    org.apache.oozie.CoordinatorActionBean action1 = store1.getCoordinatorAction(actionId1, false);\n    junit.framework.Assert.assertNotSame(action1.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    org.apache.oozie.CoordinatorActionBean action2 = store1.getCoordinatorAction(actionId2, false);\n    junit.framework.Assert.assertNotSame(action2.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    store1.commitTrx();\n    store1.closeTrx();\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunActions3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.hadoop.conf.Configuration jobConf = null;\n    try {\n        jobConf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(job.getConf()));\n    } catch (java.io.IOException ioe) {\n        log.warn(\"Configuration parse error. read from DB :\" + job.getConf(), ioe);\n        throw new org.apache.oozie.command.CommandException(org.apache.oozie.ErrorCode.E1005, ioe);\n    }\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(jobConf.get(org.apache.oozie.client.OozieClient.BUNDLE_APP_PATH), \"bundle.xml\");\n    jobConf.set(org.apache.oozie.client.OozieClient.BUNDLE_APP_PATH, appPath.toString());\n    org.apache.oozie.command.bundle.BundleSubmitXCommand submitCmd = new org.apache.oozie.command.bundle.BundleSubmitXCommand(jobConf, job.getAuthToken());\n    submitCmd.call();\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(submitCmd.getJob().getId());\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PREP, job.getStatus());\n    new org.apache.oozie.command.bundle.BundleKillXCommand(job.getId()).call();\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, job.getStatus());\n}",
        "ClassName": "TestBundleKillXCommand",
        "Label": 1,
        "MethodName": "testBundleKill3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path actionDir = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    final org.apache.hadoop.mapred.RunningJob runningJob = _test(\"out\");\n    waitFor(2000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return runningJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(runningJob.isSuccessful());\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainDone(runningJob));\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainSuccessful(runningJob));\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.hasOutputData(runningJob));\n    junit.framework.Assert.assertFalse(org.apache.oozie.action.hadoop.LauncherMapper.hasIdSwap(runningJob));\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainDone(runningJob));\n    junit.framework.Assert.assertFalse(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getErrorPath(actionDir)));\n    junit.framework.Assert.assertFalse(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getIdSwapPath(actionDir)));\n    junit.framework.Assert.assertTrue(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getOutputDataPath(actionDir)));\n}",
        "ClassName": "TestLauncher",
        "Label": 1,
        "MethodName": "testOutput",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNINGWITHERROR, false, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNINGWITHERROR);\n    new org.apache.oozie.command.coord.CoordSuspendXCommand(job.getId()).call();\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.SUSPENDEDWITHERROR);\n}",
        "ClassName": "TestCoordSuspendXCommand",
        "Label": 1,
        "MethodName": "testCoordSuspendWithErrorPostive",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.TestCallableQueueService.EXEC_ORDER = new java.util.concurrent.atomic.AtomicLong();\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable1 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(0, 10);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable2 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(0, 10);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable3 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(0, 10);\n    org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    queueservice.queueSerial(java.util.Arrays.asList(callable1, callable2, callable3));\n    waitFor(100, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return ((callable1.executed != 0) && (callable2.executed != 0)) && (callable3.executed != 0);\n        }\n    });\n    junit.framework.Assert.assertEquals(0, callable1.order);\n    junit.framework.Assert.assertEquals(1, callable2.order);\n    junit.framework.Assert.assertEquals(2, callable3.order);\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testQueueSerial",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-TestCoordActionInputCheckXCommand-C\";\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-15T23:59\" + TZ);\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-16T23:59\" + TZ);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(jobId, startTime, endTime);\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    createDir(getTestCaseDir() + \"/2009/02/12/\");\n    createDir(getTestCaseDir() + \"/2009/01/29/\");\n    new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(job.getId() + \"@1\", job.getId()).call();\n    org.apache.oozie.CoordinatorActionBean action = null;\n    try {\n        org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n        action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(job.getId() + \"@1\"));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException se) {\n        junit.framework.Assert.fail(((\"Action ID \" + job.getId()) + \"@1\") + \" was not stored properly in db\");\n    }\n    java.lang.String missDepsOrder = action.getMissingDependencies();\n    int index = missDepsOrder.indexOf(\"/2009/02/12\");\n    if (index >= 0) {\n        junit.framework.Assert.fail(\"Dependency should be available! current list: \" + missDepsOrder);\n    }\n    index = missDepsOrder.indexOf(\"/2009/01/29\");\n    if (index < 0) {\n        junit.framework.Assert.fail(\"Data should have been in missing dependency list! current list: \" + missDepsOrder);\n    }\n    index = missDepsOrder.indexOf(\"/2009/02/05\");\n    if (index < 0) {\n        junit.framework.Assert.fail(\"Data should have been in missing dependency list! current list: \" + missDepsOrder);\n    }\n}",
        "ClassName": "TestCoordActionInputCheckXCommand",
        "Label": 1,
        "MethodName": "testActionInputMissingDependencies",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String actionXml = ((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node> <configuration>\") + \"<property><name>mapreduce.job.acl-view-job</name><value>VIEWER</value></property>\") + \"<property><name>mapreduce.job.acl-modify-job</name><value>MODIFIER</value></property>\") + \"</configuration>\") + \"<main-class>MAIN-CLASS</main-class>\") + \"</java>\";\n    org.apache.oozie.WorkflowJobBean wfBean = addRecordToWfJobTable(\"test1-acl\", actionXml);\n    org.apache.oozie.WorkflowActionBean action = ((org.apache.oozie.WorkflowActionBean) (wfBean.getActions().get(0)));\n    org.apache.oozie.action.hadoop.JavaActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    action.setType(ae.getType());\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(wfBean, action);\n    org.jdom.Element eActionXml = org.apache.oozie.util.XmlUtils.parseXml(actionXml);\n    org.apache.hadoop.conf.Configuration actionConf = ae.createBaseHadoopConf(context, eActionXml);\n    ae.setupActionConf(actionConf, context, eActionXml, getAppPath());\n    org.apache.hadoop.conf.Configuration conf = ae.createLauncherConf(getFileSystem(), context, action, eActionXml, actionConf);\n    junit.framework.Assert.assertEquals(\"VIEWER\", conf.get(org.apache.oozie.action.hadoop.JavaActionExecutor.ACL_VIEW_JOB));\n    junit.framework.Assert.assertEquals(\"MODIFIER\", conf.get(org.apache.oozie.action.hadoop.JavaActionExecutor.ACL_MODIFY_JOB));\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testACLDefaults_launcherACLsSetToDefault",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.client.rest.JsonWorkflowJob jsonWFJob = new org.apache.oozie.client.rest.JsonWorkflowJob();\n    jsonWFJob.setAppName(\"My Test App\");\n    jsonWFJob.setId(\"My Test ID\");\n    java.lang.String png1 = \"src/test/resources/tmp1.png\";\n    java.lang.String png2 = \"src/test/resources/tmp2.png\";\n    try {\n        org.apache.oozie.util.GraphGenerator g = new org.apache.oozie.util.GraphGenerator(org.apache.oozie.util.TestGraphGenerator.readFile(\"src/test/resources/graphWF.xml\"), jsonWFJob);\n        g.write(new java.io.FileOutputStream(new java.io.File(png1)));\n    } catch (java.lang.Exception e) {\n        junit.framework.Assert.fail(\"Write PNG failed for graphWF.xml: \" + e.getMessage());\n    }\n    java.io.File f1 = new java.io.File(png1);\n    try {\n        junit.framework.Assert.assertNotNull(javax.imageio.ImageIO.read(f1));\n    } catch (java.io.IOException io) {\n        junit.framework.Assert.fail(\"Not a valid PNG: \" + io.getMessage());\n    }\n    try {\n        org.apache.oozie.util.GraphGenerator g = new org.apache.oozie.util.GraphGenerator(org.apache.oozie.util.TestGraphGenerator.readFile(\"src/test/resources/graphWF.xml\"), jsonWFJob, true);\n        g.write(new java.io.FileOutputStream(new java.io.File(png2)));\n    } catch (java.lang.Exception e) {\n        junit.framework.Assert.fail(\"Write PNG failed for graphWF.xml: \" + e.getMessage());\n    }\n    java.io.File f2 = new java.io.File(png2);\n    try {\n        junit.framework.Assert.assertNotNull(javax.imageio.ImageIO.read(f2));\n    } catch (java.io.IOException io) {\n        junit.framework.Assert.fail(\"Not a valid PNG: \" + io.getMessage());\n    }\n    junit.framework.Assert.assertTrue(f1.length() < f2.length());\n    f1.delete();\n    f2.delete();\n    try {\n        org.apache.oozie.util.GraphGenerator g = new org.apache.oozie.util.GraphGenerator(org.apache.oozie.util.TestGraphGenerator.readFile(\"src/test/resources/invalidGraphWF.xml\"), jsonWFJob, true);\n        g.write(new java.io.FileOutputStream(new java.io.File(\"src/test/resources/invalid.png\")));\n    } catch (java.lang.Exception e) {\n        junit.framework.Assert.fail(\"Write PNG failed for invalidGraphWF.xml: \" + e.getMessage());\n    }\n    new java.io.File(\"src/test/resources/invalid.png\").delete();\n}",
        "ClassName": "TestGraphGenerator",
        "Label": 1,
        "MethodName": "testWrite",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String inherit = \"true\";\n    java.lang.String inheritWF = null;\n    java.lang.String[] expectedLibs1 = new java.lang.String[]{ \"parent1.jar\", \"parent2.jar\", \"child1.jar\", \"child2.so\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 1, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs1, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs1, expectedLibs1);\n    java.lang.String[] expectedLibs2 = new java.lang.String[]{ \"parent1.jar\", \"parent2.jar\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 2, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs2, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs2, expectedLibs2);\n    java.lang.String[] expectedLibs3 = new java.lang.String[]{ \"child1.jar\", \"child2.so\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 3, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs3, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs3, expectedLibs3);\n    java.lang.String[] expectedLibs4 = new java.lang.String[]{  };\n    checkSubworkflowLibHelper(inherit, inheritWF, 4, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs4, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs4, expectedLibs4);\n    java.lang.String[] expectedLibs5 = new java.lang.String[]{ \"parent1.jar\", \"parent2.jar\", \"child1.jar\", \"child2.so\", \"same.jar\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 5, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs5, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs5, expectedLibs5);\n}",
        "ClassName": "TestLiteWorkflowAppService",
        "Label": 1,
        "MethodName": "testCreateProtoConfWithSubWorkflowLib1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testAction(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_SUSPEND, null);\n}",
        "ClassName": "TestV0JobServlet",
        "Label": 1,
        "MethodName": "testSuspend",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.WorkflowApp app = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"testApp\", \"<workflow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration();\n    org.apache.hadoop.fs.Path appUri = new org.apache.hadoop.fs.Path(getAppPath(), \"workflow.xml\");\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, appUri.toString());\n    conf.set(org.apache.oozie.client.OozieClient.LOG_TOKEN, \"testToken\");\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    org.apache.oozie.WorkflowJobBean job = createWorkflow(app, conf, \"auth\", org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action1 = createWorkflowAction(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action2 = createWorkflowAction(job.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> insertList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    insertList.add(action1);\n    insertList.add(action2);\n    insertList.add(job);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BulkUpdateInsertForCoordActionStatusJPAExecutor bulkInsertCmd = new org.apache.oozie.executor.jpa.BulkUpdateInsertForCoordActionStatusJPAExecutor();\n    bulkInsertCmd.setInsertList(insertList);\n    jpaService.execute(bulkInsertCmd);\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action1.getId());\n    action1 = jpaService.execute(actionGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", action1.getStatusStr());\n    actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action2.getId());\n    action2 = jpaService.execute(actionGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", action2.getStatusStr());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(wfGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", job.getStatusStr());\n}",
        "ClassName": "TestBulkUpdateInsertForCoordActionStatusJPAExecutor",
        "Label": 1,
        "MethodName": "testInserts",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path path = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"dir\");\n    org.apache.hadoop.fs.Path child = new org.apache.hadoop.fs.Path(path, \"child\");\n    org.apache.hadoop.fs.Path grandchild = new org.apache.hadoop.fs.Path(child, \"grandchild\");\n    fs.mkdirs(grandchild);\n    fs.setPermission(path, org.apache.hadoop.fs.permission.FsPermission.valueOf(\"-rwx------\"));\n    fs.setPermission(child, org.apache.hadoop.fs.permission.FsPermission.valueOf(\"-rwxr-----\"));\n    fs.setPermission(grandchild, org.apache.hadoop.fs.permission.FsPermission.valueOf(\"-rwx---r--\"));\n    junit.framework.Assert.assertEquals(\"rwx------\", fs.getFileStatus(path).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxr-----\", fs.getFileStatus(child).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwx---r--\", fs.getFileStatus(grandchild).getPermission().toString());\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(\"<fs/>\");\n    ae.chmod(context, path, \"-rwx-----x\", false, false);\n    junit.framework.Assert.assertEquals(\"rwx-----x\", fs.getFileStatus(path).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxr-----\", fs.getFileStatus(child).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwx---r--\", fs.getFileStatus(grandchild).getPermission().toString());\n    ae.chmod(context, path, \"-rwx-----x\", false, true);\n    junit.framework.Assert.assertEquals(\"rwx-----x\", fs.getFileStatus(path).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxr-----\", fs.getFileStatus(child).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwx---r--\", fs.getFileStatus(grandchild).getPermission().toString());\n    ae.chmod(context, path, \"-rwxr----x\", true, true);\n    junit.framework.Assert.assertEquals(\"rwxr----x\", fs.getFileStatus(path).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxr----x\", fs.getFileStatus(child).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxr----x\", fs.getFileStatus(grandchild).getPermission().toString());\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testChmodRecursive",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    try {\n        services.init();\n        java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-schema-valid.xml\", -1);\n        java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n        org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n        org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n        org.apache.oozie.service.WorkflowAppService wps = services.get(org.apache.oozie.service.WorkflowAppService.class);\n        java.lang.String wfDef = wps.readDefinition(((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\", org.apache.oozie.test.XTestCase.getTestUser(), \"authToken\", conf);\n        junit.framework.Assert.assertNotNull(reader.toString(), wfDef);\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestLiteWorkflowAppService",
        "Label": 1,
        "MethodName": "testReadDefinition",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.Instrumentation inst = new org.apache.oozie.util.Instrumentation();\n    java.util.concurrent.ScheduledExecutorService scheduledExecutorService = new java.util.concurrent.ScheduledThreadPoolExecutor(1);\n    inst.setScheduler(scheduledExecutorService);\n    inst.addSampler(\"a\", \"1\", 10, 1, new org.apache.oozie.util.Instrumentation.Variable<java.lang.Long>() {\n        public java.lang.Long getValue() {\n            return 1L;\n        }\n    });\n    junit.framework.Assert.assertEquals(1, inst.getSamplers().size());\n    junit.framework.Assert.assertEquals(1, inst.getSamplers().get(\"a\").size());\n    inst.addSampler(\"a\", \"2\", 10, 1, new org.apache.oozie.util.Instrumentation.Variable<java.lang.Long>() {\n        public java.lang.Long getValue() {\n            return 2L;\n        }\n    });\n    junit.framework.Assert.assertEquals(1, inst.getSamplers().size());\n    junit.framework.Assert.assertEquals(2, inst.getSamplers().get(\"a\").size());\n    inst.addSampler(\"b\", \"1\", 10, 1, new org.apache.oozie.util.Instrumentation.Variable<java.lang.Long>() {\n        private long counter = 0;\n\n        public java.lang.Long getValue() {\n            return (counter++) % 10;\n        }\n    });\n    junit.framework.Assert.assertEquals(2, inst.getSamplers().size());\n    junit.framework.Assert.assertEquals(2, inst.getSamplers().get(\"a\").size());\n    junit.framework.Assert.assertEquals(1, inst.getSamplers().get(\"b\").size());\n    waitFor(20 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return false;\n        }\n    });\n    junit.framework.Assert.assertEquals(\"\", 1.0, inst.getSamplers().get(\"a\").get(\"1\").getValue(), 0.01);\n    junit.framework.Assert.assertEquals(\"\", 2.0, inst.getSamplers().get(\"a\").get(\"2\").getValue(), 0.02);\n    junit.framework.Assert.assertEquals(\"\", 5.0, inst.getSamplers().get(\"b\").get(\"1\").getValue(), 0.5);\n    scheduledExecutorService.shutdownNow();\n}",
        "ClassName": "TestInstrumentation",
        "Label": 1,
        "MethodName": "testSamplers",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path dir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"dir1\");\n    org.apache.hadoop.fs.Path f1 = new org.apache.hadoop.fs.Path(dir + \"/newfile1\");\n    org.apache.hadoop.fs.Path f2 = new org.apache.hadoop.fs.Path(dir + \"/newfile2\");\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(\"<fs/>\");\n    fs.mkdirs(dir);\n    fs.createNewFile(f1);\n    junit.framework.Assert.assertTrue(fs.exists(f1));\n    junit.framework.Assert.assertTrue(fs.getFileStatus(f1).getLen() == 0);\n    ae.touchz(context, f1);\n    ae.touchz(context, f2);\n    junit.framework.Assert.assertTrue(fs.exists(f1));\n    junit.framework.Assert.assertTrue(fs.exists(f2));\n    org.apache.hadoop.fs.FileStatus fs1 = fs.getFileStatus(f1);\n    org.apache.hadoop.fs.FileStatus fs2 = fs.getFileStatus(f2);\n    junit.framework.Assert.assertFalse(fs1.isDir());\n    junit.framework.Assert.assertFalse(fs2.isDir());\n    junit.framework.Assert.assertTrue(fs1.getLen() == 0);\n    junit.framework.Assert.assertTrue(fs2.getLen() == 0);\n    try {\n        ae.touchz(context, dir);\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.assertTrue(ex.getMessage().contains(\"is a directory\"));\n    }\n    org.apache.hadoop.fs.Path f3 = new org.apache.hadoop.fs.Path(dir + \"/newfile3\");\n    java.io.Writer writer = new java.io.OutputStreamWriter(fs.create(f3));\n    writer.write(\"This is not a zero length file\");\n    writer.close();\n    try {\n        ae.touchz(context, f3);\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.assertTrue(ex.getMessage().contains(\"must be a zero-length file\"));\n    }\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testTouchz",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertFalse(org.apache.oozie.service.Services.get().getConf().getBoolean(\"oozie.action.launcher.mapreduce.job.ubertask.enable\", true));\n    org.apache.oozie.service.Services.get().getConf().setBoolean(\"oozie.action.launcher.mapreduce.job.ubertask.enable\", true);\n    org.apache.oozie.action.hadoop.JavaActionExecutor jae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration(false);\n    junit.framework.Assert.assertNull(conf.get(\"mapreduce.job.ubertask.enable\"));\n    jae.injectLauncherUseUberMode(conf);\n    junit.framework.Assert.assertEquals(\"true\", conf.get(\"mapreduce.job.ubertask.enable\"));\n    conf = new org.apache.hadoop.conf.Configuration(false);\n    junit.framework.Assert.assertNull(conf.get(\"mapreduce.job.ubertask.enable\"));\n    conf.setBoolean(\"mapreduce.job.ubertask.enable\", true);\n    jae.injectLauncherUseUberMode(conf);\n    junit.framework.Assert.assertEquals(\"true\", conf.get(\"mapreduce.job.ubertask.enable\"));\n    conf = new org.apache.hadoop.conf.Configuration(false);\n    junit.framework.Assert.assertNull(conf.get(\"mapreduce.job.ubertask.enable\"));\n    conf.setBoolean(\"mapreduce.job.ubertask.enable\", false);\n    jae.injectLauncherUseUberMode(conf);\n    junit.framework.Assert.assertEquals(\"false\", conf.get(\"mapreduce.job.ubertask.enable\"));\n    org.apache.oozie.service.Services.get().getConf().setBoolean(\"oozie.action.launcher.mapreduce.job.ubertask.enable\", false);\n    conf = new org.apache.hadoop.conf.Configuration(false);\n    junit.framework.Assert.assertNull(conf.get(\"mapreduce.job.ubertask.enable\"));\n    jae.injectLauncherUseUberMode(conf);\n    junit.framework.Assert.assertNull(conf.get(\"mapreduce.job.ubertask.enable\"));\n    conf = new org.apache.hadoop.conf.Configuration(false);\n    junit.framework.Assert.assertNull(conf.get(\"mapreduce.job.ubertask.enable\"));\n    conf.setBoolean(\"mapreduce.job.ubertask.enable\", true);\n    jae.injectLauncherUseUberMode(conf);\n    junit.framework.Assert.assertEquals(\"true\", conf.get(\"mapreduce.job.ubertask.enable\"));\n    conf = new org.apache.hadoop.conf.Configuration(false);\n    junit.framework.Assert.assertNull(conf.get(\"mapreduce.job.ubertask.enable\"));\n    conf.setBoolean(\"mapreduce.job.ubertask.enable\", false);\n    jae.injectLauncherUseUberMode(conf);\n    junit.framework.Assert.assertEquals(\"false\", conf.get(\"mapreduce.job.ubertask.enable\"));\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testInjectLauncherUseUberMode",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path path = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"dir1\");\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(\"<fs/>\");\n    ae.mkdir(context, path);\n    junit.framework.Assert.assertTrue(fs.exists(path));\n    ae.mkdir(context, path);\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testMkdir",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.SchemaService wss = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.SchemaService.class);\n    javax.xml.validation.Validator validator = wss.getSchema(org.apache.oozie.service.SchemaService.SchemaName.WORKFLOW).newValidator();\n    validator.validate(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(org.apache.oozie.service.TestSchemaService.WF_SLA_APP)));\n}",
        "ClassName": "TestSchemaService",
        "Label": 1,
        "MethodName": "testWfSLASchema",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorEngine ce = createCoordinatorEngine();\n    final java.lang.String jobId = runJobsImpl(ce);\n    org.apache.oozie.CoordinatorJobBean cjb = ce.getCoordJob(jobId);\n    java.util.Date createdDate = cjb.getCreatedTime();\n    java.util.Date endDate = new java.util.Date();\n    junit.framework.Assert.assertTrue(endDate.after(createdDate));\n    long middle = (createdDate.getTime() + endDate.getTime()) / 2;\n    java.util.Date middleDate = new java.util.Date(middle);\n    ce.streamLog(jobId, (((((org.apache.oozie.util.DateUtils.formatDateOozieTZ(createdDate) + \"::\") + org.apache.oozie.util.DateUtils.formatDateOozieTZ(middleDate)) + \",\") + org.apache.oozie.util.DateUtils.formatDateOozieTZ(middleDate)) + \"::\") + org.apache.oozie.util.DateUtils.formatDateOozieTZ(endDate), org.apache.oozie.client.rest.RestConstants.JOB_LOG_DATE, new java.io.StringWriter());\n    org.apache.oozie.TestCoordinatorEngineStreamLog.DummyXLogService service = ((org.apache.oozie.TestCoordinatorEngineStreamLog.DummyXLogService) (services.get(org.apache.oozie.service.XLogService.class)));\n    org.apache.oozie.util.XLogStreamer.Filter filter = service.filter;\n    junit.framework.Assert.assertEquals(jobId, filter.getFilterParams().get(org.apache.oozie.service.DagXLogInfoService.JOB));\n    final java.lang.String action = filter.getFilterParams().get(org.apache.oozie.service.DagXLogInfoService.ACTION);\n    junit.framework.Assert.assertEquals((((\"(\" + jobId) + \"@1|\") + jobId) + \"@2)\", action);\n}",
        "ClassName": "TestCoordinatorEngineStreamLog",
        "Label": 1,
        "MethodName": "testStreamLog4JobLogDate",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\")).close();\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-config\", createConfigFile(appPath.toString()), \"-rerun\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_RERUN, org.apache.oozie.servlet.MockDagEngineService.did);\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockDagEngineService.started.get(1));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testReRun",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.toDate(new java.sql.Timestamp(java.lang.System.currentTimeMillis() + (180 * 1000)));\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2099-02-03T23:59Z\");\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, startTime, endTime, false, false, 0);\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    checkCoordJobs(job.getId(), org.apache.oozie.client.Job.Status.RUNNING);\n}",
        "ClassName": "TestCoordMaterializeTransitionXCommand",
        "Label": 1,
        "MethodName": "testMatLookupCommand3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = org.apache.oozie.service.Services.get();\n    org.apache.oozie.sla.service.SLAService slas = services.get(org.apache.oozie.sla.service.SLAService.class);\n    junit.framework.Assert.assertNotNull(slas);\n    junit.framework.Assert.assertTrue(org.apache.oozie.sla.service.SLAService.isEnabled());\n    services.destroy();\n    services = new org.apache.oozie.service.Services();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    conf.set(org.apache.oozie.service.Services.CONF_SERVICE_EXT_CLASSES, \"\");\n    services.init();\n    junit.framework.Assert.assertFalse(org.apache.oozie.sla.service.SLAService.isEnabled());\n}",
        "ClassName": "TestSLAService",
        "Label": 1,
        "MethodName": "testBasicService",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, false);\n    this.addRecordToBundleActionTable(job.getId(), \"action1\", 1, org.apache.oozie.client.Job.Status.RUNNING);\n    _testGetForJobCount(job.getId(), 1);\n    this.addRecordToBundleActionTable(job.getId(), \"action2\", 0, org.apache.oozie.client.Job.Status.RUNNING);\n    this.addRecordToBundleActionTable(job.getId(), \"action3\", 1, org.apache.oozie.client.Job.Status.RUNNING);\n    _testGetForJobCount(job.getId(), 3);\n}",
        "ClassName": "TestBundleActionsCountForJobGetJPAExecutor",
        "Label": 1,
        "MethodName": "testBundleActionsForJobCountGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path actionDir = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    final org.apache.hadoop.mapred.RunningJob runningJob = _test(\"exit0\");\n    waitFor(2000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return runningJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(runningJob.isSuccessful());\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainDone(runningJob));\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainSuccessful(runningJob));\n    junit.framework.Assert.assertFalse(org.apache.oozie.action.hadoop.LauncherMapper.hasOutputData(runningJob));\n    junit.framework.Assert.assertFalse(org.apache.oozie.action.hadoop.LauncherMapper.hasIdSwap(runningJob));\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainDone(runningJob));\n    junit.framework.Assert.assertFalse(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getErrorPath(actionDir)));\n    junit.framework.Assert.assertFalse(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getIdSwapPath(actionDir)));\n    junit.framework.Assert.assertFalse(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getOutputDataPath(actionDir)));\n}",
        "ClassName": "TestLauncher",
        "Label": 1,
        "MethodName": "testExit0",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = \"<coordinator-app name=\\\"NAME\\\" frequency=\\\"${coord:days(1)}\\\" start=\\\"2010-02-01T01:00Z\\\" end=\\\"2009-02-03T23:59Z\\\" timezone=\\\"UTC\\\" \" + (((((((((((((\"xmlns=\\\"uri:oozie:coordinator:0.2\\\"> <controls> \" + \"<execution>LIFO</execution> </controls> <datasets> \") + \"<dataset name=\\\"a\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"<dataset name=\\\"local_a\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"</datasets> <input-events> \") + \"<data-in name=\\\"A\\\" dataset=\\\"a\\\"> <instance>${coord:latest(0)}</instance> </data-in>  \") + \"</input-events> \") + \"<output-events> <data-out name=\\\"LOCAL_A\\\" dataset=\\\"local_a\\\"> \") + \"<instance>${coord:current(-1)}</instance> </data-out> </output-events> <action> <workflow> <app-path>hdfs:///tmp/workflows/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>${coord:dataIn('A')}</value> </property> \") + \"<property> <name>inputB</name> <value>${coord:dataOut('LOCAL_A')}</value> \") + \"</property></configuration> </workflow> </action> </coordinator-app>\");\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    try {\n        sc.call();\n        junit.framework.Assert.fail(\"Expected to catch errors due to incorrectly specified Start and End Time\");\n    } catch (org.apache.oozie.command.CommandException e) {\n        junit.framework.Assert.assertEquals(sc.getJob().getStatus(), org.apache.oozie.client.Job.Status.FAILED);\n        junit.framework.Assert.assertEquals(e.getErrorCode(), org.apache.oozie.ErrorCode.E1003);\n        junit.framework.Assert.assertTrue(e.getMessage().contains(\"Coordinator Start Time cannot be greater than End Time.\"));\n    }\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testBasicSubmitWithStartTimeAfterEndTime",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowXClient.END_POINTS, org.apache.oozie.client.TestWorkflowXClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowXClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.XOozieClient wc = new org.apache.oozie.client.XOozieClient(oozieUrl);\n            java.util.Properties configuration = wc.createConfiguration();\n            try {\n                wc.addFile(configuration, null);\n            } catch (java.lang.IllegalArgumentException e) {\n                junit.framework.Assert.assertEquals(\"file cannot be null or empty\", e.getMessage());\n            }\n            wc.addFile(configuration, \"file1\");\n            wc.addFile(configuration, \"file2\");\n            junit.framework.Assert.assertEquals(\"file1,file2\", configuration.get(org.apache.oozie.client.XOozieClient.FILES));\n            try {\n                wc.addArchive(configuration, null);\n            } catch (java.lang.IllegalArgumentException e) {\n                junit.framework.Assert.assertEquals(\"file cannot be null or empty\", e.getMessage());\n            }\n            wc.addArchive(configuration, \"archive1\");\n            wc.addArchive(configuration, \"archive2\");\n            junit.framework.Assert.assertEquals(\"archive1,archive2\", configuration.get(org.apache.oozie.client.XOozieClient.ARCHIVES));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowXClient",
        "Label": 1,
        "MethodName": "testSomeMethods",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    conf.set(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, org.apache.hadoop.util.StringUtils.join(\",\", java.util.Arrays.asList(org.apache.oozie.service.GroupsService.class.getName(), org.apache.oozie.service.ProxyUserService.class.getName())));\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.hosts\", \"localhost\");\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.groups\", \"*\");\n    services.init();\n    try {\n        org.apache.oozie.service.ProxyUserService proxyUser = services.get(org.apache.oozie.service.ProxyUserService.class);\n        junit.framework.Assert.assertNotNull(proxyUser);\n        proxyUser.validate(\"foo\", \"localhost\", \"bar\");\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestProxyUserService",
        "Label": 1,
        "MethodName": "testValidateHost",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.util.List<java.lang.String>> filterList = createFilterList(\"jobid\", coordId1, coordActionId1);\n    filterList.put(\"appname\", java.util.Arrays.asList(new java.lang.String[]{ appName1 }));\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    long[] lastSeqId = new long[1];\n    lastSeqId[0] = -1;\n    org.apache.oozie.executor.jpa.SLAEventsGetForFilterJPAExecutor slaEventsGetCmd = new org.apache.oozie.executor.jpa.SLAEventsGetForFilterJPAExecutor(0, 100, filterList, lastSeqId);\n    java.util.List<org.apache.oozie.SLAEventBean> list = jpaService.execute(slaEventsGetCmd);\n    junit.framework.Assert.assertNotNull(list);\n    junit.framework.Assert.assertEquals(4, list.size());\n}",
        "ClassName": "TestSLAEventsGetForFilterJPAExecutor",
        "Label": 1,
        "MethodName": "testGetSLAEventsForCombined",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T01:00Z\");\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-03T23:59Z\");\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, startTime, endTime, false, false, 0);\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    checkCoordJobs(job.getId(), org.apache.oozie.client.Job.Status.RUNNING);\n}",
        "ClassName": "TestCoordMaterializeTransitionXCommand",
        "Label": 1,
        "MethodName": "testMatLookupCommand1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertEquals(\"+\", org.apache.oozie.util.ELConstantsFunctions.urlEncode(\" \"));\n    junit.framework.Assert.assertEquals(\"%25\", org.apache.oozie.util.ELConstantsFunctions.urlEncode(\"%\"));\n}",
        "ClassName": "TestELConstantsFunctions",
        "Label": 1,
        "MethodName": "testUrlEncode",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testCoordRerun-C\";\n    final int actionNum1 = 1;\n    final int actionNum2 = 2;\n    final java.lang.String actionId1 = (jobId + \"@\") + actionNum1;\n    final java.lang.String actionId2 = (jobId + \"@\") + actionNum2;\n    org.apache.oozie.store.CoordinatorStore store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store.beginTrx();\n    try {\n        addRecordToJobTable(jobId, store, org.apache.oozie.client.Job.Status.SUCCEEDED);\n        addRecordToActionTable(jobId, actionNum1, actionId1, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\");\n        addRecordToActionTable(jobId, actionNum2, actionId2, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action2.xml\");\n        store.commitTrx();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Could not update db.\");\n    } finally {\n        store.closeTrx();\n    }\n    java.lang.String rerunScope = \"2009-12-15T01:00Z\" + (\"::\" + \"2009-12-16T01:00Z\");\n    final org.apache.oozie.client.OozieClient coordClient = org.apache.oozie.local.LocalOozie.getCoordClient();\n    coordClient.reRunCoord(jobId, org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_DATE, rerunScope, false, true);\n    org.apache.oozie.store.CoordinatorStore store1 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store1.beginTrx();\n    org.apache.oozie.CoordinatorActionBean action1 = store1.getCoordinatorAction(actionId1, false);\n    junit.framework.Assert.assertNotSame(action1.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    org.apache.oozie.CoordinatorActionBean action2 = store1.getCoordinatorAction(actionId2, false);\n    junit.framework.Assert.assertNotSame(action2.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    store1.commitTrx();\n    store1.closeTrx();\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunDate2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_STATES_WITHOUT_ERROR, \"false\");\n    services = new org.apache.oozie.service.Services();\n    setClassesToBeExcluded(services.getConf(), excludedServices);\n    services.init();\n    org.apache.oozie.BundleJobBean bundleJob = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, true);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    final java.lang.String bundleId = bundleJob.getId();\n    addRecordToBundleActionTable(bundleId, \"action1\", 1, org.apache.oozie.client.Job.Status.RUNNING);\n    addRecordToBundleActionTable(bundleId, \"action2\", 1, org.apache.oozie.client.Job.Status.RUNNING);\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    addRecordToCoordJobTableWithBundle(bundleId, \"action1\", org.apache.oozie.client.Job.Status.RUNNING, start, end, false, true, 2);\n    addRecordToCoordJobTableWithBundle(bundleId, \"action2\", org.apache.oozie.client.Job.Status.RUNNING, start, end, true, false, 2);\n    final org.apache.oozie.CoordinatorActionBean coordAction1_1 = addRecordToCoordActionTable(\"action1\", 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    final org.apache.oozie.CoordinatorActionBean coordAction1_2 = addRecordToCoordActionTable(\"action1\", 2, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    final org.apache.oozie.CoordinatorActionBean coordAction1_3 = addRecordToCoordActionTable(\"action2\", 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 1);\n    final org.apache.oozie.CoordinatorActionBean coordAction1_4 = addRecordToCoordActionTable(\"action2\", 2, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 1);\n    this.addRecordToWfJobTable(coordAction1_1.getExternalId(), org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    this.addRecordToWfJobTable(coordAction1_2.getExternalId(), org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    this.addRecordToWfJobTable(coordAction1_3.getExternalId(), org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    this.addRecordToWfJobTable(coordAction1_4.getExternalId(), org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    new org.apache.oozie.command.coord.CoordKillXCommand(\"action1\").call();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.WorkflowJobBean wfJob = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(coordAction1_1.getExternalId()));\n            return wfJob.getStatus().equals(org.apache.oozie.client.Job.Status.KILLED);\n        }\n    });\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean bundle = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n            return bundle.isPending() == false;\n        }\n    });\n    bundleJob = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n    junit.framework.Assert.assertTrue(bundleJob.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNINGWITHERROR, bundleJob.getStatus());\n    org.apache.oozie.BundleActionBean bundleAction1 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleId, \"action1\"));\n    junit.framework.Assert.assertFalse(bundleAction1.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, bundleAction1.getStatus());\n    org.apache.oozie.CoordinatorJobBean coordJob1 = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(\"action1\"));\n    junit.framework.Assert.assertFalse(coordJob1.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, coordJob1.getStatus());\n    org.apache.oozie.BundleActionBean bundleAction2 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleId, \"action2\"));\n    junit.framework.Assert.assertTrue(bundleAction2.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, bundleAction2.getStatus());\n    org.apache.oozie.CoordinatorJobBean coordJob2 = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(\"action2\"));\n    junit.framework.Assert.assertTrue(coordJob2.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, coordJob2.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testBundleStatusTransitServiceRunningWithError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path actionDir = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path newDir = new org.apache.hadoop.fs.Path(actionDir, \"newDir\");\n    if (fs.exists(newDir)) {\n        fs.delete(newDir, true);\n    }\n    fs.mkdirs(newDir);\n    java.lang.String prepareXML = (((\"<prepare>\" + \"<delete path='\") + newDir) + \"'/>\") + \"</prepare>\";\n    org.apache.hadoop.mapred.JobConf conf = createJobConf();\n    org.apache.oozie.action.hadoop.LauncherMapper.setupLauncherURIHandlerConf(conf);\n    org.apache.oozie.action.hadoop.PrepareActionsDriver.doOperations(prepareXML, conf);\n    junit.framework.Assert.assertFalse(fs.exists(newDir));\n}",
        "ClassName": "TestFSPrepareActions",
        "Label": 1,
        "MethodName": "testDelete",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.Instrumentation.Cron cron = new org.apache.oozie.util.Instrumentation.Cron();\n    long start = java.lang.System.currentTimeMillis();\n    junit.framework.Assert.assertEquals(\"\", 0, cron.getStart(), org.apache.oozie.util.TestInstrumentation.TOLERANCE);\n    junit.framework.Assert.assertEquals(\"\", 0, cron.getEnd(), org.apache.oozie.util.TestInstrumentation.TOLERANCE);\n    junit.framework.Assert.assertEquals(cron.getStart(), cron.getEnd());\n    junit.framework.Assert.assertEquals(0, cron.getOwn());\n    junit.framework.Assert.assertEquals(0, cron.getTotal());\n    cron.start();\n    long s = java.lang.System.currentTimeMillis();\n    java.lang.Thread.sleep(org.apache.oozie.util.TestInstrumentation.INTERVAL);\n    cron.stop();\n    long realOwnDelay = java.lang.System.currentTimeMillis() - s;\n    long now = java.lang.System.currentTimeMillis();\n    junit.framework.Assert.assertEquals(\"\", start, cron.getStart(), org.apache.oozie.util.TestInstrumentation.TOLERANCE);\n    junit.framework.Assert.assertEquals(\"\", now, cron.getEnd(), org.apache.oozie.util.TestInstrumentation.TOLERANCE);\n    junit.framework.Assert.assertEquals(\"\", org.apache.oozie.util.TestInstrumentation.INTERVAL, cron.getTotal(), org.apache.oozie.util.TestInstrumentation.TOLERANCE);\n    junit.framework.Assert.assertEquals(\"\", org.apache.oozie.util.TestInstrumentation.INTERVAL, cron.getOwn(), org.apache.oozie.util.TestInstrumentation.TOLERANCE);\n    junit.framework.Assert.assertEquals(\"\", cron.getTotal(), cron.getOwn(), org.apache.oozie.util.TestInstrumentation.TOLERANCE);\n    long realTotalDelay = java.lang.System.currentTimeMillis() - s;\n    s = java.lang.System.currentTimeMillis();\n    java.lang.Thread.sleep(org.apache.oozie.util.TestInstrumentation.INTERVAL);\n    cron.start();\n    realTotalDelay += java.lang.System.currentTimeMillis() - s;\n    s = java.lang.System.currentTimeMillis();\n    java.lang.Thread.sleep(org.apache.oozie.util.TestInstrumentation.INTERVAL);\n    cron.stop();\n    now = java.lang.System.currentTimeMillis();\n    realTotalDelay += java.lang.System.currentTimeMillis() - s;\n    realOwnDelay += java.lang.System.currentTimeMillis() - s;\n    junit.framework.Assert.assertEquals(\"\", start, cron.getStart(), org.apache.oozie.util.TestInstrumentation.TOLERANCE);\n    junit.framework.Assert.assertEquals(\"\", now, cron.getEnd(), org.apache.oozie.util.TestInstrumentation.TOLERANCE);\n    junit.framework.Assert.assertEquals(\"\", realTotalDelay, cron.getTotal(), org.apache.oozie.util.TestInstrumentation.TOLERANCE);\n    junit.framework.Assert.assertEquals(\"\", realOwnDelay, cron.getOwn(), org.apache.oozie.util.TestInstrumentation.TOLERANCE);\n}",
        "ClassName": "TestInstrumentation",
        "Label": 1,
        "MethodName": "testCron",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    job.setPauseTime(new java.util.Date(new java.util.Date().getTime() - (30 * 1000)));\n    job.setKickoffTime(new java.util.Date(new java.util.Date().getTime() + (3600 * 1000)));\n    jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobUpdateJPAExecutor(job));\n    java.lang.Runnable pauseStartRunnable = new org.apache.oozie.service.PauseTransitService.PauseTransitRunnable();\n    pauseStartRunnable.run();\n    final java.lang.String jobId = job.getId();\n    waitFor(10 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean job1 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n            return job1.getStatus() == org.apache.oozie.client.Job.Status.PREPPAUSED;\n        }\n    });\n    job = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PREPPAUSED, job.getStatus());\n    job.setPauseTime(null);\n    jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobUpdateJPAExecutor(job));\n    pauseStartRunnable.run();\n    waitFor(10 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean job1 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n            return job1.getStatus() == org.apache.oozie.client.Job.Status.PREP;\n        }\n    });\n    job = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PREP, job.getStatus());\n}",
        "ClassName": "TestPauseTransitService",
        "Label": 1,
        "MethodName": "testPauseUnpause2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertEquals(queue.size(), 0);\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    new org.apache.oozie.command.wf.StartXCommand(job.getId()).call();\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(wfJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.RUNNING, job.getStatus());\n    junit.framework.Assert.assertEquals(1, queue.size());\n    org.apache.oozie.event.WorkflowJobEvent event = ((org.apache.oozie.event.WorkflowJobEvent) (queue.poll()));\n    junit.framework.Assert.assertNotNull(event);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.JobEvent.EventStatus.STARTED, event.getEventStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.AppType.WORKFLOW_JOB, event.getAppType());\n    junit.framework.Assert.assertEquals(job.getId(), event.getId());\n    junit.framework.Assert.assertEquals(job.getUser(), event.getUser());\n    junit.framework.Assert.assertEquals(job.getAppName(), event.getAppName());\n    junit.framework.Assert.assertEquals(job.getStartTime(), event.getStartTime());\n    junit.framework.Assert.assertEquals(0, queue.size());\n    new org.apache.oozie.command.wf.SuspendXCommand(job.getId()).call();\n    job = jpaService.execute(wfJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, job.getStatus());\n    junit.framework.Assert.assertEquals(1, queue.size());\n    event = ((org.apache.oozie.event.WorkflowJobEvent) (queue.poll()));\n    junit.framework.Assert.assertNotNull(event);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.JobEvent.EventStatus.SUSPEND, event.getEventStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.AppType.WORKFLOW_JOB, event.getAppType());\n    junit.framework.Assert.assertEquals(job.getId(), event.getId());\n    junit.framework.Assert.assertEquals(job.getUser(), event.getUser());\n    junit.framework.Assert.assertEquals(job.getAppName(), event.getAppName());\n    junit.framework.Assert.assertEquals(0, queue.size());\n    new org.apache.oozie.command.wf.ResumeXCommand(job.getId()).call();\n    job = jpaService.execute(wfJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.RUNNING, job.getStatus());\n    junit.framework.Assert.assertEquals(1, queue.size());\n    event = ((org.apache.oozie.event.WorkflowJobEvent) (queue.poll()));\n    junit.framework.Assert.assertNotNull(event);\n    junit.framework.Assert.assertEquals(org.apache.oozie.AppType.WORKFLOW_JOB, event.getAppType());\n    junit.framework.Assert.assertEquals(job.getId(), event.getId());\n    junit.framework.Assert.assertEquals(job.getUser(), event.getUser());\n    junit.framework.Assert.assertEquals(job.getAppName(), event.getAppName());\n    junit.framework.Assert.assertEquals(job.getStartTime(), event.getStartTime());\n    junit.framework.Assert.assertEquals(0, queue.size());\n    new org.apache.oozie.command.wf.KillXCommand(job.getId()).call();\n    job = jpaService.execute(wfJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.KILLED, job.getStatus());\n    junit.framework.Assert.assertEquals(1, queue.size());\n    event = ((org.apache.oozie.event.WorkflowJobEvent) (queue.poll()));\n    junit.framework.Assert.assertNotNull(event);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.JobEvent.EventStatus.FAILURE, event.getEventStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.AppType.WORKFLOW_JOB, event.getAppType());\n    junit.framework.Assert.assertEquals(job.getId(), event.getId());\n    junit.framework.Assert.assertEquals(job.getUser(), event.getUser());\n    junit.framework.Assert.assertEquals(job.getAppName(), event.getAppName());\n    junit.framework.Assert.assertEquals(job.getStartTime(), event.getStartTime());\n    junit.framework.Assert.assertEquals(job.getEndTime(), event.getEndTime());\n    junit.framework.Assert.assertEquals(0, queue.size());\n    job = _createWorkflowJob();\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance wfInstance = ((org.apache.oozie.workflow.lite.LiteWorkflowInstance) (job.getWorkflowInstance()));\n    wfInstance.start();\n    job.setWfInstance(wfInstance);\n    jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobUpdateJPAExecutor(job));\n    org.apache.oozie.WorkflowActionBean wfAction = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(job.getId() + \"@one\"));\n    new org.apache.oozie.command.wf.SignalXCommand(job.getId(), wfAction.getId()).call();\n    job = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId()));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, job.getStatus());\n    junit.framework.Assert.assertEquals(1, queue.size());\n    event = ((org.apache.oozie.event.WorkflowJobEvent) (queue.poll()));\n    junit.framework.Assert.assertNotNull(event);\n    junit.framework.Assert.assertEquals(org.apache.oozie.AppType.WORKFLOW_JOB, event.getAppType());\n    junit.framework.Assert.assertEquals(job.getId(), event.getId());\n    junit.framework.Assert.assertEquals(job.getUser(), event.getUser());\n    junit.framework.Assert.assertEquals(job.getAppName(), event.getAppName());\n    junit.framework.Assert.assertEquals(job.getStartTime(), event.getStartTime());\n    junit.framework.Assert.assertEquals(job.getEndTime(), event.getEndTime());\n    junit.framework.Assert.assertEquals(0, queue.size());\n}",
        "ClassName": "TestEventGeneration",
        "Label": 1,
        "MethodName": "testWorkflowJobEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"admin\", \"-status\", \"-oozie\", oozieUrl, \"-auth\", \"SIMPLE\" };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n    runTest(new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"admin\", \"-status\", \"-oozie\", oozieUrl, \"-auth\", \"fake\" };\n            junit.framework.Assert.assertEquals(-1, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestAuthFilterAuthOozieClient",
        "Label": 1,
        "MethodName": "testClientAuthMethod",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testActionMater-C\";\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:00Z\");\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:14Z\");\n    java.util.Date pauseTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:08Z\");\n    addRecordToJobTable(jobId, startTime, endTime, pauseTime);\n    new org.apache.oozie.command.coord.CoordActionMaterializeCommand(jobId, startTime, endTime).call();\n    checkCoordActions(jobId, 2, null);\n}",
        "ClassName": "TestCoordActionMaterializeCommand",
        "Label": 1,
        "MethodName": "testActionMaterWithPauseTime2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.jms.JMSJobEventListener wfEventListner = new org.apache.oozie.jms.JMSJobEventListener();\n    wfEventListner.init(conf);\n    java.util.Date startDate = org.apache.oozie.util.DateUtils.parseDateUTC(\"2012-07-22T00:00Z\");\n    java.util.Date nominalTime = org.apache.oozie.util.DateUtils.parseDateUTC(\"2011-07-11T00:00Z\");\n    org.apache.oozie.event.CoordinatorActionEvent cae = new org.apache.oozie.event.CoordinatorActionEvent(\"caId1\", \"caJobId1\", org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"user1\", \"wf-app-name1\", nominalTime, startDate, \"missingDep1\");\n    org.apache.oozie.jms.ConnectionContext jmsContext = getConnectionContext();\n    try {\n        javax.jms.Session session = jmsContext.createSession(Session.AUTO_ACKNOWLEDGE);\n        javax.jms.MessageConsumer consumer = jmsContext.createConsumer(session, wfEventListner.getTopic(cae));\n        wfEventListner.onCoordinatorActionEvent(cae);\n        javax.jms.TextMessage message = ((javax.jms.TextMessage) (consumer.receive(5000)));\n        junit.framework.Assert.assertFalse(message.getText().contains(\"endTime\"));\n        junit.framework.Assert.assertFalse(message.getText().contains(\"errorCode\"));\n        junit.framework.Assert.assertFalse(message.getText().contains(\"errorMessage\"));\n        org.apache.oozie.client.event.message.CoordinatorActionMessage coordActionWaitingMessage = org.apache.oozie.client.event.jms.JMSMessagingUtils.getEventMessage(message);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.WAITING, coordActionWaitingMessage.getStatus());\n        junit.framework.Assert.assertEquals(startDate, coordActionWaitingMessage.getStartTime());\n        junit.framework.Assert.assertEquals(nominalTime, coordActionWaitingMessage.getNominalTime());\n        junit.framework.Assert.assertEquals(\"caJobId1\", coordActionWaitingMessage.getParentId());\n        junit.framework.Assert.assertEquals(\"caId1\", coordActionWaitingMessage.getId());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.Event.MessageType.JOB, coordActionWaitingMessage.getMessageType());\n        junit.framework.Assert.assertEquals(org.apache.oozie.AppType.COORDINATOR_ACTION, coordActionWaitingMessage.getAppType());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.JobEvent.EventStatus.WAITING, coordActionWaitingMessage.getEventStatus());\n        junit.framework.Assert.assertEquals(\"user1\", coordActionWaitingMessage.getUser());\n        junit.framework.Assert.assertEquals(\"wf-app-name1\", coordActionWaitingMessage.getAppName());\n        junit.framework.Assert.assertEquals(\"missingDep1\", coordActionWaitingMessage.getMissingDependency());\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSJobEventListener",
        "Label": 1,
        "MethodName": "testOnCoordinatorActionWaitingEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String jobId = _testSubmitJob(appPath);\n    _testTimeout(jobId);\n}",
        "ClassName": "TestPastActionsTimeOut",
        "Label": 1,
        "MethodName": "testEngine",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String inherit = \"true\";\n    java.lang.String inheritWF = \"true\";\n    java.lang.String[] expectedLibs1 = new java.lang.String[]{ \"parent1.jar\", \"parent2.jar\", \"child1.jar\", \"child2.so\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 1, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs1, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs1, expectedLibs1);\n    java.lang.String[] expectedLibs2 = new java.lang.String[]{ \"parent1.jar\", \"parent2.jar\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 2, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs2, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs2, expectedLibs2);\n    java.lang.String[] expectedLibs3 = new java.lang.String[]{ \"child1.jar\", \"child2.so\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 3, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs3, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs3, expectedLibs3);\n    java.lang.String[] expectedLibs4 = new java.lang.String[]{  };\n    checkSubworkflowLibHelper(inherit, inheritWF, 4, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs4, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs4, expectedLibs4);\n    java.lang.String[] expectedLibs5 = new java.lang.String[]{ \"parent1.jar\", \"parent2.jar\", \"child1.jar\", \"child2.so\", \"same.jar\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 5, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs5, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs5, expectedLibs5);\n}",
        "ClassName": "TestLiteWorkflowAppService",
        "Label": 1,
        "MethodName": "testCreateProtoConfWithSubWorkflowLib3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setSystemProperty(org.apache.oozie.service.SchemaService.WF_CONF_EXT_SCHEMAS, \"wf-ext-schema.xsd\");\n    setSystemProperty(\"oozie.service.ActionService.executor.ext.classes\", org.apache.oozie.service.TestLiteWorkflowAppService.TestActionExecutor.class.getName());\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    try {\n        services.init();\n        java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-ext-schema-valid.xml\", -1);\n        java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n        org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n        org.apache.oozie.service.WorkflowAppService wps = services.get(org.apache.oozie.service.WorkflowAppService.class);\n        org.apache.hadoop.conf.Configuration jobConf = new org.apache.oozie.util.XConfiguration();\n        jobConf.set(org.apache.oozie.client.OozieClient.APP_PATH, ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\");\n        jobConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n        org.apache.oozie.workflow.lite.LiteWorkflowApp app = ((org.apache.oozie.workflow.lite.LiteWorkflowApp) (wps.parseDef(jobConf, \"authToken\")));\n        junit.framework.Assert.assertNotNull(app);\n        junit.framework.Assert.assertEquals(\"test-wf\", app.getName());\n        reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-ext-schema-invalid.xml\", -1);\n        writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n        org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n        try {\n            wps.parseDef(jobConf, \"authToken\");\n            junit.framework.Assert.fail();\n        } catch (org.apache.oozie.workflow.WorkflowException ex) {\n        }\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestLiteWorkflowAppService",
        "Label": 1,
        "MethodName": "testExtSchema",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    services.destroy();\n    setSystemProperty(org.apache.oozie.executor.jpa.CoordActionGetForInfoJPAExecutor.COORD_GET_ALL_COLS_FOR_ACTION, \"true\");\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    java.lang.String resourceXmlName = \"coord-action-get.xml\";\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = createCoordAction(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.WAITING, resourceXmlName, 0);\n    java.lang.String slaXml = \"slaXml\";\n    action.setSlaXml(slaXml);\n    insertRecordCoordAction(action);\n    _testGetForInfoAllActions(action.getId(), slaXml);\n}",
        "ClassName": "TestCoordActionGetForInfoJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionGetAllColumns",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    addRecordToCoordActionTable(job.getId(), actionNum++, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    _testActiveActionsCount(job.getId(), 1);\n    addRecordToCoordActionTable(job.getId(), actionNum++, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    _testActiveActionsCount(job.getId(), 2);\n}",
        "ClassName": "TestCoordActionsActiveCountJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            junit.framework.Assert.assertEquals(oozieUrl, wc.getOozieUrl().substring(0, wc.getOozieUrl().length() - 1));\n            junit.framework.Assert.assertTrue(wc.getProtocolUrl().startsWith(wc.getOozieUrl() + \"v\"));\n            try {\n                wc = new org.apache.oozie.client.TestWorkflowClient.OozieClientForTest(oozieUrl);\n                wc.getProtocolUrl();\n                junit.framework.Assert.fail(\"wrong version should run throw exception\");\n            } catch (org.apache.oozie.client.OozieClientException e) {\n                junit.framework.Assert.assertEquals(\"UNSUPPORTED_VERSION : Supported version [2] or less, Unsupported versions[-11-10]\", e.toString());\n            }\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testUrls",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    answer = 3;\n    check = true;\n    org.apache.oozie.client.TestOozieClientWithFakeServlet.FakeOozieClient client = new org.apache.oozie.client.TestOozieClientWithFakeServlet.FakeOozieClient(\"http://url\");\n    java.util.List<org.apache.oozie.client.BulkResponse> answer = client.getBulkInfo(\"\", 0, 10);\n    org.junit.Assert.assertNotNull(answer);\n    org.junit.Assert.assertEquals(2, answer.size());\n    org.junit.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.READY, answer.get(0).getAction().getStatus());\n}",
        "ClassName": "TestOozieClientWithFakeServlet",
        "Label": 1,
        "MethodName": "testGetBulkInfo",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testAuthorizationService(true);\n}",
        "ClassName": "TestAuthorizationService",
        "Label": 1,
        "MethodName": "testAuthorizationServiceUseDefaultGroup",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testCoordRerun-C\";\n    final int actionNum = 1;\n    final java.lang.String actionId = (jobId + \"@\") + actionNum;\n    org.apache.oozie.store.CoordinatorStore store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store.beginTrx();\n    try {\n        addRecordToJobTable(jobId, store, org.apache.oozie.client.Job.Status.SUCCEEDED);\n        addRecordToActionTable(jobId, actionNum, actionId, store, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-rerun-action1.xml\");\n        store.commitTrx();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Could not update db.\");\n    } finally {\n        store.closeTrx();\n    }\n    try {\n        final org.apache.oozie.client.OozieClient coordClient = org.apache.oozie.local.LocalOozie.getCoordClient();\n        coordClient.reRunCoord(jobId, org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_ACTION, java.lang.Integer.toString(actionNum), false, true);\n        junit.framework.Assert.fail(\"Exception expected because action is not in terminal state.\");\n    } catch (org.apache.oozie.client.OozieClientException ex) {\n        if (!ex.getErrorCode().equals(org.apache.oozie.ErrorCode.E1018.toString())) {\n            junit.framework.Assert.fail(\"Error code should be E1018 when action is not in terminal state.\");\n        }\n    }\n    org.apache.oozie.store.CoordinatorStore store2 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store2.beginTrx();\n    org.apache.oozie.CoordinatorActionBean action2 = store2.getCoordinatorAction(actionId, false);\n    junit.framework.Assert.assertEquals(action2.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.RUNNING);\n    store2.commitTrx();\n    store2.closeTrx();\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunActionsNeg2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, false, false, 0);\n    final org.apache.oozie.command.coord.TestCoordKillXCommand.MyCoordKillXCommand callable1 = new org.apache.oozie.command.coord.TestCoordKillXCommand.MyCoordKillXCommand(job.getId(), 100);\n    final org.apache.oozie.command.coord.TestCoordKillXCommand.MyCoordKillXCommand callable2 = new org.apache.oozie.command.coord.TestCoordKillXCommand.MyCoordKillXCommand(job.getId(), 100);\n    final org.apache.oozie.command.coord.TestCoordKillXCommand.MyCoordKillXCommand callable3 = new org.apache.oozie.command.coord.TestCoordKillXCommand.MyCoordKillXCommand(job.getId(), 100);\n    java.util.List<org.apache.oozie.command.coord.TestCoordKillXCommand.MyCoordKillXCommand> callables = java.util.Arrays.asList(callable1, callable2, callable3);\n    org.apache.oozie.service.CallableQueueService queueservice = services.get(org.apache.oozie.service.CallableQueueService.class);\n    for (org.apache.oozie.command.coord.TestCoordKillXCommand.MyCoordKillXCommand c : callables) {\n        queueservice.queue(c);\n    }\n    waitFor(1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return ((callable1.executed != 0) && (callable2.executed == 0)) && (callable3.executed == 0);\n        }\n    });\n    junit.framework.Assert.assertTrue(callable1.executed != 0);\n    junit.framework.Assert.assertTrue(callable2.executed == 0);\n    junit.framework.Assert.assertTrue(callable3.executed == 0);\n}",
        "ClassName": "TestCoordKillXCommand",
        "Label": 1,
        "MethodName": "testCoordKillXCommandUniqueness",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.SchemaService.WF_CONF_EXT_SCHEMAS, \"wf-ext-schema.xsd\");\n    new org.apache.oozie.service.Services().init();\n    org.apache.oozie.service.SchemaService wss = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.SchemaService.class);\n    javax.xml.validation.Validator validator = wss.getSchema(org.apache.oozie.service.SchemaService.SchemaName.WORKFLOW).newValidator();\n    validator.validate(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(org.apache.oozie.service.TestSchemaService.APP2)));\n}",
        "ClassName": "TestSchemaService",
        "Label": 1,
        "MethodName": "testExtSchema",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testInsertAndGetCountAndprepare();\n    _testParser();\n    _testSelect();\n    _testUpdate();\n    _testDelete();\n}",
        "ClassName": "TestSqlStatement",
        "Label": 1,
        "MethodName": "testSQLStatements",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-TestCoordActionInputCheckXCommand-C\";\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T23:59\" + TZ);\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-02T23:59\" + TZ);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(jobId, startTime, endTime);\n    long testedValue = 12000;\n    org.apache.oozie.service.Services.get().getConf().setLong(org.apache.oozie.command.coord.CoordActionInputCheckXCommand.CONF_COORD_INPUT_CHECK_REQUEUE_INTERVAL, testedValue);\n    org.apache.oozie.command.coord.CoordActionInputCheckXCommand caicc = new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(job.getId() + \"@1\", job.getId());\n    long effectiveValue = caicc.getCoordInputCheckRequeueInterval();\n    junit.framework.Assert.assertEquals(testedValue, effectiveValue);\n}",
        "ClassName": "TestCoordActionInputCheckXCommand",
        "Label": 1,
        "MethodName": "testRequeueInterval",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();\n    java.io.DataOutputStream dos = new java.io.DataOutputStream(baos);\n    org.apache.oozie.util.WritableUtils.writeStr(dos, \"a\");\n    org.apache.oozie.util.WritableUtils.writeStr(dos, null);\n    org.apache.oozie.util.WritableUtils.writeStr(dos, \"b\");\n    dos.close();\n    java.io.DataInputStream dis = new java.io.DataInputStream(new java.io.ByteArrayInputStream(baos.toByteArray()));\n    junit.framework.Assert.assertEquals(\"a\", org.apache.oozie.util.WritableUtils.readStr(dis));\n    junit.framework.Assert.assertNull(org.apache.oozie.util.WritableUtils.readStr(dis));\n    junit.framework.Assert.assertEquals(\"b\", org.apache.oozie.util.WritableUtils.readStr(dis));\n}",
        "ClassName": "TestWritableUtils",
        "Label": 1,
        "MethodName": "testWriteReadStr",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PREP, job.getStatus());\n    new org.apache.oozie.command.bundle.BundleKillXCommand(job.getId()).call();\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.KILLED, job.getStatus());\n}",
        "ClassName": "TestBundleKillXCommand",
        "Label": 1,
        "MethodName": "testBundleKill1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testCoordRerun-C\";\n    final int actionNum = 1;\n    final java.lang.String actionId = (jobId + \"@\") + actionNum;\n    org.apache.oozie.store.CoordinatorStore store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store.beginTrx();\n    try {\n        addRecordToJobTable(jobId, store, org.apache.oozie.client.Job.Status.SUCCEEDED);\n        addRecordToActionTable(jobId, actionNum, actionId, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\");\n        store.commitTrx();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Could not update db.\");\n    } finally {\n        store.closeTrx();\n    }\n    org.apache.oozie.store.CoordinatorStore store1 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store1.beginTrx();\n    org.apache.oozie.CoordinatorActionBean action1 = store1.getCoordinatorAction(actionId, false);\n    junit.framework.Assert.assertEquals(action1.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    store1.commitTrx();\n    store1.closeTrx();\n    final org.apache.oozie.client.OozieClient coordClient = org.apache.oozie.local.LocalOozie.getCoordClient();\n    coordClient.reRunCoord(jobId, org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_ACTION, java.lang.Integer.toString(actionNum), false, true);\n    org.apache.oozie.store.CoordinatorStore store2 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store2.beginTrx();\n    org.apache.oozie.CoordinatorActionBean action2 = store2.getCoordinatorAction(actionId, false);\n    junit.framework.Assert.assertNotSame(action2.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    store2.commitTrx();\n    store2.closeTrx();\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunActions1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testBundleEnginePutImpl(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_KILL);\n}",
        "ClassName": "TestV1JobServletBundleEngine",
        "Label": 1,
        "MethodName": "testBundleEngineKill",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.WorkflowJobBean wfJob1 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJob2 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJob3 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJob4 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJob5 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction1 = addRecordToWfActionTable(wfJob1.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction2 = addRecordToWfActionTable(wfJob2.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction3 = addRecordToWfActionTable(wfJob3.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction4 = addRecordToWfActionTable(wfJob4.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction5 = addRecordToWfActionTable(wfJob5.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordAction1 = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob1.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction2 = addRecordToCoordActionTable(coordJob.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob2.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction3 = addRecordToCoordActionTable(coordJob.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob3.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction4 = addRecordToCoordActionTable(coordJob.getId(), 4, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob4.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction5 = addRecordToCoordActionTable(coordJob.getId(), 5, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob5.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob1GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob1.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob2GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob2.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob3GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob3.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob4GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob4.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob5GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob5.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction1GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction1.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction2GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction2.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction3GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction3.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction4GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction4.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction5GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction5.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction1GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction1.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction2GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction2.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction3GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction3.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction4GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction4.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction5GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction5.getId());\n    wfJob1 = jpaService.execute(wfJob1GetCmd);\n    wfJob2 = jpaService.execute(wfJob2GetCmd);\n    wfJob3 = jpaService.execute(wfJob3GetCmd);\n    wfJob4 = jpaService.execute(wfJob4GetCmd);\n    wfJob5 = jpaService.execute(wfJob5GetCmd);\n    wfAction1 = jpaService.execute(wfAction1GetCmd);\n    wfAction2 = jpaService.execute(wfAction2GetCmd);\n    wfAction3 = jpaService.execute(wfAction3GetCmd);\n    wfAction4 = jpaService.execute(wfAction4GetCmd);\n    wfAction5 = jpaService.execute(wfAction5GetCmd);\n    coordJob = jpaService.execute(coordJobGetCmd);\n    coordAction1 = jpaService.execute(coordAction1GetCmd);\n    coordAction2 = jpaService.execute(coordAction2GetCmd);\n    coordAction3 = jpaService.execute(coordAction3GetCmd);\n    coordAction4 = jpaService.execute(coordAction4GetCmd);\n    coordAction5 = jpaService.execute(coordAction5GetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob5.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction5.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction5.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(wfJob1.getEndTime()), 7, 1, 3).call();\n    try {\n        jpaService.execute(coordJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordAction1GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action 1 should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordAction2GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action 2 should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordAction3GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action 3 should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordAction4GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action 4 should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordAction5GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action 5 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJob1GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job 1 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJob2GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job 2 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJob3GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job 3 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJob4GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job 4 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJob5GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job 5 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfAction1GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action 1 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfAction2GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action 2 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfAction3GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action 3 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfAction4GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action 4 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfAction5GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action 5 should not have been purged\");\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeCoordWithWFChild2MoreThanLimit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.PREP);\n    new org.apache.oozie.command.bundle.BundleStartXCommand(job.getId(), true).call();\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNING);\n    sleep(2000);\n    org.apache.oozie.executor.jpa.BundleActionsGetJPAExecutor bundleActionsGetExecutor = new org.apache.oozie.executor.jpa.BundleActionsGetJPAExecutor(job.getId());\n    java.util.List<org.apache.oozie.BundleActionBean> actions = jpaService.execute(bundleActionsGetExecutor);\n    junit.framework.Assert.assertEquals(2, actions.size());\n    junit.framework.Assert.assertEquals(true, actions.get(0).isCritical());\n    junit.framework.Assert.assertEquals(job.getId(), actions.get(0).getBundleId());\n    junit.framework.Assert.assertEquals(false, actions.get(1).isCritical());\n    junit.framework.Assert.assertEquals(job.getId(), actions.get(1).getBundleId());\n}",
        "ClassName": "TestBundleStartXCommand",
        "Label": 1,
        "MethodName": "testBundleStartDryrun",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.hadoop.conf.Configuration jobConf = null;\n    try {\n        jobConf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(job.getConf()));\n    } catch (java.io.IOException ioe) {\n        log.warn(\"Configuration parse error. read from DB :\" + job.getConf(), ioe);\n        throw new org.apache.oozie.command.CommandException(org.apache.oozie.ErrorCode.E1005, ioe);\n    }\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(jobConf.get(org.apache.oozie.client.OozieClient.BUNDLE_APP_PATH), \"bundle.xml\");\n    jobConf.set(org.apache.oozie.client.OozieClient.BUNDLE_APP_PATH, appPath.toString());\n    org.apache.oozie.command.bundle.BundleSubmitXCommand submitCmd = new org.apache.oozie.command.bundle.BundleSubmitXCommand(jobConf, job.getAuthToken());\n    submitCmd.call();\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(submitCmd.getJob().getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(\"bundle-app-name\", job.getAppName());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.PREP);\n    new org.apache.oozie.command.bundle.BundleStartXCommand(job.getId()).call();\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNING);\n    sleep(2000);\n    final org.apache.oozie.executor.jpa.BundleActionsGetJPAExecutor bundleActionsGetExecutor = new org.apache.oozie.executor.jpa.BundleActionsGetJPAExecutor(job.getId());\n    java.util.List<org.apache.oozie.BundleActionBean> actions = jpaService.execute(bundleActionsGetExecutor);\n    junit.framework.Assert.assertEquals(2, actions.size());\n    waitFor(200000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            java.util.List<org.apache.oozie.BundleActionBean> actions = jpaService.execute(bundleActionsGetExecutor);\n            return actions.get(0).getStatus().equals(org.apache.oozie.client.Job.Status.RUNNING) && actions.get(1).getStatus().equals(org.apache.oozie.client.Job.Status.RUNNING);\n        }\n    });\n    actions = jpaService.execute(bundleActionsGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, actions.get(0).getStatus());\n    junit.framework.Assert.assertEquals(true, actions.get(0).isCritical());\n    junit.framework.Assert.assertEquals(job.getId(), actions.get(0).getBundleId());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, actions.get(1).getStatus());\n    junit.framework.Assert.assertEquals(false, actions.get(1).isCritical());\n    junit.framework.Assert.assertEquals(job.getId(), actions.get(1).getBundleId());\n}",
        "ClassName": "TestBundleStartXCommand",
        "Label": 1,
        "MethodName": "testBundleStart2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testNonJsonResponses(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_LOG, org.apache.oozie.client.rest.RestConstants.TEXT_CONTENT_TYPE, org.apache.oozie.servlet.MockCoordinatorEngineService.LOG);\n}",
        "ClassName": "TestV1JobServlet",
        "Label": 1,
        "MethodName": "testJobLog",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_STATES_WITHOUT_ERROR, \"true\");\n    services = new org.apache.oozie.service.Services();\n    setClassesToBeExcluded(services.getConf(), excludedServices);\n    services.init();\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, true, false, 3);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.KILLED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    final java.lang.String jobId = job.getId();\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(jobId));\n            return coordJob.isPending() == false;\n        }\n    });\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertFalse(job.isPending());\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNING);\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServiceBackwardSupport",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        org.apache.oozie.util.IOUtils.getResourceAsString(\"invalid-resource.txt\", 2);\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n    }\n    java.lang.String s = org.apache.oozie.util.IOUtils.getResourceAsString(\"test-ioutils.txt\", 10);\n    junit.framework.Assert.assertEquals(\"abcde\", s);\n    try {\n        org.apache.oozie.util.IOUtils.getResourceAsString(\"test-ioutils.txt\", 2);\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n    }\n}",
        "ClassName": "TestIOUtils",
        "Label": 1,
        "MethodName": "testGetResourceAsString",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.jms.JMSJobEventListener wfEventListener = new org.apache.oozie.jms.JMSJobEventListener();\n    wfEventListener.init(conf);\n    org.apache.oozie.event.WorkflowJobEvent wfe = new org.apache.oozie.event.WorkflowJobEvent(\"wfId1\", \"caId1\", org.apache.oozie.client.WorkflowJob.Status.FAILED, \"user1\", \"wf-app-name1\", new java.util.Date(), new java.util.Date());\n    org.apache.oozie.jms.ConnectionContext jmsContext = getConnectionContext();\n    try {\n        javax.jms.Session session = jmsContext.createSession(Session.AUTO_ACKNOWLEDGE);\n        java.lang.String selector = ((((org.apache.oozie.client.event.jms.JMSHeaderConstants.EVENT_STATUS + \"='FAILURE' AND \") + org.apache.oozie.client.event.jms.JMSHeaderConstants.APP_TYPE) + \"='WORKFLOW_JOB' AND \") + org.apache.oozie.client.event.jms.JMSHeaderConstants.MESSAGE_TYPE) + \"='JOB'\";\n        javax.jms.MessageConsumer consumer = jmsContext.createConsumer(session, wfEventListener.getTopic(wfe), selector);\n        wfEventListener.onWorkflowJobEvent(wfe);\n        javax.jms.TextMessage message = ((javax.jms.TextMessage) (consumer.receive(5000)));\n        org.apache.oozie.client.event.message.WorkflowJobMessage wfFailMessage = org.apache.oozie.client.event.jms.JMSMessagingUtils.getEventMessage(message);\n        org.junit.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.FAILED, wfFailMessage.getStatus());\n        junit.framework.Assert.assertEquals(\"user1\", wfFailMessage.getUser());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.Event.MessageType.JOB, wfFailMessage.getMessageType());\n        wfEventListener.destroy();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSJobEventListener",
        "Label": 1,
        "MethodName": "testWorkflowJobSelectorsAnd",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean bundle = new org.apache.oozie.BundleJobBean();\n    bundle.setId(\"00002-12345-B\");\n    bundle.setAppName(bundleName);\n    bundle.setStatus(org.apache.oozie.client.Job.Status.RUNNING);\n    bundle.setStartTime(new java.util.Date());\n    org.apache.oozie.executor.jpa.BundleJobInsertJPAExecutor bundleInsert = new org.apache.oozie.executor.jpa.BundleJobInsertJPAExecutor(bundle);\n    jpaService.execute(bundleInsert);\n    java.lang.String request = \"bundle=\" + bundleName;\n    org.apache.oozie.executor.jpa.BulkJPAExecutor bulkjpa = new org.apache.oozie.executor.jpa.BulkJPAExecutor(org.apache.oozie.BundleEngine.parseBulkFilter(request), 1, 10);\n    try {\n        jpaService.execute(bulkjpa);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException jex) {\n        junit.framework.Assert.assertTrue(jex.getMessage().contains(\"Non-unique bundles present for same bundle name\"));\n    }\n}",
        "ClassName": "TestBulkMonitorJPAExecutor",
        "Label": 1,
        "MethodName": "testMultipleBundleIdsForName",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, true, true, 3);\n    addRecordToCoordActionTable(\"ABCD\", 3, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    sleep(1000);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServiceStaleCoordActions",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-resume\", (org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_RESUME, org.apache.oozie.servlet.MockDagEngineService.did);\n            args = new java.lang.String[]{ \"job\", \"-oozie\", oozieUrl, \"-resume\", org.apache.oozie.servlet.MockDagEngineService.JOB_ID + (org.apache.oozie.servlet.MockDagEngineService.workflows.size() + 1) };\n            junit.framework.Assert.assertEquals(-1, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testResume",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"name\", \"def\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"one\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"f\", \"end\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\", \"three\" }))).addNode(new org.apache.oozie.workflow.lite.DecisionNodeDef(\"two\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestDecisionNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"four\", \"j\", \"four\" }))).addNode(new org.apache.oozie.workflow.lite.DecisionNodeDef(\"three\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestDecisionNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j\", \"five\", \"j\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"four\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"five\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.KillNodeDef(\"k\", \"kill\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class)).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    try {\n        invokeForkJoin(parser, def);\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Unexpected Exception\");\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testDecisionsToJoinForkJoin",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.TestCallableQueueService.EXEC_ORDER = new java.util.concurrent.atomic.AtomicLong();\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable1 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithDiffKeyInOneComposite1\", \"QueueUniquenessWithDiffKeyInOneComposite\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable2 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithDiffKeyInOneComposite2\", \"QueueUniquenessWithDiffKeyInOneComposite\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable3 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithDiffKeyInOneComposite3\", \"QueueUniquenessWithDiffKeyInOneComposite\", 0, 100);\n    org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    queueservice.queueSerial(java.util.Arrays.asList(callable1, callable2, callable3));\n    waitFor(200, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return ((callable1.executed != 0) && (callable2.executed != 0)) && (callable3.executed != 0);\n        }\n    });\n    junit.framework.Assert.assertTrue(callable1.executed != 0);\n    junit.framework.Assert.assertTrue(callable2.executed != 0);\n    junit.framework.Assert.assertTrue(callable3.executed != 0);\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testQueueUniquenessWithDiffKeyInOneComposite",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-TestCoordActionInputCheckXCommand-C\";\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateUTC(\"2009-02-01T23:59Z\");\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateUTC(\"2009-02-02T23:59Z\");\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(jobId, startTime, endTime);\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    org.apache.oozie.command.coord.CoordActionInputCheckXCommand caicc = new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(job.getId() + \"@1\", job.getId());\n    caicc.loadState();\n    java.lang.String[] whiteList = new java.lang.String[1];\n    whiteList[0] = \"localhost:5330\";\n    services.destroy();\n    setSystemProperty(org.apache.oozie.service.HadoopAccessorService.NAME_NODE_WHITELIST, whiteList[0]);\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"coord\");\n    java.lang.String inputDir = appPath.toString() + \"/coord-input/2010/07/09/01/00\";\n    java.lang.String nonExistDir = inputDir.replaceFirst(\"localhost\", \"nonExist\");\n    try {\n        caicc.pathExists(nonExistDir, new org.apache.oozie.util.XConfiguration(), org.apache.oozie.test.XTestCase.getTestUser());\n        junit.framework.Assert.fail(\"Should throw exception due to non-existent NN path. Therefore fail\");\n    } catch (java.io.IOException ioe) {\n        junit.framework.Assert.assertEquals(caicc.getCoordActionErrorCode(), \"E0901\");\n        junit.framework.Assert.assertTrue(caicc.getCoordActionErrorMsg().contains(\"not in Oozies whitelist\"));\n    }\n}",
        "ClassName": "TestCoordActionInputCheckXCommand",
        "Label": 1,
        "MethodName": "testNonExistingNameNode",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testCoordRerun-C\";\n    final int actionNum = 1;\n    final java.lang.String actionId = (jobId + \"@\") + actionNum;\n    org.apache.oozie.store.CoordinatorStore store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store.beginTrx();\n    try {\n        addRecordToJobTable(jobId, store, org.apache.oozie.client.Job.Status.SUCCEEDED);\n        addRecordToActionTable(jobId, actionNum, actionId, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action3.xml\");\n        store.commitTrx();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Could not update db.\");\n    } finally {\n        store.closeTrx();\n    }\n    final org.apache.oozie.client.OozieClient coordClient = org.apache.oozie.local.LocalOozie.getCoordClient();\n    coordClient.reRunCoord(jobId, org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_ACTION, java.lang.Integer.toString(actionNum), false, false);\n    org.apache.oozie.store.CoordinatorStore store2 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store2.beginTrx();\n    org.apache.oozie.CoordinatorActionBean action2 = store2.getCoordinatorAction(actionId, false);\n    junit.framework.Assert.assertNotSame(action2.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    store2.commitTrx();\n    store2.closeTrx();\n    waitFor(120 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.client.CoordinatorAction bean = coordClient.getCoordActionInfo(actionId);\n            return (bean.getStatus() == org.apache.oozie.client.CoordinatorAction.Status.WAITING) || (bean.getStatus() == org.apache.oozie.client.CoordinatorAction.Status.READY);\n        }\n    });\n    org.apache.oozie.client.CoordinatorAction bean = coordClient.getCoordActionInfo(actionId);\n    junit.framework.Assert.assertTrue((bean.getStatus() == org.apache.oozie.client.CoordinatorAction.Status.WAITING) || (bean.getStatus() == org.apache.oozie.client.CoordinatorAction.Status.READY));\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunCleanupNoOutputEvents",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.ShellActionExecutor ae = new org.apache.oozie.action.hadoop.ShellActionExecutor();\n    org.apache.hadoop.fs.Path jar = new org.apache.hadoop.fs.Path(ae.getOozieRuntimeDir(), ae.getLauncherJarName());\n    junit.framework.Assert.assertTrue(new java.io.File(jar.toString()).exists());\n}",
        "ClassName": "TestShellActionExecutor",
        "Label": 1,
        "MethodName": "testLauncherJar",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.servlet.MyJsonRestServlet.WILDCARD_RESOURCE, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"/any\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"POST\", \"/any\", \"\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestJsonRestServlet",
        "Label": 1,
        "MethodName": "testWildCardResource",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_STATES_WITHOUT_ERROR, \"false\");\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUSPENDEDWITHERROR, false);\n    this.addRecordToBundleActionTable(job.getId(), \"action1\", 0, org.apache.oozie.client.Job.Status.SUSPENDED);\n    this.addRecordToBundleActionTable(job.getId(), \"action2\", 0, org.apache.oozie.client.Job.Status.SUSPENDEDWITHERROR);\n    addRecordToCoordJobTable(\"action1\", org.apache.oozie.client.Job.Status.SUSPENDED, false, false);\n    addRecordToCoordJobTable(\"action2\", org.apache.oozie.client.Job.Status.SUSPENDEDWITHERROR, false, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDEDWITHERROR, job.getStatus());\n    new org.apache.oozie.command.bundle.BundleRerunXCommand(job.getId(), \"action2\", null, false, true).call();\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNINGWITHERROR, job.getStatus());\n}",
        "ClassName": "TestBundleRerunXCommand",
        "Label": 1,
        "MethodName": "testBundleRerunInSuspendedWithError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/admin/*\", org.apache.oozie.servlet.V1AdminServlet.class, org.apache.oozie.servlet.TestV1AdminServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.net.URL url = createURL(org.apache.oozie.client.rest.RestConstants.ADMIN_INSTRUMENTATION_RESOURCE, java.util.Collections.EMPTY_MAP);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertTrue(json.containsKey(org.apache.oozie.client.rest.JsonTags.INSTR_VARIABLES));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1AdminServlet",
        "Label": 1,
        "MethodName": "testInstrumentation",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String jmsProps = services.getConf().get(org.apache.oozie.jms.JMSJobEventListener.JMS_CONNECTION_PROPERTIES);\n    org.apache.oozie.jms.JMSConnectionInfo connInfo = new org.apache.oozie.jms.JMSConnectionInfo(jmsProps);\n    org.apache.oozie.jms.ConnectionContext jmsContext = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JMSAccessorService.class).createConnectionContext(connInfo);\n    java.lang.Thread th = new java.lang.Thread(new org.apache.oozie.jms.TestDefaultConnectionContext.SessionThread(jmsContext));\n    th.start();\n    try {\n        th.join();\n    } catch (java.lang.InterruptedException e) {\n        e.printStackTrace();\n    }\n    junit.framework.Assert.assertEquals(session1, session2);\n    javax.jms.Session session3 = jmsContext.createThreadLocalSession(Session.AUTO_ACKNOWLEDGE);\n    javax.jms.Session session4 = jmsContext.createThreadLocalSession(Session.AUTO_ACKNOWLEDGE);\n    junit.framework.Assert.assertTrue(session3.equals(session4));\n    junit.framework.Assert.assertFalse(session1.equals(session3));\n}",
        "ClassName": "TestDefaultConnectionContext",
        "Label": 1,
        "MethodName": "testThreadLocalSession",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path subWorkflowAppPath = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    java.io.Writer writer = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(subWorkflowAppPath, \"workflow.xml\")));\n    writer.write(org.apache.oozie.action.oozie.TestSubWorkflowActionExecutor.APP1);\n    writer.close();\n    org.apache.oozie.util.XConfiguration protoConf = getBaseProtoConf();\n    final org.apache.oozie.WorkflowJobBean workflow = createBaseWorkflow(protoConf, \"W\");\n    java.lang.String defaultConf = workflow.getConf();\n    org.apache.oozie.util.XConfiguration newConf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(defaultConf));\n    java.lang.String actionConf = (((((((((((\"<sub-workflow xmlns='uri:oozie:workflow:0.1' name='subwf'>\" + \"      <app-path>\") + subWorkflowAppPath) + java.io.File.separator) + \"workflow.xml\") + \"</app-path>\") + \"      <configuration>\") + \"        <property>\") + \"          <name>a</name>\") + \"          <value>A</value>\") + \"        </property>\") + \"      </configuration>\") + \"</sub-workflow>\";\n    final org.apache.oozie.WorkflowActionBean action = ((org.apache.oozie.WorkflowActionBean) (workflow.getActions().get(0)));\n    action.setConf(actionConf);\n    final org.apache.oozie.action.oozie.SubWorkflowActionExecutor subWorkflow = new org.apache.oozie.action.oozie.SubWorkflowActionExecutor();\n    workflow.setConf(newConf.toXmlString());\n    subWorkflow.start(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), action);\n    org.apache.oozie.client.OozieClient oozieClient = subWorkflow.getWorkflowClient(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), org.apache.oozie.action.oozie.SubWorkflowActionExecutor.LOCAL);\n    waitFor(5000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            subWorkflow.check(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), action);\n            return action.getStatus() == org.apache.oozie.client.WorkflowAction.Status.DONE;\n        }\n    });\n    subWorkflow.check(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), action);\n    subWorkflow.end(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), action);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, action.getStatus());\n    org.apache.oozie.client.WorkflowJob wf = oozieClient.getJobInfo(action.getExternalId());\n    org.apache.hadoop.conf.Configuration childConf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(wf.getConf()));\n    junit.framework.Assert.assertFalse(org.apache.oozie.test.XTestCase.getTestGroup() == childConf.get(org.apache.oozie.client.OozieClient.GROUP_NAME));\n    newConf.set(org.apache.oozie.client.OozieClient.GROUP_NAME, org.apache.oozie.test.XTestCase.getTestGroup());\n    workflow.setConf(newConf.toXmlString());\n    final org.apache.oozie.WorkflowActionBean action1 = new org.apache.oozie.WorkflowActionBean();\n    action1.setConf(actionConf);\n    action1.setId(\"W1\");\n    subWorkflow.start(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action1), action1);\n    oozieClient = subWorkflow.getWorkflowClient(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action1), org.apache.oozie.action.oozie.SubWorkflowActionExecutor.LOCAL);\n    waitFor(5000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            subWorkflow.check(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action1), action1);\n            return action1.getStatus() == org.apache.oozie.client.WorkflowAction.Status.DONE;\n        }\n    });\n    subWorkflow.check(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action1), action1);\n    subWorkflow.end(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action1), action1);\n    wf = oozieClient.getJobInfo(action1.getExternalId());\n    childConf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(wf.getConf()));\n    junit.framework.Assert.assertEquals(org.apache.oozie.test.XTestCase.getTestGroup(), childConf.get(org.apache.oozie.client.OozieClient.GROUP_NAME));\n}",
        "ClassName": "TestSubWorkflowActionExecutor",
        "Label": 1,
        "MethodName": "testGetGroupFromParent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.WorkflowStoreService wls = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.WorkflowStoreService.class);\n    junit.framework.Assert.assertNotNull(wls);\n    junit.framework.Assert.assertNotNull(wls.create());\n}",
        "ClassName": "TestLiteWorkflowStoreService",
        "Label": 1,
        "MethodName": "testCreateStore",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String inherit = \"false\";\n    java.lang.String inheritWF = null;\n    java.lang.String[] expectedLibs1 = new java.lang.String[]{ \"child1.jar\", \"child2.so\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 1, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs1, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs1, expectedLibs1);\n    java.lang.String[] expectedLibs2 = new java.lang.String[]{  };\n    checkSubworkflowLibHelper(inherit, inheritWF, 2, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs2, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs2, expectedLibs2);\n    java.lang.String[] expectedLibs3 = new java.lang.String[]{ \"child1.jar\", \"child2.so\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 3, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs3, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs3, expectedLibs3);\n    java.lang.String[] expectedLibs4 = new java.lang.String[]{  };\n    checkSubworkflowLibHelper(inherit, inheritWF, 4, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs4, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs4, expectedLibs4);\n    java.lang.String[] expectedLibs5 = new java.lang.String[]{ \"child1.jar\", \"child2.so\", \"same.jar\" };\n    checkSubworkflowLibHelper(inherit, inheritWF, 5, org.apache.oozie.service.TestLiteWorkflowAppService.parentLibs5, org.apache.oozie.service.TestLiteWorkflowAppService.childLibs5, expectedLibs5);\n}",
        "ClassName": "TestLiteWorkflowAppService",
        "Label": 1,
        "MethodName": "testCreateProtoConfWithSubWorkflowLib2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testActionMater-C\";\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:00Z\");\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:14Z\");\n    java.util.Date pauseTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T09:58Z\");\n    addRecordToJobTable(jobId, startTime, endTime, pauseTime);\n    new org.apache.oozie.command.coord.CoordActionMaterializeCommand(jobId, startTime, endTime).call();\n    checkCoordActions(jobId, 0, org.apache.oozie.client.Job.Status.RUNNING);\n}",
        "ClassName": "TestCoordActionMaterializeCommand",
        "Label": 1,
        "MethodName": "testActionMaterWithPauseTime3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date curr = new java.util.Date();\n    java.util.Date pauseTime = new java.util.Date(curr.getTime() - 1000);\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTableWithPausedTime(org.apache.oozie.client.Job.Status.PREP, false, pauseTime);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PREP, job.getStatus());\n    new org.apache.oozie.command.bundle.BundleRerunXCommand(job.getId(), \"action2\", null, false, true).call();\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PREP, job.getStatus());\n}",
        "ClassName": "TestBundleRerunXCommand",
        "Label": 1,
        "MethodName": "testBundleRerunInPrep",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    org.apache.oozie.service.Services services = super.setupServicesForHCatalog();\n    services.init();\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T010:00Z\");\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-11T10:00Z\");\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTableForWaiting(\"coord-job-for-matd-neg-hcat.xml\", org.apache.oozie.client.Job.Status.RUNNING, startTime, endTime, false, false, 0);\n    try {\n        new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n        junit.framework.Assert.fail(\"Expected Command exception but didn't catch any\");\n    } catch (org.apache.oozie.command.CommandException e) {\n        e.printStackTrace();\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E1001, e.getErrorCode());\n    } catch (java.lang.Exception e) {\n        junit.framework.Assert.fail(\"Unexpected exception \" + e.getMessage());\n    }\n}",
        "ClassName": "TestCoordMaterializeTransitionXCommand",
        "Label": 1,
        "MethodName": "testActionMaterForHcatalogIncorrectURI",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum1 = 1;\n    int actionNum2 = 2;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    java.lang.String jobId = job.getId();\n    addRecordToCoordActionTable(jobId, actionNum1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(jobId, actionNum2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    java.lang.String rerunScope = (java.lang.Integer.toString(actionNum1) + \"-\") + java.lang.Integer.toString(actionNum2);\n    java.util.List<org.apache.oozie.CoordinatorActionBean> coordActions = org.apache.oozie.coord.CoordUtils.getCoordActionsFromIds(jobId, rerunScope);\n    junit.framework.Assert.assertEquals(2, coordActions.size());\n}",
        "ClassName": "TestCoordUtils",
        "Label": 1,
        "MethodName": "testGetCoordActionsFromIdsRange",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"name\", \"def\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"one\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"f\", \"end\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\", \"three\" }))).addNode(new org.apache.oozie.workflow.lite.DecisionNodeDef(\"two\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestDecisionNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"four\", \"three\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"three\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"four\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.KillNodeDef(\"k\", \"kill\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class)).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    try {\n        invokeForkJoin(parser, def);\n        junit.framework.Assert.fail(\"Expected to catch an exception but did not encounter any\");\n    } catch (java.lang.Exception ex) {\n        org.apache.oozie.workflow.WorkflowException we = ((org.apache.oozie.workflow.WorkflowException) (ex.getCause()));\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0743, we.getErrorCode());\n        junit.framework.Assert.assertTrue(we.getMessage().contains(\"three\"));\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testDecisionForkJoinFailure",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-TestCoordActionInputCheckXCommand-C\";\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-15T23:59\" + TZ);\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-16T23:59\" + TZ);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(jobId, startTime, endTime, \"future\");\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    createDir(getTestCaseDir() + \"/2009/02/12/\");\n    createDir(getTestCaseDir() + \"/2009/02/26/\");\n    createDir(getTestCaseDir() + \"/2009/03/05/\");\n    createDir(getTestCaseDir() + \"/2009/03/26/\");\n    new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(job.getId() + \"@1\", job.getId()).call();\n    org.apache.oozie.CoordinatorActionBean action = null;\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    try {\n        action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(job.getId() + \"@1\"));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException se) {\n        junit.framework.Assert.fail(((\"Action ID \" + job.getId()) + \"@1\") + \" was not stored properly in db\");\n    }\n    junit.framework.Assert.assertEquals(org.apache.oozie.command.coord.CoordCommandUtils.RESOLVED_UNRESOLVED_SEPARATOR + \"${coord:futureRange(0,3,'5')}\", action.getMissingDependencies());\n    createDir(getTestCaseDir() + \"/2009/03/12/\");\n    new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(job.getId() + \"@1\", job.getId()).call();\n    try {\n        action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(job.getId() + \"@1\"));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException se) {\n        junit.framework.Assert.fail(((\"Action ID \" + job.getId()) + \"@1\") + \" was not stored properly in db\");\n    }\n    junit.framework.Assert.assertEquals(\"\", action.getMissingDependencies());\n    java.lang.String actionXML = action.getActionXml();\n    java.lang.String resolvedList = (((((((((((((\"file://\" + getTestCaseDir()) + \"/2009/02/12\") + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"file://\") + getTestCaseDir()) + \"/2009/02/26\") + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"file://\") + getTestCaseDir()) + \"/2009/03/05\") + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"file://\") + getTestCaseDir()) + \"/2009/03/12\";\n    junit.framework.Assert.assertEquals(resolvedList, actionXML.substring(actionXML.indexOf(\"<uris>\") + 6, actionXML.indexOf(\"</uris>\")));\n}",
        "ClassName": "TestCoordActionInputCheckXCommand",
        "Label": 1,
        "MethodName": "testActionInputCheckFuture",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.ELEvaluator.Context support = new org.apache.oozie.util.ELEvaluator.Context();\n    support.setVariable(\"a\", \"A\");\n    org.apache.oozie.util.ELEvaluator evaluator = new org.apache.oozie.util.ELEvaluator(support);\n    junit.framework.Assert.assertEquals(\"A\", evaluator.getVariable(\"a\"));\n    junit.framework.Assert.assertEquals(\"A\", evaluator.getContext().getVariable(\"a\"));\n    java.util.Map<java.lang.String, java.lang.Object> vars = new java.util.HashMap<java.lang.String, java.lang.Object>();\n    vars.put(\"a\", \"AA\");\n    vars.put(\"b\", \"BB\");\n    support.setVariables(vars);\n    junit.framework.Assert.assertEquals(\"AA\", support.getVariable(\"a\"));\n    junit.framework.Assert.assertEquals(\"BB\", support.getVariable(\"b\"));\n    try {\n        support.resolveVariable(\"c\");\n        junit.framework.Assert.fail();\n    } catch (javax.servlet.jsp.el.ELException ex) {\n    }\n}",
        "ClassName": "TestELEvaluator",
        "Label": 1,
        "MethodName": "testVars",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String s = org.apache.oozie.util.ELConstantsFunctions.timestamp();\n    java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm'Z'\");\n    sdf.setTimeZone(java.util.TimeZone.getTimeZone(\"UTC\"));\n    junit.framework.Assert.assertNotNull(sdf.parse(s));\n}",
        "ClassName": "TestELConstantsFunctions",
        "Label": 1,
        "MethodName": "testTimestamp",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, false);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.util.Date pauseTime = new java.util.Date(new java.util.Date().getTime() - (30 * 1000));\n    job.setPauseTime(pauseTime);\n    jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobUpdateJPAExecutor(job));\n    org.apache.oozie.BundleActionBean bundleAction1 = this.addRecordToBundleActionTable(job.getId(), \"action1\", 0, org.apache.oozie.client.Job.Status.RUNNING);\n    org.apache.oozie.BundleActionBean bundleAction2 = this.addRecordToBundleActionTable(job.getId(), \"action2\", 0, org.apache.oozie.client.Job.Status.RUNNING);\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean coordJob1 = addRecordToCoordJobTable(\"action1\", org.apache.oozie.client.Job.Status.RUNNING, start, end, false);\n    org.apache.oozie.CoordinatorJobBean coordJob2 = addRecordToCoordJobTable(\"action2\", org.apache.oozie.client.Job.Status.RUNNING, start, end, false);\n    coordJob1.setPauseTime(pauseTime);\n    coordJob1.setBundleId(job.getId());\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob1));\n    coordJob2.setPauseTime(pauseTime);\n    coordJob2.setBundleId(job.getId());\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob2));\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, job.getStatus());\n    java.lang.Runnable pauseStartRunnable = new org.apache.oozie.service.PauseTransitService.PauseTransitRunnable();\n    pauseStartRunnable.run();\n    final java.lang.String jobId = job.getId();\n    waitFor(10 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean bJob1 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n            return bJob1.getStatus() == org.apache.oozie.client.Job.Status.PAUSED;\n        }\n    });\n    final java.lang.String coordJobId1 = coordJob1.getId();\n    final java.lang.String coordJobId2 = coordJob2.getId();\n    waitFor(10 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean cJob1 = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJobId1));\n            return cJob1.getStatus() == org.apache.oozie.client.Job.Status.PAUSED;\n        }\n    });\n    job = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSED, job.getStatus());\n    coordJob1 = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJobId1));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSED, coordJob1.getStatus());\n    coordJob2 = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJobId2));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSED, coordJob2.getStatus());\n    bundleAction1 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(job.getId(), \"action1\"));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSED, bundleAction1.getStatus());\n    bundleAction2 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(job.getId(), \"action2\"));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSED, bundleAction2.getStatus());\n}",
        "ClassName": "TestPauseTransitService",
        "Label": 1,
        "MethodName": "testPauseBundleAndCoordinator",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/callback\", org.apache.oozie.servlet.CallbackServlet.class, true, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.net.URL url = createURL(\"\", java.util.Collections.EMPTY_MAP);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode());\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(\"id\", \"error\");\n            params.put(\"status\", \"error\");\n            url = createURL(\"\", params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode());\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(\"id\", \"ok\");\n            params.put(\"status\", \"ok\");\n            url = createURL(\"\", params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            return null;\n        }\n    });\n}",
        "ClassName": "TestCallbackServlet",
        "Label": 1,
        "MethodName": "testCallbackGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.WorkflowJobBean wfJobA = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJobB = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean subwfJobA1 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJobA.getId());\n    org.apache.oozie.WorkflowJobBean subwfJobA2 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJobA.getId());\n    org.apache.oozie.WorkflowJobBean subwfJobB = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJobB.getId());\n    org.apache.oozie.WorkflowActionBean wfActionA = addRecordToWfActionTable(wfJobA.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfActionB = addRecordToWfActionTable(wfJobB.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean subwfActionA1 = addRecordToWfActionTable(subwfJobA1.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean subwfActionA2 = addRecordToWfActionTable(subwfJobA2.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean subwfActionB = addRecordToWfActionTable(subwfJobB.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    java.util.List<java.lang.String> children = new java.util.ArrayList<java.lang.String>();\n    children.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobsGetFromParentIdJPAExecutor(wfJobA.getId(), 10)));\n    checkChildren(children, subwfJobA1.getId(), subwfJobA2.getId());\n    children = new java.util.ArrayList<java.lang.String>();\n    children.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobsGetFromParentIdJPAExecutor(wfJobB.getId(), 10)));\n    checkChildren(children, subwfJobB.getId());\n}",
        "ClassName": "TestWorkflowJobsGetFromParentIdJPAExecutor",
        "Label": 1,
        "MethodName": "testGetWorkflowParent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testCoordRerun-C\";\n    final int actionNum1 = 1;\n    final int actionNum2 = 2;\n    final java.lang.String actionId1 = (jobId + \"@\") + actionNum1;\n    final java.lang.String actionId2 = (jobId + \"@\") + actionNum2;\n    org.apache.oozie.store.CoordinatorStore store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store.beginTrx();\n    try {\n        addRecordToJobTable(jobId, store, org.apache.oozie.client.Job.Status.SUCCEEDED);\n        addRecordToActionTable(jobId, actionNum1, actionId1, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\");\n        addRecordToActionTable(jobId, actionNum2, actionId2, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action2.xml\");\n        store.commitTrx();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Could not update db.\");\n    } finally {\n        store.closeTrx();\n    }\n    java.lang.String rerunScope = \"2009-12-15T01:00Z\" + (\",\" + \"2009-12-16T01:00Z\");\n    final org.apache.oozie.client.OozieClient coordClient = org.apache.oozie.local.LocalOozie.getCoordClient();\n    coordClient.reRunCoord(jobId, org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_DATE, rerunScope, false, true);\n    org.apache.oozie.store.CoordinatorStore store1 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store1.beginTrx();\n    org.apache.oozie.CoordinatorActionBean action1 = store1.getCoordinatorAction(actionId1, false);\n    junit.framework.Assert.assertNotSame(action1.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    org.apache.oozie.CoordinatorActionBean action2 = store1.getCoordinatorAction(actionId2, false);\n    junit.framework.Assert.assertNotSame(action2.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    store1.commitTrx();\n    store1.closeTrx();\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunDate3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    conf.set(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, org.apache.hadoop.util.StringUtils.join(\",\", java.util.Arrays.asList(org.apache.oozie.service.GroupsService.class.getName(), org.apache.oozie.service.ProxyUserService.class.getName())));\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.hosts\", \"localhost\");\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.groups\", \"*\");\n    services.init();\n    try {\n        org.apache.oozie.service.ProxyUserService proxyUser = services.get(org.apache.oozie.service.ProxyUserService.class);\n        junit.framework.Assert.assertNotNull(proxyUser);\n        proxyUser.validate(\"foo\", \"unknownhost.bar.foo\", \"bar\");\n        junit.framework.Assert.fail();\n    } catch (java.security.AccessControlException ex) {\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail(ex.toString());\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestProxyUserService",
        "Label": 1,
        "MethodName": "testUnknownHost",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String actionXml = ((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<main-class>\") + org.apache.oozie.action.hadoop.LauncherMainTester.class.getName()) + \"</main-class>\") + \"<arg>ex</arg>\") + \"</java>\";\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml, null);\n    final org.apache.hadoop.mapred.RunningJob runningJob = submitAction(context);\n    waitFor(60 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return runningJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(runningJob.isSuccessful());\n    junit.framework.Assert.assertFalse(org.apache.oozie.action.hadoop.LauncherMapper.isMainSuccessful(runningJob));\n    org.apache.oozie.action.ActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    ae.check(context, context.getAction());\n    junit.framework.Assert.assertTrue(ae.isCompleted(context.getAction().getExternalStatus()));\n    junit.framework.Assert.assertEquals(\"FAILED/KILLED\", context.getAction().getExternalStatus());\n    junit.framework.Assert.assertNull(context.getAction().getData());\n    ae.end(context, context.getAction());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.ERROR, context.getAction().getStatus());\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testExceptionSubmitError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertNotNull(org.apache.oozie.service.Services.get().get(org.apache.oozie.service.MemoryLocksService.class));\n}",
        "ClassName": "TestMemoryLocksService",
        "Label": 1,
        "MethodName": "testService",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertEquals(120, org.apache.oozie.util.ParamChecker.checkGEZero(120, \"test\"));\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.util.ParamChecker.checkGEZero(0, \"test\"));\n    try {\n        org.apache.oozie.util.ParamChecker.checkGEZero(-1, \"test\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestParamChecker",
        "Label": 1,
        "MethodName": "testCheckGEZero",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"f\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"a\", \"b\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"a\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestForkedContextHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"b\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j\" }))).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, job.getStatus());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testForkedContext",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.EventHandlerService ehs = services.get(org.apache.oozie.service.EventHandlerService.class);\n    junit.framework.Assert.assertNotNull(ehs);\n    org.apache.oozie.sla.service.SLAService slas = services.get(org.apache.oozie.sla.service.SLAService.class);\n    junit.framework.Assert.assertNotNull(slas);\n    org.apache.hadoop.fs.Path appPath = getFsTestCaseDir();\n    writeToFile(org.apache.oozie.sla.TestSLAEventGeneration.SLA_XML_1, appPath, \"workflow.xml\");\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, appPath.toString());\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    cal.setTime(new java.util.Date());\n    cal.add(java.util.Calendar.MINUTE, -20);\n    java.util.Date nominal = cal.getTime();\n    java.lang.String nominalTime = org.apache.oozie.util.DateUtils.formatDateOozieTZ(nominal);\n    conf.set(\"nominal_time\", nominalTime);\n    _testWorkflowJobCommands(conf, ehs, slas, false);\n}",
        "ClassName": "TestSLAEventGeneration",
        "Label": 1,
        "MethodName": "testSLASchema1BackwardCompatibility",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setSystemProperty(org.apache.oozie.service.XLogService.LOG4J_FILE, \"test-custom-log4j.properties\");\n    org.apache.oozie.service.XLogService ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertTrue(ls.getFromClasspath());\n    junit.framework.Assert.assertEquals(\"test-custom-log4j.properties\", ls.getLog4jProperties());\n    ls.destroy();\n}",
        "ClassName": "TestXLogService",
        "Label": 1,
        "MethodName": "testCustomLog4jPropertiesFromClassLoader",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    conf.set(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, org.apache.hadoop.util.StringUtils.join(\",\", java.util.Arrays.asList(org.apache.oozie.service.GroupsService.class.getName(), org.apache.oozie.service.ProxyUserService.class.getName())));\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.hosts\", \"*\");\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.groups\", getGroup());\n    services.init();\n    try {\n        org.apache.oozie.service.ProxyUserService proxyUser = services.get(org.apache.oozie.service.ProxyUserService.class);\n        junit.framework.Assert.assertNotNull(proxyUser);\n        proxyUser.validate(\"foo\", \"localhost\", java.lang.System.getProperty(\"user.name\"));\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestProxyUserService",
        "Label": 1,
        "MethodName": "testValidateGroup",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.EventHandlerService ehs = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.EventHandlerService.class);\n    junit.framework.Assert.assertNotNull(ehs);\n    org.apache.oozie.event.EventQueue eventQ = ehs.getEventQueue();\n    junit.framework.Assert.assertNotNull(eventQ);\n    junit.framework.Assert.assertTrue(eventQ instanceof org.apache.oozie.event.MemoryEventQueue);\n}",
        "ClassName": "TestEventQueue",
        "Label": 1,
        "MethodName": "testMemoryEventQueueBasic",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-test-kill-node-message.xml\", -1);\n    java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    final org.apache.oozie.DagEngine engine = new org.apache.oozie.DagEngine(\"u\", \"a\");\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\");\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.set(org.apache.oozie.client.OozieClient.LOG_TOKEN, \"t\");\n    conf.set(\"error\", \"end.error\");\n    conf.set(\"external-status\", \"FAILED/KILLED\");\n    conf.set(\"signal-value\", \"fail\");\n    final java.lang.String jobId = engine.submitJob(conf, true);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    final org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(jobId);\n    waitFor(50000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.WorkflowJobBean job = jpaService.execute(wfJobGetCmd);\n            return job.getWorkflowInstance().getStatus() == org.apache.oozie.workflow.WorkflowInstance.Status.KILLED;\n        }\n    });\n    org.apache.oozie.WorkflowJobBean job = jpaService.execute(wfJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.KILLED, job.getStatus());\n    org.apache.oozie.executor.jpa.WorkflowActionsGetForJobJPAExecutor wfActionsGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionsGetForJobJPAExecutor(jobId);\n    java.util.List<org.apache.oozie.WorkflowActionBean> actions = jpaService.execute(wfActionsGetCmd);\n    int n = actions.size();\n    org.apache.oozie.WorkflowActionBean action = null;\n    for (org.apache.oozie.WorkflowActionBean bean : actions) {\n        if (bean.getType().equals(\"test\")) {\n            action = bean;\n            break;\n        }\n    }\n    junit.framework.Assert.assertNotNull(action);\n    junit.framework.Assert.assertEquals(\"TEST_ERROR\", action.getErrorCode());\n    junit.framework.Assert.assertEquals(\"end\", action.getErrorMessage());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.ERROR, action.getStatus());\n}",
        "ClassName": "TestActionErrors",
        "Label": 1,
        "MethodName": "testKillNodeErrorMessage",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.util.List<java.lang.String>> filterListJob1 = createFilterList(\"jobid\", coordId1);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.SLAEventsGetForFilterJPAExecutor slaEventsGetCmd = new org.apache.oozie.executor.jpa.SLAEventsGetForFilterJPAExecutor(-1, 100, filterListJob1, new long[1]);\n    java.util.List<org.apache.oozie.SLAEventBean> list = jpaService.execute(slaEventsGetCmd);\n    junit.framework.Assert.assertNotNull(list);\n    junit.framework.Assert.assertEquals(1, list.size());\n}",
        "ClassName": "TestSLAEventsGetForFilterJPAExecutor",
        "Label": 1,
        "MethodName": "testGetSLAEventsForCoordJobId",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String file1 = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"file1\").toString();\n    java.lang.String file2 = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"file2\").toString();\n    java.lang.String dir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"dir\").toString();\n    org.apache.hadoop.conf.Configuration protoConf = new org.apache.hadoop.conf.Configuration();\n    protoConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    protoConf.set(\"hadoop.job.ugi\", (org.apache.oozie.test.XTestCase.getTestUser() + \",\") + \"group\");\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    fs.mkdirs(new org.apache.hadoop.fs.Path(dir));\n    fs.create(new org.apache.hadoop.fs.Path(file1)).close();\n    java.io.OutputStream os = fs.create(new org.apache.hadoop.fs.Path(dir, \"a\"));\n    byte[] arr = new byte[1];\n    os.write(arr);\n    os.close();\n    os = fs.create(new org.apache.hadoop.fs.Path(dir, \"b\"));\n    arr = new byte[2];\n    os.write(arr);\n    os.close();\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, \"appPath\");\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.set(\"test.dir\", getTestCaseDir());\n    conf.set(\"file1\", file1);\n    conf.set(\"file2\", file2);\n    conf.set(\"file3\", \"${file2}\");\n    conf.set(\"dir\", dir);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"name\", \"<workflow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, conf, \"wfId\");\n    org.apache.oozie.WorkflowJobBean wf = new org.apache.oozie.WorkflowJobBean();\n    wf.setId(job.getId());\n    wf.setAppName(\"name\");\n    wf.setAppPath(\"appPath\");\n    wf.setUser(org.apache.oozie.test.XTestCase.getTestUser());\n    wf.setGroup(\"group\");\n    wf.setWorkflowInstance(job);\n    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();\n    protoConf.writeXml(baos);\n    wf.setProtoActionConf(baos.toString());\n    org.apache.oozie.WorkflowActionBean action = new org.apache.oozie.WorkflowActionBean();\n    action.setId(\"actionId\");\n    action.setName(\"actionName\");\n    org.apache.oozie.util.ELEvaluator eval = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.ELService.class).createEvaluator(\"workflow\");\n    org.apache.oozie.DagELFunctions.configureEvaluator(eval, wf, action);\n    junit.framework.Assert.assertEquals(true, ((boolean) (eval.evaluate(\"${fs:exists(wf:conf('file1'))}\", java.lang.Boolean.class))));\n    junit.framework.Assert.assertEquals(false, ((boolean) (eval.evaluate(\"${fs:exists(wf:conf('file2'))}\", java.lang.Boolean.class))));\n    junit.framework.Assert.assertEquals(true, ((boolean) (eval.evaluate(\"${fs:exists(wf:conf('dir'))}\", java.lang.Boolean.class))));\n    junit.framework.Assert.assertEquals(false, ((boolean) (eval.evaluate(\"${fs:isDir(wf:conf('file1'))}\", java.lang.Boolean.class))));\n    junit.framework.Assert.assertEquals(0, ((int) (eval.evaluate(\"${fs:fileSize(wf:conf('file1'))}\", java.lang.Integer.class))));\n    junit.framework.Assert.assertEquals(-1, ((int) (eval.evaluate(\"${fs:fileSize(wf:conf('file2'))}\", java.lang.Integer.class))));\n    junit.framework.Assert.assertEquals(3, ((int) (eval.evaluate(\"${fs:dirSize(wf:conf('dir'))}\", java.lang.Integer.class))));\n    junit.framework.Assert.assertEquals(-1, ((int) (eval.evaluate(\"${fs:blockSize(wf:conf('file2'))}\", java.lang.Integer.class))));\n    junit.framework.Assert.assertTrue(eval.evaluate(\"${fs:blockSize(wf:conf('file1'))}\", java.lang.Integer.class) > 0);\n}",
        "ClassName": "TestFsELFunctions",
        "Label": 1,
        "MethodName": "testFunctions",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        int actionNum = 1;\n        org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n        org.apache.oozie.CoordinatorActionBean actionId1 = addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n        java.util.Date nominalTime = actionId1.getNominalTime();\n        long nominalTimeMilliseconds = nominalTime.getTime();\n        long noOfMillisecondsinOneHour = 3600000;\n        java.lang.String date1 = org.apache.oozie.util.DateUtils.formatDateOozieTZ(new java.util.Date(nominalTimeMilliseconds - (noOfMillisecondsinOneHour / 2)));\n        java.lang.String date2 = org.apache.oozie.util.DateUtils.formatDateOozieTZ(new java.util.Date(nominalTimeMilliseconds + noOfMillisecondsinOneHour));\n        try {\n            java.lang.String badDate = \"bad\" + date1;\n            org.apache.oozie.util.CoordActionsInDateRange.getCoordActionIdsFromDates(job.getId().toString(), (badDate + \"::\") + date2);\n            junit.framework.Assert.fail(\"Accepted badly formatted date: \" + badDate);\n        } catch (org.apache.oozie.XException e) {\n            junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0308, e.getErrorCode());\n        }\n        try {\n            java.lang.String badScope = (date1 + \"0xbad5c09e\") + date2;\n            org.apache.oozie.util.CoordActionsInDateRange.getCoordActionIdsFromDates(job.getId().toString(), badScope);\n            junit.framework.Assert.fail(\"Accepted bad range scope: \" + badScope);\n        } catch (org.apache.oozie.XException e) {\n            junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0308, e.getErrorCode());\n        }\n        try {\n            org.apache.oozie.util.CoordActionsInDateRange.getCoordActionIdsFromDates(job.getId().toString(), (date2 + \"::\") + date1);\n            junit.framework.Assert.fail(((\"Accepted inverted dates: [Start::End] = \" + date2) + \"::\") + date1);\n        } catch (org.apache.oozie.XException e) {\n            junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0308, e.getErrorCode());\n        }\n        try {\n            java.lang.String lenientDate = date2.replaceAll(\"[^-]*T\", \"50T\");\n            org.apache.oozie.util.CoordActionsInDateRange.getCoordActionIdsFromDates(job.getId().toString(), (date1 + \"::\") + lenientDate);\n            junit.framework.Assert.fail(\"Accepted lenient date: \" + lenientDate);\n        } catch (org.apache.oozie.XException e) {\n            junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0308, e.getErrorCode());\n        }\n        int noOfActions = org.apache.oozie.util.CoordActionsInDateRange.getCoordActionIdsFromDates(job.getId().toString(), (date1 + \"::\") + date2).size();\n        junit.framework.Assert.assertEquals(1, noOfActions);\n        date1 = org.apache.oozie.util.DateUtils.formatDateOozieTZ(new java.util.Date(nominalTimeMilliseconds + (noOfMillisecondsinOneHour / 2)));\n        noOfActions = org.apache.oozie.util.CoordActionsInDateRange.getCoordActionIdsFromDates(job.getId().toString(), (date1 + \"::\") + date2).size();\n        junit.framework.Assert.assertEquals(0, noOfActions);\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail();\n    }\n}",
        "ClassName": "TestCoordActionsInDateRange",
        "Label": 1,
        "MethodName": "testCoordActionsInDateRange",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    byte[] original = new byte[]{ 0, 1, 2 };\n    java.io.ByteArrayInputStream is = new java.io.ByteArrayInputStream(original);\n    java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream();\n    org.apache.oozie.util.IOUtils.copyStream(is, os);\n    byte[] copy = os.toByteArray();\n    junit.framework.Assert.assertEquals(3, copy.length);\n    junit.framework.Assert.assertEquals(original.length, copy.length);\n    for (int i = 0; i < original.length; i++) {\n        junit.framework.Assert.assertEquals(original[i], copy[i]);\n    }\n}",
        "ClassName": "TestIOUtils",
        "Label": 1,
        "MethodName": "testCopyStream",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v0/admin/*\", org.apache.oozie.servlet.V0AdminServlet.class, org.apache.oozie.servlet.TestAdminServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.net.URL url = createURL(org.apache.oozie.client.rest.RestConstants.ADMIN_JAVA_SYS_PROPS_RESOURCE, java.util.Collections.EMPTY_MAP);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertTrue(json.containsKey(\"java.version\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestAdminServlet",
        "Label": 1,
        "MethodName": "testJavaSysProps",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        services.destroy();\n        services = setupServicesForTopic();\n        services.init();\n        org.apache.oozie.service.JMSTopicService jmsTopicService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JMSTopicService.class);\n        java.util.Properties props = jmsTopicService.getTopicPatternProperties();\n        junit.framework.Assert.assertEquals(\"${username}\", props.get(org.apache.oozie.AppType.WORKFLOW_JOB));\n        junit.framework.Assert.assertEquals(\"${username}\", props.get(org.apache.oozie.AppType.WORKFLOW_ACTION));\n        junit.framework.Assert.assertEquals(\"${username}\", props.get(org.apache.oozie.AppType.COORDINATOR_JOB));\n        junit.framework.Assert.assertEquals(\"${username}\", props.get(org.apache.oozie.AppType.COORDINATOR_ACTION));\n        junit.framework.Assert.assertEquals(\"${username}\", props.get(org.apache.oozie.AppType.BUNDLE_JOB));\n        junit.framework.Assert.assertEquals(\"${username}\", props.get(org.apache.oozie.AppType.BUNDLE_ACTION));\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSTopicService",
        "Label": 1,
        "MethodName": "testTopicProperties1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path script = new org.apache.hadoop.fs.Path(getAppPath(), \"script.sh\");\n    java.io.Writer w = new java.io.OutputStreamWriter(fs.create(script));\n    w.write(org.apache.oozie.action.hadoop.TestShellActionExecutor.SHELL_SCRIPT_CONTENT_ERROR);\n    w.close();\n    java.lang.String actionXml = ((((((((((((((((\"<shell>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<exec>sh</exec>\") + \"<argument>-c</argument>\") + \"<argument>script.sh</argument>\") + \"<argument>A</argument>\") + \"<argument>B</argument>\") + \"<file>\") + script.toString()) + \"#\") + script.getName()) + \"</file>\") + \"</shell>\";\n    _testSubmit(actionXml, false, \"\");\n}",
        "ClassName": "TestShellActionExecutor",
        "Label": 1,
        "MethodName": "testShellScriptError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTableForWaiting(\"coord-job-for-matd-hcat.xml\", org.apache.oozie.client.Job.Status.RUNNING, false, true);\n        org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"coord\");\n        java.lang.String actionXml = getCoordActionXml(appPath, \"coord-action-for-action-input-check.xml\");\n        org.apache.oozie.CoordinatorActionBean actionBean = createCoordinatorActionBean(job);\n        java.lang.String testDir = getTestCaseDir();\n        java.lang.String missDeps = getPullMissingDependencies(testDir);\n        actionBean.setMissingDependencies(missDeps);\n        org.jdom.Element eAction = createActionElement(actionXml);\n        java.lang.String newactionXml = org.apache.oozie.command.coord.CoordCommandUtils.dryRunCoord(eAction, actionBean);\n        eAction = org.apache.oozie.util.XmlUtils.parseXml(newactionXml);\n        org.jdom.Element configElem = eAction.getChild(\"action\", eAction.getNamespace()).getChild(\"workflow\", eAction.getNamespace()).getChild(\"configuration\", eAction.getNamespace());\n        java.util.List<?> elementList = configElem.getChildren(\"property\", configElem.getNamespace());\n        org.jdom.Element e1 = ((org.jdom.Element) (elementList.get(0)));\n        org.jdom.Element e2 = ((org.jdom.Element) (elementList.get(1)));\n        junit.framework.Assert.assertEquals(\"${coord:dataIn('A')}\", e1.getChild(\"value\", e1.getNamespace()).getValue());\n        junit.framework.Assert.assertEquals(\"${coord:dataOut('LOCAL_A')}\", e2.getChild(\"value\", e2.getNamespace()).getValue());\n        createDir(testDir + \"/2009/29/\");\n        createDir(testDir + \"/2009/22/\");\n        createDir(testDir + \"/2009/15/\");\n        createDir(testDir + \"/2009/08/\");\n        sleep(1000);\n        newactionXml = org.apache.oozie.command.coord.CoordCommandUtils.dryRunCoord(eAction, actionBean);\n        eAction = org.apache.oozie.util.XmlUtils.parseXml(newactionXml);\n        configElem = eAction.getChild(\"action\", eAction.getNamespace()).getChild(\"workflow\", eAction.getNamespace()).getChild(\"configuration\", eAction.getNamespace());\n        elementList = configElem.getChildren(\"property\", configElem.getNamespace());\n        e1 = ((org.jdom.Element) (elementList.get(0)));\n        e2 = ((org.jdom.Element) (elementList.get(1)));\n        junit.framework.Assert.assertEquals(\"file://,testDir/2009/29,file://,testDir/2009/22,file://,testDir/2009/15,file://,testDir/2009/08\", e1.getChild(\"value\", e1.getNamespace()).getValue());\n        junit.framework.Assert.assertEquals(\"file://,testDir/2009/29\", e2.getChild(\"value\", e1.getNamespace()).getValue());\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestCoordCommandUtils",
        "Label": 1,
        "MethodName": "testDryRunPullDeps",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-ext-schema-valid.xml\", -1);\n    java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    java.io.OutputStream os = new java.io.FileOutputStream(getTestCaseDir() + \"/config-default.xml\");\n    org.apache.oozie.util.XConfiguration defaultConf = new org.apache.oozie.util.XConfiguration();\n    defaultConf.set(\"a\", \"AA\");\n    defaultConf.set(\"b\", \"BB\");\n    defaultConf.set(\"e\", \"${d}${d}\");\n    defaultConf.writeXml(os);\n    os.close();\n    final org.apache.oozie.DagEngine engine = new org.apache.oozie.DagEngine(org.apache.oozie.test.XTestCase.getTestUser(), \"a\");\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\");\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.set(org.apache.oozie.client.OozieClient.LOG_TOKEN, \"t\");\n    conf.set(org.apache.oozie.client.OozieClient.ACTION_NOTIFICATION_URL, container.getServletURL(\"/callback\") + \"?jobId=$jobId&status=$status&nodeName=$nodeName\");\n    conf.set(\"signal-value\", \"OK\");\n    conf.set(\"external-status\", \"ok\");\n    conf.set(\"error\", \"end.error\");\n    conf.set(\"b\", \"B\");\n    conf.set(\"c\", \"C\");\n    conf.set(\"d\", \"${c}${c}\");\n    conf.set(\"f\", \"${e}${e}\");\n    final java.lang.String jobId1 = engine.submitJob(conf, true);\n    org.apache.oozie.client.WorkflowJob wf = engine.getJob(jobId1);\n    org.apache.oozie.util.XConfiguration wfConf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(wf.getConf()));\n    junit.framework.Assert.assertEquals(\"AA\", wfConf.get(\"a\"));\n    junit.framework.Assert.assertEquals(\"B\", wfConf.get(\"b\"));\n    junit.framework.Assert.assertEquals(\"C\", conf.get(\"c\"));\n    junit.framework.Assert.assertEquals(\"CC\", conf.get(\"d\"));\n    junit.framework.Assert.assertEquals(\"CCCC\", conf.get(\"e\"));\n    junit.framework.Assert.assertEquals(\"CCCCCCCC\", conf.get(\"f\"));\n    waitFor(10000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.WorkflowJobBean bean = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.WorkflowStoreService.class).create().getWorkflow(jobId1, false);\n            return bean.getWorkflowInstance().getStatus().isEndState();\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.KILLED, engine.getJob(jobId1).getStatus());\n    waitFor(10000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return org.apache.oozie.TestDagEngine.CallbackServlet.JOB_ID != null;\n        }\n    });\n    junit.framework.Assert.assertEquals(wf.getId(), org.apache.oozie.TestDagEngine.CallbackServlet.JOB_ID);\n    junit.framework.Assert.assertEquals(\"kill\", org.apache.oozie.TestDagEngine.CallbackServlet.NODE_NAME);\n    junit.framework.Assert.assertEquals(\"T:null\", org.apache.oozie.TestDagEngine.CallbackServlet.STATUS);\n}",
        "ClassName": "TestDagEngine",
        "Label": 1,
        "MethodName": "testSubmit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, false);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    final java.lang.String bundleId = job.getId();\n    addRecordToBundleActionTable(bundleId, \"action1\", 1, org.apache.oozie.client.Job.Status.RUNNING);\n    addRecordToBundleActionTable(bundleId, \"action2\", 0, org.apache.oozie.client.Job.Status.RUNNING);\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    addRecordToCoordJobTableWithBundle(bundleId, \"action1\", org.apache.oozie.client.Job.Status.RUNNING, start, end, true, true, 2);\n    addRecordToCoordJobTableWithBundle(bundleId, \"action2\", org.apache.oozie.client.Job.Status.RUNNING, start, end, true, true, 2);\n    addRecordToCoordActionTable(\"action1\", 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(\"action1\", 2, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(\"action2\", 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(\"action2\", 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    new org.apache.oozie.command.bundle.BundleJobSuspendXCommand(bundleId).call();\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDED, job.getStatus());\n    sleep(3000);\n    new org.apache.oozie.command.bundle.BundleJobResumeXCommand(bundleId).call();\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, job.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testBundleStatusTransitServiceSucceeded3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testCoordRerun-C\";\n    final int actionNum = 1;\n    final java.lang.String actionId = (jobId + \"@\") + actionNum;\n    org.apache.oozie.store.CoordinatorStore store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store.beginTrx();\n    try {\n        addRecordToJobTable(jobId, store, org.apache.oozie.client.Job.Status.KILLED);\n        addRecordToActionTable(jobId, actionNum, actionId, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\");\n        store.commitTrx();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Could not update db.\");\n    } finally {\n        store.closeTrx();\n    }\n    try {\n        final org.apache.oozie.client.OozieClient coordClient = org.apache.oozie.local.LocalOozie.getCoordClient();\n        coordClient.reRunCoord(jobId, org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_ACTION, java.lang.Integer.toString(actionNum), false, true);\n        junit.framework.Assert.fail(\"Exception expected because action is not in terminal state.\");\n    } catch (org.apache.oozie.client.OozieClientException ex) {\n        if (!ex.getErrorCode().equals(org.apache.oozie.ErrorCode.E1018.toString())) {\n            junit.framework.Assert.fail(\"Error code should be E1018 when job is killed or failed.\");\n        }\n    }\n    org.apache.oozie.store.CoordinatorStore store2 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store2.beginTrx();\n    org.apache.oozie.CoordinatorActionBean action2 = store2.getCoordinatorAction(actionId, false);\n    junit.framework.Assert.assertEquals(action2.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    store2.commitTrx();\n    store2.closeTrx();\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunNeg",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    conf.set(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, org.apache.hadoop.util.StringUtils.join(\",\", java.util.Arrays.asList(org.apache.oozie.service.GroupsService.class.getName(), org.apache.oozie.service.ProxyUserService.class.getName())));\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.hosts\", \"otherhost\");\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.groups\", \"*\");\n    try {\n        services.init();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.service.ServiceException ex) {\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail();\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestProxyUserService",
        "Label": 1,
        "MethodName": "testWrongHost",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.servlet.MyJsonRestServlet.MULTIPLE_RESOURCES_WILDCARD, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"/resource1\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"/resource2\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"POST\", \"/any\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"POST\", \"/resource1\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"POST\", \"/resource2\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"GET\", \"/any\", \"\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestJsonRestServlet",
        "Label": 1,
        "MethodName": "testMultipleResourcesWildCard",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordActionRemoveJPAExecutor coordRmvCmd = new org.apache.oozie.executor.jpa.CoordActionRemoveJPAExecutor(action.getId());\n    try {\n        jpaService.execute(coordRmvCmd);\n        junit.framework.Assert.fail(\"Should have thrown JPAExecutorException\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException e) {\n        java.lang.System.out.println(e.getErrorCode());\n        e.printStackTrace();\n        if (e.getErrorCode() != org.apache.oozie.ErrorCode.E1022)\n            junit.framework.Assert.fail(\"Error code should be E1022\");\n\n    }\n}",
        "ClassName": "TestCoordActionRemoveJPAExecutor",
        "Label": 1,
        "MethodName": "testRunningActionDelete",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.XLogService ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertTrue(ls.getFromClasspath());\n    junit.framework.Assert.assertEquals(org.apache.oozie.service.XLogService.DEFAULT_LOG4J_PROPERTIES, ls.getLog4jProperties());\n    ls.destroy();\n}",
        "ClassName": "TestXLogService",
        "Label": 1,
        "MethodName": "testDefaultLog4jPropertiesFromClassLoader",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/jobs\", org.apache.oozie.servlet.V1JobsServlet.class, org.apache.oozie.servlet.TestV1JobsServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            java.lang.String appPath = getFsTestCaseDir().toString() + \"/app\";\n            org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n            org.apache.hadoop.fs.Path jobXmlPath = new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\");\n            fs.create(jobXmlPath);\n            int wfCount = org.apache.oozie.servlet.MockDagEngineService.workflows.size();\n            org.apache.hadoop.conf.Configuration jobConf = new org.apache.oozie.util.XConfiguration();\n            jobConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n            jobConf.set(org.apache.oozie.client.OozieClient.APP_PATH, appPath);\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            java.net.URL url = createURL(\"\", params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"content-type\", org.apache.oozie.client.rest.RestConstants.XML_CONTENT_TYPE);\n            conn.setDoOutput(true);\n            jobConf.writeXml(conn.getOutputStream());\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_CREATED, conn.getResponseCode());\n            org.json.simple.JSONObject obj = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + wfCount) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, obj.get(org.apache.oozie.client.rest.JsonTags.JOB_ID));\n            junit.framework.Assert.assertFalse(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            wfCount++;\n            jobConf = new org.apache.oozie.util.XConfiguration();\n            jobConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n            jobConf.set(org.apache.oozie.client.OozieClient.APP_PATH, appPath);\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.ACTION_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_ACTION_START);\n            url = createURL(\"\", params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"content-type\", org.apache.oozie.client.rest.RestConstants.XML_CONTENT_TYPE);\n            conn.setDoOutput(true);\n            jobConf.writeXml(conn.getOutputStream());\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_CREATED, conn.getResponseCode());\n            obj = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + wfCount) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, obj.get(org.apache.oozie.client.rest.JsonTags.JOB_ID));\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            org.apache.oozie.service.Services services = org.apache.oozie.service.Services.get();\n            org.apache.oozie.DagEngine de = services.get(org.apache.oozie.service.DagEngineService.class).getDagEngine(org.apache.oozie.test.XTestCase.getTestUser(), \"undef\");\n            java.io.StringReader sr = new java.io.StringReader(de.getJob(org.apache.oozie.servlet.MockDagEngineService.JOB_ID + wfCount).getConf());\n            org.apache.hadoop.conf.Configuration conf1 = new org.apache.oozie.util.XConfiguration(sr);\n            wfCount++;\n            jobConf = new org.apache.oozie.util.XConfiguration();\n            jobConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            url = createURL(\"\", params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"content-type\", org.apache.oozie.client.rest.RestConstants.XML_CONTENT_TYPE);\n            conn.setDoOutput(true);\n            jobConf.writeXml(conn.getOutputStream());\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode());\n            org.apache.hadoop.fs.Path libPath1 = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"libpath1\");\n            fs.mkdirs(libPath1);\n            org.apache.hadoop.fs.Path jobXmlPath1 = new org.apache.hadoop.fs.Path(libPath1, \"workflow.xml\");\n            fs.create(jobXmlPath1);\n            jobConf = new org.apache.oozie.util.XConfiguration();\n            jobConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n            jobConf.set(org.apache.oozie.client.OozieClient.LIBPATH, libPath1.toString());\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            url = createURL(\"\", params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"content-type\", org.apache.oozie.client.rest.RestConstants.XML_CONTENT_TYPE);\n            conn.setDoOutput(true);\n            jobConf.writeXml(conn.getOutputStream());\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_CREATED, conn.getResponseCode());\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_CREATED, conn.getResponseCode());\n            obj = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + wfCount) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, obj.get(org.apache.oozie.client.rest.JsonTags.JOB_ID));\n            junit.framework.Assert.assertFalse(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            wfCount++;\n            org.apache.hadoop.fs.Path libPath2 = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"libpath2\");\n            fs.mkdirs(libPath2);\n            jobConf = new org.apache.oozie.util.XConfiguration();\n            jobConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n            jobConf.set(org.apache.oozie.client.OozieClient.LIBPATH, (libPath1.toString() + \",\") + libPath2.toString());\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            url = createURL(\"\", params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"content-type\", org.apache.oozie.client.rest.RestConstants.XML_CONTENT_TYPE);\n            conn.setDoOutput(true);\n            jobConf.writeXml(conn.getOutputStream());\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_CREATED, conn.getResponseCode());\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_CREATED, conn.getResponseCode());\n            obj = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + wfCount) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, obj.get(org.apache.oozie.client.rest.JsonTags.JOB_ID));\n            junit.framework.Assert.assertFalse(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            wfCount++;\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1JobsServlet",
        "Label": 1,
        "MethodName": "testSubmit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.XLogStreamer.Filter.reset();\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"USER\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"GROUP\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"TOKEN\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"APP\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"JOB\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"ACTION\");\n    org.apache.oozie.util.XLogStreamer.Filter xf = new org.apache.oozie.util.XLogStreamer.Filter();\n    xf.setParameter(\"JOB\", \"14-200904160239--example-C\");\n    xf.setParameter(\"ACTION\", \"14-200904160239--example-C@1\");\n    java.io.FileWriter fw = new java.io.FileWriter(getTestCaseDir() + \"/test.log\");\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    sb.append(\"2009-06-24 02:43:13,958 DEBUG _L1_:323 - USER[oozie] GROUP[-] TOKEN[-] APP[example-forkjoinwf] \" + \"JOB[14-200904160239--example-C] ACTION[14-200904160239--example-C@1] End workflow state change\");\n    sb.append(\"\\n2009-06-24 02:43:13,961  INFO _L2_:317 - USER[-] GROUP[-] TOKEN[-] APP[example-forkjoinwf] \" + (\"JOB[14-200904160239--example-C] ACTION[14-200904160239--example-C@2] \" + \"[org.apache.oozie.core.command.WorkflowRunnerCallable] released lock\"));\n    sb.append(\"\\n2009-06-24 02:43:13,986  WARN _L3_:539 - USER[-] GROUP[-] TOKEN[-] APP[example-forkjoinwf] \" + ((\"JOB[14-200904160239--example-C] ACTION[14-200904160239--example-C@2] Use GenericOptionsParser for \" + \"parsing the arguments. \\n_L3A_Applications should implement Tool for the same. \\n_L3B_Multi line \") + \"test\"));\n    sb.append(\"\\n2009-06-24 02:43:14,431  WARN _L4_:661 - No job jar file set.  User classes may not be found. \" + \"See JobConf(Class) or JobConf#setJar(String).\");\n    sb.append(\"\\n2009-06-24 02:43:14,505  INFO _L5_:317 - USER[oozie] GROUP[oozie] TOKEN[-] APP[-] \" + \"JOB[14-200904160239--example-C] ACTION[14-200904160239--example-C@1] Released Lock\");\n    sb.append(\"\\n2009-06-24 02:43:19,344 DEBUG _L6_:323 - USER[oozie] GROUP[oozie] TOKEN[MYtoken] APP[-] \" + \"JOB[-] ACTION[-] Number of pending signals to check [0]\");\n    sb.append(\"\\n2009-06-24 02:43:29,151 DEBUG _L7_:323 - USER[-] GROUP[-] TOKEN[-] APP[-] JOB[-] \" + \"ACTION[-] Number of pending actions [0] \");\n    fw.write(sb.toString());\n    fw.close();\n    java.io.StringWriter sw = new java.io.StringWriter();\n    org.apache.oozie.util.XLogReader lr = new org.apache.oozie.util.XLogReader(new java.io.FileInputStream(getTestCaseDir() + \"/test.log\"), xf, sw);\n    lr.processLog();\n    java.lang.String[] matches = sw.toString().split(\"\\n\");\n    junit.framework.Assert.assertEquals(2, matches.length);\n    junit.framework.Assert.assertEquals(true, matches[0].contains(\"_L1_\"));\n    junit.framework.Assert.assertEquals(true, matches[1].contains(\"_L5_\"));\n}",
        "ClassName": "TestXLogReader",
        "Label": 1,
        "MethodName": "testProcessCoordinatorLogForActions",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/jobs\", org.apache.oozie.servlet.V1JobsServlet.class, org.apache.oozie.servlet.TestV1JobsServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            int wfCount = org.apache.oozie.servlet.MockDagEngineService.workflows.size();\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOBS_FILTER_PARAM, \"name=x\");\n            java.net.URL url = createURL(\"\", params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            org.json.simple.JSONArray array = ((org.json.simple.JSONArray) (json.get(org.apache.oozie.client.rest.JsonTags.WORKFLOWS_JOBS)));\n            junit.framework.Assert.assertEquals(org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT, array.size());\n            for (int i = 0; i < org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT; i++) {\n                junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + i) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, ((org.json.simple.JSONObject) (array.get(i))).get(org.apache.oozie.client.rest.JsonTags.WORKFLOW_ID));\n                junit.framework.Assert.assertNotNull(((org.json.simple.JSONObject) (array.get(i))).get(org.apache.oozie.client.rest.JsonTags.WORKFLOW_APP_PATH));\n            }\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOBS_FILTER_PARAM, \"name=x\");\n            params.put(org.apache.oozie.client.rest.RestConstants.OFFSET_PARAM, \"2\");\n            params.put(org.apache.oozie.client.rest.RestConstants.LEN_PARAM, \"100\");\n            params.put(org.apache.oozie.client.rest.RestConstants.TIME_ZONE_PARAM, \"PST\");\n            url = createURL(\"\", params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            array = ((org.json.simple.JSONArray) (json.get(org.apache.oozie.client.rest.JsonTags.WORKFLOWS_JOBS)));\n            junit.framework.Assert.assertEquals(org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT, array.size());\n            for (int i = 0; i < org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT; i++) {\n                junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + i) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, ((org.json.simple.JSONObject) (array.get(i))).get(org.apache.oozie.client.rest.JsonTags.WORKFLOW_ID));\n                junit.framework.Assert.assertNotNull(((org.json.simple.JSONObject) (array.get(i))).get(org.apache.oozie.client.rest.JsonTags.WORKFLOW_APP_PATH));\n                java.lang.String startTime = ((org.json.simple.JSONObject) (array.get(i))).get(org.apache.oozie.client.rest.JsonTags.WORKFLOW_START_TIME).toString();\n                junit.framework.Assert.assertTrue(startTime.endsWith(\"PST\") || startTime.endsWith(\"PDT\"));\n            }\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOBTYPE_PARAM, \"wf\");\n            params.put(org.apache.oozie.client.rest.RestConstants.JOBS_EXTERNAL_ID_PARAM, \"external-valid\");\n            url = createURL(\"\", params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject obj = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals(\"id-valid\", obj.get(org.apache.oozie.client.rest.JsonTags.JOB_ID));\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOBS_EXTERNAL_ID_PARAM, \"external-invalid\");\n            url = createURL(\"\", params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            obj = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertNull(obj.get(org.apache.oozie.client.rest.JsonTags.JOB_ID));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1JobsServlet",
        "Label": 1,
        "MethodName": "testJobs",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action = addRecordToWfActionTable(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    _testWfActionDelete(action.getId());\n    java.lang.System.out.println(\"testWfActionDelete Successful\");\n}",
        "ClassName": "TestWorkflowActionDeleteJPAExecutor",
        "Label": 1,
        "MethodName": "testWfActionDelete",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.client.OozieClient client = org.apache.oozie.local.LocalOozie.getCoordClient();\n    try {\n        client.getJobsInfo(\"foo\");\n        junit.framework.Assert.fail(\"OozieClientException expected.\");\n    } catch (org.apache.oozie.client.OozieClientException oce) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0301.toString(), oce.getErrorCode());\n    }\n    try {\n        client.getJobsInfo(\"foo\", 0, 5);\n        junit.framework.Assert.fail(\"OozieClientException expected.\");\n    } catch (org.apache.oozie.client.OozieClientException oce) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0301.toString(), oce.getErrorCode());\n    }\n    try {\n        client.getJobInfo(\"foo-id\");\n        junit.framework.Assert.fail(\"OozieClientException expected.\");\n    } catch (org.apache.oozie.client.OozieClientException oce) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0301.toString(), oce.getErrorCode());\n    }\n}",
        "ClassName": "TestLocalOozieClientCoord",
        "Label": 1,
        "MethodName": "testGetJobsInfo",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"testWf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"one\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"f\" }))).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\", \"three\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"two\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"f2\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"three\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j\" }))).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f2\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"four\", \"five\", \"six\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"four\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j2\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"five\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j2\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"six\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j2\" }))).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j2\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"seven\")).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"seven\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j\" }))).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"abcde\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, job.getStatus());\n    junit.framework.Assert.assertEquals(7, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.size());\n    junit.framework.Assert.assertEquals(7, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.exits.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.kills.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.fails.size());\n    junit.framework.Assert.assertTrue(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"one\") < org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"two\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"one\") < org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"three\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"two\") < org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"four\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"four\") < org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"seven\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"five\") < org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"seven\"));\n    junit.framework.Assert.assertTrue(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"six\") < org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.get(\"seven\"));\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testNestedFork",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path root = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"root\");\n    org.apache.hadoop.fs.Path jar = new org.apache.hadoop.fs.Path(\"jar.jar\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(getAppPath(), jar)).close();\n    org.apache.hadoop.fs.Path rootJar = new org.apache.hadoop.fs.Path(root, \"rootJar.jar\");\n    getFileSystem().create(rootJar).close();\n    org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(\"file\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(getAppPath(), file)).close();\n    org.apache.hadoop.fs.Path rootFile = new org.apache.hadoop.fs.Path(root, \"rootFile\");\n    getFileSystem().create(rootFile).close();\n    org.apache.hadoop.fs.Path so = new org.apache.hadoop.fs.Path(\"soFile.so\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(getAppPath(), so)).close();\n    org.apache.hadoop.fs.Path rootSo = new org.apache.hadoop.fs.Path(root, \"rootSoFile.so\");\n    getFileSystem().create(rootSo).close();\n    org.apache.hadoop.fs.Path so1 = new org.apache.hadoop.fs.Path(\"soFile.so.1\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(getAppPath(), so1)).close();\n    org.apache.hadoop.fs.Path rootSo1 = new org.apache.hadoop.fs.Path(root, \"rootSoFile.so.1\");\n    getFileSystem().create(rootSo1).close();\n    org.apache.hadoop.fs.Path archive = new org.apache.hadoop.fs.Path(\"archive.tar\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(getAppPath(), archive)).close();\n    org.apache.hadoop.fs.Path rootArchive = new org.apache.hadoop.fs.Path(root, \"rootArchive.tar\");\n    getFileSystem().create(rootArchive).close();\n    java.lang.String actionXml = (((((((((((((((((((((((((((((\"<java>\" + \"      <job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"      <name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"      <main-class>CLASS</main-class>\") + \"      <file>\") + jar.toString()) + \",\") + rootJar.toString()) + \",\") + file.toString()) + \", \") + rootFile.toString()) + \"  ,\") + so.toString()) + \",\") + rootSo.toString()) + \",\") + so1.toString()) + \",\") + rootSo1.toString()) + \"</file>\\n\") + \"      <archive>\") + archive.toString()) + \", \") + rootArchive.toString()) + \" </archive>\\n\") + \"</java>\";\n    org.jdom.Element eActionXml = org.apache.oozie.util.XmlUtils.parseXml(actionXml);\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml, null);\n    org.apache.hadoop.fs.Path appPath = getAppPath();\n    org.apache.oozie.action.hadoop.JavaActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    org.apache.hadoop.conf.Configuration jobConf = ae.createBaseHadoopConf(context, eActionXml);\n    ae.setupActionConf(jobConf, context, eActionXml, appPath);\n    ae.setLibFilesArchives(context, eActionXml, appPath, jobConf);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.filecache.DistributedCache.getSymlink(jobConf));\n    org.apache.hadoop.fs.Path[] filesInClasspath = org.apache.hadoop.filecache.DistributedCache.getFileClassPaths(jobConf);\n    for (org.apache.hadoop.fs.Path p : new org.apache.hadoop.fs.Path[]{ new org.apache.hadoop.fs.Path(getAppPath(), jar), rootJar }) {\n        boolean found = false;\n        for (org.apache.hadoop.fs.Path c : filesInClasspath) {\n            if ((!found) && p.toUri().getPath().equals(c.toUri().getPath())) {\n                found = true;\n            }\n        }\n        junit.framework.Assert.assertTrue((\"file \" + p.toUri().getPath()) + \" not found in classpath\", found);\n    }\n    for (org.apache.hadoop.fs.Path p : new org.apache.hadoop.fs.Path[]{ new org.apache.hadoop.fs.Path(getAppPath(), file), rootFile, new org.apache.hadoop.fs.Path(getAppPath(), so), rootSo, new org.apache.hadoop.fs.Path(getAppPath(), so1), rootSo1 }) {\n        boolean found = false;\n        for (org.apache.hadoop.fs.Path c : filesInClasspath) {\n            if ((!found) && p.toUri().getPath().equals(c.toUri().getPath())) {\n                found = true;\n            }\n        }\n        junit.framework.Assert.assertFalse((\"file \" + p.toUri().getPath()) + \" found in classpath\", found);\n    }\n    java.net.URI[] filesInCache = org.apache.hadoop.filecache.DistributedCache.getCacheFiles(jobConf);\n    for (org.apache.hadoop.fs.Path p : new org.apache.hadoop.fs.Path[]{ new org.apache.hadoop.fs.Path(getAppPath(), jar), rootJar, new org.apache.hadoop.fs.Path(getAppPath(), file), rootFile, new org.apache.hadoop.fs.Path(getAppPath(), so), rootSo, new org.apache.hadoop.fs.Path(getAppPath(), so1), rootSo1 }) {\n        boolean found = false;\n        for (java.net.URI c : filesInCache) {\n            if ((!found) && p.toUri().getPath().equals(c.getPath())) {\n                found = true;\n            }\n        }\n        junit.framework.Assert.assertTrue((\"file \" + p.toUri().getPath()) + \" not found in cache\", found);\n    }\n    java.net.URI[] archivesInCache = org.apache.hadoop.filecache.DistributedCache.getCacheArchives(jobConf);\n    for (org.apache.hadoop.fs.Path p : new org.apache.hadoop.fs.Path[]{ new org.apache.hadoop.fs.Path(getAppPath(), archive), rootArchive }) {\n        boolean found = false;\n        for (java.net.URI c : archivesInCache) {\n            if ((!found) && p.toUri().getPath().equals(c.getPath())) {\n                found = true;\n            }\n        }\n        junit.framework.Assert.assertTrue((\"archive \" + p.toUri().getPath()) + \" not found in cache\", found);\n    }\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testCommaSeparatedFilesAndArchives",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, false, true, 0);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.READY, \"coord-action-get.xml\", 0);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action.getId());\n    job = jpaService.execute(coordJobGetCmd);\n    action = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNING);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.READY);\n    new org.apache.oozie.command.coord.CoordKillXCommand(job.getId()).call();\n    job = jpaService.execute(coordJobGetCmd);\n    action = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.KILLED);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.KILLED);\n}",
        "ClassName": "TestCoordKillXCommand",
        "Label": 1,
        "MethodName": "testCoordKillSuccess1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String db = \"default\";\n    java.lang.String table = \"tablename\";\n    java.lang.String newHCatDependency1 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120412;country=brazil\";\n    java.lang.String newHCatDependency2 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=usa\";\n    java.lang.String newHCatDependency = (newHCatDependency1 + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + newHCatDependency2;\n    populateTable(db, table);\n    java.lang.String actionId = addInitRecords(newHCatDependency);\n    checkCoordAction(actionId, newHCatDependency, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId).call();\n    checkCoordAction(actionId, \"\", org.apache.oozie.client.CoordinatorAction.Status.READY);\n}",
        "ClassName": "TestCoordPushDependencyCheckXCommand",
        "Label": 1,
        "MethodName": "testUpdateCoordTableMultipleDepsV1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.HadoopAccessorService has = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HadoopAccessorService.class);\n    org.apache.hadoop.mapred.JobConf jobConf = new org.apache.hadoop.mapred.JobConf(false);\n    junit.framework.Assert.assertEquals(new org.apache.hadoop.io.Text(\"oozie mr token\"), has.getMRTokenRenewerInternal(jobConf));\n    jobConf.set(\"mapred.job.tracker\", \"localhost:50300\");\n    jobConf.set(\"mapreduce.jobtracker.kerberos.principal\", \"mapred/_HOST@KDC.DOMAIN.COM\");\n    junit.framework.Assert.assertEquals(new org.apache.hadoop.io.Text(\"mapred/localhost@KDC.DOMAIN.COM\"), has.getMRTokenRenewerInternal(jobConf));\n    jobConf = new org.apache.hadoop.mapred.JobConf(false);\n    jobConf.set(\"mapreduce.jobtracker.address\", \"127.0.0.1:50300\");\n    jobConf.set(\"mapreduce.jobtracker.kerberos.principal\", \"mapred/_HOST@KDC.DOMAIN.COM\");\n    junit.framework.Assert.assertEquals(new org.apache.hadoop.io.Text(\"mapred/localhost@KDC.DOMAIN.COM\"), has.getMRTokenRenewerInternal(jobConf));\n    jobConf = new org.apache.hadoop.mapred.JobConf(false);\n    jobConf.set(\"yarn.resourcemanager.address\", \"localhost:8032\");\n    jobConf.set(\"yarn.resourcemanager.principal\", \"rm/server.com@KDC.DOMAIN.COM\");\n    junit.framework.Assert.assertEquals(new org.apache.hadoop.io.Text(\"rm/server.com@KDC.DOMAIN.COM\"), has.getMRTokenRenewerInternal(jobConf));\n}",
        "ClassName": "TestHadoopAccessorService",
        "Label": 1,
        "MethodName": "testGetMRDelegationTokenRenewer",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    conf.set(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, org.apache.hadoop.util.StringUtils.join(\",\", java.util.Arrays.asList(org.apache.oozie.service.GroupsService.class.getName(), org.apache.oozie.service.ProxyUserService.class.getName())));\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.hosts\", \"localhost\");\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.groups\", \"*\");\n    services.init();\n    try {\n        org.apache.oozie.service.ProxyUserService proxyUser = services.get(org.apache.oozie.service.ProxyUserService.class);\n        junit.framework.Assert.assertNotNull(proxyUser);\n        proxyUser.validate(\"foo\", \"www.example.com\", \"bar\");\n        junit.framework.Assert.fail();\n    } catch (java.security.AccessControlException ex) {\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail(ex.toString());\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestProxyUserService",
        "Label": 1,
        "MethodName": "testInvalidHost",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.StringBuffer sb = new java.lang.StringBuffer(\"\");\n    org.apache.oozie.util.TestMemoryLocks.Locker l1 = new org.apache.oozie.util.TestMemoryLocks.WriteLocker(\"a\", 1, -1, sb);\n    org.apache.oozie.util.TestMemoryLocks.Locker l2 = new org.apache.oozie.util.TestMemoryLocks.ReadLocker(\"a\", 2, -1, sb);\n    new java.lang.Thread(l1).start();\n    java.lang.Thread.sleep(500);\n    new java.lang.Thread(l2).start();\n    java.lang.Thread.sleep(500);\n    l1.finish();\n    java.lang.Thread.sleep(500);\n    l2.finish();\n    java.lang.Thread.sleep(500);\n    junit.framework.Assert.assertEquals(\"a:1-L a:1-U a:2-L a:2-U\", sb.toString().trim());\n}",
        "ClassName": "TestMemoryLocks",
        "Label": 1,
        "MethodName": "testWriteReadLock",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.XLogStreamer.Filter.reset();\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"USER\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"GROUP\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"TOKEN\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"APP\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"JOB\");\n    org.apache.oozie.util.XLogStreamer.Filter.defineParameter(\"ACTION\");\n    org.apache.oozie.util.XLogStreamer.Filter xf = new org.apache.oozie.util.XLogStreamer.Filter();\n    xf.setParameter(\"JOB\", \"14-200904160239--example-forkjoinwf\");\n    xf.setLogLevel(\"DEBUG|WARN\");\n    java.io.FileWriter fw = new java.io.FileWriter(getTestCaseDir() + \"/test.log\");\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    sb.append(\"2009-06-24 02:43:13,958 DEBUG _L1_:323 - USER[oozie] GROUP[-] TOKEN[-] APP[example-forkjoinwf] \" + \"JOB[14-200904160239--example-forkjoinwf] ACTION[-] End workflow state change\");\n    sb.append(\"\\n2009-06-24 02:43:13,961  INFO _L2_:317 - USER[-] GROUP[-] TOKEN[-] APP[example-forkjoinwf] \" + ((\"JOB[14-200904160239--example-forkjoinwf] ACTION[-] \" + \"[org.apache.oozie.core.command.WorkflowRunnerCallable] \") + \"released lock\"));\n    sb.append(\"\\n2009-06-24 02:43:13,986  WARN _L3_:539 - USER[-] GROUP[-] TOKEN[-] APP[example-forkjoinwf] \" + ((\"JOB[14-200904160239--example-forkjoinwf] ACTION[-] Use GenericOptionsParser for parsing \" + \"the arguments. \") + \"\\n_L3A_Applications should implement Tool for the same. \\n_L3B_Multi line test\"));\n    sb.append(\"\\n2009-06-24 02:43:14,431  WARN _L4_:661 - No job jar file set.  User classes may not be found. \" + \"See JobConf(Class) or JobConf#setJar(String).\");\n    sb.append(\"\\n2009-06-24 02:43:14,505  INFO _L5_:317 - USER[oozie] GROUP[oozie] TOKEN[-] APP[-] JOB[-] \" + (\"ACTION[-] \" + \"Released Lock\"));\n    sb.append(\"\\n2009-06-24 02:43:19,344 DEBUG _L6_:323 - USER[oozie] GROUP[oozie] TOKEN[MYtoken] APP[-] \" + \"JOB[-] ACTION[-] Number of pending signals to check [0]\");\n    sb.append(\"\\n2009-06-24 02:43:29,151 DEBUG _L7_:323 - USER[-] GROUP[-] TOKEN[-] APP[-] JOB[-] ACTION[-] \" + \"Number of pending actions [0] \");\n    fw.write(sb.toString());\n    fw.close();\n    java.io.StringWriter sw = new java.io.StringWriter();\n    org.apache.oozie.util.XLogReader lr = new org.apache.oozie.util.XLogReader(new java.io.FileInputStream(getTestCaseDir() + \"/test.log\"), xf, sw);\n    lr.processLog();\n    java.lang.String[] out = sw.toString().split(\"\\n\");\n    junit.framework.Assert.assertEquals(4, out.length);\n    junit.framework.Assert.assertEquals(true, out[0].contains(\"_L1_\"));\n    junit.framework.Assert.assertEquals(true, out[1].contains(\"_L3_\"));\n    junit.framework.Assert.assertEquals(true, out[2].contains(\"_L3A_\"));\n    junit.framework.Assert.assertEquals(true, out[3].contains(\"_L3B_\"));\n}",
        "ClassName": "TestXLogReader",
        "Label": 1,
        "MethodName": "testProcessLog",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.email.EmailActionExecutor email = new org.apache.oozie.action.email.EmailActionExecutor();\n    junit.framework.Assert.assertEquals(\"email\", email.getType());\n}",
        "ClassName": "TestEmailActionExecutor",
        "Label": 1,
        "MethodName": "testSetupMethods",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.HCatAccessorService hcatService = services.get(org.apache.oozie.service.HCatAccessorService.class);\n    org.apache.oozie.service.JMSAccessorService jmsService = services.get(org.apache.oozie.service.JMSAccessorService.class);\n    org.apache.oozie.jms.JMSConnectionInfo connInfo = hcatService.getJMSConnectionInfo(new java.net.URI(\"hcat://hcatserver.blue.server.com:8020\"));\n    org.apache.oozie.jms.ConnectionContext ctxt1 = jmsService.createConnectionContext(connInfo);\n    junit.framework.Assert.assertTrue(ctxt1.isConnectionInitialized());\n    org.apache.oozie.jms.JMSConnectionInfo connInfo1 = hcatService.getJMSConnectionInfo(new java.net.URI(\"http://unknown:80\"));\n    org.apache.oozie.jms.ConnectionContext ctxt2 = jmsService.createConnectionContext(connInfo1);\n    junit.framework.Assert.assertTrue(ctxt2.isConnectionInitialized());\n    junit.framework.Assert.assertEquals(ctxt1, ctxt2);\n    ctxt1.close();\n}",
        "ClassName": "TestJMSAccessorService",
        "Label": 1,
        "MethodName": "testConnection",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.TestCallableQueueService.EXEC_ORDER = new java.util.concurrent.atomic.AtomicLong();\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.CallableQueueService.CONF_THREADS, \"1\");\n    setSystemProperty(org.apache.oozie.service.CallableQueueService.CONF_CALLABLE_INTERRUPT_TYPES, \"testKill\");\n    new org.apache.oozie.service.Services().init();\n    org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    final org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand initialCallable = new org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand(\"initialKey\", \"initialType\", 2, 200, \"initialLockKey\");\n    final java.util.List<org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand> callables = new java.util.ArrayList<org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand>();\n    for (int i = 0; i < 10; i++) {\n        callables.add(new org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand(\"key\" + i, \"type\" + i, 1, 100, \"lockKey\" + i));\n    }\n    final org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand intCallable = new org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand(\"keyInt\", \"testKill\", 0, 100, \"lockKey\");\n    queueservice.queue(initialCallable);\n    for (int i = 0; i < 10; i++) {\n        queueservice.queue(callables.get(i));\n    }\n    queueservice.queue(intCallable);\n    waitFor(6000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            boolean retValue = (initialCallable.executed != 0) && (intCallable.executed != 0);\n            for (org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand c : callables) {\n                retValue = retValue && (c.executed != 0);\n            }\n            return retValue;\n        }\n    });\n    junit.framework.Assert.assertTrue(initialCallable.executed > 0);\n    junit.framework.Assert.assertTrue(intCallable.executed > 0);\n    junit.framework.Assert.assertTrue(intCallable.executed > callables.get(5).executed);\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testInterruptsWithDistinguishedLockKeys",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.ParamChecker.notNull(\"value\", \"name\");\n    try {\n        org.apache.oozie.util.ParamChecker.notNull(null, \"name\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n    }\n}",
        "ClassName": "TestParamChecker",
        "Label": 1,
        "MethodName": "testNotNull",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, true, true, 3);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.TIMEDOUT, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.TIMEDOUT, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.TIMEDOUT, \"coord-action-get.xml\", 0);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    sleep(1000);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.DONEWITHERROR, coordJob.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServiceForTimeout",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testDataNotSet(\"avoid-set-end-data\", org.apache.oozie.command.wf.ActionEndXCommand.END_DATA_MISSING);\n}",
        "ClassName": "TestActionErrors",
        "Label": 1,
        "MethodName": "testEndDataNotSet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.TestCallableQueueService.EXEC_ORDER = new java.util.concurrent.atomic.AtomicLong();\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable1 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithDiffKeyInComposite1\", \"QueueUniquenessWithDiffKeyInComposite\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable2 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithDiffKeyInComposite2\", \"QueueUniquenessWithDiffKeyInComposite\", 0, 100);\n    final org.apache.oozie.service.TestCallableQueueService.MyCallable callable3 = new org.apache.oozie.service.TestCallableQueueService.MyCallable(\"QueueUniquenessWithDiffKeyInComposite3\", \"QueueUniquenessWithDiffKeyInComposite\", 0, 100);\n    java.util.List<org.apache.oozie.service.TestCallableQueueService.MyCallable> callables = java.util.Arrays.asList(callable1, callable2, callable3);\n    org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    java.lang.String type = \"QueueUniquenessWithDiffKeyInComposite\";\n    for (org.apache.oozie.service.TestCallableQueueService.MyCallable c : callables) {\n        queueservice.queueSerial(java.util.Arrays.asList(c, new org.apache.oozie.service.TestCallableQueueService.MyCallable(type = type + \"x\", 0, 0)));\n    }\n    waitFor(200, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return ((callable1.executed != 0) && (callable2.executed != 0)) && (callable3.executed != 0);\n        }\n    });\n    junit.framework.Assert.assertTrue(callable1.executed != 0);\n    junit.framework.Assert.assertTrue(callable2.executed != 0);\n    junit.framework.Assert.assertTrue(callable3.executed != 0);\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testQueueUniquenessWithDiffKeyInComposite",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.BundleJobBean bundleJobA = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-05-01T01:00Z\"));\n    org.apache.oozie.BundleJobBean bundleJobB = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2011-06-01T01:00Z\"));\n    org.apache.oozie.CoordinatorJobBean coordJobA = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJobA, \"2011-03-01T01:00Z\");\n    org.apache.oozie.CoordinatorJobBean coordJobB = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJobB, \"2011-03-01T01:00Z\");\n    org.apache.oozie.CoordinatorJobBean coordJobC = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJobC, \"2011-07-01T01:00Z\");\n    org.apache.oozie.CoordinatorJobBean coordJobD = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.command.TestPurgeXCommand.setLastModifiedTime(coordJobD, \"2011-06-01T01:00Z\");\n    org.apache.oozie.WorkflowJobBean wfJobA = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.command.TestPurgeXCommand.setEndTime(wfJobA, \"2011-02-01T01:00Z\");\n    org.apache.oozie.WorkflowJobBean wfJobB = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.command.TestPurgeXCommand.setEndTime(wfJobB, \"2011-03-01T01:00Z\");\n    org.apache.oozie.WorkflowJobBean wfJobC = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.command.TestPurgeXCommand.setEndTime(wfJobC, \"2011-06-01T01:00Z\");\n    org.apache.oozie.WorkflowJobBean wfJobD = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.command.TestPurgeXCommand.setEndTime(wfJobD, \"2011-06-01T01:00Z\");\n    org.apache.oozie.WorkflowJobBean wfJobE = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.command.TestPurgeXCommand.setEndTime(wfJobE, \"2011-01-01T01:00Z\");\n    org.apache.oozie.WorkflowJobBean wfJobF = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.command.TestPurgeXCommand.setEndTime(wfJobF, \"2011-01-01T01:00Z\");\n    org.apache.oozie.WorkflowActionBean wfActionA = addRecordToWfActionTable(wfJobA.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfActionB = addRecordToWfActionTable(wfJobB.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfActionC = addRecordToWfActionTable(wfJobC.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfActionD = addRecordToWfActionTable(wfJobD.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfActionE = addRecordToWfActionTable(wfJobE.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfActionF = addRecordToWfActionTable(wfJobF.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowJobBean subwfJobA = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJobA.getId());\n    org.apache.oozie.command.TestPurgeXCommand.setEndTime(subwfJobA, \"2011-01-01T01:00Z\");\n    org.apache.oozie.WorkflowJobBean subwfJobC = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJobC.getId());\n    org.apache.oozie.command.TestPurgeXCommand.setEndTime(subwfJobC, \"2011-01-01T01:00Z\");\n    org.apache.oozie.WorkflowJobBean subwfJobF = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJobF.getId());\n    org.apache.oozie.command.TestPurgeXCommand.setEndTime(subwfJobF, \"2011-04-01T01:00Z\");\n    org.apache.oozie.WorkflowActionBean subwfActionA = addRecordToWfActionTable(subwfJobA.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean subwfActionC = addRecordToWfActionTable(subwfJobC.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean subwfActionF = addRecordToWfActionTable(subwfJobF.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordActionA = addRecordToCoordActionTable(coordJobA.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJobA.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordActionB = addRecordToCoordActionTable(coordJobB.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJobB.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordActionC = addRecordToCoordActionTable(coordJobC.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJobC.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordActionD = addRecordToCoordActionTable(coordJobD.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJobD.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.BundleActionBean bundleActionA = addRecordToBundleActionTable(bundleJobA.getId(), coordJobA.getId(), coordJobA.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean bundleActionB = addRecordToBundleActionTable(bundleJobB.getId(), coordJobB.getId(), coordJobB.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobAGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJobA.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobBGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJobB.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobCGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJobC.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobDGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJobD.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobEGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJobE.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobFGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJobF.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionAGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfActionA.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionBGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfActionB.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionCGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfActionC.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionDGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfActionD.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionEGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfActionE.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionFGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfActionF.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJobAGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJobA.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJobCGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJobC.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJobFGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJobF.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfActionAGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfActionA.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfActionCGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfActionC.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfActionFGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfActionF.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobAGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJobA.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobBGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJobB.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobCGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJobC.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobDGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJobD.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionAGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordActionA.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionBGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordActionB.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionCGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordActionC.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionDGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordActionD.getId());\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobAGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleJobA.getId());\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobBGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleJobB.getId());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionAGetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJobA.getId(), coordJobA.getAppName());\n    org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor bundleActionBGetCmd = new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleJobB.getId(), coordJobB.getAppName());\n    wfJobA = jpaService.execute(wfJobAGetCmd);\n    wfJobB = jpaService.execute(wfJobBGetCmd);\n    wfJobC = jpaService.execute(wfJobCGetCmd);\n    wfJobD = jpaService.execute(wfJobDGetCmd);\n    wfJobE = jpaService.execute(wfJobEGetCmd);\n    wfJobF = jpaService.execute(wfJobFGetCmd);\n    wfActionA = jpaService.execute(wfActionAGetCmd);\n    wfActionB = jpaService.execute(wfActionBGetCmd);\n    wfActionC = jpaService.execute(wfActionCGetCmd);\n    wfActionD = jpaService.execute(wfActionDGetCmd);\n    wfActionE = jpaService.execute(wfActionEGetCmd);\n    wfActionF = jpaService.execute(wfActionFGetCmd);\n    subwfJobA = jpaService.execute(subwfJobAGetCmd);\n    subwfJobC = jpaService.execute(subwfJobCGetCmd);\n    subwfJobF = jpaService.execute(subwfJobFGetCmd);\n    subwfActionA = jpaService.execute(subwfActionAGetCmd);\n    subwfActionC = jpaService.execute(subwfActionCGetCmd);\n    subwfActionF = jpaService.execute(subwfActionFGetCmd);\n    coordJobA = jpaService.execute(coordJobAGetCmd);\n    coordJobB = jpaService.execute(coordJobBGetCmd);\n    coordJobC = jpaService.execute(coordJobCGetCmd);\n    coordJobD = jpaService.execute(coordJobDGetCmd);\n    coordActionA = jpaService.execute(coordActionAGetCmd);\n    coordActionB = jpaService.execute(coordActionBGetCmd);\n    coordActionC = jpaService.execute(coordActionCGetCmd);\n    coordActionD = jpaService.execute(coordActionDGetCmd);\n    bundleJobA = jpaService.execute(bundleJobAGetCmd);\n    bundleJobB = jpaService.execute(bundleJobBGetCmd);\n    bundleActionA = jpaService.execute(bundleActionAGetCmd);\n    bundleActionB = jpaService.execute(bundleActionBGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJobA.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJobB.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJobC.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJobD.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJobE.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJobF.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfActionA.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfActionB.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfActionC.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfActionD.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfActionE.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfActionF.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, subwfJobA.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, subwfJobC.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, subwfJobF.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, subwfActionA.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, subwfActionC.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, subwfActionF.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJobA.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJobB.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJobC.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJobD.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordActionA.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordActionB.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordActionC.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordActionD.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleJobA.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleJobB.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleActionA.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, bundleActionB.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(wfJobB.getEndTime()), org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJobC.getLastModifiedTime()), org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(bundleJobB.getLastModifiedTime()), 10).call();\n    try {\n        jpaService.execute(bundleJobAGetCmd);\n        junit.framework.Assert.fail(\"Bundle Job A should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(bundleActionAGetCmd);\n        junit.framework.Assert.fail(\"Bundle Action A should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(bundleJobBGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Job B should not have been purged\");\n    }\n    try {\n        jpaService.execute(bundleActionBGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Bundle Action B should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordJobAGetCmd);\n        junit.framework.Assert.fail(\"Coordinator Job A should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordActionAGetCmd);\n        junit.framework.Assert.fail(\"Coordinator Action A should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordJobBGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job B should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordActionBGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action B should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordJobCGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job C should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordActionCGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action C should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordJobDGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job D should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordActionDGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action D should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJobAGetCmd);\n        junit.framework.Assert.fail(\"Workflow Job A should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfActionAGetCmd);\n        junit.framework.Assert.fail(\"Workflow Action A should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfJobBGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job B should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfActionBGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action B should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJobCGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job C should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfActionCGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action C should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJobDGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job D should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfActionDGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action D should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJobEGetCmd);\n        junit.framework.Assert.fail(\"Workflow Job E should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfActionEGetCmd);\n        junit.framework.Assert.fail(\"Workflow Action E should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfJobFGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job F should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfActionFGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action F should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfJobAGetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Job A should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfActionAGetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Action A should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfJobCGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Job C should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfActionCGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Action C should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfJobFGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Job F should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfActionFGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Action F should not have been purged\");\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeLotsOfJobs",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path programPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"wordcount-simple\");\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    java.io.InputStream is = java.lang.Thread.currentThread().getContextClassLoader().getResourceAsStream(\"wordcount-simple\");\n    if (is != null) {\n        java.io.OutputStream os = fs.create(programPath);\n        org.apache.oozie.util.IOUtils.copyStream(is, os);\n        org.apache.hadoop.fs.Path inputDir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"input\");\n        org.apache.hadoop.fs.Path outputDir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"output\");\n        java.io.Writer w = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(inputDir, \"data.txt\")));\n        w.write(\"dummy\\n\");\n        w.write(\"dummy\\n\");\n        w.close();\n        java.lang.String actionXml = ((((((((((((((((\"<map-reduce>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"      <pipes>\") + \"        <program>\") + programPath) + \"#wordcount-simple\") + \"</program>\") + \"      </pipes>\") + getPipesConfig(inputDir.toString(), outputDir.toString()).toXmlString(false)) + \"<file>\") + programPath) + \"</file>\") + \"</map-reduce>\";\n        _testSubmit(\"pipes\", actionXml);\n    } else {\n        java.lang.System.out.println(\"SKIPPING TEST: TestMapReduceActionExecutor.testPipes(), \" + \"binary 'wordcount-simple' not available in the classpath\");\n    }\n}",
        "ClassName": "TestMapReduceActionExecutor",
        "Label": 1,
        "MethodName": "testPipes",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_STATES_WITHOUT_ERROR, \"false\");\n    services = new org.apache.oozie.service.Services();\n    setClassesToBeExcluded(services.getConf(), excludedServices);\n    services.init();\n    org.apache.oozie.BundleJobBean bundleJob = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, true);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    final java.lang.String bundleId = bundleJob.getId();\n    addRecordToBundleActionTable(bundleId, \"action1\", 0, org.apache.oozie.client.Job.Status.SUSPENDED);\n    addRecordToBundleActionTable(bundleId, \"action2\", 0, org.apache.oozie.client.Job.Status.SUSPENDEDWITHERROR);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean bundle = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n            return bundle.isPending() == false;\n        }\n    });\n    bundleJob = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n    junit.framework.Assert.assertFalse(bundleJob.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDEDWITHERROR, bundleJob.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testBundleStatusTransitServiceSuspendedWithError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, false, true, 0);\n    org.apache.oozie.WorkflowJobBean wfJob1 = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    org.apache.oozie.CoordinatorActionBean action1 = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", wfJob1.getId(), \"RUNNING\", 0);\n    org.apache.oozie.CoordinatorActionBean action2 = addRecordToCoordActionTable(coordJob.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", null, null, 0);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd1 = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action1.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd2 = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action2.getId());\n    coordJob = jpaService.execute(coordJobGetCmd);\n    action1 = jpaService.execute(coordActionGetCmd1);\n    action2 = jpaService.execute(coordActionGetCmd2);\n    junit.framework.Assert.assertEquals(coordJob.getStatus(), org.apache.oozie.client.Job.Status.RUNNING);\n    junit.framework.Assert.assertEquals(action1.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.RUNNING);\n    junit.framework.Assert.assertEquals(action2.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    new org.apache.oozie.command.coord.CoordKillXCommand(coordJob.getId()).call();\n    coordJob = jpaService.execute(coordJobGetCmd);\n    action1 = jpaService.execute(coordActionGetCmd1);\n    action2 = jpaService.execute(coordActionGetCmd2);\n    junit.framework.Assert.assertEquals(coordJob.getStatus(), org.apache.oozie.client.Job.Status.KILLED);\n    junit.framework.Assert.assertEquals(action1.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.KILLED);\n    junit.framework.Assert.assertEquals(action1.getPending(), 1);\n    junit.framework.Assert.assertEquals(action2.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.KILLED);\n    junit.framework.Assert.assertEquals(action2.getPending(), 0);\n}",
        "ClassName": "TestCoordKillXCommand",
        "Label": 1,
        "MethodName": "testCoordKillWaiting",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, false);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    final java.lang.String bundleId = job.getId();\n    addRecordToBundleActionTable(bundleId, \"action1\", 0, org.apache.oozie.client.Job.Status.RUNNING);\n    addRecordToBundleActionTable(bundleId, \"action2\", 0, org.apache.oozie.client.Job.Status.RUNNING);\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    addRecordToCoordJobTableWithBundle(bundleId, \"action1\", org.apache.oozie.client.Job.Status.RUNNING, start, end, true, true, 2);\n    addRecordToCoordJobTableWithBundle(bundleId, \"action2\", org.apache.oozie.client.Job.Status.RUNNING, start, end, true, true, 2);\n    addRecordToCoordActionTable(\"action1\", 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(\"action1\", 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(\"action2\", 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(\"action2\", 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(15 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean bundle = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n            return bundle.getStatus().equals(org.apache.oozie.client.Job.Status.SUCCEEDED);\n        }\n    });\n    job = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, job.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testBundleStatusTransitServiceSucceeded2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowJobBean subwfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJob.getId());\n    org.apache.oozie.WorkflowActionBean subwfAction = addRecordToWfActionTable(subwfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordAction = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction.getId());\n    wfJob = jpaService.execute(wfJobGetCmd);\n    wfAction = jpaService.execute(wfActionGetCmd);\n    subwfJob = jpaService.execute(subwfJobGetCmd);\n    subwfAction = jpaService.execute(subwfActionGetCmd);\n    coordJob = jpaService.execute(coordJobGetCmd);\n    coordAction = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, subwfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, subwfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(7, org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(coordJob.getLastModifiedTime()), 1, 10).call();\n    try {\n        jpaService.execute(coordJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Action should not have been purged\");\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeCoordWithWFChildWithSubWF1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.URIHandlerService uriService = services.get(org.apache.oozie.service.URIHandlerService.class);\n    java.net.URI uri = uriService.getAuthorityWithScheme(\"/tmp/file\");\n    org.apache.oozie.dependency.URIHandler uriHandler = uriService.getURIHandler(uri);\n    junit.framework.Assert.assertTrue(uriHandler instanceof org.apache.oozie.dependency.FSURIHandler);\n}",
        "ClassName": "TestURIHandlerService",
        "Label": 1,
        "MethodName": "testGetURIHandler",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            int wfCount = org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT;\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            java.lang.String[] args = new java.lang.String[]{ \"mapreduce\", \"-oozie\", oozieUrl, \"-config\", createMRProperties(appPath.toString(), false) };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(\"submitMR\", org.apache.oozie.servlet.MockDagEngineService.did);\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testSubmitMapReduce",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    services.destroy();\n    services = super.setupServicesForHCatalog();\n    int randomPort = 30000 + org.apache.oozie.service.TestJMSAccessorService.random.nextInt(10000);\n    java.lang.String brokerURl = \"tcp://localhost:\" + randomPort;\n    org.apache.hadoop.conf.Configuration servicesConf = services.getConf();\n    servicesConf.set(org.apache.oozie.service.JMSAccessorService.CONF_RETRY_INITIAL_DELAY, \"1\");\n    servicesConf.set(org.apache.oozie.service.JMSAccessorService.CONF_RETRY_MAX_ATTEMPTS, \"3\");\n    servicesConf.set(org.apache.oozie.service.HCatAccessorService.JMS_CONNECTIONS_PROPERTIES, ((((((\"default=java.naming.factory.initial#\" + org.apache.oozie.test.XTestCase.ActiveMQConnFactory) + \";\") + \"java.naming.provider.url#\") + brokerURl) + \";\") + \"connectionFactoryNames#\") + \"ConnectionFactory\");\n    services.init();\n    org.apache.oozie.service.HCatAccessorService hcatService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HCatAccessorService.class);\n    org.apache.oozie.service.JMSAccessorService jmsService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JMSAccessorService.class);\n    java.lang.String publisherAuthority = \"hcat.server.com:5080\";\n    java.lang.String topic = \"topic.topic1\";\n    org.apache.oozie.jms.JMSConnectionInfo connInfo = hcatService.getJMSConnectionInfo(new java.net.URI(\"hcat://hcat.server.com:8020\"));\n    jmsService.registerForNotification(connInfo, topic, new org.apache.oozie.dependency.hcat.HCatMessageHandler(publisherAuthority));\n    junit.framework.Assert.assertFalse(jmsService.isListeningToTopic(connInfo, topic));\n    junit.framework.Assert.assertTrue(jmsService.isConnectionInRetryList(connInfo));\n    junit.framework.Assert.assertTrue(jmsService.isTopicInRetryList(connInfo, topic));\n    org.apache.activemq.broker.BrokerService broker = new org.apache.activemq.broker.BrokerService();\n    broker.addConnector(brokerURl);\n    broker.start();\n    java.lang.Thread.sleep(1000);\n    junit.framework.Assert.assertTrue(jmsService.isListeningToTopic(connInfo, topic));\n    junit.framework.Assert.assertFalse(jmsService.isConnectionInRetryList(connInfo));\n    junit.framework.Assert.assertFalse(jmsService.isTopicInRetryList(connInfo, topic));\n    broker.stop();\n    jmsService.destroy();\n}",
        "ClassName": "TestJMSAccessorService",
        "Label": 1,
        "MethodName": "testConnectionRetry",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String errorCodeWithWhitespaces = (\"\\n\\t\\t\" + org.apache.oozie.ForTestingActionExecutor.TEST_ERROR) + \"\\n  \";\n    org.apache.hadoop.conf.Configuration testConf = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.ConfigurationService.class).getConf();\n    testConf.set(org.apache.oozie.service.LiteWorkflowStoreService.CONF_USER_RETRY_ERROR_CODE, errorCodeWithWhitespaces);\n    testConf.set(org.apache.oozie.service.LiteWorkflowStoreService.CONF_USER_RETRY_ERROR_CODE_EXT, \" \");\n    java.util.Set<java.lang.String> allowedRetryCodes = org.apache.oozie.service.LiteWorkflowStoreService.getUserRetryErrorCode();\n    junit.framework.Assert.assertTrue(allowedRetryCodes.contains(org.apache.oozie.ForTestingActionExecutor.TEST_ERROR));\n}",
        "ClassName": "TestLiteWorkflowStoreService",
        "Label": 1,
        "MethodName": "testRetry",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.jms.JMSJobEventListener wfEventListener = new org.apache.oozie.jms.JMSJobEventListener();\n    wfEventListener.init(conf);\n    java.util.Date startDate = org.apache.oozie.util.DateUtils.parseDateUTC(\"2012-07-22T00:00Z\");\n    java.util.Date endDate = new java.util.Date();\n    org.apache.oozie.event.WorkflowJobEvent wfe = new org.apache.oozie.event.WorkflowJobEvent(\"wfId1\", \"caId1\", org.apache.oozie.client.WorkflowJob.Status.FAILED, \"user1\", \"wf-app-name1\", startDate, endDate);\n    wfe.setErrorCode(\"dummyErrorCode\");\n    wfe.setErrorMessage(\"dummyErrorMessage\");\n    org.apache.oozie.jms.ConnectionContext jmsContext = getConnectionContext();\n    try {\n        javax.jms.Session session = jmsContext.createSession(Session.AUTO_ACKNOWLEDGE);\n        javax.jms.MessageConsumer consumer = jmsContext.createConsumer(session, wfEventListener.getTopic(wfe));\n        wfEventListener.onWorkflowJobEvent(wfe);\n        javax.jms.TextMessage message = ((javax.jms.TextMessage) (consumer.receive(5000)));\n        org.apache.oozie.client.event.message.WorkflowJobMessage wfFailMessage = org.apache.oozie.client.event.jms.JMSMessagingUtils.getEventMessage(message);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.FAILED, wfFailMessage.getStatus());\n        junit.framework.Assert.assertEquals(startDate, wfFailMessage.getStartTime());\n        junit.framework.Assert.assertEquals(endDate, wfFailMessage.getEndTime());\n        junit.framework.Assert.assertEquals(\"wfId1\", wfFailMessage.getId());\n        junit.framework.Assert.assertEquals(\"caId1\", wfFailMessage.getParentId());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.Event.MessageType.JOB, wfFailMessage.getMessageType());\n        junit.framework.Assert.assertEquals(org.apache.oozie.AppType.WORKFLOW_JOB, wfFailMessage.getAppType());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.JobEvent.EventStatus.FAILURE, wfFailMessage.getEventStatus());\n        junit.framework.Assert.assertEquals(\"user1\", wfFailMessage.getUser());\n        junit.framework.Assert.assertEquals(\"wf-app-name1\", wfFailMessage.getAppName());\n        junit.framework.Assert.assertEquals(\"dummyErrorCode\", wfFailMessage.getErrorCode());\n        junit.framework.Assert.assertEquals(\"dummyErrorMessage\", wfFailMessage.getErrorMessage());\n        wfEventListener.destroy();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSJobEventListener",
        "Label": 1,
        "MethodName": "testOnWorkflowJobFailureEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:00Z\");\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T10:14Z\");\n    java.util.Date pauseTime = null;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, startTime, endTime, pauseTime, 300);\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    checkCoordActionsTimeout(job.getId() + \"@1\", 300);\n}",
        "ClassName": "TestCoordMaterializeTransitionXCommand",
        "Label": 1,
        "MethodName": "testTimeout",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setSystemProperty(org.apache.oozie.service.UUIDService.CONF_GENERATOR, \"counter\");\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    services.init();\n    try {\n        org.apache.oozie.service.UUIDService uuid = services.get(org.apache.oozie.service.UUIDService.class);\n        java.lang.String id = uuid.generateId(org.apache.oozie.service.UUIDService.ApplicationType.WORKFLOW);\n        java.lang.String childId = uuid.generateChildId(id, \"a\");\n        junit.framework.Assert.assertEquals(id, uuid.getId(childId));\n        junit.framework.Assert.assertEquals(\"a\", uuid.getChildName(childId));\n    } finally {\n        services.destroy();\n    }\n    setSystemProperty(org.apache.oozie.service.UUIDService.CONF_GENERATOR, \"random\");\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    try {\n        org.apache.oozie.service.UUIDService uuid = services.get(org.apache.oozie.service.UUIDService.class);\n        java.lang.String id = uuid.generateId(org.apache.oozie.service.UUIDService.ApplicationType.WORKFLOW);\n        java.lang.String childId = uuid.generateChildId(id, \"a\");\n        junit.framework.Assert.assertEquals(id, uuid.getId(childId));\n        junit.framework.Assert.assertEquals(\"a\", uuid.getChildName(childId));\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestUUIDService",
        "Label": 1,
        "MethodName": "testChildId",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    _testGetJobIdForExternalId(job.getId());\n}",
        "ClassName": "TestWorkflowIdGetForExternalIdJPAExecutor",
        "Label": 1,
        "MethodName": "testWfJobIdForExternalId",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.TestCallableQueueService.EXEC_ORDER = new java.util.concurrent.atomic.AtomicLong();\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.CallableQueueService.CONF_THREADS, \"1\");\n    setSystemProperty(org.apache.oozie.service.CallableQueueService.CONF_CALLABLE_INTERRUPT_TYPES, \"testKill\");\n    new org.apache.oozie.service.Services().init();\n    org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    final org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand initialCallable = new org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand(\"initialKey\", \"initialType\", 2, 200, \"initialLockKey\");\n    final java.util.List<org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand> callables = new java.util.ArrayList<org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand>();\n    for (int i = 0; i < 5; i++) {\n        callables.add(new org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand(\"key\" + i, \"type\" + i, 1, 100, \"lockKey\"));\n    }\n    callables.add(new org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand(\"key\" + 5, \"testKill\", 1, 100, \"lockKey\"));\n    for (int i = 6; i < 10; i++) {\n        callables.add(new org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand(\"key\" + i, \"type\" + i, 1, 100, \"lockKey\"));\n    }\n    queueservice.queue(initialCallable);\n    queueservice.queueSerial(((java.util.List<? extends org.apache.oozie.util.XCallable<?>>) (callables)), 0);\n    waitFor(3000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            boolean retValue = initialCallable.executed != 0;\n            for (org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand c : callables) {\n                retValue = retValue && (c.executed != 0);\n            }\n            return retValue;\n        }\n    });\n    junit.framework.Assert.assertTrue(initialCallable.executed > 0);\n    junit.framework.Assert.assertTrue(callables.get(1).executed > callables.get(5).executed);\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testInterruptsInCompositeCallable",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean bundleJob1 = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, false);\n    _testGetJobInfoForStatus();\n    _testGetJobInfoForGroup();\n    addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.KILLED, false);\n    addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false);\n    _testGetJobInfoForAppName();\n    _testGetJobInfoForUser();\n    _testGetJobInfoForUserAndStatus();\n    _testGetJobInfoForId(bundleJob1.getId());\n}",
        "ClassName": "TestBundleJobInfoGetJPAExecutor",
        "Label": 1,
        "MethodName": "testBundleJobInfoGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            int wfCount = org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT;\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            java.lang.String[] args = new java.lang.String[]{ \"pig\", \"-oozie\", oozieUrl, \"-file\", createPigScript(appPath.toString()), \"-config\", createPigPropertiesFile(appPath.toString()) };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(\"submitPig\", org.apache.oozie.servlet.MockDagEngineService.did);\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testSubmitPig",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path actionDir = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path newDir = new org.apache.hadoop.fs.Path(actionDir, \"newDir\");\n    java.lang.String prepareXML = \"\";\n    if (fs.exists(newDir)) {\n        fs.delete(newDir, true);\n    }\n    try {\n        prepareXML = (((\"prepare>\" + \"<mkdir path='\") + newDir) + \"'/>\") + \"</prepare>\";\n        org.apache.hadoop.mapred.JobConf conf = createJobConf();\n        org.apache.oozie.action.hadoop.LauncherMapper.setupLauncherURIHandlerConf(conf);\n        org.apache.oozie.action.hadoop.PrepareActionsDriver.doOperations(prepareXML, conf);\n        junit.framework.Assert.fail(\"Expected to catch an exception but did not encounter any\");\n    } catch (org.apache.oozie.action.hadoop.LauncherException le) {\n        junit.framework.Assert.assertEquals(le.getCause().getClass(), org.xml.sax.SAXParseException.class);\n        junit.framework.Assert.assertEquals(le.getMessage(), \"Content is not allowed in prolog.\");\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail(\"Expected a LauncherException but received an Exception\");\n    }\n}",
        "ClassName": "TestPrepareActionsDriver",
        "Label": 1,
        "MethodName": "testDoOperationsWithInvalidXML",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"testWf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"one\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"f\", \"end\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\", \"three\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"two\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"three\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"end\", \"k\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"k\")).addNode(new org.apache.oozie.workflow.lite.KillNodeDef(\"k\", \"kill\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class)).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    try {\n        invokeForkJoin(parser, def);\n        junit.framework.Assert.fail(\"Expected to catch an exception but did not encounter any\");\n    } catch (java.lang.Exception ex) {\n        org.apache.oozie.workflow.WorkflowException we = ((org.apache.oozie.workflow.WorkflowException) (ex.getCause()));\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0737, we.getErrorCode());\n        junit.framework.Assert.assertTrue(we.getMessage().contains(\"node [three]\"));\n        junit.framework.Assert.assertTrue(we.getMessage().contains(\"node [end]\"));\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testForkJoinFailure",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = \"<coordinator-app name=\\\"NAME\\\" frequency=\\\"${coord:days(1)}\\\" start=\\\"2009-02-01T01:00Z\\\" end=\\\"2009-02-03T23:59Z\\\" timezone=\\\"UTC\\\" \" + ((((((((((((((((((\"xmlns=\\\"uri:oozie:coordinator:0.2\\\"> <controls> <timeout>10</timeout> <concurrency>2</concurrency> \" + \"<execution>LIFO</execution> </controls> <datasets> \") + \"<dataset name=\\\"a\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"<dataset name=\\\"local_a\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> \") + \"<done-flag>consume_me</done-flag> </dataset>\") + \"<dataset name=\\\"local_b\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflowsb/${YEAR}/${DAY}</uri-template> \") + \"<done-flag>${MY_DONE_FLAG}</done-flag> </dataset>\") + \"</datasets> <input-events> \") + \"<data-in name=\\\"A\\\" dataset=\\\"a\\\"> <instance>${coord:latest(0)}</instance> </data-in>  \") + \"<data-in name=\\\"B\\\" dataset=\\\"local_b\\\"> <instance>${coord:latest(0)}</instance> </data-in>  \") + \"</input-events> \") + \"<output-events> <data-out name=\\\"LOCAL_A\\\" dataset=\\\"local_a\\\"> \") + \"<instance>${coord:current(-1)}</instance> </data-out> </output-events> <action> <workflow> <app-path>hdfs:///tmp/workflows/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>${coord:dataIn('A')}</value> </property> \") + \"<property> <name>inputB</name> <value>${coord:dataOut('LOCAL_A')}</value> \") + \"</property></configuration> </workflow> </action> </coordinator-app>\");\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.set(\"MY_DONE_FLAG\", \"complete\");\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    java.lang.String jobId = sc.call();\n    junit.framework.Assert.assertEquals(jobId.substring(jobId.length() - 2), \"-C\");\n    checkCoordJobs(jobId);\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testSubmitWithDoneFlag",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.TestCallableQueueService.CLCallable.resetConcurrency();\n    final org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    for (int i = 0; i < 10; i++) {\n        queueservice.queue(new org.apache.oozie.service.TestCallableQueueService.CLCallable(), 10);\n    }\n    float originalRatio = org.apache.oozie.test.XTestCase.WAITFOR_RATIO;\n    try {\n        org.apache.oozie.test.XTestCase.WAITFOR_RATIO = 1;\n        waitFor(2000, new org.apache.oozie.test.XTestCase.Predicate() {\n            public boolean evaluate() throws java.lang.Exception {\n                return queueservice.queueSize() == 0;\n            }\n        });\n    } finally {\n        org.apache.oozie.test.XTestCase.WAITFOR_RATIO = originalRatio;\n    }\n    java.lang.System.out.println(\"Callable Queue Size :\" + queueservice.queueSize());\n    java.lang.System.out.println(\"CLCallable Concurrency :\" + org.apache.oozie.service.TestCallableQueueService.CLCallable.getConcurrency());\n    junit.framework.Assert.assertTrue(org.apache.oozie.service.TestCallableQueueService.CLCallable.getConcurrency() <= 3);\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testConcurrencyLimit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path path = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"dir1\");\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(\"<fs/>\");\n    fs.mkdirs(path);\n    ae.delete(context, path);\n    junit.framework.Assert.assertTrue(!fs.exists(path));\n    ae.delete(context, path);\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testDelete",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-action-start\");\n    java.lang.String expr = \"${coord:latest(0)}\";\n    org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration();\n    eval.setVariable(org.apache.oozie.coord.CoordELFunctions.CONFIGURATION, conf);\n    java.lang.String testDir = getTestCaseDir();\n    ds.setUriTemplate((\"file://\" + testDir) + \"/${YEAR}/${MONTH}/${DAY}\");\n    createDir(testDir + \"/2009/09/10\");\n    junit.framework.Assert.assertEquals(\"2009-09-10T23:59Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    createDir(testDir + \"/2009/09/09\");\n    expr = \"${coord:latest(-1)}\";\n    junit.framework.Assert.assertEquals(\"2009-09-09T23:59Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    createDir(testDir + \"/2009/09/08\");\n    expr = \"${coord:latest(-2)}\";\n    junit.framework.Assert.assertEquals(\"2009-09-08T23:59Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:latest(-100)}\";\n    junit.framework.Assert.assertEquals(expr, org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:latest(1)}\";\n    try {\n        junit.framework.Assert.assertEquals(expr, org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n        junit.framework.Assert.fail(\"Should throw exception, because latest for +ve instance is not valid\");\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testLatest",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, true, true);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    coordJob.setStatus(org.apache.oozie.client.Job.Status.RUNNING);\n    wfJob.setStatus(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED);\n    action.setStatus(org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> updateList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    updateList.add(coordJob);\n    updateList.add(wfJob);\n    updateList.add(action);\n    org.apache.oozie.executor.jpa.BulkUpdateDeleteJPAExecutor bulkUpdateCmd = new org.apache.oozie.executor.jpa.BulkUpdateDeleteJPAExecutor();\n    bulkUpdateCmd.setUpdateList(updateList);\n    jpaService.execute(bulkUpdateCmd);\n    coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId()));\n    junit.framework.Assert.assertEquals(\"RUNNING\", coordJob.getStatusStr());\n    wfJob = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId()));\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", wfJob.getStatusStr());\n    org.apache.oozie.WorkflowActionBean action2 = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action.getId()));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.RUNNING, action2.getStatus());\n}",
        "ClassName": "TestBulkUpdateDeleteJPAExecutor",
        "Label": 1,
        "MethodName": "testUpdates",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-06T010:00Z\");\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-11T10:00Z\");\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTableForWaiting(\"coord-job-for-matd-relative.xml\", org.apache.oozie.client.Job.Status.RUNNING, startTime, endTime, false, false, 0);\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n}",
        "ClassName": "TestCoordMaterializeTransitionXCommand",
        "Label": 1,
        "MethodName": "testActionMaterForHcatalogRelativePath",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        services.destroy();\n        services = setupServicesForTopic();\n        services.getConf().set(org.apache.oozie.service.JMSTopicService.TOPIC_NAME, ((org.apache.oozie.service.JMSTopicService.JobType.WORKFLOW.getValue() + \" = workflow,\") + org.apache.oozie.service.JMSTopicService.JobType.COORDINATOR.getValue()) + \"=coord\");\n        services.init();\n        org.apache.oozie.service.JMSTopicService jmsTopicService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JMSTopicService.class);\n        java.util.Properties props = jmsTopicService.getTopicPatternProperties();\n        junit.framework.Assert.assertEquals(\"workflow\", props.get(org.apache.oozie.AppType.WORKFLOW_JOB));\n        junit.framework.Assert.assertEquals(\"workflow\", props.get(org.apache.oozie.AppType.WORKFLOW_ACTION));\n        junit.framework.Assert.assertEquals(\"coord\", props.get(org.apache.oozie.AppType.COORDINATOR_JOB));\n        junit.framework.Assert.assertEquals(\"coord\", props.get(org.apache.oozie.AppType.COORDINATOR_ACTION));\n        junit.framework.Assert.assertEquals(\"${username}\", props.get(org.apache.oozie.AppType.BUNDLE_JOB));\n        junit.framework.Assert.assertEquals(\"${username}\", props.get(org.apache.oozie.AppType.BUNDLE_ACTION));\n        services.destroy();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSTopicService",
        "Label": 1,
        "MethodName": "testTopicProperties2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowJobBean subwfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJob.getId());\n    org.apache.oozie.WorkflowActionBean subwfAction = addRecordToWfActionTable(subwfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordAction = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction.getId());\n    wfJob = jpaService.execute(wfJobGetCmd);\n    wfAction = jpaService.execute(wfActionGetCmd);\n    subwfJob = jpaService.execute(subwfJobGetCmd);\n    subwfAction = jpaService.execute(subwfActionGetCmd);\n    coordJob = jpaService.execute(coordJobGetCmd);\n    coordAction = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, subwfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, subwfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(7, 7, 1, 10).call();\n    try {\n        jpaService.execute(coordJobGetCmd);\n        junit.framework.Assert.fail(\"Coordinator Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordActionGetCmd);\n        junit.framework.Assert.fail(\"Coordinator Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfJobGetCmd);\n        junit.framework.Assert.fail(\"Workflow Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfActionGetCmd);\n        junit.framework.Assert.fail(\"Workflow Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfJobGetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(subwfActionGetCmd);\n        junit.framework.Assert.fail(\"SubWorkflow Action should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeCoordWithWFChildWithSubWF3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration srcConf = new org.apache.hadoop.conf.Configuration(false);\n    org.apache.hadoop.conf.Configuration targetConf = new org.apache.hadoop.conf.Configuration(false);\n    srcConf.set(\"testParameter1\", \"valueFromSource\");\n    srcConf.set(\"testParameter2\", \"valueFromSource\");\n    targetConf.set(\"testParameter2\", \"originalValueFromTarget\");\n    targetConf.set(\"testParameter3\", \"originalValueFromTarget\");\n    org.apache.oozie.util.XConfiguration.injectDefaults(srcConf, targetConf);\n    junit.framework.Assert.assertEquals(targetConf.get(\"testParameter1\"), \"valueFromSource\");\n    junit.framework.Assert.assertEquals(targetConf.get(\"testParameter2\"), \"originalValueFromTarget\");\n    junit.framework.Assert.assertEquals(targetConf.get(\"testParameter3\"), \"originalValueFromTarget\");\n    junit.framework.Assert.assertEquals(srcConf.get(\"testParameter1\"), \"valueFromSource\");\n    junit.framework.Assert.assertEquals(srcConf.get(\"testParameter2\"), \"valueFromSource\");\n    junit.framework.Assert.assertNull(srcConf.get(\"testParameter3\"));\n}",
        "ClassName": "TestXConfiguration",
        "Label": 1,
        "MethodName": "testInjectDefaults",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String db = \"default\";\n    java.lang.String table = \"tablename\";\n    java.lang.String newHCatDependency1 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=brazil\";\n    java.lang.String newHCatDependency2 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=usa\";\n    java.lang.String newHCatDependency3 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=uk\";\n    java.lang.String newHCatDependency = (newHCatDependency1 + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + newHCatDependency2;\n    populateTable(db, table);\n    java.lang.String actionId = addInitRecords(newHCatDependency);\n    checkCoordAction(actionId, newHCatDependency, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId, true).call();\n    checkCoordAction(actionId, newHCatDependency1, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    org.apache.oozie.service.PartitionDependencyManagerService pdms = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.PartitionDependencyManagerService.class);\n    org.apache.oozie.service.HCatAccessorService hcatService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HCatAccessorService.class);\n    junit.framework.Assert.assertTrue(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency1)).contains(actionId));\n    junit.framework.Assert.assertTrue(hcatService.isRegisteredForNotification(new org.apache.oozie.util.HCatURI(newHCatDependency1)));\n    long timeOutCreationTime = java.lang.System.currentTimeMillis() - ((12 * 60) * 1000);\n    setCoordActionCreationTime(actionId, timeOutCreationTime);\n    setMissingDependencies(actionId, (newHCatDependency + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + newHCatDependency3);\n    addPartition(db, table, \"dt=20120430;country=brazil\");\n    checkDependencies(actionId, (newHCatDependency + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + newHCatDependency3, newHCatDependency1);\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId).call();\n    java.lang.Thread.sleep(300);\n    checkDependencies(actionId, newHCatDependency3, \"\");\n    junit.framework.Assert.assertNull(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency1)));\n    junit.framework.Assert.assertFalse(hcatService.isRegisteredForNotification(new org.apache.oozie.util.HCatURI(newHCatDependency1)));\n}",
        "ClassName": "TestCoordPushDependencyCheckXCommand",
        "Label": 1,
        "MethodName": "testTimeOutWithUnresolvedMissingDependencies",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean jobA = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false);\n    org.apache.oozie.BundleActionBean actionA1 = addRecordToBundleActionTable(jobA.getId(), \"actionA1\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean actionA2 = addRecordToBundleActionTable(jobA.getId(), \"actionA2\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleJobBean jobB = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false);\n    org.apache.oozie.BundleActionBean actionB1 = addRecordToBundleActionTable(jobB.getId(), \"actionB1\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean actionB2 = addRecordToBundleActionTable(jobB.getId(), \"actionB2\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleJobBean jobC = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false);\n    org.apache.oozie.BundleActionBean actionC1 = addRecordToBundleActionTable(jobC.getId(), \"actionC1\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean actionC2 = addRecordToBundleActionTable(jobC.getId(), \"actionC2\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.util.List<java.lang.String> deleteList = new java.util.ArrayList<java.lang.String>();\n    deleteList.add(jobA.getId());\n    deleteList.add(jobB.getId());\n    deleteList.add(jobC.getId());\n    jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobsDeleteJPAExecutor(deleteList));\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobA.getId()));\n        junit.framework.Assert.fail(\"Bundle Job A should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(actionA1.getBundleId(), actionA1.getCoordName()));\n        junit.framework.Assert.fail(\"Bundle Action A1 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(actionA2.getBundleId(), actionA2.getCoordName()));\n        junit.framework.Assert.fail(\"Bundle Action A2 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobB.getId()));\n        junit.framework.Assert.fail(\"Bundle Job B should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(actionB1.getBundleId(), actionB1.getCoordName()));\n        junit.framework.Assert.fail(\"Bundle Action B1 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(actionB2.getBundleId(), actionB2.getCoordName()));\n        junit.framework.Assert.fail(\"Bundle Action B2 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobC.getId()));\n        junit.framework.Assert.fail(\"Bundle Job C should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(actionC1.getBundleId(), actionC1.getCoordName()));\n        junit.framework.Assert.fail(\"Bundle Action C1 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(actionC2.getBundleId(), actionC2.getCoordName()));\n        junit.framework.Assert.fail(\"Bundle Action C2 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n}",
        "ClassName": "TestBundleJobsDeleteJPAExecutor",
        "Label": 1,
        "MethodName": "testDeleteBundles",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    addRecordToWfActionTable(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    addRecordToWfActionTable(job.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    addRecordToWfActionTable(job.getId(), \"3\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    _testGetActions(job.getId());\n}",
        "ClassName": "TestWorkflowActionsGetForJobJPAExecutor",
        "Label": 1,
        "MethodName": "testWfActionsGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, true, true);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    coordJob.setStatus(org.apache.oozie.client.Job.Status.RUNNING);\n    wfJob.setStatus(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED);\n    action.setStatus(org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> updateList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    updateList.add(coordJob);\n    updateList.add(wfJob);\n    updateList.add(action);\n    org.apache.oozie.executor.jpa.BulkUpdateInsertJPAExecutor bulkUpdateCmd = new org.apache.oozie.executor.jpa.BulkUpdateInsertJPAExecutor();\n    bulkUpdateCmd.setUpdateList(updateList);\n    jpaService.execute(bulkUpdateCmd);\n    coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId()));\n    junit.framework.Assert.assertEquals(\"RUNNING\", coordJob.getStatusStr());\n    wfJob = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId()));\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", wfJob.getStatusStr());\n    org.apache.oozie.WorkflowActionBean action2 = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action.getId()));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.RUNNING, action2.getStatus());\n}",
        "ClassName": "TestBulkUpdateInsertJPAExecutor",
        "Label": 1,
        "MethodName": "testUpdates",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n}",
        "ClassName": "TestWorkflowBean",
        "Label": 1,
        "MethodName": "testFullWriteRead",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.io.File log4jFile = new java.io.File(getTestCaseConfDir(), org.apache.oozie.service.XLogService.DEFAULT_LOG4J_PROPERTIES);\n    java.lang.ClassLoader cl = java.lang.Thread.currentThread().getContextClassLoader();\n    java.io.InputStream is = cl.getResourceAsStream(\"test-oozie-log4j.properties\");\n    org.apache.oozie.util.IOUtils.copyStream(is, new java.io.FileOutputStream(log4jFile));\n    setSystemProperty(org.apache.oozie.service.XLogService.LOG4J_RELOAD, \"1\");\n    org.apache.oozie.service.XLogService ls = new org.apache.oozie.service.XLogService();\n    ls.init(null);\n    junit.framework.Assert.assertTrue(org.apache.commons.logging.LogFactory.getLog(\"a\").isTraceEnabled());\n    sleep(1 * 1000);\n    is = cl.getResourceAsStream(\"test-custom-log4j.properties\");\n    org.apache.oozie.util.IOUtils.copyStream(is, new java.io.FileOutputStream(log4jFile));\n    float originalRatio = org.apache.oozie.test.XTestCase.WAITFOR_RATIO;\n    try {\n        org.apache.oozie.test.XTestCase.WAITFOR_RATIO = 1;\n        waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n            public boolean evaluate() throws java.lang.Exception {\n                return !org.apache.commons.logging.LogFactory.getLog(\"a\").isTraceEnabled();\n            }\n        });\n        junit.framework.Assert.assertFalse(org.apache.commons.logging.LogFactory.getLog(\"a\").isTraceEnabled());\n    } finally {\n        org.apache.oozie.test.XTestCase.WAITFOR_RATIO = originalRatio;\n    }\n    ls.destroy();\n}",
        "ClassName": "TestXLogService",
        "Label": 1,
        "MethodName": "testLog4jReload",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean bundleJob = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUSPENDED, true);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    final java.lang.String bundleId = bundleJob.getId();\n    addRecordToBundleActionTable(bundleId, \"action1\", 1, org.apache.oozie.client.Job.Status.SUSPENDED);\n    addRecordToBundleActionTable(bundleId, \"action2\", 1, org.apache.oozie.client.Job.Status.SUSPENDED);\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    addRecordToCoordJobTableWithBundle(bundleId, \"action1\", org.apache.oozie.client.Job.Status.RUNNING, start, end, false, false, 2);\n    addRecordToCoordJobTableWithBundle(bundleId, \"action2\", org.apache.oozie.client.Job.Status.RUNNING, start, end, false, false, 2);\n    final org.apache.oozie.CoordinatorActionBean coordAction1_1 = addRecordToCoordActionTable(\"action1\", 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    final org.apache.oozie.CoordinatorActionBean coordAction1_2 = addRecordToCoordActionTable(\"action1\", 2, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    final org.apache.oozie.CoordinatorActionBean coordAction1_3 = addRecordToCoordActionTable(\"action2\", 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    final org.apache.oozie.CoordinatorActionBean coordAction1_4 = addRecordToCoordActionTable(\"action2\", 2, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    this.addRecordToWfJobTable(coordAction1_1.getExternalId(), org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    this.addRecordToWfJobTable(coordAction1_2.getExternalId(), org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    this.addRecordToWfJobTable(coordAction1_3.getExternalId(), org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    this.addRecordToWfJobTable(coordAction1_4.getExternalId(), org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    new org.apache.oozie.command.coord.CoordSuspendXCommand(\"action1\").call();\n    new org.apache.oozie.command.coord.CoordSuspendXCommand(\"action2\").call();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.WorkflowJobBean wfJob = jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(coordAction1_4.getExternalId()));\n            return wfJob.getStatus().equals(org.apache.oozie.client.Job.Status.SUSPENDED);\n        }\n    });\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean bundle = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n            return bundle.isPending() == false;\n        }\n    });\n    bundleJob = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(bundleId));\n    junit.framework.Assert.assertFalse(bundleJob.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDED, bundleJob.getStatus());\n    org.apache.oozie.BundleActionBean bundleAction1 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleId, \"action1\"));\n    junit.framework.Assert.assertFalse(bundleAction1.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDED, bundleAction1.getStatus());\n    org.apache.oozie.CoordinatorJobBean coordJob1 = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(\"action1\"));\n    junit.framework.Assert.assertFalse(coordJob1.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDED, coordJob1.getStatus());\n    org.apache.oozie.BundleActionBean bundleAction2 = jpaService.execute(new org.apache.oozie.executor.jpa.BundleActionGetJPAExecutor(bundleId, \"action2\"));\n    junit.framework.Assert.assertFalse(bundleAction2.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDED, bundleAction2.getStatus());\n    org.apache.oozie.CoordinatorJobBean coordJob2 = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(\"action2\"));\n    junit.framework.Assert.assertFalse(coordJob2.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDED, coordJob2.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testBundleStatusTransitServiceSuspended",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path actionDir = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    final org.apache.hadoop.mapred.RunningJob runningJob = _test(\"id\");\n    waitFor(2000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return runningJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(runningJob.isSuccessful());\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainDone(runningJob));\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainSuccessful(runningJob));\n    junit.framework.Assert.assertFalse(org.apache.oozie.action.hadoop.LauncherMapper.hasOutputData(runningJob));\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.hasIdSwap(runningJob));\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainDone(runningJob));\n    junit.framework.Assert.assertFalse(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getErrorPath(actionDir)));\n    junit.framework.Assert.assertTrue(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getIdSwapPath(actionDir)));\n    junit.framework.Assert.assertFalse(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getOutputDataPath(actionDir)));\n}",
        "ClassName": "TestLauncher",
        "Label": 1,
        "MethodName": "testNewId",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action1 = createWorkflowAction(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action2 = createWorkflowAction(job.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    job.setStatus(org.apache.oozie.client.WorkflowJob.Status.RUNNING);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> insertList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    insertList.add(action1);\n    insertList.add(action2);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> updateList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    updateList.add(job);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BulkUpdateInsertForCoordActionStartJPAExecutor wfUpdateCmd1 = new org.apache.oozie.executor.jpa.BulkUpdateInsertForCoordActionStartJPAExecutor(updateList, insertList);\n    setSystemProperty(org.apache.oozie.FaultInjection.FAULT_INJECTION, \"true\");\n    setSystemProperty(org.apache.oozie.command.SkipCommitFaultInjection.ACTION_FAILOVER_FAULT_INJECTION, \"true\");\n    try {\n        jpaService.execute(wfUpdateCmd1);\n        junit.framework.Assert.fail(\"Expected exception due to commit failure but didn't get any\");\n    } catch (java.lang.Exception e) {\n    }\n    org.apache.oozie.FaultInjection.deactivate(\"org.apache.oozie.command.SkipCommitFaultInjection\");\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId());\n    org.apache.oozie.WorkflowJobBean wfBean = jpaService.execute(wfGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", wfBean.getStatusStr());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action1.getId());\n    try {\n        action1 = jpaService.execute(actionGetCmd);\n        junit.framework.Assert.fail(\"Expected exception but didnt get any\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException jpaee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, jpaee.getErrorCode());\n    }\n    actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action2.getId());\n    try {\n        action2 = jpaService.execute(actionGetCmd);\n        junit.framework.Assert.fail(\"Expected exception but didnt get any\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException jpaee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, jpaee.getErrorCode());\n    }\n}",
        "ClassName": "TestBulkUpdateInsertForCoordActionStartJPAExecutor",
        "Label": 1,
        "MethodName": "testBulkInsertUpdatesRollback",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        services.destroy();\n        services = setupServicesForTopic();\n        services.getConf().set(org.apache.oozie.service.JMSTopicService.TOPIC_NAME, ((((org.apache.oozie.service.JMSTopicService.JobType.WORKFLOW.getValue() + \" =workflow,\") + org.apache.oozie.service.JMSTopicService.JobType.COORDINATOR.getValue()) + \"=coord,\") + org.apache.oozie.service.JMSTopicService.JobType.BUNDLE.getValue()) + \"=bundle\");\n        services.init();\n        org.apache.oozie.service.JMSTopicService jmsTopicService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JMSTopicService.class);\n        org.apache.oozie.WorkflowJobBean wfj = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n        junit.framework.Assert.assertEquals(\"workflow\", jmsTopicService.getTopic(wfj.getId()));\n        org.apache.oozie.WorkflowActionBean wab = addRecordToWfActionTable(wfj.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n        junit.framework.Assert.assertEquals(\"workflow\", jmsTopicService.getTopic(wab.getId()));\n        org.apache.oozie.CoordinatorJobBean cjb = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, true, true);\n        junit.framework.Assert.assertEquals(\"coord\", jmsTopicService.getTopic(cjb.getId()));\n        org.apache.oozie.CoordinatorActionBean cab = addRecordToCoordActionTable(cjb.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-for-action-input-check.xml\", 0);\n        junit.framework.Assert.assertEquals(\"coord\", jmsTopicService.getTopic(cab.getId()));\n        org.apache.oozie.BundleJobBean bjb = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, true);\n        junit.framework.Assert.assertEquals(\"bundle\", jmsTopicService.getTopic(bjb.getId()));\n        org.apache.oozie.BundleActionBean bab = addRecordToBundleActionTable(bjb.getId(), \"1\", 1, org.apache.oozie.client.Job.Status.RUNNING);\n        junit.framework.Assert.assertEquals(\"bundle\", jmsTopicService.getTopic(bab.getBundleActionId()));\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSTopicService",
        "Label": 1,
        "MethodName": "testTopicAsFixedString",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        new org.apache.oozie.util.GraphGenerator(null, null);\n    } catch (java.lang.IllegalArgumentException iae) {\n        junit.framework.Assert.assertTrue(\"Construction with illegal args failed as expected: \" + iae.getMessage(), true);\n    }\n    try {\n        new org.apache.oozie.util.GraphGenerator(\"<workflow></workflow>\", null);\n    } catch (java.lang.IllegalArgumentException iae) {\n        junit.framework.Assert.assertTrue(\"Construction with illegal args failed as expected: \" + iae.getMessage(), true);\n    }\n    junit.framework.Assert.assertNotNull(new org.apache.oozie.util.GraphGenerator(\"<workflow></workflow>\", new org.apache.oozie.client.rest.JsonWorkflowJob()));\n    junit.framework.Assert.assertNotNull(new org.apache.oozie.util.GraphGenerator(null, new org.apache.oozie.client.rest.JsonWorkflowJob()));\n    org.apache.oozie.client.rest.JsonWorkflowJob jsonWFJob = new org.apache.oozie.client.rest.JsonWorkflowJob();\n    jsonWFJob.setAppName(\"My Test App\");\n    jsonWFJob.setId(\"My Test ID\");\n    junit.framework.Assert.assertNotNull(new org.apache.oozie.util.GraphGenerator(\"<workflow></workflow>\", jsonWFJob));\n    junit.framework.Assert.assertNotNull(new org.apache.oozie.util.GraphGenerator(\"<workflow></workflow>\", jsonWFJob, false));\n    junit.framework.Assert.assertNotNull(new org.apache.oozie.util.GraphGenerator(\"<workflow></workflow>\", jsonWFJob, true));\n}",
        "ClassName": "TestGraphGenerator",
        "Label": 1,
        "MethodName": "testConstructor",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_STATES_WITHOUT_ERROR, \"false\");\n    services = new org.apache.oozie.service.Services();\n    services.init();\n    java.util.Date startTime = new java.util.Date();\n    java.util.Date endTime = new java.util.Date(startTime.getTime() + ((20 * 60) * 1000));\n    final org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.FAILED, startTime, endTime, true, true, 0);\n    java.lang.String pauseTime = org.apache.oozie.command.coord.TestCoordChangeXCommand.convertDateToString(startTime.getTime() + ((10 * 60) * 1000));\n    java.lang.String newEndTime = org.apache.oozie.command.coord.TestCoordChangeXCommand.convertDateToString(startTime.getTime() + ((40 * 60) * 1000));\n    new org.apache.oozie.command.coord.CoordChangeXCommand(job.getId(), ((\"endtime=\" + newEndTime) + \";pausetime=\") + pauseTime).call();\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNINGWITHERROR, coordJob.getStatus());\n}",
        "ClassName": "TestCoordChangeXCommand",
        "Label": 1,
        "MethodName": "testCoordChangeStatus",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String db = \"default\";\n    java.lang.String table = \"tablename\";\n    java.lang.String newHCatDependency1 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=brazil\";\n    java.lang.String newHCatDependency2 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=usa\";\n    java.lang.String newHCatDependency = (newHCatDependency1 + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + newHCatDependency2;\n    populateTable(db, table);\n    java.lang.String actionId = addInitRecords(newHCatDependency);\n    checkCoordAction(actionId, newHCatDependency, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId, true).call();\n    checkCoordAction(actionId, newHCatDependency1, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    org.apache.oozie.service.PartitionDependencyManagerService pdms = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.PartitionDependencyManagerService.class);\n    org.apache.oozie.service.HCatAccessorService hcatService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HCatAccessorService.class);\n    junit.framework.Assert.assertTrue(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency1)).contains(actionId));\n    junit.framework.Assert.assertTrue(hcatService.isRegisteredForNotification(new org.apache.oozie.util.HCatURI(newHCatDependency1)));\n    junit.framework.Assert.assertNull(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency2)));\n    addPartition(db, table, \"dt=20120430;country=brazil\");\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId).call();\n    checkCoordAction(actionId, \"\", org.apache.oozie.client.CoordinatorAction.Status.READY);\n    junit.framework.Assert.assertNull(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency1)));\n    junit.framework.Assert.assertFalse(hcatService.isRegisteredForNotification(new org.apache.oozie.util.HCatURI(newHCatDependency1)));\n}",
        "ClassName": "TestCoordPushDependencyCheckXCommand",
        "Label": 1,
        "MethodName": "testUpdateCoordTableMultipleDepsV3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        java.lang.String actionXml = (((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<main-class>\") + org.apache.oozie.action.hadoop.LauncherMainTester.class.getName()) + \"</main-class>\") + \"</java>\";\n        org.jdom.Element eActionXml = org.apache.oozie.util.XmlUtils.parseXml(actionXml);\n        org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml, null);\n        org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(\"localfs://namenode:port/mydir\");\n        org.apache.oozie.action.hadoop.JavaActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n        org.apache.hadoop.mapred.JobConf conf = ae.createBaseHadoopConf(context, eActionXml);\n        org.apache.oozie.service.Services.get().destroy();\n        setSystemProperty(org.apache.oozie.service.HadoopAccessorService.SUPPORTED_FILESYSTEMS, \"hdfs,viewfs\");\n        new org.apache.oozie.service.Services().init();\n        ae.setupActionConf(conf, context, eActionXml, appPath);\n        junit.framework.Assert.fail(\"Supposed to throw exception due to unsupported fs scheme - localfs\");\n    } catch (org.apache.oozie.action.ActionExecutorException ae) {\n        junit.framework.Assert.assertTrue(ae.getMessage().contains(\"E0904\"));\n        junit.framework.Assert.assertTrue(ae.getMessage().contains(\"Scheme [localfs] not supported\"));\n    }\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testFilesystemScheme",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetjpa = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetjpa);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.PREP);\n    org.apache.oozie.BundleJobBean bundleJob = new org.apache.oozie.command.bundle.BundleJobXCommand(job.getId()).call();\n    junit.framework.Assert.assertEquals(0, bundleJob.getCoordinators().size());\n    junit.framework.Assert.assertEquals(bundleJob.getStatus(), org.apache.oozie.client.Job.Status.PREP);\n    junit.framework.Assert.assertEquals(bundleJob.getId(), job.getId());\n}",
        "ClassName": "TestBundleJobXCommand",
        "Label": 1,
        "MethodName": "testBundleJobInfo1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, false, true, 0);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(action.getId());\n    job = jpaService.execute(coordJobGetCmd);\n    action = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNING);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.RUNNING);\n    new org.apache.oozie.command.coord.CoordKillXCommand(job.getId()).call();\n    job = jpaService.execute(coordJobGetCmd);\n    action = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.KILLED);\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.KILLED);\n}",
        "ClassName": "TestCoordKillXCommand",
        "Label": 1,
        "MethodName": "testCoordKillSuccess2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    _testCoordActionUpdate(action);\n}",
        "ClassName": "TestCoordActionUpdateJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionUpdate",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String missingDeps = \"hdfs:///dirx/filex\";\n    java.lang.String actionId = addInitRecords(missingDeps, null, TZ);\n    new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(actionId, actionId.substring(0, actionId.indexOf(\"@\"))).call();\n    long timeOutCreationTime = java.lang.System.currentTimeMillis() - ((12 * 60) * 1000);\n    setCoordActionCreationTime(actionId, timeOutCreationTime);\n    new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(actionId, actionId.substring(0, actionId.indexOf(\"@\"))).call();\n    java.lang.Thread.sleep(100);\n    checkCoordAction(actionId, missingDeps, org.apache.oozie.client.CoordinatorAction.Status.TIMEDOUT);\n}",
        "ClassName": "TestCoordActionInputCheckXCommand",
        "Label": 1,
        "MethodName": "testTimeout",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String db = \"default\";\n    java.lang.String table = \"tablename\";\n    java.lang.String newHCatDependency1 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=brazil\";\n    java.lang.String newHCatDependency2 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=usa\";\n    java.lang.String newHCatDependency = (newHCatDependency1 + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + newHCatDependency2;\n    populateTable(db, table);\n    java.lang.String actionId = addInitRecords(newHCatDependency);\n    checkCoordAction(actionId, newHCatDependency, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId).call();\n    checkCoordAction(actionId, newHCatDependency, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    dropPartition(db, table, \"dt=20120430;country=usa\");\n    addPartition(db, table, \"dt=20120430;country=brazil\");\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId).call();\n    checkCoordAction(actionId, newHCatDependency2, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    addPartition(db, table, \"dt=20120430;country=usa\");\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId).call();\n    checkCoordAction(actionId, \"\", org.apache.oozie.client.CoordinatorAction.Status.READY);\n}",
        "ClassName": "TestCoordPushDependencyCheckXCommand",
        "Label": 1,
        "MethodName": "testUpdateCoordTableMultipleDepsV2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    prepareOozieConfDir(\"oozie-site1.xml\");\n    org.apache.oozie.service.ConfigurationService cl = new org.apache.oozie.service.ConfigurationService();\n    cl.init(null);\n    junit.framework.Assert.assertEquals(\"oozie-\" + java.lang.System.getProperty(\"user.name\"), cl.getConf().get(\"oozie.system.id\"));\n    junit.framework.Assert.assertNull(cl.getConf().get(\"oozie.dummy\"));\n    cl.destroy();\n}",
        "ClassName": "TestConfigurationService",
        "Label": 1,
        "MethodName": "testValueFromDefault",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.FAILED, \"coord-action-get.xml\", 0);\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"coord\");\n    java.lang.String actionXml = getCoordActionXml(appPath, \"coord-action-get.xml\");\n    java.lang.String actionNomialTime = getActionNominalTime(actionXml);\n    java.util.Date nominalTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(actionNomialTime);\n    java.util.Date d1 = new java.util.Date(nominalTime.getTime() - 1000);\n    java.util.Date d2 = new java.util.Date(nominalTime.getTime() + 1000);\n    _testGetActionForDates(job.getId(), d1, d2, 1);\n    d1 = new java.util.Date(nominalTime.getTime() + 1000);\n    d2 = new java.util.Date(nominalTime.getTime() + 2000);\n    _testGetActionForDates(job.getId(), d1, d2, 0);\n    cleanUpDBTables();\n    job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    _testGetActionForDates(job.getId(), d1, d2, 0);\n}",
        "ClassName": "TestCoordJobGetActionsForDatesJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String launcherJobName = \"MapReduceLauncherTest\";\n    final java.lang.String mapredJobName = \"MapReduceTest\";\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path inputDir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"input\");\n    org.apache.hadoop.fs.Path outputDir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"output\");\n    java.io.Writer w = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(inputDir, \"data.txt\")));\n    w.write(\"dummy\\n\");\n    w.write(\"dummy\\n\");\n    w.close();\n    org.apache.oozie.util.XConfiguration mrConfig = getMapReduceConfig(inputDir.toString(), outputDir.toString());\n    mrConfig.set(\"oozie.launcher.mapred.job.name\", launcherJobName);\n    mrConfig.set(\"mapred.job.name\", mapredJobName);\n    java.lang.StringBuilder sb = new java.lang.StringBuilder(\"<map-reduce>\").append(\"<job-tracker>\").append(getJobTrackerUri()).append(\"</job-tracker>\").append(\"<name-node>\").append(getNameNodeUri()).append(\"</name-node>\").append(mrConfig.toXmlString(false)).append(\"</map-reduce>\");\n    java.lang.String actionXml = sb.toString();\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(\"map-reduce\", actionXml);\n    final org.apache.hadoop.mapred.RunningJob launcherJob = submitAction(context);\n    java.lang.String launcherId = context.getAction().getExternalId();\n    waitFor(120 * 2000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return launcherJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(launcherJob.isSuccessful());\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.hasIdSwap(launcherJob));\n    java.lang.System.out.println(\"Launcher job name: \" + launcherJob.getJobName());\n    junit.framework.Assert.assertTrue(launcherJob.getJobName().equals(launcherJobName));\n    org.apache.oozie.action.hadoop.MapReduceActionExecutor ae = new org.apache.oozie.action.hadoop.MapReduceActionExecutor();\n    ae.check(context, context.getAction());\n    junit.framework.Assert.assertTrue(launcherId.equals(context.getAction().getExternalId()));\n    org.apache.hadoop.mapred.JobConf conf = ae.createBaseHadoopConf(context, org.apache.oozie.util.XmlUtils.parseXml(actionXml));\n    java.lang.String user = conf.get(\"user.name\");\n    org.apache.hadoop.mapred.JobClient jobClient = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.HadoopAccessorService.class).createJobClient(user, conf);\n    final org.apache.hadoop.mapred.RunningJob mrJob = jobClient.getJob(org.apache.hadoop.mapred.JobID.forName(context.getAction().getExternalChildIDs()));\n    waitFor(120 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return mrJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(mrJob.isSuccessful());\n    ae.check(context, context.getAction());\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", context.getAction().getExternalStatus());\n    junit.framework.Assert.assertNull(context.getAction().getData());\n    ae.end(context, context.getAction());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, context.getAction().getStatus());\n    java.lang.System.out.println(\"Mapred job name: \" + mrJob.getJobName());\n    junit.framework.Assert.assertTrue(mrJob.getJobName().equals(mapredJobName));\n    junit.framework.Assert.assertNull(context.getExecutionStats());\n    junit.framework.Assert.assertNotNull(context.getExternalChildIDs());\n    junit.framework.Assert.assertNotNull(context.getVar(\"hadoop.counters\"));\n    java.lang.String counters = context.getVar(\"hadoop.counters\");\n    junit.framework.Assert.assertTrue(counters.contains(\"Counter\"));\n}",
        "ClassName": "TestMapReduceActionExecutor",
        "Label": 1,
        "MethodName": "testSetMapredJobName",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.KILLED, true, false);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    sleep(1000);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.DONEWITHERROR, coordJob.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServiceTransitionToDoneWithError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration(false);\n    conf.set(\"A\", \"a\");\n    org.apache.oozie.util.ParameterVerifier.verifyParameters(conf, org.apache.oozie.util.XmlUtils.parseXml(\"<root xmlns=\\\"uri:oozie:workflow:0.4\\\"></root>\"));\n    junit.framework.Assert.assertEquals(1, conf.size());\n    junit.framework.Assert.assertEquals(\"a\", conf.get(\"A\"));\n    org.apache.oozie.util.ParameterVerifier.verifyParameters(conf, org.apache.oozie.util.XmlUtils.parseXml(\"<root xmlns=\\\"uri:oozie:workflow:0.4\\\">\" + \"<parameters></parameters></root>\"));\n    junit.framework.Assert.assertEquals(1, conf.size());\n    junit.framework.Assert.assertEquals(\"a\", conf.get(\"A\"));\n}",
        "ClassName": "TestParameterVerifier",
        "Label": 1,
        "MethodName": "testVerifyParametersEmpty",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path source = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"source\");\n    org.apache.hadoop.fs.Path target = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"target\");\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(\"<fs/>\");\n    fs.mkdirs(source);\n    fs.createNewFile(new org.apache.hadoop.fs.Path(source + \"/newfile1\"));\n    fs.mkdirs(target);\n    java.lang.String dest = target.toUri().getPath();\n    org.apache.hadoop.fs.Path destPath = new org.apache.hadoop.fs.Path(dest);\n    ae.move(context, new org.apache.hadoop.fs.Path(source + \"/newfile1\"), destPath, false);\n    junit.framework.Assert.assertTrue(!fs.exists(new org.apache.hadoop.fs.Path(source + \"/newfile1\")));\n    junit.framework.Assert.assertTrue(fs.exists(target));\n    try {\n        ae.move(context, new org.apache.hadoop.fs.Path(source + \"/newfile1\"), destPath, false);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(\"FS006\", ex.getErrorCode());\n    }\n    fs.mkdirs(source);\n    fs.createNewFile(new org.apache.hadoop.fs.Path(source + \"/newfile\"));\n    org.apache.hadoop.fs.Path complexTarget = new org.apache.hadoop.fs.Path(target + \"/a/b\");\n    fs.mkdirs(complexTarget);\n    ae.move(context, source, complexTarget, false);\n    junit.framework.Assert.assertTrue(fs.exists(new org.apache.hadoop.fs.Path((complexTarget + \"/\") + source.getName())));\n    fs.mkdirs(source);\n    try {\n        ae.move(context, source, new org.apache.hadoop.fs.Path((target.toUri().getScheme() + \"://foo/\") + destPath), false);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.assertEquals(\"FS007\", ex.getErrorCode());\n    }\n    fs.delete(source, true);\n    ae.move(context, source, new org.apache.hadoop.fs.Path(target.toUri().getPath()), true);\n    fs.mkdirs(source);\n    fs.delete(target, true);\n    ae.move(context, source, new org.apache.hadoop.fs.Path(target.toUri().getPath()), true);\n    junit.framework.Assert.assertTrue(!fs.exists(source));\n    junit.framework.Assert.assertTrue(fs.exists(target));\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testMove",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNING);\n    new org.apache.oozie.command.coord.CoordSuspendXCommand(job.getId()).call();\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.SUSPENDED);\n    new org.apache.oozie.command.coord.CoordResumeXCommand(job.getId()).call();\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNING);\n}",
        "ClassName": "TestCoordResumeXCommand",
        "Label": 1,
        "MethodName": "testCoordSuspendAndResumeForRunning",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    conf.set(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, org.apache.hadoop.util.StringUtils.join(\",\", java.util.Arrays.asList(org.apache.oozie.service.GroupsService.class.getName(), org.apache.oozie.service.ProxyUserService.class.getName())));\n    services.init();\n    try {\n        org.apache.oozie.service.ProxyUserService proxyUser = services.get(org.apache.oozie.service.ProxyUserService.class);\n        junit.framework.Assert.assertNotNull(proxyUser);\n        proxyUser.validate(\"foo\", null, \"bar\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n        junit.framework.Assert.assertTrue(ex.getMessage().contains(\"oozie.service.ProxyUserService.proxyuser.foo.hosts\"));\n        junit.framework.Assert.assertTrue(ex.getMessage().contains(\"oozie.service.ProxyUserService.proxyuser.foo.groups\"));\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail(ex.toString());\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestProxyUserService",
        "Label": 1,
        "MethodName": "testNullHost",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testNonJsonResponses(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_LOG, org.apache.oozie.client.rest.RestConstants.TEXT_CONTENT_TYPE, org.apache.oozie.servlet.MockDagEngineService.LOG);\n}",
        "ClassName": "TestV0JobServlet",
        "Label": 1,
        "MethodName": "testJobLog",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    conf.set(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, org.apache.hadoop.util.StringUtils.join(\",\", java.util.Arrays.asList(org.apache.oozie.service.GroupsService.class.getName(), org.apache.oozie.service.ProxyUserService.class.getName())));\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.hosts\", \"*\");\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.groups\", \"*\");\n    services.init();\n    try {\n        org.apache.oozie.service.ProxyUserService proxyUser = services.get(org.apache.oozie.service.ProxyUserService.class);\n        junit.framework.Assert.assertNotNull(proxyUser);\n        proxyUser.validate(\"foo\", \"localhost\", \"bar\");\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestProxyUserService",
        "Label": 1,
        "MethodName": "testValidateAnyHostAnyUser",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    try {\n        new org.apache.oozie.command.bundle.BundleJobSuspendXCommand(\"bundle-id\").call();\n        junit.framework.Assert.fail(\"Job doesn't exist. Should fail.\");\n    } catch (org.apache.oozie.command.CommandException ce) {\n    }\n}",
        "ClassName": "TestBundleJobSuspendXCommand",
        "Label": 1,
        "MethodName": "testBundleSuspendFailed",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-action-create\");\n    java.lang.String expr = \"${coord:hoursInDay(1)}\";\n    java.lang.String res = org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr);\n    junit.framework.Assert.assertEquals(\"24\", res);\n    expr = \"${coord:hoursInDay(coord:hoursInDay(1))}\";\n    res = org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr);\n    org.apache.oozie.coord.SyncCoordAction appInst = new org.apache.oozie.coord.SyncCoordAction();\n    org.apache.oozie.coord.SyncCoordDataset ds = new org.apache.oozie.coord.SyncCoordDataset();\n    ds.setFrequency(1);\n    ds.setTimeUnit(org.apache.oozie.coord.TimeUnit.DAY);\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-02T00:00Z\"));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"UTC\"));\n    ds.setName(\"test1\");\n    ds.setType(\"SYNC\");\n    appInst.setActualTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-09-10T23:59Z\"));\n    appInst.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"UTC\"));\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-01T08:00Z\"));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-01-01T08:00Z\"));\n    appInst.setActualTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2010-10-01T00:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:hoursInDay(0)}\";\n    junit.framework.Assert.assertEquals(\"24\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:hoursInDay(0)}\";\n    junit.framework.Assert.assertEquals(\"24\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:hoursInDay(-2)}\";\n    junit.framework.Assert.assertEquals(\"24\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-08T08:00Z\"));\n    appInst.setActualTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2010-10-01T00:00Z\"));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"UTC\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:hoursInDay(0)}\";\n    junit.framework.Assert.assertEquals(\"24\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"Europe/London\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:hoursInDay(0)}\";\n    junit.framework.Assert.assertEquals(\"24\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-08T08:00Z\"));\n    appInst.setActualTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2010-10-01T00:00Z\"));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:hoursInDay(0)}\";\n    junit.framework.Assert.assertEquals(\"23\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:hoursInDay(1)}\";\n    junit.framework.Assert.assertEquals(\"24\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-11-01T08:00Z\"));\n    appInst.setActualTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2010-10-01T00:00Z\"));\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:hoursInDay(0)}\";\n    junit.framework.Assert.assertEquals(\"25\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-03-08T08:00Z\"));\n    appInst.setActualTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2010-10-01T00:00Z\"));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    ds.setEndOfDuration(org.apache.oozie.coord.TimeUnit.END_OF_DAY);\n    org.apache.oozie.coord.CoordELFunctions.configureEvaluator(eval, ds, appInst);\n    expr = \"${coord:hoursInDay(0)}\";\n    junit.framework.Assert.assertEquals(\"23\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:hoursInDay(1)}\";\n    junit.framework.Assert.assertEquals(\"24\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:hoursInDay(-1)}\";\n    junit.framework.Assert.assertEquals(\"24\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testHoursInDay",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    _testGetAction(action.getId());\n}",
        "ClassName": "TestCoordActionGetJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.lang.String appXml = \"<coordinator-app name=\\\"NAME\\\" frequency=\\\"${coord:days(1)}\\\" start=\\\"2009-02-01T01:00Z\\\" end=\\\"2009-02-03T23:59Z\\\" timezone=\\\"UTC\\\" \" + (((((((((((((((((((((((((((((\"xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns='uri:oozie:coordinator:0.2' \" + \"xmlns:sla='uri:oozie:sla:0.1'> <controls> <timeout>${coord:minutes(10)}</timeout> \") + \"<concurrency>2</concurrency> \") + \"<execution>LIFO</execution> </controls> <datasets> \") + \"<dataset name=\\\"a\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"<dataset name=\\\"local_a\\\" frequency=\\\"${coord:days(7)}\\\" initial-instance=\\\"2009-02-01T01:00Z\\\" \") + \"timezone=\\\"UTC\\\"> <uri-template>file:///tmp/coord/workflows/${YEAR}/${DAY}</uri-template> </dataset> \") + \"</datasets> <input-events> \") + \"<data-in name=\\\"A\\\" dataset=\\\"a\\\"> <instance>${coord:latest(0)}</instance> </data-in>  \") + \"</input-events> \") + \"<output-events> <data-out name=\\\"LOCAL_A\\\" dataset=\\\"local_a\\\"> \") + \"<instance>${coord:current(-1)}</instance> </data-out> </output-events> <action> <workflow> <app-path>hdfs:///tmp/workflows/</app-path> \") + \"<configuration> <property> <name>inputA</name> <value>${coord:dataIn('A')}</value> </property> \") + \"<property> <name>inputB</name> <value>${coord:dataOut('LOCAL_A')}</value> \") + \"</property></configuration> </workflow> \") + \" <sla:info>\") + \" <sla:app-name>test-app</sla:app-name>\") + \" <sla:nominal-time>${coord:nominalTime()}</sla:nominal-time>\") + \" <sla:should-start>${5 * MINUTES}</sla:should-start>\") + \" <sla:should-end>${ SLA_OFFSET * HOURS}</sla:should-end>\") + \" <sla:notification-msg>Notifying User for ${coord:nominalTime()} nominal time </sla:notification-msg>\") + \" <sla:alert-contact>abc@example.com</sla:alert-contact>\") + \" <sla:dev-contact>abc@example.com</sla:dev-contact>\") + \" <sla:qa-contact>abc@example.com</sla:qa-contact>\") + \" <sla:se-contact>abc@example.com</sla:se-contact>\") + \" <sla:alert-frequency>LAST_HOUR</sla:alert-frequency>\") + \" <sla:alert-percentage>10</sla:alert-percentage>\") + \"</sla:info>\") + \"</action> </coordinator-app>\");\n    writeToFile(appXml, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.set(\"SLA_OFFSET\", \"10\");\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    java.lang.String jobId = sc.call();\n    junit.framework.Assert.assertEquals(jobId.substring(jobId.length() - 2), \"-C\");\n    org.apache.oozie.CoordinatorJobBean job = checkCoordJobs(jobId);\n    junit.framework.Assert.assertEquals(job.getTimeout(), 10);\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testBasicSubmitWithSLA",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.servlet.MyJsonRestServlet.NO_RESOURCE_NO_PARAMS, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", null, null));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"\", null));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"\", \"a=A\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"/\", null));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"GET\", \"/hello\", null));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestJsonRestServlet",
        "Label": 1,
        "MethodName": "testNoResourceNoParams",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/admin/*\", org.apache.oozie.servlet.V1AdminServlet.class, org.apache.oozie.servlet.TestV1AdminServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.net.URL url = createURL(org.apache.oozie.client.rest.RestConstants.ADMIN_JAVA_SYS_PROPS_RESOURCE, java.util.Collections.EMPTY_MAP);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertTrue(json.containsKey(\"java.version\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1AdminServlet",
        "Label": 1,
        "MethodName": "testJavaSysProps",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTableForNegCase(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction1 = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction2 = addRecordToWfActionTable(wfJob.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction3 = addRecordToWfActionTable(wfJob.getId(), \"3\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction4 = addRecordToWfActionTable(wfJob.getId(), \"4\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction5 = addRecordToWfActionTable(wfJob.getId(), \"5\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowJobBean subwfJob1 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, wfJob.getId());\n    org.apache.oozie.WorkflowJobBean subwfJob2 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, wfJob.getId());\n    org.apache.oozie.WorkflowJobBean subwfJob3 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, wfJob.getId());\n    org.apache.oozie.WorkflowJobBean subwfJob4 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, wfJob.getId());\n    org.apache.oozie.WorkflowJobBean subwfJob5 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, wfJob.getId());\n    org.apache.oozie.WorkflowActionBean subwfAction1 = addRecordToWfActionTable(subwfJob1.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n    org.apache.oozie.WorkflowActionBean subwfAction2 = addRecordToWfActionTable(subwfJob2.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n    org.apache.oozie.WorkflowActionBean subwfAction3 = addRecordToWfActionTable(subwfJob3.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n    org.apache.oozie.WorkflowActionBean subwfAction4 = addRecordToWfActionTable(subwfJob4.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n    org.apache.oozie.WorkflowActionBean subwfAction5 = addRecordToWfActionTable(subwfJob5.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction1GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction1.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction2GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction2.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction3GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction3.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction4GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction4.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction5GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction5.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJob1GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob1.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJob2GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob2.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJob3GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob3.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJob4GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob4.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJob5GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob5.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfAction1GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction1.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfAction2GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction2.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfAction3GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction3.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfAction4GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction4.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfAction5GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction5.getId());\n    wfJob = jpaService.execute(wfJobGetCmd);\n    wfAction1 = jpaService.execute(wfAction1GetCmd);\n    wfAction2 = jpaService.execute(wfAction2GetCmd);\n    wfAction3 = jpaService.execute(wfAction3GetCmd);\n    wfAction4 = jpaService.execute(wfAction4GetCmd);\n    wfAction5 = jpaService.execute(wfAction5GetCmd);\n    subwfJob1 = jpaService.execute(subwfJob1GetCmd);\n    subwfJob2 = jpaService.execute(subwfJob2GetCmd);\n    subwfJob3 = jpaService.execute(subwfJob3GetCmd);\n    subwfJob4 = jpaService.execute(subwfJob4GetCmd);\n    subwfJob5 = jpaService.execute(subwfJob5GetCmd);\n    subwfAction1 = jpaService.execute(subwfAction1GetCmd);\n    subwfAction2 = jpaService.execute(subwfAction2GetCmd);\n    subwfAction3 = jpaService.execute(subwfAction3GetCmd);\n    subwfAction4 = jpaService.execute(subwfAction4GetCmd);\n    subwfAction5 = jpaService.execute(subwfAction5GetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction5.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.RUNNING, subwfJob1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.RUNNING, subwfJob2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.RUNNING, subwfJob3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.RUNNING, subwfJob4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.RUNNING, subwfJob5.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.RUNNING, subwfAction1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.RUNNING, subwfAction2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.RUNNING, subwfAction3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.RUNNING, subwfAction4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.RUNNING, subwfAction5.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(7, 1, 1, 10).call();\n    try {\n        jpaService.execute(wfJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfAction1GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action 1 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfAction2GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action 2 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfAction3GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action 3 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfAction4GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action 4 should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfAction5GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action 5 should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfJob1GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Job 1 should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfJob2GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Job 2 should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfJob3GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Job 3 should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfJob4GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Job 4 should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfJob5GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Job 5 should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfAction1GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Action 1 should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfAction2GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Action 2 should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfAction3GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Action 3 should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfAction4GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Action 4 should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfAction5GetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Action 5 should not have been purged\");\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeWFWithSubWF2MoreThanLimit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean subwfJob1 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJob.getId());\n    org.apache.oozie.WorkflowJobBean subwfJob2 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJob.getId());\n    org.apache.oozie.WorkflowJobBean subwfJob3 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJob.getId());\n    org.apache.oozie.WorkflowJobBean subwfJob4 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJob.getId());\n    org.apache.oozie.WorkflowJobBean subwfJob5 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJob.getId());\n    org.apache.oozie.WorkflowActionBean wfAction1 = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction2 = addRecordToWfActionTable(wfJob.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction3 = addRecordToWfActionTable(wfJob.getId(), \"3\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction4 = addRecordToWfActionTable(wfJob.getId(), \"4\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction5 = addRecordToWfActionTable(wfJob.getId(), \"5\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean subwfAction1 = addRecordToWfActionTable(subwfJob1.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean subwfAction2 = addRecordToWfActionTable(subwfJob2.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean subwfAction3 = addRecordToWfActionTable(subwfJob3.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean subwfAction4 = addRecordToWfActionTable(subwfJob4.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean subwfAction5 = addRecordToWfActionTable(subwfJob5.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    java.util.List<java.lang.String> children = new java.util.ArrayList<java.lang.String>();\n    children.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobsGetFromParentIdJPAExecutor(wfJob.getId(), 3)));\n    junit.framework.Assert.assertEquals(3, children.size());\n    children.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobsGetFromParentIdJPAExecutor(wfJob.getId(), 3, 3)));\n    junit.framework.Assert.assertEquals(5, children.size());\n    checkChildren(children, subwfJob1.getId(), subwfJob2.getId(), subwfJob3.getId(), subwfJob4.getId(), subwfJob5.getId());\n}",
        "ClassName": "TestWorkflowJobsGetFromParentIdJPAExecutor",
        "Label": 1,
        "MethodName": "testGetCoordinatorParentTooMany",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setSystemProperty(\"authenticator.class\", org.apache.oozie.servlet.TestAuthFilterAuthOozieClient.Authenticator4Test.class.getName());\n    setSystemProperty(\"oozie.authentication.simple.anonymous.allowed\", \"false\");\n    org.apache.oozie.servlet.TestAuthFilterAuthOozieClient.Authenticator4Test.USED = false;\n    runTest(new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"admin\", \"-status\", \"-oozie\", oozieUrl };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n    junit.framework.Assert.assertTrue(org.apache.oozie.servlet.TestAuthFilterAuthOozieClient.Authenticator4Test.USED);\n}",
        "ClassName": "TestAuthFilterAuthOozieClient",
        "Label": 1,
        "MethodName": "testClientWithCustomAuthenticator",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().getConf().setBoolean(org.apache.oozie.coord.CoordELFunctions.LATEST_EL_USE_CURRENT_TIME, true);\n    java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-TestCoordActionInputCheckXCommand-C\";\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-15T23:59\" + TZ);\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-16T23:59\" + TZ);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(jobId, startTime, endTime, \"latest\");\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.CoordinatorActionBean action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor(job.getId() + \"@1\"));\n    final java.lang.String pushMissingDependency = (\"file://\" + getTestCaseDir()) + \"/2009/02/05\";\n    action.setPushMissingDependencies(pushMissingDependency);\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionUpdatePushInputCheckJPAExecutor(action));\n    java.lang.String actionXML = action.getActionXml();\n    java.lang.String actionCreationTime = \"2009-02-15T01:00\" + TZ;\n    actionXML = actionXML.replaceAll(\"action-actual-time=\\\".*\\\">\", (\"action-actual-time=\\\"\" + actionCreationTime) + \"\\\">\");\n    action.setActionXml(actionXML);\n    action.setCreatedTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(actionCreationTime));\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionUpdateForInputCheckJPAExecutor(action));\n    action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor(job.getId() + \"@1\"));\n    junit.framework.Assert.assertTrue(action.getActionXml().contains(\"action-actual-time=\\\"2009-02-15T01:00\"));\n    new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(job.getId() + \"@1\", job.getId()).call();\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(job.getId() + \"@1\").call();\n    action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor(job.getId() + \"@1\"));\n    junit.framework.Assert.assertEquals(org.apache.oozie.command.coord.CoordCommandUtils.RESOLVED_UNRESOLVED_SEPARATOR + \"${coord:latestRange(-3,0)}\", action.getMissingDependencies());\n    junit.framework.Assert.assertEquals(pushMissingDependency, action.getPushMissingDependencies());\n    createDir(getTestCaseDir() + \"/2009/03/05/\");\n    createDir(getTestCaseDir() + \"/2009/02/19/\");\n    createDir(getTestCaseDir() + \"/2009/02/12/\");\n    createDir(getTestCaseDir() + \"/2009/01/22/\");\n    createDir(getTestCaseDir() + \"/2009/01/08/\");\n    createDir(getTestCaseDir() + \"/2009/01/01/\");\n    new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(job.getId() + \"@1\", job.getId()).call();\n    action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor(job.getId() + \"@1\"));\n    junit.framework.Assert.assertEquals(org.apache.oozie.command.coord.CoordCommandUtils.RESOLVED_UNRESOLVED_SEPARATOR + \"${coord:latestRange(-3,0)}\", action.getMissingDependencies());\n    junit.framework.Assert.assertEquals(pushMissingDependency, action.getPushMissingDependencies());\n    createDir(getTestCaseDir() + \"/2009/02/05\");\n    new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(job.getId() + \"@1\").call();\n    action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor(job.getId() + \"@1\"));\n    junit.framework.Assert.assertEquals(\"\", action.getPushMissingDependencies());\n    checkCoordAction(job.getId() + \"@1\", org.apache.oozie.command.coord.CoordCommandUtils.RESOLVED_UNRESOLVED_SEPARATOR + \"${coord:latestRange(-3,0)}\", org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(job.getId() + \"@1\", job.getId()).call();\n    java.lang.Thread.sleep(1000);\n    action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor(job.getId() + \"@1\"));\n    junit.framework.Assert.assertEquals(\"\", action.getMissingDependencies());\n    actionXML = action.getActionXml();\n    java.lang.String resolvedList = (((((((((((((\"file://\" + getTestCaseDir()) + \"/2009/03/05\") + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"file://\") + getTestCaseDir()) + \"/2009/02/19\") + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"file://\") + getTestCaseDir()) + \"/2009/02/12\") + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"file://\") + getTestCaseDir()) + \"/2009/02/05\";\n    java.lang.System.out.println(\"Expected: \" + resolvedList);\n    java.lang.System.out.println(\"Actual: \" + actionXML.substring(actionXML.indexOf(\"<uris>\") + 6, actionXML.indexOf(\"</uris>\")));\n    junit.framework.Assert.assertEquals(resolvedList, actionXML.substring(actionXML.indexOf(\"<uris>\") + 6, actionXML.indexOf(\"</uris>\")));\n}",
        "ClassName": "TestCoordActionInputCheckXCommand",
        "Label": 1,
        "MethodName": "testActionInputCheckLatestCurrentTimeWithPushDependency",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowXClient.END_POINTS, org.apache.oozie.client.TestWorkflowXClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowXClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            int wfCount = org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT;\n            org.apache.oozie.client.XOozieClient wc = new org.apache.oozie.client.XOozieClient(oozieUrl);\n            java.util.Properties conf = wc.createConfiguration();\n            org.apache.hadoop.fs.Path libPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"lib\");\n            getFileSystem().mkdirs(libPath);\n            conf.setProperty(org.apache.oozie.client.OozieClient.LIBPATH, libPath.toString());\n            conf.setProperty(org.apache.oozie.client.XOozieClient.JT, \"localhost:9001\");\n            conf.setProperty(org.apache.oozie.client.XOozieClient.NN, \"hdfs://localhost:9000\");\n            java.lang.String[] params = new java.lang.String[]{ \"INPUT=input.txt\" };\n            java.lang.String pigScriptFile = getTestCaseDir() + \"/test\";\n            java.io.BufferedWriter writer = new java.io.BufferedWriter(new java.io.FileWriter(pigScriptFile));\n            writer.write(\"a = load \\'${INPUT}\\';\\n dump a;\");\n            writer.close();\n            junit.framework.Assert.assertEquals((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + wfCount) + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, wc.submitScriptLanguage(conf, pigScriptFile, null, params, \"pig\"));\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowXClient",
        "Label": 1,
        "MethodName": "testSubmitPig",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path subWorkflowAppPath = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    java.io.Writer writer = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(subWorkflowAppPath, \"workflow.xml\")));\n    writer.write(org.apache.oozie.action.oozie.TestSubWorkflowActionExecutor.APP1);\n    writer.close();\n    org.apache.oozie.util.XConfiguration protoConf = getBaseProtoConf();\n    org.apache.oozie.WorkflowJobBean workflow = createBaseWorkflow(protoConf, \"W\");\n    java.lang.String defaultConf = workflow.getConf();\n    org.apache.oozie.util.XConfiguration newConf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(defaultConf));\n    newConf.set(\"abc\", \"xyz\");\n    workflow.setConf(newConf.toXmlString());\n    final org.apache.oozie.WorkflowActionBean action = ((org.apache.oozie.WorkflowActionBean) (workflow.getActions().get(0)));\n    action.setConf((((((((((((\"<sub-workflow xmlns='uri:oozie:workflow:0.1' name='subwf'>\" + \"      <app-path>\") + subWorkflowAppPath) + java.io.File.separator) + \"workflow.xml\") + \"</app-path>\") + \"      <configuration>\") + \"        <property>\") + \"          <name>a</name>\") + \"          <value>A</value>\") + \"        </property>\") + \"      </configuration>\") + \"</sub-workflow>\");\n    org.apache.oozie.action.oozie.SubWorkflowActionExecutor subWorkflow = new org.apache.oozie.action.oozie.SubWorkflowActionExecutor();\n    subWorkflow.start(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), action);\n    final org.apache.oozie.client.OozieClient oozieClient = subWorkflow.getWorkflowClient(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), org.apache.oozie.action.oozie.SubWorkflowActionExecutor.LOCAL);\n    waitFor(org.apache.oozie.action.oozie.TestSubWorkflowActionExecutor.JOB_TIMEOUT, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return oozieClient.getJobInfo(action.getExternalId()).getStatus() == org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED;\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, oozieClient.getJobInfo(action.getExternalId()).getStatus());\n    subWorkflow.check(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), action);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.DONE, action.getStatus());\n    subWorkflow.end(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), action);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, action.getStatus());\n    org.apache.oozie.client.WorkflowJob wf = oozieClient.getJobInfo(action.getExternalId());\n    org.apache.hadoop.conf.Configuration childConf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(wf.getConf()));\n    junit.framework.Assert.assertNull(childConf.get(\"abc\"));\n}",
        "ClassName": "TestSubWorkflowActionExecutor",
        "Label": 1,
        "MethodName": "testConfigNotPropagation",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, false);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    final java.lang.String jobId = job.getId();\n    org.apache.oozie.BundleActionBean ba1 = addRecordToBundleActionTable(jobId, \"action1\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    addRecordToBundleActionTable(jobId, \"action2\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    addRecordToBundleActionTable(jobId, \"action3\", 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean bundle = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n            return bundle.getStatus().equals(org.apache.oozie.client.Job.Status.SUCCEEDED);\n        }\n    });\n    job = jpaService.execute(new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(jobId));\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, job.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testBundleStatusTransitServiceSucceeded1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction = addRecordToWfActionTable(wfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowJobBean subwfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, wfJob.getId());\n    org.apache.oozie.WorkflowActionBean subwfAction = addRecordToWfActionTable(subwfJob.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordAction = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor subwfJobGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(subwfJob.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor subwfActionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(subwfAction.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordActionGetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction.getId());\n    wfJob = jpaService.execute(wfJobGetCmd);\n    wfAction = jpaService.execute(wfActionGetCmd);\n    subwfJob = jpaService.execute(subwfJobGetCmd);\n    subwfAction = jpaService.execute(subwfActionGetCmd);\n    coordJob = jpaService.execute(coordJobGetCmd);\n    coordAction = jpaService.execute(coordActionGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, subwfJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, subwfAction.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(org.apache.oozie.command.TestPurgeXCommand.getNumDaysToNotBePurged(wfJob.getEndTime()), 7, 1, 10).call();\n    try {\n        jpaService.execute(coordJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(coordActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(wfActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Workflow Action should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfJobGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Job should not have been purged\");\n    }\n    try {\n        jpaService.execute(subwfActionGetCmd);\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"SubWorkflow Action should not have been purged\");\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeCoordWithWFChildWithSubWF2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        org.apache.oozie.util.IOUtils.getReaderAsString(new java.io.StringReader(\"1234\"), 2);\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n    }\n    junit.framework.Assert.assertEquals(\"1234\", org.apache.oozie.util.IOUtils.getReaderAsString(new java.io.StringReader(\"1234\"), 4));\n}",
        "ClassName": "TestIOUtils",
        "Label": 1,
        "MethodName": "testGetReaderAsString",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    services.destroy();\n    services = super.setupServicesForHCatalog();\n    services.getConf().set(org.apache.oozie.service.URIHandlerService.URI_HANDLERS, (org.apache.oozie.dependency.FSURIHandler.class.getName() + \",\") + org.apache.oozie.dependency.HCatURIHandler.class.getName());\n    services.getConf().setLong(org.apache.oozie.service.RecoveryService.CONF_PUSH_DEPENDENCY_INTERVAL, 1);\n    services.init();\n    java.lang.String db = \"default\";\n    java.lang.String table = \"tablename\";\n    java.lang.String newHCatDependency1 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=brazil\";\n    java.lang.String newHCatDependency2 = (((((\"hcat://\" + server) + \"/\") + db) + \"/\") + table) + \"/dt=20120430;country=usa\";\n    java.lang.String newHCatDependency = (newHCatDependency1 + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + newHCatDependency2;\n    org.apache.oozie.service.HCatAccessorService hcatService = services.get(org.apache.oozie.service.HCatAccessorService.class);\n    org.apache.oozie.service.JMSAccessorService jmsService = services.get(org.apache.oozie.service.JMSAccessorService.class);\n    org.apache.oozie.service.PartitionDependencyManagerService pdms = services.get(org.apache.oozie.service.PartitionDependencyManagerService.class);\n    junit.framework.Assert.assertFalse(jmsService.isListeningToTopic(hcatService.getJMSConnectionInfo(new java.net.URI(newHCatDependency1)), (db + \".\") + table));\n    populateTable(db, table);\n    java.lang.String actionId = addInitRecords(newHCatDependency);\n    org.apache.oozie.client.CoordinatorAction ca = checkCoordActionDependencies(actionId, newHCatDependency);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.WAITING, ca.getStatus());\n    pdms.addMissingDependency(new org.apache.oozie.util.HCatURI(newHCatDependency1), actionId);\n    pdms.addMissingDependency(new org.apache.oozie.util.HCatURI(newHCatDependency2), actionId);\n    sleep(2000);\n    java.lang.Runnable recoveryRunnable = new org.apache.oozie.service.RecoveryService.RecoveryRunnable(0, 1, 1);\n    recoveryRunnable.run();\n    sleep(2000);\n    junit.framework.Assert.assertTrue(jmsService.isListeningToTopic(hcatService.getJMSConnectionInfo(new java.net.URI(newHCatDependency2)), ((\"hcat.\" + db) + \".\") + table));\n    checkCoordActionDependencies(actionId, newHCatDependency1);\n    junit.framework.Assert.assertNull(pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency2)));\n    java.util.Collection<java.lang.String> waitingActions = pdms.getWaitingActions(new org.apache.oozie.util.HCatURI(newHCatDependency1));\n    junit.framework.Assert.assertEquals(1, waitingActions.size());\n    junit.framework.Assert.assertTrue(waitingActions.contains(actionId));\n}",
        "ClassName": "TestRecoveryService",
        "Label": 1,
        "MethodName": "testCoordActionRecoveryServiceForWaitingRegisterPartition",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-action-start\");\n    java.lang.String expr = \"${coord:dataOutPartitions('ABC')}\";\n    eval.setVariable(\".dataout.ABC\", \"hcat://hcat.server.com:5080/mydb/clicks/datastamp=20120230;region=us\");\n    eval.setVariable(\".dataout.ABC.unresolved\", java.lang.Boolean.FALSE);\n    java.lang.String res = org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr);\n    junit.framework.Assert.assertTrue(res.equals(\"'datastamp=20120230,region=us'\") || res.equals(\"'region=us,datastamp=20120230'\"));\n}",
        "ClassName": "TestHCatELFunctions",
        "Label": 1,
        "MethodName": "testDataOutPartitions",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-data\");\n    java.lang.String expr = \"${coord:databaseIn('ABC')}\";\n    eval.setVariable(\"oozie.dataname.ABC\", \"data-in\");\n    junit.framework.Assert.assertEquals(\"${coord:databaseIn('ABC')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:databaseIn('ABCD')}\";\n    try {\n        junit.framework.Assert.assertEquals(\"${coord:databaseIn('ABCD')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n        junit.framework.Assert.fail(\"should throw exception because Data-in ABCD is not defiend\");\n    } catch (java.lang.Exception ex) {\n    }\n    expr = \"${coord:databaseOut('ABC')}\";\n    eval.setVariable(\"oozie.dataname.ABC\", \"data-out\");\n    junit.framework.Assert.assertEquals(\"${coord:databaseOut('ABC')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:databaseOut('ABCD')}\";\n    try {\n        junit.framework.Assert.assertEquals(\"${coord:databaseOut('ABCD')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n        junit.framework.Assert.fail(\"should throw exception because Data-out ABCD is not defiend\");\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestHCatELFunctions",
        "Label": 1,
        "MethodName": "testDatabasePh1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    conf.set(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, org.apache.hadoop.util.StringUtils.join(\",\", java.util.Arrays.asList(org.apache.oozie.service.GroupsService.class.getName(), org.apache.oozie.service.ProxyUserService.class.getName())));\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.hosts\", \"localhost\");\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.groups\", \"nobody\");\n    services.init();\n    try {\n        org.apache.oozie.service.ProxyUserService proxyUser = services.get(org.apache.oozie.service.ProxyUserService.class);\n        junit.framework.Assert.assertNotNull(proxyUser);\n        proxyUser.validate(\"foo\", \"localhost\", java.lang.System.getProperty(\"user.name\"));\n        junit.framework.Assert.fail();\n    } catch (java.security.AccessControlException ex) {\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail(ex.toString());\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestProxyUserService",
        "Label": 1,
        "MethodName": "testInvalidGroup",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().getConf().setBoolean(org.apache.oozie.coord.CoordELFunctions.LATEST_EL_USE_CURRENT_TIME, false);\n    java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-TestCoordActionInputCheckXCommand-C\";\n    java.util.Date startTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-15T23:59\" + TZ);\n    java.util.Date endTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-16T23:59\" + TZ);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(jobId, startTime, endTime, \"latest\");\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(job.getId(), 3600).call();\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.CoordinatorActionBean action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor(job.getId() + \"@1\"));\n    junit.framework.Assert.assertEquals(org.apache.oozie.command.coord.CoordCommandUtils.RESOLVED_UNRESOLVED_SEPARATOR + \"${coord:latestRange(-3,0)}\", action.getMissingDependencies());\n    java.lang.String actionXML = action.getActionXml();\n    java.lang.String actionCreationTime = \"2009-02-15T01:00\" + TZ;\n    actionXML = actionXML.replaceAll(\"action-actual-time=\\\".*\\\">\", (\"action-actual-time=\\\"\" + actionCreationTime) + \"\\\">\");\n    action.setActionXml(actionXML);\n    action.setCreatedTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(actionCreationTime));\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionUpdateForInputCheckJPAExecutor(action));\n    action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor(job.getId() + \"@1\"));\n    junit.framework.Assert.assertTrue(action.getActionXml().contains(\"action-actual-time=\\\"2009-02-15T01:00\"));\n    createDir(getTestCaseDir() + \"/2009/03/05/\");\n    createDir(getTestCaseDir() + \"/2009/02/19/\");\n    createDir(getTestCaseDir() + \"/2009/02/12/\");\n    createDir(getTestCaseDir() + \"/2009/02/05/\");\n    createDir(getTestCaseDir() + \"/2009/01/22/\");\n    createDir(getTestCaseDir() + \"/2009/01/08/\");\n    new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(job.getId() + \"@1\", job.getId()).call();\n    java.lang.Thread.sleep(1000);\n    action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor(job.getId() + \"@1\"));\n    actionXML = action.getActionXml();\n    junit.framework.Assert.assertEquals(\"\", action.getMissingDependencies());\n    java.lang.String resolvedList = (((((((((((((\"file://\" + getTestCaseDir()) + \"/2009/02/12\") + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"file://\") + getTestCaseDir()) + \"/2009/02/05\") + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"file://\") + getTestCaseDir()) + \"/2009/01/22\") + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + \"file://\") + getTestCaseDir()) + \"/2009/01/08\";\n    java.lang.System.out.println(\"Expected: \" + resolvedList);\n    java.lang.System.out.println(\"Actual: \" + actionXML.substring(actionXML.indexOf(\"<uris>\") + 6, actionXML.indexOf(\"</uris>\")));\n    junit.framework.Assert.assertEquals(resolvedList, actionXML.substring(actionXML.indexOf(\"<uris>\") + 6, actionXML.indexOf(\"</uris>\")));\n}",
        "ClassName": "TestCoordActionInputCheckXCommand",
        "Label": 1,
        "MethodName": "testActionInputCheckLatestActionCreationTime",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.WorkflowJobBean wfJob = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUSPENDED);\n    final java.lang.String wfJobId = wfJob.getId();\n    addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", wfJobId, \"SUSPENDED\", 1);\n    sleep(3000);\n    java.lang.Runnable recoveryRunnable = new org.apache.oozie.service.RecoveryService.RecoveryRunnable(0, 1, 1);\n    recoveryRunnable.run();\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    waitFor(10000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJobId);\n            org.apache.oozie.WorkflowJobBean ret = jpaService.execute(wfGetCmd);\n            return ret.getStatus() == org.apache.oozie.client.WorkflowJob.Status.RUNNING;\n        }\n    });\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJobId);\n    org.apache.oozie.WorkflowJobBean ret = jpaService.execute(wfGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.RUNNING, ret.getStatus());\n}",
        "ClassName": "TestRecoveryService",
        "Label": 1,
        "MethodName": "testCoordActionRecoveryServiceForResume",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.servlet.MyJsonRestServlet.MULTIPLE_RESOURCES_NO_RESOURCE, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"/resource1\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"GET\", \"/resource2\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, invoke(\"POST\", \"\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"POST\", \"/resource1\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"POST\", \"/resource2\", \"\"));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, invoke(\"GET\", \"\", \"\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestJsonRestServlet",
        "Label": 1,
        "MethodName": "testMultipleResourcesNoResource",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.EventHandlerService ehs = services.get(org.apache.oozie.service.EventHandlerService.class);\n    junit.framework.Assert.assertNotNull(ehs);\n    org.apache.oozie.sla.service.SLAService slas = services.get(org.apache.oozie.sla.service.SLAService.class);\n    junit.framework.Assert.assertNotNull(slas);\n    java.lang.String wfXml = org.apache.oozie.util.IOUtils.getResourceAsString(\"wf-job-sla.xml\", -1);\n    org.apache.hadoop.fs.Path appPath = getFsTestCaseDir();\n    writeToFile(wfXml, appPath, \"workflow.xml\");\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, appPath.toString());\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    _testWorkflowJobCommands(conf, ehs, slas, true);\n}",
        "ClassName": "TestSLAEventGeneration",
        "Label": 1,
        "MethodName": "testWorkflowJobSLANew",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.hadoop.conf.Configuration jobConf = null;\n    try {\n        jobConf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(job.getConf()));\n    } catch (java.io.IOException ioe) {\n        log.warn(\"Configuration parse error. read from DB :\" + job.getConf(), ioe);\n        throw new org.apache.oozie.command.CommandException(org.apache.oozie.ErrorCode.E1005, ioe);\n    }\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(jobConf.get(org.apache.oozie.client.OozieClient.BUNDLE_APP_PATH), \"bundle.xml\");\n    jobConf.set(org.apache.oozie.client.OozieClient.BUNDLE_APP_PATH, appPath.toString());\n    org.apache.oozie.command.bundle.BundleSubmitXCommand submitCmd = new org.apache.oozie.command.bundle.BundleSubmitXCommand(jobConf, job.getAuthToken());\n    submitCmd.call();\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(submitCmd.getJob().getId());\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PREP, job.getStatus());\n    new org.apache.oozie.command.bundle.BundleStartXCommand(job.getId()).call();\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, job.getStatus());\n    sleep(2000);\n    org.apache.oozie.executor.jpa.BundleActionsGetJPAExecutor bundleActionsGetCmd = new org.apache.oozie.executor.jpa.BundleActionsGetJPAExecutor(job.getId());\n    java.util.List<org.apache.oozie.BundleActionBean> actions = jpaService.execute(bundleActionsGetCmd);\n    junit.framework.Assert.assertEquals(2, actions.size());\n    junit.framework.Assert.assertNotNull(actions.get(0).getCoordId());\n    junit.framework.Assert.assertNotNull(actions.get(1).getCoordId());\n    new org.apache.oozie.command.bundle.BundleJobSuspendXCommand(job.getId()).call();\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDED, job.getStatus());\n    actions = jpaService.execute(bundleActionsGetCmd);\n    junit.framework.Assert.assertEquals(true, actions.get(0).isPending());\n    junit.framework.Assert.assertEquals(true, actions.get(1).isPending());\n    final org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd1 = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(actions.get(0).getCoordId());\n    final org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd2 = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(actions.get(1).getCoordId());\n    waitFor(200000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean job1 = jpaService.execute(coordGetCmd1);\n            return job1.getStatus().equals(org.apache.oozie.client.Job.Status.SUSPENDED);\n        }\n    });\n    org.apache.oozie.CoordinatorJobBean job1 = jpaService.execute(coordGetCmd1);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDED, job1.getStatus());\n    waitFor(200000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean job2 = jpaService.execute(coordGetCmd2);\n            return job2.getStatus().equals(org.apache.oozie.client.Job.Status.SUSPENDED);\n        }\n    });\n    org.apache.oozie.CoordinatorJobBean job2 = jpaService.execute(coordGetCmd2);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDED, job2.getStatus());\n}",
        "ClassName": "TestBundleJobSuspendXCommand",
        "Label": 1,
        "MethodName": "testBundleSuspend2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.SchemaService wss = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.SchemaService.class);\n    javax.xml.validation.Validator validator = wss.getSchema(org.apache.oozie.service.SchemaService.SchemaName.WORKFLOW).newValidator();\n    validator.validate(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(org.apache.oozie.service.TestSchemaService.APP_V25)));\n}",
        "ClassName": "TestSchemaService",
        "Label": 1,
        "MethodName": "testWfSchemaV25",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp app = parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-schema-valid-global.xml\", -1), new org.apache.hadoop.conf.Configuration());\n    java.lang.String d = app.getNode(\"d\").getConf();\n    java.lang.String expectedD = \"<map-reduce xmlns=\\\"uri:oozie:workflow:0.4\\\">\\r\\n\" + (((((((((((((((((((((((\"  <prepare>\\r\\n\" + \"    <delete path=\\\"/tmp\\\" />\\r\\n\") + \"    <mkdir path=\\\"/tmp\\\" />\\r\\n\") + \"  </prepare>\\r\\n\") + \"  <streaming>\\r\\n\") + \"    <mapper>/mycat.sh</mapper>\\r\\n\") + \"    <reducer>/mywc.sh</reducer>\\r\\n\") + \"  </streaming>\\r\\n\") + \"  <job-xml>/tmp</job-xml>\\r\\n\") + \"  <file>/tmp</file>\\r\\n\") + \"  <archive>/tmp</archive>\\r\\n\") + \"  <job-tracker>foo</job-tracker>\\r\\n\") + \"  <name-node>bar</name-node>\\r\\n\") + \"  <configuration>\\r\\n\") + \"    <property>\\r\\n\") + \"      <name>a</name>\\r\\n\") + \"      <value>A</value>\\r\\n\") + \"    </property>\\r\\n\") + \"    <property>\\r\\n\") + \"      <name>b</name>\\r\\n\") + \"      <value>B</value>\\r\\n\") + \"    </property>\\r\\n\") + \"  </configuration>\\r\\n\") + \"</map-reduce>\");\n    junit.framework.Assert.assertEquals(expectedD.replaceAll(\" \", \"\"), d.replaceAll(\" \", \"\"));\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testParserGlobal",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    prepareOozieConfDir(\"oozie-site2.xml\");\n    setSystemProperty(\"oozie.dummy\", \"OVERRIDE\");\n    org.apache.oozie.service.ConfigurationService cl = new org.apache.oozie.service.ConfigurationService();\n    cl.init(null);\n    junit.framework.Assert.assertEquals(\"OVERRIDE\", cl.getConf().get(\"oozie.dummy\"));\n    cl.destroy();\n}",
        "ClassName": "TestConfigurationService",
        "Label": 1,
        "MethodName": "testSysPropOverride",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path appJarPath = new org.apache.hadoop.fs.Path(\"test-extra.jar\");\n    java.io.File jarFile = org.apache.oozie.util.IOUtils.createJar(new java.io.File(getTestCaseDir()), appJarPath.getName(), org.apache.oozie.action.hadoop.LauncherMainTester2.class);\n    java.io.InputStream is = new java.io.FileInputStream(jarFile);\n    java.io.OutputStream os = getFileSystem().create(new org.apache.hadoop.fs.Path(getAppPath(), appJarPath.toString()));\n    org.apache.oozie.util.IOUtils.copyStream(is, os);\n    java.lang.String actionXml = ((((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<main-class>\") + org.apache.oozie.action.hadoop.LauncherMainTester2.class.getName()) + \"</main-class>\") + \"<file>\") + appJarPath.toString()) + \"</file>\") + \"</java>\";\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml, null);\n    final org.apache.hadoop.mapred.RunningJob runningJob = submitAction(context);\n    org.apache.oozie.action.ActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    junit.framework.Assert.assertFalse(ae.isCompleted(context.getAction().getExternalStatus()));\n    waitFor(60 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return runningJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(runningJob.isSuccessful());\n    ae.check(context, context.getAction());\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", context.getAction().getExternalStatus());\n    junit.framework.Assert.assertNull(context.getAction().getData());\n    ae.end(context, context.getAction());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, context.getAction().getStatus());\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testAdditionalJarSubmitOK",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.TestCallableQueueService.EXEC_ORDER = new java.util.concurrent.atomic.AtomicLong();\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.CallableQueueService.CONF_THREADS, \"1\");\n    setSystemProperty(org.apache.oozie.service.CallableQueueService.CONF_CALLABLE_INTERRUPT_TYPES, \"testKill\");\n    setSystemProperty(org.apache.oozie.service.CallableQueueService.CONF_CALLABLE_INTERRUPT_MAP_MAX_SIZE, \"0\");\n    new org.apache.oozie.service.Services().init();\n    org.apache.oozie.service.CallableQueueService queueservice = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    final org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand initialCallable = new org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand(\"initialKey\", \"initialType\", 2, 100, \"initialLockKey\");\n    final java.util.List<org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand> callables = new java.util.ArrayList<org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand>();\n    for (int i = 0; i < 10; i++) {\n        callables.add(new org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand(\"key\" + i, \"type\" + i, 1, 100, \"lockKey\"));\n    }\n    final org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand intCallable = new org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand(\"keyInt\", \"testKill\", 0, 100, \"lockKey\");\n    queueservice.queue(initialCallable);\n    for (int i = 0; i < 10; i++) {\n        queueservice.queue(callables.get(i));\n    }\n    queueservice.queue(intCallable);\n    waitFor(5000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            boolean retValue = (initialCallable.executed != 0) && (intCallable.executed != 0);\n            for (org.apache.oozie.service.TestCallableQueueService.ExtendedXCommand c : callables) {\n                retValue = retValue && (c.executed != 0);\n            }\n            return retValue;\n        }\n    });\n    junit.framework.Assert.assertTrue(initialCallable.executed > 0);\n    junit.framework.Assert.assertTrue(intCallable.executed > 0);\n    junit.framework.Assert.assertTrue(intCallable.executed > callables.get(5).executed);\n}",
        "ClassName": "TestCallableQueueService",
        "Label": 1,
        "MethodName": "testMaxInterruptMapSize",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.HadoopAccessorService.SUPPORTED_FILESYSTEMS, \"*\");\n    new org.apache.oozie.service.Services().init();\n    try {\n        ae.validatePath(new org.apache.hadoop.fs.Path(\"anyfs://bla\"), true);\n    } catch (org.apache.oozie.action.ActionExecutorException ex) {\n        junit.framework.Assert.fail(\"Wildcard indicates ALL schemes will be allowed. This should pass\");\n    }\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testFileSchemeWildcard",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    try {\n        new org.apache.oozie.command.bundle.BundleStartXCommand(\"bundle-id\").call();\n        junit.framework.Assert.fail(\"Job doesn't exist. Should fail.\");\n    } catch (org.apache.oozie.command.CommandException ce) {\n    }\n}",
        "ClassName": "TestBundleStartXCommand",
        "Label": 1,
        "MethodName": "testBundleStartNegative1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.ParamChecker.checkDateOozieTZ(\"2009-02-01T01:00Z\", \"test\");\n    try {\n        org.apache.oozie.util.ParamChecker.checkDateOozieTZ(\"2009-02-01T01:00\", \"test\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception ex) {\n    }\n    try {\n        org.apache.oozie.util.ParamChecker.checkDateOozieTZ(\"2009-02-01U01:00Z\", \"test\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestParamChecker",
        "Label": 1,
        "MethodName": "testCheckUTC",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.XConfiguration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, \"appPath\");\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, \"user\");\n    conf.set(\"a\", \"A\");\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"name\", \"<workflow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, conf, \"wfId\");\n    org.apache.oozie.WorkflowJobBean wf = new org.apache.oozie.WorkflowJobBean();\n    wf.setId(job.getId());\n    wf.setAppName(\"name\");\n    wf.setAppPath(\"appPath\");\n    wf.setUser(\"user\");\n    wf.setGroup(\"group\");\n    wf.setWorkflowInstance(job);\n    wf.setRun(2);\n    wf.setProtoActionConf(conf.toXmlString());\n    org.apache.oozie.WorkflowActionBean action = new org.apache.oozie.WorkflowActionBean();\n    action.setId(\"actionId\");\n    action.setName(\"actionName\");\n    action.setErrorInfo(\"ec\", \"em\");\n    action.setData(\"b=B\");\n    action.setExternalId(\"ext\");\n    action.setTrackerUri(\"tracker\");\n    action.setExternalStatus(\"externalStatus\");\n    org.apache.oozie.util.ELEvaluator eval = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.ELService.class).createEvaluator(\"workflow\");\n    org.apache.oozie.DagELFunctions.configureEvaluator(eval, wf, action);\n    junit.framework.Assert.assertEquals(\"wfId\", eval.evaluate(\"${wf:id()}\", java.lang.String.class));\n    junit.framework.Assert.assertEquals(\"name\", eval.evaluate(\"${wf:name()}\", java.lang.String.class));\n    junit.framework.Assert.assertEquals(\"appPath\", eval.evaluate(\"${wf:appPath()}\", java.lang.String.class));\n    junit.framework.Assert.assertEquals(\"A\", eval.evaluate(\"${wf:conf('a')}\", java.lang.String.class));\n    junit.framework.Assert.assertEquals(\"A\", eval.evaluate(\"${a}\", java.lang.String.class));\n    junit.framework.Assert.assertEquals(\"user\", eval.evaluate(\"${wf:user()}\", java.lang.String.class));\n    junit.framework.Assert.assertEquals(\"group\", eval.evaluate(\"${wf:group()}\", java.lang.String.class));\n    junit.framework.Assert.assertTrue(eval.evaluate(\"${wf:callback('XX')}\", java.lang.String.class).contains(\"id=actionId\"));\n    junit.framework.Assert.assertTrue(eval.evaluate(\"${wf:callback('XX')}\", java.lang.String.class).contains(\"status=XX\"));\n    junit.framework.Assert.assertTrue(eval.evaluate(\"${wf:callback('XX')}\", java.lang.String.class).contains(\"status=XX\"));\n    junit.framework.Assert.assertEquals(2, ((int) (eval.evaluate(\"${wf:run()}\", java.lang.Integer.class))));\n    action.setStatus(org.apache.oozie.client.WorkflowAction.Status.ERROR);\n    java.lang.System.out.println(\"WorkflowInstance \" + wf.getWorkflowInstance().getStatus().toString());\n    org.apache.oozie.workflow.WorkflowInstance wfInstance = wf.getWorkflowInstance();\n    org.apache.oozie.DagELFunctions.setActionInfo(wfInstance, action);\n    wf.setWorkflowInstance(wfInstance);\n    junit.framework.Assert.assertEquals(\"actionName\", eval.evaluate(\"${wf:lastErrorNode()}\", java.lang.String.class));\n    junit.framework.Assert.assertEquals(\"ec\", eval.evaluate(\"${wf:errorCode('actionName')}\", java.lang.String.class));\n    junit.framework.Assert.assertEquals(\"em\", eval.evaluate(\"${wf:errorMessage('actionName')}\", java.lang.String.class));\n    junit.framework.Assert.assertEquals(\"B\", eval.evaluate(\"${wf:actionData('actionName')['b']}\", java.lang.String.class));\n    java.lang.String expected = org.apache.oozie.util.XmlUtils.escapeCharsForXML(\"{\\\"b\\\":\\\"B\\\"}\");\n    junit.framework.Assert.assertEquals(expected, eval.evaluate(\"${toJsonStr(wf:actionData('actionName'))}\", java.lang.String.class));\n    expected = org.apache.oozie.util.XmlUtils.escapeCharsForXML(\"b=B\");\n    junit.framework.Assert.assertTrue(eval.evaluate(\"${toPropertiesStr(wf:actionData('actionName'))}\", java.lang.String.class).contains(expected));\n    conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(\"b\", \"B\");\n    expected = org.apache.oozie.util.XmlUtils.escapeCharsForXML(org.apache.oozie.util.XmlUtils.prettyPrint(conf).toString());\n    junit.framework.Assert.assertTrue(eval.evaluate(\"${toConfigurationStr(wf:actionData('actionName'))}\", java.lang.String.class).contains(expected));\n    junit.framework.Assert.assertEquals(\"ext\", eval.evaluate(\"${wf:actionExternalId('actionName')}\", java.lang.String.class));\n    junit.framework.Assert.assertEquals(\"tracker\", eval.evaluate(\"${wf:actionTrackerUri('actionName')}\", java.lang.String.class));\n    junit.framework.Assert.assertEquals(\"externalStatus\", eval.evaluate(\"${wf:actionExternalStatus('actionName')}\", java.lang.String.class));\n}",
        "ClassName": "TestDagELFunctions",
        "Label": 1,
        "MethodName": "testFunctions",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-instances\");\n    java.lang.String expr = \"${coord:future(1, 10)}\";\n    junit.framework.Assert.assertEquals(expr, org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testPh1Future",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.ELEvaluator.Context support = new org.apache.oozie.util.ELEvaluator.Context();\n    support.setVariable(\"a\", \"A\");\n    support.addFunction(\"a\", \"a\", org.apache.oozie.util.TestELEvaluator.functionA);\n    org.apache.oozie.util.ELEvaluator evaluator = new org.apache.oozie.util.ELEvaluator(support);\n    junit.framework.Assert.assertNull(org.apache.oozie.util.ELEvaluator.getCurrent());\n    junit.framework.Assert.assertEquals(\"a\", evaluator.evaluate(\"${a:a()}\", java.lang.String.class));\n    junit.framework.Assert.assertNull(org.apache.oozie.util.ELEvaluator.getCurrent());\n}",
        "ClassName": "TestELEvaluator",
        "Label": 1,
        "MethodName": "testCurrent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"one\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"end\" }))).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, job.getStatus());\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.size());\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.exits.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.kills.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.fails.size());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testSynchSimple",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v0/admin/*\", org.apache.oozie.servlet.V0AdminServlet.class, org.apache.oozie.servlet.TestAdminServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.net.URL url = createURL(org.apache.oozie.client.rest.RestConstants.ADMIN_INSTRUMENTATION_RESOURCE, java.util.Collections.EMPTY_MAP);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertTrue(json.containsKey(org.apache.oozie.client.rest.JsonTags.INSTR_VARIABLES));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestAdminServlet",
        "Label": 1,
        "MethodName": "testInstrumentation",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    conf.set(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, org.apache.hadoop.util.StringUtils.join(\",\", java.util.Arrays.asList(org.apache.oozie.service.GroupsService.class.getName(), org.apache.oozie.service.ProxyUserService.class.getName())));\n    services.init();\n    try {\n        org.apache.oozie.service.ProxyUserService proxyUser = services.get(org.apache.oozie.service.ProxyUserService.class);\n        junit.framework.Assert.assertNotNull(proxyUser);\n        proxyUser.validate(null, \"localhost\", \"bar\");\n        junit.framework.Assert.fail();\n    } catch (java.lang.IllegalArgumentException ex) {\n        junit.framework.Assert.assertTrue(ex.getMessage().contains(\"oozie.service.ProxyUserService.proxyuser.#USER#.hosts\"));\n        junit.framework.Assert.assertTrue(ex.getMessage().contains(\"oozie.service.ProxyUserService.proxyuser.#USER#.groups\"));\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail(ex.toString());\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestProxyUserService",
        "Label": 1,
        "MethodName": "testNullProxyUser",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(false, true);\n    org.apache.oozie.service.AuthorizationService as = services.get(org.apache.oozie.service.AuthorizationService.class);\n    junit.framework.Assert.assertNotNull(as);\n    junit.framework.Assert.assertNotNull(as.getDefaultGroup(org.apache.oozie.test.XTestCase.getTestUser()));\n}",
        "ClassName": "TestAuthorizationService",
        "Label": 1,
        "MethodName": "testDefaultGroup",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            org.apache.oozie.client.OozieClient.SYSTEM_MODE systemMode = wc.getSystemMode();\n            junit.framework.Assert.assertEquals(systemMode, org.apache.oozie.client.OozieClient.SYSTEM_MODE.NORMAL);\n            wc.setSystemMode(org.apache.oozie.client.OozieClient.SYSTEM_MODE.SAFEMODE);\n            systemMode = wc.getSystemMode();\n            junit.framework.Assert.assertEquals(systemMode, org.apache.oozie.client.OozieClient.SYSTEM_MODE.SAFEMODE);\n            wc.setSystemMode(org.apache.oozie.client.OozieClient.SYSTEM_MODE.NOWEBSERVICE);\n            systemMode = wc.getSystemMode();\n            junit.framework.Assert.assertEquals(systemMode, org.apache.oozie.client.OozieClient.SYSTEM_MODE.NOWEBSERVICE);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testSafeMode",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String configPath = \"test-oozie-default.xml\";\n    java.io.InputStream is = org.apache.oozie.util.IOUtils.getResourceAsStream(configPath, -1);\n    org.apache.oozie.util.XConfiguration conf = new org.apache.oozie.util.XConfiguration(is);\n    junit.framework.Assert.assertEquals(\"DEFAULT\", conf.get(\"oozie.dummy\"));\n}",
        "ClassName": "TestXConfiguration",
        "Label": 1,
        "MethodName": "testFromStream",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    addRecordToCoordActionTable(job.getId(), actionNum++, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    _testPendingFalseCount(job.getId(), 1);\n    addRecordToCoordActionTable(job.getId(), actionNum++, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    _testPendingFalseCount(job.getId(), 3);\n}",
        "ClassName": "TestCoordActionsPendingFalseCountGetJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionsPendingFalseCountGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/callback\", org.apache.oozie.servlet.CallbackServlet.class, true, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            java.net.URL url = createURL(\"\", java.util.Collections.EMPTY_MAP);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode());\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(\"id\", \"error\");\n            params.put(\"status\", \"error\");\n            url = createURL(\"\", params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setDoOutput(true);\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"content-type\", org.apache.oozie.client.rest.RestConstants.TEXT_CONTENT_TYPE);\n            java.util.Properties props = new java.util.Properties();\n            props.setProperty(\"a\", \"A\");\n            props.store(conn.getOutputStream(), \"UTF-8\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode());\n            org.apache.oozie.servlet.MockDagEngineService.reset();\n            params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(\"id\", \"ok\");\n            params.put(\"status\", \"ok\");\n            url = createURL(\"\", params);\n            conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setDoOutput(true);\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"content-type\", org.apache.oozie.client.rest.RestConstants.TEXT_CONTENT_TYPE);\n            props = new java.util.Properties();\n            props.setProperty(\"a\", \"A\");\n            props.store(conn.getOutputStream(), \"UTF-8\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertEquals(props, org.apache.oozie.servlet.MockDagEngineService.properties);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestCallbackServlet",
        "Label": 1,
        "MethodName": "testCallbackPost",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String configPath = \"test-oozie-default.xml\";\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(configPath, -1);\n    org.apache.oozie.util.XConfiguration conf = new org.apache.oozie.util.XConfiguration(reader);\n    junit.framework.Assert.assertEquals(\"DEFAULT\", conf.get(\"oozie.dummy\"));\n}",
        "ClassName": "TestXConfiguration",
        "Label": 1,
        "MethodName": "testFromReader",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-data\");\n    java.lang.String expr = \"${coord:tableIn('ABC')}\";\n    eval.setVariable(\"oozie.dataname.ABC\", \"data-in\");\n    junit.framework.Assert.assertEquals(\"${coord:tableIn('ABC')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:tableIn('ABCD')}\";\n    try {\n        junit.framework.Assert.assertEquals(\"${coord:tableIn('ABCD')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n        junit.framework.Assert.fail(\"should throw exception because Data-in ABCD is not defiend\");\n    } catch (java.lang.Exception ex) {\n    }\n    expr = \"${coord:tableOut('ABC')}\";\n    eval.setVariable(\"oozie.dataname.ABC\", \"data-out\");\n    junit.framework.Assert.assertEquals(\"${coord:tableOut('ABC')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:tableOut('ABCD')}\";\n    try {\n        junit.framework.Assert.assertEquals(\"${coord:tableOut('ABCD')}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n        junit.framework.Assert.fail(\"should throw exception because Data-out ABCD is not defiend\");\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestHCatELFunctions",
        "Label": 1,
        "MethodName": "testTablePh1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path actionDir = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    final org.apache.hadoop.mapred.RunningJob runningJob = _test(\"ex\");\n    waitFor(2000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return runningJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(runningJob.isSuccessful());\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainDone(runningJob));\n    junit.framework.Assert.assertFalse(org.apache.oozie.action.hadoop.LauncherMapper.isMainSuccessful(runningJob));\n    junit.framework.Assert.assertFalse(org.apache.oozie.action.hadoop.LauncherMapper.hasOutputData(runningJob));\n    junit.framework.Assert.assertFalse(org.apache.oozie.action.hadoop.LauncherMapper.hasIdSwap(runningJob));\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainDone(runningJob));\n    junit.framework.Assert.assertTrue(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getErrorPath(actionDir)));\n    junit.framework.Assert.assertFalse(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getIdSwapPath(actionDir)));\n    junit.framework.Assert.assertFalse(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getOutputDataPath(actionDir)));\n}",
        "ClassName": "TestLauncher",
        "Label": 1,
        "MethodName": "testException",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path mkdir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"mkdir\");\n    org.apache.hadoop.fs.Path delete = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"delete\");\n    fs.mkdirs(delete);\n    org.apache.hadoop.fs.Path source = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"source\");\n    fs.mkdirs(source);\n    org.apache.hadoop.fs.Path target = new org.apache.hadoop.fs.Path(new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"target\").toUri().getPath());\n    org.apache.hadoop.fs.Path chmod1 = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"chmod1\");\n    fs.mkdirs(chmod1);\n    org.apache.hadoop.fs.Path child1 = new org.apache.hadoop.fs.Path(chmod1, \"child1\");\n    fs.mkdirs(child1);\n    org.apache.hadoop.fs.Path chmod2 = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"chmod2\");\n    fs.mkdirs(chmod2);\n    org.apache.hadoop.fs.Path child2 = new org.apache.hadoop.fs.Path(chmod2, \"child2\");\n    fs.mkdirs(child2);\n    org.apache.hadoop.fs.Path newFile1 = new org.apache.hadoop.fs.Path(mkdir + \"newFile1\");\n    org.apache.hadoop.fs.Path newFile2 = new org.apache.hadoop.fs.Path(mkdir + \"newFile2\");\n    fs.createNewFile(newFile1);\n    java.lang.String actionXml = java.text.MessageFormat.format(\"<fs><mkdir path=''{0}''/>\" + ((((((\"<delete path=''{1}''/>\" + \"<move source=''{2}'' target=''{3}''/>\") + \"<chmod path=''{4}'' permissions=''-rwxrwxrwx''/>\") + \"<chmod path=''{5}'' permissions=''-rwxrwx---'' dir-files=''false''/>\") + \"<touchz path=''{6}''/>\") + \"<touchz path=''{7}''/>\") + \"</fs>\"), mkdir, delete, source, target, chmod1, chmod2, newFile1, newFile2);\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml);\n    org.apache.oozie.client.WorkflowAction action = context.getAction();\n    junit.framework.Assert.assertFalse(fs.exists(ae.getRecoveryPath(context)));\n    ae.start(context, action);\n    junit.framework.Assert.assertTrue(fs.exists(ae.getRecoveryPath(context)));\n    ae.check(context, context.getAction());\n    junit.framework.Assert.assertEquals(\"OK\", context.getAction().getExternalStatus());\n    junit.framework.Assert.assertNull(context.getAction().getData());\n    ae.end(context, context.getAction());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, context.getAction().getStatus());\n    junit.framework.Assert.assertFalse(fs.exists(ae.getRecoveryPath(context)));\n    junit.framework.Assert.assertTrue(fs.exists(mkdir));\n    junit.framework.Assert.assertFalse(fs.exists(delete));\n    junit.framework.Assert.assertFalse(fs.exists(source));\n    junit.framework.Assert.assertTrue(fs.exists(target));\n    junit.framework.Assert.assertTrue(fs.exists(newFile1));\n    junit.framework.Assert.assertTrue(fs.exists(newFile2));\n    junit.framework.Assert.assertEquals(\"rwxrwxrwx\", fs.getFileStatus(chmod1).getPermission().toString());\n    junit.framework.Assert.assertNotSame(\"rwxrwxrwx\", fs.getFileStatus(child1).getPermission().toString());\n    junit.framework.Assert.assertEquals(\"rwxrwx---\", fs.getFileStatus(chmod2).getPermission().toString());\n    junit.framework.Assert.assertNotSame(\"rwxrwx---\", fs.getFileStatus(child2).getPermission().toString());\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testSubmit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_STATES_WITHOUT_ERROR, \"false\");\n    services = new org.apache.oozie.service.Services();\n    setClassesToBeExcluded(services.getConf(), excludedServices);\n    services.init();\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean job = createCoordJob(org.apache.oozie.client.Job.Status.PAUSEDWITHERROR, start, end, true, false, 3);\n    job.setPauseTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T01:00Z\"));\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.executor.jpa.CoordJobInsertJPAExecutor coordInsertCmd = new org.apache.oozie.executor.jpa.CoordJobInsertJPAExecutor(job);\n    jpaService.execute(coordInsertCmd);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    final java.lang.String jobId = job.getId();\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(jobId));\n            return coordJob.isPending() == false;\n        }\n    });\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertFalse(job.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSED, job.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServicePausedWithError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        org.apache.oozie.BundleEngine.parseBulkFilter(\"xx=yy=zz\");\n        junit.framework.Assert.fail(\"BundleEngineException expected.\");\n    } catch (org.apache.oozie.BundleEngineException bee) {\n        junit.framework.Assert.assertEquals(bee.toString(), org.apache.oozie.ErrorCode.E0420, bee.getErrorCode());\n    }\n    try {\n        org.apache.oozie.BundleEngine.parseBulkFilter(\"winniethepooh\");\n        junit.framework.Assert.fail(\"BundleEngineException expected.\");\n    } catch (org.apache.oozie.BundleEngineException bee) {\n        junit.framework.Assert.assertEquals(bee.toString(), org.apache.oozie.ErrorCode.E0420, bee.getErrorCode());\n    }\n    try {\n        org.apache.oozie.BundleEngine.parseBulkFilter(org.apache.oozie.client.rest.BulkResponseImpl.BULK_FILTER_BUNDLE_NAME + \"=aaa, ,bbb\");\n        junit.framework.Assert.fail(\"BundleEngineException expected.\");\n    } catch (org.apache.oozie.BundleEngineException bee) {\n        junit.framework.Assert.assertEquals(bee.toString(), org.apache.oozie.ErrorCode.E0420, bee.getErrorCode());\n    }\n    try {\n        org.apache.oozie.BundleEngine.parseBulkFilter(org.apache.oozie.client.rest.BulkResponseImpl.BULK_FILTER_START_CREATED_EPOCH + \"=blah-blah\");\n        junit.framework.Assert.fail(\"BundleEngineException expected.\");\n    } catch (org.apache.oozie.BundleEngineException bee) {\n        junit.framework.Assert.assertEquals(bee.toString(), org.apache.oozie.ErrorCode.E0420, bee.getErrorCode());\n    }\n    try {\n        org.apache.oozie.BundleEngine.parseBulkFilter(org.apache.oozie.client.rest.BulkResponseImpl.BULK_FILTER_STATUS + \"=foo\");\n        junit.framework.Assert.fail(\"BundleEngineException expected.\");\n    } catch (org.apache.oozie.BundleEngineException bee) {\n        junit.framework.Assert.assertEquals(bee.toString(), org.apache.oozie.ErrorCode.E0420, bee.getErrorCode());\n    }\n    try {\n        org.apache.oozie.BundleEngine.parseBulkFilter(org.apache.oozie.client.rest.BulkResponseImpl.BULK_FILTER_LEVEL + \"=foo\");\n        junit.framework.Assert.fail(\"BundleEngineException expected.\");\n    } catch (org.apache.oozie.BundleEngineException bee) {\n        junit.framework.Assert.assertEquals(bee.toString(), org.apache.oozie.ErrorCode.E0305, bee.getErrorCode());\n    }\n}",
        "ClassName": "TestBundleEngineSimple",
        "Label": 1,
        "MethodName": "testParseBulkFilterNegative",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.BundleJobBean bundleJobBean = xDataTestCase.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    runTest(\"/v1/job/*\", org.apache.oozie.servlet.V1JobServlet.class, org.apache.oozie.servlet.TestV1JobServletBundleEngine.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            org.apache.oozie.servlet.MockCoordinatorEngineService.reset();\n            java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>();\n            params.put(org.apache.oozie.client.rest.RestConstants.JOB_SHOW_PARAM, org.apache.oozie.client.rest.RestConstants.JOB_SHOW_DEFINITION);\n            final java.lang.String id = bundleJobBean.getId();\n            java.net.URL url = createURL(id, params);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            java.lang.String ct = conn.getHeaderField(\"content-type\");\n            junit.framework.Assert.assertTrue(ct.startsWith(org.apache.oozie.client.rest.RestConstants.XML_CONTENT_TYPE));\n            java.lang.String response = org.apache.oozie.util.IOUtils.getReaderAsString(new java.io.InputStreamReader(conn.getInputStream()), -1);\n            junit.framework.Assert.assertTrue((response != null) && (response.length() > 0));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1JobServletBundleEngine",
        "Label": 1,
        "MethodName": "testBundleEngineGetDefinition",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        org.apache.oozie.util.ELEvaluator.Context support = new org.apache.oozie.util.ELEvaluator.Context();\n        support.addFunction(\"a\", \"a\", org.apache.oozie.util.TestELEvaluator.functionError);\n        org.apache.oozie.util.ELEvaluator evaluator = new org.apache.oozie.util.ELEvaluator(support);\n        evaluator.evaluate(\"${a:a()}\", java.lang.String.class);\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.util.ELEvaluationException ex) {\n    } catch (javax.servlet.jsp.el.ELException ex) {\n        junit.framework.Assert.fail();\n    }\n}",
        "ClassName": "TestELEvaluator",
        "Label": 1,
        "MethodName": "testFunctionELEvaluationError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean coordJob = new org.apache.oozie.CoordinatorJobBean();\n    coordJob.setId((\"0000000\" + new java.util.Date().getTime()) + \"-TestCoordActionInputCheckXCommand-C\");\n    coordJob.setAppName(\"testApp\");\n    coordJob.setAppPath(\"testAppPath\");\n    coordJob.setStatus(org.apache.oozie.client.Job.Status.RUNNING);\n    coordJob.setCreatedTime(new java.util.Date());\n    coordJob.setLastModifiedTime(new java.util.Date());\n    coordJob.setUser(\"testUser\");\n    coordJob.setGroup(\"testGroup\");\n    coordJob.setAuthToken(\"notoken\");\n    coordJob.setTimeZone(\"UTC\");\n    coordJob.setTimeUnit(org.apache.oozie.client.CoordinatorJob.Timeunit.DAY);\n    coordJob.setMatThrottling(2);\n    try {\n        coordJob.setStartTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T23:59\" + TZ));\n        coordJob.setEndTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-02T23:59\" + TZ));\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Could not set Date/time\");\n    }\n    org.apache.oozie.util.XConfiguration jobConf = new org.apache.oozie.util.XConfiguration();\n    jobConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    java.lang.String confStr = jobConf.toXmlString(false);\n    coordJob.setConf(confStr);\n    java.lang.String wfXml = org.apache.oozie.util.IOUtils.getResourceAsString(\"wf-no-op.xml\", -1);\n    writeToFile(wfXml, getFsTestCaseDir(), \"workflow.xml\");\n    java.lang.String appXml = (((\"<coordinator-app xmlns=\\'uri:oozie:coordinator:0.2\\' name=\\'NAME\\' frequency=\\\"1\\\" start=\\'2009-02-01T01:00\" + TZ) + \"' end='2009-02-03T23:59\") + TZ) + \"' timezone='UTC' freq_timeunit='DAY' end_of_duration='NONE'>\";\n    appXml += \"<output-events>\";\n    appXml += \"<data-out name='LOCAL_A' dataset='local_a'>\";\n    appXml += (\"<dataset name='local_a' frequency='7' initial-instance='2009-01-01T01:00\" + TZ) + \"' timezone='UTC' freq_timeunit='DAY' end_of_duration='NONE'>\";\n    appXml += (\"<uri-template>file://\" + getFsTestCaseDir()) + \"/${YEAR}/${MONTH}/${DAY}</uri-template>\";\n    appXml += \"</dataset>\";\n    appXml += \"<start-instance>${coord:current(-3)}</start-instance>\";\n    appXml += \"<instance>${coord:current(0)}</instance>\";\n    appXml += \"</data-out>\";\n    appXml += \"</output-events>\";\n    appXml += \"<action>\";\n    appXml += \"<workflow>\";\n    appXml += (\"<app-path>\" + getFsTestCaseDir()) + \"/workflow.xml</app-path>\";\n    appXml += \"</workflow>\";\n    appXml += \"</action>\";\n    appXml += \"</coordinator-app>\";\n    coordJob.setJobXml(appXml);\n    coordJob.setLastActionNumber(0);\n    coordJob.setFrequency(1);\n    coordJob.setConcurrency(1);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    if (jpaService != null) {\n        try {\n            jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobInsertJPAExecutor(coordJob));\n        } catch (org.apache.oozie.executor.jpa.JPAExecutorException e) {\n            throw new org.apache.oozie.command.CommandException(e);\n        }\n    } else {\n        junit.framework.Assert.fail(\"Unable to insert the test job record to table\");\n    }\n    new org.apache.oozie.command.coord.CoordMaterializeTransitionXCommand(coordJob.getId(), 3600).call();\n    new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(coordJob.getId() + \"@1\", coordJob.getId()).call();\n    org.apache.oozie.CoordinatorActionBean action = null;\n    try {\n        jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n        action = jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordJob.getId() + \"@1\"));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException se) {\n        junit.framework.Assert.fail(((\"Action ID \" + coordJob.getId()) + \"@1\") + \" was not stored properly in db\");\n    }\n    junit.framework.Assert.assertEquals(action.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.READY);\n}",
        "ClassName": "TestCoordActionInputCheckXCommand",
        "Label": 1,
        "MethodName": "testNoDatasetDependency",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.lang.String wfId = \"workflow-1\";\n    org.apache.oozie.sla.SLACalculatorBean bean1 = _createSLACalcBean(wfId, false, false);\n    cal.setTime(new java.util.Date());\n    cal.add(java.util.Calendar.DAY_OF_MONTH, -2);\n    java.util.Date expStart = cal.getTime();\n    cal.add(java.util.Calendar.DAY_OF_MONTH, -1);\n    java.util.Date expEnd = cal.getTime();\n    java.util.Date actStart = new java.util.Date();\n    cal.add(java.util.Calendar.DAY_OF_MONTH, 2);\n    java.util.Date actEnd = cal.getTime();\n    org.apache.oozie.sla.SLASummaryBean bean2 = _createSLASummaryBean(wfId, \"RUNNING\", org.apache.oozie.client.event.SLAEvent.EventStatus.START_MISS, expStart, expEnd, 1000, actStart, actEnd, 2000);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> list = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    list.add(bean1);\n    list.add(bean2);\n    org.apache.oozie.executor.jpa.sla.SLACalculationInsertUpdateJPAExecutor writeCmd = new org.apache.oozie.executor.jpa.sla.SLACalculationInsertUpdateJPAExecutor();\n    writeCmd.setInsertList(list);\n    jpaService.execute(writeCmd);\n    org.apache.oozie.executor.jpa.sla.SLACalculatorGetJPAExecutor readCmd1 = new org.apache.oozie.executor.jpa.sla.SLACalculatorGetJPAExecutor(wfId);\n    org.apache.oozie.sla.SLACalculatorBean scBean = jpaService.execute(readCmd1);\n    junit.framework.Assert.assertNotNull(scBean);\n    junit.framework.Assert.assertEquals(wfId, scBean.getJobId());\n    junit.framework.Assert.assertFalse(scBean.isStartProcessed());\n    junit.framework.Assert.assertFalse(scBean.isEndProcessed());\n    org.apache.oozie.executor.jpa.sla.SLASummaryGetJPAExecutor readCmd2 = new org.apache.oozie.executor.jpa.sla.SLASummaryGetJPAExecutor(wfId);\n    org.apache.oozie.sla.SLASummaryBean ssBean = jpaService.execute(readCmd2);\n    junit.framework.Assert.assertEquals(wfId, ssBean.getJobId());\n    junit.framework.Assert.assertEquals(\"RUNNING\", ssBean.getJobStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.event.SLAEvent.EventStatus.START_MISS, ssBean.getEventStatus());\n    junit.framework.Assert.assertEquals(expStart, ssBean.getExpectedStart());\n    junit.framework.Assert.assertEquals(expEnd, ssBean.getExpectedEnd());\n    junit.framework.Assert.assertEquals(1000, ssBean.getExpectedDuration());\n    junit.framework.Assert.assertEquals(actStart, ssBean.getActualStart());\n    junit.framework.Assert.assertEquals(actEnd, ssBean.getActualEnd());\n    junit.framework.Assert.assertEquals(2000, ssBean.getActualDuration());\n}",
        "ClassName": "TestSLACalculationJPAExecutor",
        "Label": 1,
        "MethodName": "testInsert",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    javax.servlet.ServletRequest request = org.mockito.Mockito.mock(javax.servlet.ServletRequest.class);\n    org.mockito.Mockito.when(request.getRemoteAddr()).thenReturn(\"localhost\");\n    javax.servlet.ServletResponse response = org.mockito.Mockito.mock(javax.servlet.ServletResponse.class);\n    final java.util.concurrent.atomic.AtomicBoolean invoked = new java.util.concurrent.atomic.AtomicBoolean();\n    javax.servlet.FilterChain chain = new javax.servlet.FilterChain() {\n        @java.lang.Override\n        public void doFilter(javax.servlet.ServletRequest servletRequest, javax.servlet.ServletResponse servletResponse) throws java.io.IOException, javax.servlet.ServletException {\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.HostnameFilter.get().contains(\"localhost\"));\n            invoked.set(true);\n        }\n    };\n    javax.servlet.Filter filter = new org.apache.oozie.servlet.HostnameFilter();\n    filter.init(null);\n    junit.framework.Assert.assertNull(org.apache.oozie.servlet.HostnameFilter.get());\n    filter.doFilter(request, response, chain);\n    junit.framework.Assert.assertTrue(invoked.get());\n    junit.framework.Assert.assertNull(org.apache.oozie.servlet.HostnameFilter.get());\n    filter.destroy();\n}",
        "ClassName": "TestHostnameFilter",
        "Label": 1,
        "MethodName": "testHostname",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String[] args = new java.lang.String[]{ \"version\" };\n    junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testClientBuildVersion",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setSystemProperty(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, org.apache.oozie.service.TestServices.SERVICES);\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    services.init();\n    try {\n        junit.framework.Assert.assertEquals(org.apache.oozie.service.TestServices.S1.class, services.get(org.apache.oozie.service.TestServices.S1.class).getClass());\n        junit.framework.Assert.assertEquals(org.apache.oozie.service.TestServices.S2.class, services.get(org.apache.oozie.service.TestServices.S2.class).getClass());\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestServices",
        "Label": 1,
        "MethodName": "testServiceExtLoading",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/admin/*\", org.apache.oozie.servlet.V1AdminServlet.class, org.apache.oozie.servlet.TestV1AdminServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.net.URL url = createURL(org.apache.oozie.client.rest.RestConstants.ADMIN_STATUS_RESOURCE, java.util.Collections.EMPTY_MAP);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.OozieClient.SYSTEM_MODE.NORMAL.toString(), json.get(org.apache.oozie.client.rest.JsonTags.OOZIE_SYSTEM_MODE));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1AdminServlet",
        "Label": 1,
        "MethodName": "testStatus",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n}",
        "ClassName": "TestCoordELEvaluator",
        "Label": 1,
        "MethodName": "testCleanup",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUSPENDED, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.SUSPENDED);\n    try {\n        new org.apache.oozie.command.bundle.BundlePauseXCommand(job).call();\n        junit.framework.Assert.fail(\"should not reach here.\");\n    } catch (java.lang.Exception ex) {\n    }\n}",
        "ClassName": "TestBundlePauseUnpauseXCommand",
        "Label": 1,
        "MethodName": "testBundlePauseUnpauseNeg1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final org.apache.oozie.SLAEventBean bean = new org.apache.oozie.SLAEventBean();\n    set(bean);\n    bean.setJobStatus(org.apache.oozie.client.SLAEvent.Status.CREATED);\n    org.jdom.Element el = bean.toXml();\n    java.lang.String actualXml = org.apache.oozie.util.XmlUtils.prettyPrint(el).toString();\n    java.lang.System.out.println(actualXml);\n    junit.framework.Assert.assertEquals(\"<event>\\r\\n\" + ((((((((((((((((((((((\"  <sequence-id>1</sequence-id>\\r\\n\" + \"  <registration>\\r\\n\") + \"    <sla-id>si</sla-id>\\r\\n\") + \"    <app-type>WORKFLOW_ACTION</app-type>\\r\\n\") + \"    <app-name>an</app-name>\\r\\n\") + \"    <user>u</user>\\r\\n\") + \"    <group>gn</group>\\r\\n\") + \"    <parent-sla-id>psi</parent-sla-id>\\r\\n\") + \"    <expected-start>1970-01-01T00:00Z</expected-start>\\r\\n\") + \"    <expected-end>1970-01-01T00:00Z</expected-end>\\r\\n\") + \"    <status-timestamp>1970-01-01T00:00Z</status-timestamp>\\r\\n\") + \"    <notification-msg>nm</notification-msg>\\r\\n\") + \"    <alert-contact>ac</alert-contact>\\r\\n\") + \"    <dev-contact>dc</dev-contact>\\r\\n\") + \"    <qa-contact>qc</qa-contact>\\r\\n\") + \"    <se-contact>sc</se-contact>\\r\\n\") + \"    <alert-percentage>ap</alert-percentage>\\r\\n\") + \"    <alert-frequency>af</alert-frequency>\\r\\n\") + \"    <upstream-apps>ua</upstream-apps>\\r\\n\") + \"    <job-status>CREATED</job-status>\\r\\n\") + \"    <job-data>jd</job-data>\\r\\n\") + \"  </registration>\\r\\n\") + \"</event>\"), actualXml);\n}",
        "ClassName": "TestSLAEventBean",
        "Label": 1,
        "MethodName": "testToXmlRegistrationEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    final java.lang.String jobId = (\"0000000-\" + new java.util.Date().getTime()) + \"-testCoordRerun-C\";\n    final int actionNum = 1;\n    final java.lang.String actionId = (jobId + \"@\") + actionNum;\n    org.apache.oozie.store.CoordinatorStore store = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store.beginTrx();\n    try {\n        addRecordToJobTable(jobId, store, org.apache.oozie.client.Job.Status.SUCCEEDED);\n        addRecordToActionTable(jobId, actionNum, actionId, store, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-rerun-action1.xml\");\n        store.commitTrx();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Could not update db.\");\n    } finally {\n        store.closeTrx();\n    }\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"coord\");\n    java.lang.String inputDir = appPath.toString() + \"/coord-input/2010/07/09/01/00\";\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    fs.mkdirs(new org.apache.hadoop.fs.Path(inputDir));\n    fs.create(new org.apache.hadoop.fs.Path(inputDir, \"_SUCCESS\"), true);\n    final org.apache.oozie.client.OozieClient coordClient = org.apache.oozie.local.LocalOozie.getCoordClient();\n    coordClient.reRunCoord(jobId, org.apache.oozie.client.rest.RestConstants.JOB_COORD_RERUN_ACTION, java.lang.Integer.toString(actionNum), true, true);\n    org.apache.oozie.store.CoordinatorStore store2 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store2.beginTrx();\n    org.apache.oozie.CoordinatorActionBean action2 = store2.getCoordinatorAction(actionId, false);\n    junit.framework.Assert.assertNotSame(action2.getStatus(), org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED);\n    store2.commitTrx();\n    store2.closeTrx();\n    waitFor(120 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.client.CoordinatorAction bean = coordClient.getCoordActionInfo(actionId);\n            return (bean.getStatus() == org.apache.oozie.client.CoordinatorAction.Status.READY) || (bean.getStatus() == org.apache.oozie.client.CoordinatorAction.Status.SUBMITTED);\n        }\n    });\n    org.apache.oozie.store.CoordinatorStore store3 = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class).getStore(org.apache.oozie.store.CoordinatorStore.class);\n    store3.beginTrx();\n    org.apache.oozie.CoordinatorActionBean action3 = store3.getCoordinatorAction(actionId, false);\n    java.lang.String actionXml = action3.getActionXml();\n    java.lang.System.out.println(\"After refresh, action xml= \" + actionXml);\n    org.jdom.Element eAction = org.apache.oozie.util.XmlUtils.parseXml(actionXml);\n    java.lang.String[] urls = getActionXmlUrls(eAction, org.apache.oozie.test.XTestCase.getTestUser(), org.apache.oozie.test.XTestCase.getTestGroup());\n    store3.commitTrx();\n    store3.closeTrx();\n}",
        "ClassName": "TestCoordRerunXCommand",
        "Label": 1,
        "MethodName": "testCoordRerunRefresh",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.BundleJobBean bundleJobA = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false);\n    org.apache.oozie.BundleJobBean bundleJobB = addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false);\n    org.apache.oozie.CoordinatorJobBean coordJobA1 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.CoordinatorJobBean coordJobA2 = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    coordJobA2.setAppName(\"something_different\");\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJobA2));\n    org.apache.oozie.CoordinatorJobBean coordJobB = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.CoordinatorActionBean coordActionA1 = addRecordToCoordActionTable(coordJobA1.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean coordActionA2 = addRecordToCoordActionTable(coordJobA2.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean coordActionB = addRecordToCoordActionTable(coordJobB.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.BundleActionBean bundleActionA1 = addRecordToBundleActionTable(bundleJobA.getId(), coordJobA1.getId(), coordJobA1.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean bundleActionA2 = addRecordToBundleActionTable(bundleJobA.getId(), coordJobA2.getId(), coordJobA2.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    org.apache.oozie.BundleActionBean bundleActionB = addRecordToBundleActionTable(bundleJobB.getId(), coordJobB.getId(), coordJobB.getAppName(), 0, org.apache.oozie.client.Job.Status.SUCCEEDED);\n    java.util.List<java.lang.String> children = new java.util.ArrayList<java.lang.String>();\n    children.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsGetFromParentIdJPAExecutor(bundleJobA.getId(), 10)));\n    checkChildren(children, coordJobA1.getId(), coordJobA2.getId());\n    children = new java.util.ArrayList<java.lang.String>();\n    children.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsGetFromParentIdJPAExecutor(bundleJobB.getId(), 10)));\n    checkChildren(children, coordJobB.getId());\n}",
        "ClassName": "TestCoordJobsGetFromParentIdJPAExecutor",
        "Label": 1,
        "MethodName": "testGetBundleParent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/jobs\", org.apache.oozie.servlet.V1JobsServlet.class, false, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String bulkRequest = ((\"bundle=\" + bundleName) + \";coordinators=Coord1;\") + \"actionStatus=FAILED,KILLED;startcreatedtime=2012-07-21T00:00Z\";\n            org.json.simple.JSONArray array = _requestToServer(bulkRequest);\n            junit.framework.Assert.assertEquals(2, array.size());\n            org.json.simple.JSONObject jbundle = ((org.json.simple.JSONObject) (((org.json.simple.JSONObject) (array.get(0))).get(org.apache.oozie.client.rest.JsonTags.BULK_RESPONSE_BUNDLE)));\n            junit.framework.Assert.assertNotNull(jbundle);\n            org.json.simple.JSONObject jaction1 = ((org.json.simple.JSONObject) (((org.json.simple.JSONObject) (array.get(0))).get(org.apache.oozie.client.rest.JsonTags.BULK_RESPONSE_ACTION)));\n            org.json.simple.JSONObject jaction2 = ((org.json.simple.JSONObject) (((org.json.simple.JSONObject) (array.get(1))).get(org.apache.oozie.client.rest.JsonTags.BULK_RESPONSE_ACTION)));\n            junit.framework.Assert.assertNotNull(jaction1);\n            junit.framework.Assert.assertNotNull(jaction2);\n            junit.framework.Assert.assertEquals(jbundle.get(org.apache.oozie.client.rest.JsonTags.BUNDLE_JOB_NAME), bundleName);\n            junit.framework.Assert.assertEquals(jaction1.get(org.apache.oozie.client.rest.JsonTags.COORDINATOR_ACTION_STATUS), \"FAILED\");\n            junit.framework.Assert.assertEquals(jaction2.get(org.apache.oozie.client.rest.JsonTags.COORDINATOR_ACTION_STATUS), \"KILLED\");\n            return null;\n        }\n    });\n}",
        "ClassName": "TestBulkMonitorWebServiceAPI",
        "Label": 1,
        "MethodName": "testMultipleRecords",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"coord-multiple-input-end-instance1.xml\", -1);\n    java.io.Writer writer = new java.io.FileWriter(new java.net.URI(appPath).getPath());\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    try {\n        sc.call();\n        junit.framework.Assert.fail(\"Expected to catch errors due to incorrectly specified input data set end-instances\");\n    } catch (org.apache.oozie.command.CommandException e) {\n        junit.framework.Assert.assertEquals(sc.getJob().getStatus(), org.apache.oozie.client.Job.Status.FAILED);\n        junit.framework.Assert.assertEquals(e.getErrorCode(), org.apache.oozie.ErrorCode.E1021);\n        junit.framework.Assert.assertTrue(e.getMessage().contains(sc.COORD_INPUT_EVENTS) && e.getMessage().contains(\"Coordinator app definition should not have multiple end-instances\"));\n    }\n    reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"coord-multiple-input-end-instance2.xml\", -1);\n    writer = new java.io.FileWriter(new java.net.URI(appPath).getPath());\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    try {\n        sc.call();\n    } catch (org.apache.oozie.command.CommandException e) {\n        junit.framework.Assert.fail(\"Unexpected failure: \" + e);\n    }\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testBasicSubmitWithMultipleEndInstancesInputEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"rerun-varsub-wf.xml\", -1);\n    java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    org.apache.hadoop.fs.Path path = getFsTestCaseDir();\n    final org.apache.oozie.client.OozieClient wfClient = org.apache.oozie.local.LocalOozie.getClient();\n    java.util.Properties conf = wfClient.createConfiguration();\n    conf.setProperty(org.apache.oozie.client.OozieClient.APP_PATH, ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\");\n    conf.setProperty(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.setProperty(\"nnbase\", path.toString());\n    conf.setProperty(\"base\", conf.getProperty(\"nnbase\"));\n    conf.setProperty(\"srcDir\", \"${base}/p1\");\n    conf.setProperty(\"dstDir\", \"${base}/p2\");\n    final java.lang.String jobId1 = wfClient.submit(conf);\n    wfClient.start(jobId1);\n    wfClient.kill(jobId1);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.KILLED, wfClient.getJobInfo(jobId1).getStatus());\n    getFileSystem().delete(new org.apache.hadoop.fs.Path(path, \"p2\"), true);\n    conf.setProperty(org.apache.oozie.client.OozieClient.RERUN_FAIL_NODES, \"false\");\n    wfClient.reRun(jobId1, conf);\n    waitFor(15 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return wfClient.getJobInfo(jobId1).getStatus() == org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED;\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfClient.getJobInfo(jobId1).getStatus());\n}",
        "ClassName": "TestReRunXCommand",
        "Label": 1,
        "MethodName": "testRerunVariableSub",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    java.lang.String resourceXmlName = \"coord-action-get.xml\";\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = createCoordAction(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.WAITING, resourceXmlName, 1);\n    insertRecordCoordAction(action);\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"coord\");\n    org.apache.hadoop.conf.Configuration conf = getCoordConf(appPath);\n    _testGetForInputCheckX(action.getId(), job.getId(), org.apache.oozie.client.CoordinatorAction.Status.WAITING, org.apache.oozie.util.XmlUtils.prettyPrint(conf).toString(), 1);\n}",
        "ClassName": "TestCoordActionGetForTimeoutJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    try {\n        new org.apache.oozie.command.bundle.BundleKillXCommand(\"bundle-id\").call();\n        junit.framework.Assert.fail(\"Job doesn't exist. Should fail.\");\n    } catch (org.apache.oozie.command.CommandException ce) {\n    }\n}",
        "ClassName": "TestBundleKillXCommand",
        "Label": 1,
        "MethodName": "testBundleKillFailed",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testBundleEnginePutImpl(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_START);\n}",
        "ClassName": "TestV1JobServletBundleEngine",
        "Label": 1,
        "MethodName": "testBundleEngineStart",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.WorkflowApp app = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"testApp\", \"<workflow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration();\n    org.apache.hadoop.fs.Path appUri = new org.apache.hadoop.fs.Path(getAppPath(), \"workflow.xml\");\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, appUri.toString());\n    conf.set(org.apache.oozie.client.OozieClient.LOG_TOKEN, \"testToken\");\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    org.apache.oozie.WorkflowJobBean job = createWorkflow(app, conf, \"auth\", org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action1 = createWorkflowAction(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action2 = createWorkflowAction(job.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> insertList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    insertList.add(action1);\n    insertList.add(action2);\n    insertList.add(job);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BulkUpdateInsertJPAExecutor bulkInsertCmd = new org.apache.oozie.executor.jpa.BulkUpdateInsertJPAExecutor();\n    bulkInsertCmd.setInsertList(insertList);\n    jpaService.execute(bulkInsertCmd);\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action1.getId());\n    action1 = jpaService.execute(actionGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", action1.getStatusStr());\n    actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action2.getId());\n    action2 = jpaService.execute(actionGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", action2.getStatusStr());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(wfGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", job.getStatusStr());\n}",
        "ClassName": "TestBulkUpdateInsertJPAExecutor",
        "Label": 1,
        "MethodName": "testInserts",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/jobs\", org.apache.oozie.servlet.V1JobsServlet.class, false, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String bulkRequest = ((\"bundle=\" + bundleName) + \";coordinators=Coord1;\") + \"actionStatus=FAILED;startcreatedtime=2012-07-21T00:00Z\";\n            org.json.simple.JSONArray array = _requestToServer(bulkRequest);\n            junit.framework.Assert.assertEquals(1, array.size());\n            org.json.simple.JSONObject jbundle = ((org.json.simple.JSONObject) (((org.json.simple.JSONObject) (array.get(0))).get(org.apache.oozie.client.rest.JsonTags.BULK_RESPONSE_BUNDLE)));\n            org.json.simple.JSONObject jcoord = ((org.json.simple.JSONObject) (((org.json.simple.JSONObject) (array.get(0))).get(org.apache.oozie.client.rest.JsonTags.BULK_RESPONSE_COORDINATOR)));\n            org.json.simple.JSONObject jaction = ((org.json.simple.JSONObject) (((org.json.simple.JSONObject) (array.get(0))).get(org.apache.oozie.client.rest.JsonTags.BULK_RESPONSE_ACTION)));\n            junit.framework.Assert.assertNotNull(jbundle);\n            junit.framework.Assert.assertNotNull(jcoord);\n            junit.framework.Assert.assertNotNull(jaction);\n            junit.framework.Assert.assertEquals(jbundle.get(org.apache.oozie.client.rest.JsonTags.BUNDLE_JOB_NAME), \"BUNDLE-TEST\");\n            junit.framework.Assert.assertEquals(jcoord.get(org.apache.oozie.client.rest.JsonTags.COORDINATOR_JOB_NAME), \"Coord1\");\n            junit.framework.Assert.assertEquals(jcoord.get(org.apache.oozie.client.rest.JsonTags.COORDINATOR_JOB_STATUS), \"RUNNING\");\n            junit.framework.Assert.assertEquals(jaction.get(org.apache.oozie.client.rest.JsonTags.COORDINATOR_ACTION_STATUS), \"FAILED\");\n            junit.framework.Assert.assertEquals(jaction.get(org.apache.oozie.client.rest.JsonTags.COORDINATOR_ACTION_CREATED_TIME).toString().split(\", \")[1], org.apache.oozie.util.DateUtils.parseDateUTC(CREATE_TIME).toGMTString());\n            return null;\n        }\n    });\n}",
        "ClassName": "TestBulkMonitorWebServiceAPI",
        "Label": 1,
        "MethodName": "testSingleRecord",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            junit.framework.Assert.assertEquals(org.apache.oozie.BuildInfo.getBuildInfo().getProperty(org.apache.oozie.BuildInfo.BUILD_VERSION), wc.getServerBuildVersion());\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testServerBuildVersion",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"rerun-wf.xml\", -1);\n    java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    org.apache.hadoop.fs.Path path = getFsTestCaseDir();\n    getFileSystem().create(new org.apache.hadoop.fs.Path(path, \"p2\"));\n    final org.apache.oozie.client.OozieClient wfClient = org.apache.oozie.local.LocalOozie.getClient();\n    java.util.Properties conf = wfClient.createConfiguration();\n    conf.setProperty(org.apache.oozie.client.OozieClient.APP_PATH, ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\");\n    conf.setProperty(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.setProperty(\"nnbase\", path.toString());\n    conf.setProperty(\"base\", path.toUri().getPath());\n    final java.lang.String jobId1 = wfClient.submit(conf);\n    wfClient.start(jobId1);\n    waitFor(15 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return wfClient.getJobInfo(jobId1).getStatus() == org.apache.oozie.client.WorkflowJob.Status.KILLED;\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.KILLED, wfClient.getJobInfo(jobId1).getStatus());\n    conf.setProperty(org.apache.oozie.client.OozieClient.RERUN_SKIP_NODES, \"fs1,fs2,dec3\");\n    boolean failed = false;\n    try {\n        wfClient.reRun(jobId1, conf);\n    } catch (org.apache.oozie.client.OozieClientException e) {\n        failed = true;\n        junit.framework.Assert.assertTrue(e.getCause().getMessage().contains(org.apache.oozie.ErrorCode.E0807.toString()));\n    }\n    junit.framework.Assert.assertEquals(true, failed);\n    getFileSystem().delete(new org.apache.hadoop.fs.Path(path, \"p2\"), true);\n    conf.setProperty(org.apache.oozie.client.OozieClient.RERUN_SKIP_NODES, \"fs1\");\n    wfClient.reRun(jobId1, conf);\n    waitFor(15 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return wfClient.getJobInfo(jobId1).getStatus() == org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED;\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfClient.getJobInfo(jobId1).getStatus());\n}",
        "ClassName": "TestReRunXCommand",
        "Label": 1,
        "MethodName": "testRerun",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.StoreService ss = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.StoreService.class);\n    javax.persistence.EntityManager em = ss.getEntityManager();\n    junit.framework.Assert.assertNotNull(em);\n    em.close();\n}",
        "ClassName": "TestStoreService",
        "Label": 1,
        "MethodName": "testGetEntityManager",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path actionDir = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    final org.apache.hadoop.mapred.RunningJob runningJob = _test();\n    waitFor(2000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return runningJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(runningJob.isSuccessful());\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainDone(runningJob));\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainSuccessful(runningJob));\n    junit.framework.Assert.assertFalse(org.apache.oozie.action.hadoop.LauncherMapper.hasOutputData(runningJob));\n    junit.framework.Assert.assertFalse(org.apache.oozie.action.hadoop.LauncherMapper.hasIdSwap(runningJob));\n    junit.framework.Assert.assertTrue(org.apache.oozie.action.hadoop.LauncherMapper.isMainDone(runningJob));\n    junit.framework.Assert.assertFalse(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getErrorPath(actionDir)));\n    junit.framework.Assert.assertFalse(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getIdSwapPath(actionDir)));\n    junit.framework.Assert.assertFalse(fs.exists(org.apache.oozie.action.hadoop.LauncherMapper.getOutputDataPath(actionDir)));\n}",
        "ClassName": "TestLauncher",
        "Label": 1,
        "MethodName": "testEmpty",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    try {\n        services.init();\n        java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-schema-valid.xml\", -1);\n        java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n        org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n        org.apache.oozie.service.WorkflowAppService wps = services.get(org.apache.oozie.service.WorkflowAppService.class);\n        org.apache.hadoop.conf.Configuration jobConf = new org.apache.oozie.util.XConfiguration();\n        jobConf.set(org.apache.oozie.client.OozieClient.APP_PATH, ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\");\n        jobConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n        org.apache.oozie.workflow.WorkflowApp app = wps.parseDef(jobConf, \"authToken\");\n        junit.framework.Assert.assertNotNull(app);\n        junit.framework.Assert.assertEquals(\"test-wf\", app.getName());\n        reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-schema-invalid.xml\", -1);\n        writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n        org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n        try {\n            wps.parseDef(jobConf, \"authToken\");\n            junit.framework.Assert.fail();\n        } catch (org.apache.oozie.workflow.WorkflowException ex) {\n        }\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestLiteWorkflowAppService",
        "Label": 1,
        "MethodName": "testSchema",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.RUNNING);\n    new org.apache.oozie.command.coord.CoordSuspendXCommand(job.getId()).call();\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.SUSPENDED);\n}",
        "ClassName": "TestCoordSuspendXCommand",
        "Label": 1,
        "MethodName": "testCoordSuspendPostive",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.StringBuffer sb = new java.lang.StringBuffer(\"\");\n    org.apache.oozie.util.TestMemoryLocks.Locker l1 = new org.apache.oozie.util.TestMemoryLocks.WriteLocker(\"a\", 1, 0, sb);\n    org.apache.oozie.util.TestMemoryLocks.Locker l2 = new org.apache.oozie.util.TestMemoryLocks.WriteLocker(\"a\", 2, 0, sb);\n    new java.lang.Thread(l1).start();\n    java.lang.Thread.sleep(500);\n    new java.lang.Thread(l2).start();\n    java.lang.Thread.sleep(500);\n    l1.finish();\n    java.lang.Thread.sleep(500);\n    l2.finish();\n    java.lang.Thread.sleep(500);\n    junit.framework.Assert.assertEquals(\"a:1-L a:2-N a:1-U\", sb.toString().trim());\n}",
        "ClassName": "TestMemoryLocks",
        "Label": 1,
        "MethodName": "testNoWaitWriteLock",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.hadoop.conf.Configuration jobConf = null;\n    try {\n        jobConf = new org.apache.oozie.util.XConfiguration(new java.io.StringReader(job.getConf()));\n    } catch (java.io.IOException ioe) {\n        log.warn(\"Configuration parse error. read from DB :\" + job.getConf(), ioe);\n        throw new org.apache.oozie.command.CommandException(org.apache.oozie.ErrorCode.E1005, ioe);\n    }\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(jobConf.get(org.apache.oozie.client.OozieClient.BUNDLE_APP_PATH), \"bundle.xml\");\n    jobConf.set(org.apache.oozie.client.OozieClient.BUNDLE_APP_PATH, appPath.toString());\n    org.apache.oozie.command.bundle.BundleSubmitXCommand submitCmd = new org.apache.oozie.command.bundle.BundleSubmitXCommand(jobConf, job.getAuthToken());\n    submitCmd.call();\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(submitCmd.getJob().getId());\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PREP, job.getStatus());\n    new org.apache.oozie.command.bundle.BundleJobSuspendXCommand(job.getId()).call();\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PREPSUSPENDED, job.getStatus());\n}",
        "ClassName": "TestBundleJobSuspendXCommand",
        "Label": 1,
        "MethodName": "testBundleSuspend3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    try {\n        parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-invalid-fork.xml\", -1), new org.apache.hadoop.conf.Configuration());\n    } catch (org.apache.oozie.workflow.WorkflowException wfe) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0730, wfe.getErrorCode());\n        junit.framework.Assert.assertEquals(\"E0730: Fork/Join not in pair\", wfe.getMessage());\n    }\n    org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration();\n    conf.set(\"oozie.wf.validate.ForkJoin\", \"false\");\n    parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-invalid-fork.xml\", -1), conf);\n    conf.set(\"oozie.wf.validate.ForkJoin\", \"true\");\n    try {\n        parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-invalid-fork.xml\", -1), conf);\n    } catch (org.apache.oozie.workflow.WorkflowException wfe) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0730, wfe.getErrorCode());\n        junit.framework.Assert.assertEquals(\"E0730: Fork/Join not in pair\", wfe.getMessage());\n    }\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(\"oozie.validate.ForkJoin\", \"false\");\n    new org.apache.oozie.service.Services().init();\n    parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-invalid-fork.xml\", -1), new org.apache.hadoop.conf.Configuration());\n    conf.set(\"oozie.wf.validate.ForkJoin\", \"false\");\n    parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-invalid-fork.xml\", -1), conf);\n    conf.set(\"oozie.wf.validate.ForkJoin\", \"true\");\n    parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-invalid-fork.xml\", -1), conf);\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(\"oozie.validate.ForkJoin\", \"true\");\n    new org.apache.oozie.service.Services().init();\n    try {\n        parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-invalid-fork.xml\", -1), new org.apache.hadoop.conf.Configuration());\n    } catch (org.apache.oozie.workflow.WorkflowException wfe) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0730, wfe.getErrorCode());\n        junit.framework.Assert.assertEquals(\"E0730: Fork/Join not in pair\", wfe.getMessage());\n    }\n    conf.set(\"oozie.wf.validate.ForkJoin\", \"false\");\n    parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-invalid-fork.xml\", -1), conf);\n    conf.set(\"oozie.wf.validate.ForkJoin\", \"true\");\n    try {\n        parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-invalid-fork.xml\", -1), new org.apache.hadoop.conf.Configuration());\n    } catch (org.apache.oozie.workflow.WorkflowException wfe) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0730, wfe.getErrorCode());\n        junit.framework.Assert.assertEquals(\"E0730: Fork/Join not in pair\", wfe.getMessage());\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testDisableWFValidateForkJoin",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path path = new org.apache.hadoop.fs.Path(getFsTestCaseDir() + \"/2012/12/02/\");\n    org.apache.oozie.action.hadoop.LauncherURIHandler handler = uriHandlerFactory.getURIHandler(path.toUri());\n    getFileSystem().mkdirs(path);\n    junit.framework.Assert.assertTrue(handler.delete(path.toUri(), conf));\n    junit.framework.Assert.assertFalse(getFileSystem().exists(path));\n}",
        "ClassName": "TestLauncherFSURIHandler",
        "Label": 1,
        "MethodName": "testDelete",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-job-submit-instances\");\n    java.lang.String expr = \"${coord:current(-coord:tzOffset())}\";\n    junit.framework.Assert.assertEquals(\"${coord:current(-3)}\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testTzOffsetPh1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    _testCoordActionUpdateStatus(action);\n}",
        "ClassName": "TestCoordActionUpdateForInputCheckJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionUpdateStatus",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertEquals(\"a\", org.apache.oozie.util.ELConstantsFunctions.concat(\"a\", null));\n    junit.framework.Assert.assertEquals(\"b\", org.apache.oozie.util.ELConstantsFunctions.concat(null, \"b\"));\n    junit.framework.Assert.assertEquals(\"ab\", org.apache.oozie.util.ELConstantsFunctions.concat(\"a\", \"b\"));\n    junit.framework.Assert.assertEquals(\"\", org.apache.oozie.util.ELConstantsFunctions.concat(null, null));\n}",
        "ClassName": "TestELConstantsFunctions",
        "Label": 1,
        "MethodName": "testConcat",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean jobA = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean actionA1 = this.addRecordToWfActionTable(jobA.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean actionA2 = this.addRecordToWfActionTable(jobA.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowJobBean jobB = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean actionB1 = this.addRecordToWfActionTable(jobB.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean actionB2 = this.addRecordToWfActionTable(jobB.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowJobBean jobC = this.addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean actionC1 = this.addRecordToWfActionTable(jobC.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean actionC2 = this.addRecordToWfActionTable(jobC.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.util.List<java.lang.String> deleteList = new java.util.ArrayList<java.lang.String>();\n    deleteList.add(jobA.getId());\n    deleteList.add(jobB.getId());\n    deleteList.add(jobC.getId());\n    jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobsDeleteJPAExecutor(deleteList));\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(jobA.getId()));\n        junit.framework.Assert.fail(\"Workflow Job A should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(actionA1.getId()));\n        junit.framework.Assert.fail(\"Workflow Action A1 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(actionA2.getId()));\n        junit.framework.Assert.fail(\"Workflow Action A2 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(jobB.getId()));\n        junit.framework.Assert.fail(\"Workflow Job B should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(actionB1.getId()));\n        junit.framework.Assert.fail(\"Workflow Action B1 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(actionB2.getId()));\n        junit.framework.Assert.fail(\"Workflow Action B2 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(jobC.getId()));\n        junit.framework.Assert.fail(\"Workflow Job C should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(actionC1.getId()));\n        junit.framework.Assert.fail(\"Workflow Action C1 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(actionC2.getId()));\n        junit.framework.Assert.fail(\"Workflow Action C2 should have been deleted\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n}",
        "ClassName": "TestWorkflowJobsDeleteJPAExecutor",
        "Label": 1,
        "MethodName": "testDeleteWorkflows",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n    fs.mkdirs(appPath);\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-suspendpoints.xml\", -1);\n    java.io.Writer writer = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\")));\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    writer.close();\n    reader.close();\n    final org.apache.oozie.client.OozieClient oc = org.apache.oozie.local.LocalOozie.getClient();\n    java.util.Properties conf = oc.createConfiguration();\n    conf.setProperty(org.apache.oozie.client.OozieClient.APP_PATH, (appPath.toString() + java.io.File.separator) + \"workflow.xml\");\n    conf.setProperty(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.setProperty(\"oozie.suspend.on.nodes\", \"*\");\n    final java.lang.String jobId = oc.submit(conf);\n    junit.framework.Assert.assertNotNull(jobId);\n    org.apache.oozie.client.WorkflowJob wf = oc.getJobInfo(jobId);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.PREP, wf.getStatus());\n    oc.start(jobId);\n    checkSuspendActions(wf, oc, jobId, org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, new java.lang.String[]{ \":start:\" }, new java.lang.String[]{  });\n    oc.resume(jobId);\n    checkSuspendActions(wf, oc, jobId, org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, new java.lang.String[]{ \"action1\" }, new java.lang.String[]{ \":start:\" });\n    oc.resume(jobId);\n    checkSuspendActions(wf, oc, jobId, org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, new java.lang.String[]{ \"action2\" }, new java.lang.String[]{ \":start:\", \"action1\" });\n    oc.resume(jobId);\n    checkSuspendActions(wf, oc, jobId, org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, new java.lang.String[]{ \"decision1\" }, new java.lang.String[]{ \":start:\", \"action1\", \"action2\" });\n    oc.resume(jobId);\n    checkSuspendActions(wf, oc, jobId, org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, new java.lang.String[]{ \"action3\" }, new java.lang.String[]{ \":start:\", \"action1\", \"action2\", \"decision1\" });\n    oc.resume(jobId);\n    checkSuspendActions(wf, oc, jobId, org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, new java.lang.String[]{ \"fork1\" }, new java.lang.String[]{ \":start:\", \"action1\", \"action2\", \"decision1\", \"action3\" });\n    oc.resume(jobId);\n    checkSuspendActions(wf, oc, jobId, org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, new java.lang.String[]{ \"action4a\", \"action4b\", \"action4c\" }, new java.lang.String[]{ \":start:\", \"action1\", \"action2\", \"decision1\", \"action3\", \"fork1\" });\n    oc.resume(jobId);\n    checkSuspendActions(wf, oc, jobId, org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, new java.lang.String[]{ \"join1\" }, new java.lang.String[]{ \":start:\", \"action1\", \"action2\", \"decision1\", \"action3\", \"fork1\", \"action4a\", \"action4b\", \"action4c\" });\n    oc.resume(jobId);\n    checkSuspendActions(wf, oc, jobId, org.apache.oozie.client.WorkflowJob.Status.SUSPENDED, new java.lang.String[]{ \"end\" }, new java.lang.String[]{ \":start:\", \"action1\", \"action2\", \"decision1\", \"action3\", \"fork1\", \"action4a\", \"action4b\", \"action4c\", \"join1\" });\n    oc.resume(jobId);\n    checkSuspendActions(wf, oc, jobId, org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, new java.lang.String[]{  }, new java.lang.String[]{ \":start:\", \"action1\", \"action2\", \"decision1\", \"action3\", \"fork1\", \"action4a\", \"action4b\", \"action4c\", \"join1\", \"end\" });\n}",
        "ClassName": "TestSignalXCommand",
        "Label": 1,
        "MethodName": "testSuspendPointsAll",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.RUNNING, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetCmd = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, job.getStatus());\n    new org.apache.oozie.command.bundle.BundleJobSuspendXCommand(job.getId()).call();\n    job = jpaService.execute(bundleJobGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDED, job.getStatus());\n}",
        "ClassName": "TestBundleJobSuspendXCommand",
        "Label": 1,
        "MethodName": "testBundleSuspend1",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    conf.set(org.apache.oozie.service.Services.CONF_SERVICE_CLASSES, org.apache.hadoop.util.StringUtils.join(\",\", java.util.Arrays.asList(org.apache.oozie.service.GroupsService.class.getName(), org.apache.oozie.service.ProxyUserService.class.getName())));\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.hosts\", \"*\");\n    conf.set(\"oozie.service.ProxyUserService.proxyuser.foo.groups\", \"*\");\n    services.init();\n    try {\n        org.apache.oozie.service.ProxyUserService proxyUser = services.get(org.apache.oozie.service.ProxyUserService.class);\n        junit.framework.Assert.assertNotNull(proxyUser);\n        proxyUser.validate(\"bar\", \"localhost\", \"foo\");\n        junit.framework.Assert.fail();\n    } catch (java.security.AccessControlException ex) {\n    } catch (java.lang.Exception ex) {\n        junit.framework.Assert.fail(ex.toString());\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestProxyUserService",
        "Label": 1,
        "MethodName": "testInvalidProxyUser",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp app = parser.validateAndParse(org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-schema-valid-global-jobXml.xml\", -1), new org.apache.hadoop.conf.Configuration());\n    java.lang.String d = app.getNode(\"d\").getConf();\n    java.lang.String expectedD = \"<map-reduce xmlns=\\\"uri:oozie:workflow:0.4\\\">\\r\\n\" + (((((((((((((((((((((((((\"  <prepare>\\r\\n\" + \"    <delete path=\\\"/tmp\\\" />\\r\\n\") + \"    <mkdir path=\\\"/tmp\\\" />\\r\\n\") + \"  </prepare>\\r\\n\") + \"  <streaming>\\r\\n\") + \"    <mapper>/mycat.sh</mapper>\\r\\n\") + \"    <reducer>/mywc.sh</reducer>\\r\\n\") + \"  </streaming>\\r\\n\") + \"  <job-xml>/tmp</job-xml>\\r\\n\") + \"  <file>/tmp</file>\\r\\n\") + \"  <archive>/tmp</archive>\\r\\n\") + \"  <job-tracker>foo</job-tracker>\\r\\n\") + \"  <name-node>bar</name-node>\\r\\n\") + \"  <job-xml>/spam1</job-xml>\\r\\n\") + \"  <job-xml>/spam2</job-xml>\\r\\n\") + \"  <configuration>\\r\\n\") + \"    <property>\\r\\n\") + \"      <name>a</name>\\r\\n\") + \"      <value>A</value>\\r\\n\") + \"    </property>\\r\\n\") + \"    <property>\\r\\n\") + \"      <name>b</name>\\r\\n\") + \"      <value>B</value>\\r\\n\") + \"    </property>\\r\\n\") + \"  </configuration>\\r\\n\") + \"</map-reduce>\");\n    junit.framework.Assert.assertEquals(expectedD.replaceAll(\" \", \"\"), d.replaceAll(\" \", \"\"));\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testParserGlobalJobXML",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"name\", \"def\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"one\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"f\", \"end\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\", \"three\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"two\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"four\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"three\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"four\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"four\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.KillNodeDef(\"k\", \"kill\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class)).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    try {\n        invokeForkJoin(parser, def);\n    } catch (java.lang.Exception ex) {\n        ex.printStackTrace();\n        junit.framework.Assert.fail(\"Unexpected Exception\");\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testTransition3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n    getFileSystem().mkdirs(appPath);\n    getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\")).close();\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, appPath.toString());\n    _testAction(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_RERUN, conf);\n}",
        "ClassName": "TestV0JobServlet",
        "Label": 1,
        "MethodName": "testInvalidReRunConfigurations",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"name\", \"def\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.DecisionNodeDef(\"one\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestDecisionNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"f1\", \"f2\" }))).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f1\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\", \"three\" }))).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f2\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"four\", \"five\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"two\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j1\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"three\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j1\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"four\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j2\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"five\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j2\", \"k\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j1\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j2\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.KillNodeDef(\"k\", \"kill\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class)).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    try {\n        invokeForkJoin(parser, def);\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Unexpected Exception\");\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testDecisionMultipleForks",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertEquals(\"/a/b/ADD,/c/b/ADD,/c/d/ADD\", org.apache.oozie.util.ELConstantsFunctions.appendAll(\"/a/b/,/c/b/,/c/d/\", \"ADD\", \",\"));\n    junit.framework.Assert.assertEquals(\"/a/b/ADD\", org.apache.oozie.util.ELConstantsFunctions.appendAll(\"/a/b/\", \"ADD\", \",\"));\n    junit.framework.Assert.assertEquals(\" /a/b/  ADD,/c/b/ ADD, /c/d/ ADD\", org.apache.oozie.util.ELConstantsFunctions.appendAll(\" /a/b/  ,/c/b/ , /c/d/ \", \"ADD\", \",\"));\n    junit.framework.Assert.assertEquals(\"/a/b/ADD\", org.apache.oozie.util.ELConstantsFunctions.appendAll(\"/a/b/\", \"ADD\", \",\"));\n    junit.framework.Assert.assertEquals(null, org.apache.oozie.util.ELConstantsFunctions.appendAll(null, \"ADD\", \",\"));\n    junit.framework.Assert.assertEquals(\"/a/b/,/c/b/,/c/d/\", org.apache.oozie.util.ELConstantsFunctions.appendAll(\"/a/b/,/c/b/,/c/d/\", null, \",\"));\n    junit.framework.Assert.assertEquals(\"/a/b/,/c/b/,/c/d/\", org.apache.oozie.util.ELConstantsFunctions.appendAll(\"/a/b/,/c/b/,/c/d/\", \"ADD\", null));\n    junit.framework.Assert.assertEquals(\"ADDaADDbADD\", org.apache.oozie.util.ELConstantsFunctions.appendAll(\"ab\", \"ADD\", \"\"));\n    junit.framework.Assert.assertEquals(\"/a/b/ADD,/c/b/ADD,/c/d/ADD\", org.apache.oozie.util.ELConstantsFunctions.appendAll(\"/a/b/,/c/b/,/c/d/\", \"ADD\", \",\"));\n}",
        "ClassName": "TestELConstantsFunctions",
        "Label": 1,
        "MethodName": "testAppendAll",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    java.lang.String appPath = ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"coordinator.xml\";\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"coord-multiple-input-instance1.xml\", -1);\n    java.io.Writer writer = new java.io.FileWriter(new java.net.URI(appPath).getPath());\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    conf.set(org.apache.oozie.client.OozieClient.COORDINATOR_APP_PATH, appPath);\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    org.apache.oozie.command.coord.CoordSubmitXCommand sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    try {\n        sc.call();\n        junit.framework.Assert.fail(\"Expected to catch errors due to incorrectly specified input data set instances\");\n    } catch (org.apache.oozie.command.CommandException e) {\n        junit.framework.Assert.assertEquals(sc.getJob().getStatus(), org.apache.oozie.client.Job.Status.FAILED);\n        junit.framework.Assert.assertEquals(e.getErrorCode(), org.apache.oozie.ErrorCode.E1021);\n        junit.framework.Assert.assertTrue(e.getMessage().contains(sc.COORD_INPUT_EVENTS) && e.getMessage().contains(\"per data-in instance\"));\n    }\n    reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"coord-multiple-input-instance2.xml\", -1);\n    writer = new java.io.FileWriter(new java.net.URI(appPath).getPath());\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    try {\n        sc.call();\n        junit.framework.Assert.fail(\"Expected to catch errors due to incorrectly specified input data set instances\");\n    } catch (org.apache.oozie.command.CommandException e) {\n        junit.framework.Assert.assertEquals(sc.getJob().getStatus(), org.apache.oozie.client.Job.Status.FAILED);\n        junit.framework.Assert.assertEquals(e.getErrorCode(), org.apache.oozie.ErrorCode.E1021);\n        junit.framework.Assert.assertTrue(e.getMessage().contains(sc.COORD_INPUT_EVENTS) && e.getMessage().contains(\"is empty\"));\n    }\n    reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"coord-multiple-input-instance3.xml\", -1);\n    writer = new java.io.FileWriter(new java.net.URI(appPath).getPath());\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    try {\n        sc.call();\n    } catch (org.apache.oozie.command.CommandException e) {\n        junit.framework.Assert.fail(\"Unexpected failure: \" + e);\n    }\n    reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"coord-multiple-input-instance4.xml\", -1);\n    writer = new java.io.FileWriter(new java.net.URI(appPath).getPath());\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    sc = new org.apache.oozie.command.coord.CoordSubmitXCommand(conf, \"UNIT_TESTING\");\n    try {\n        sc.call();\n    } catch (org.apache.oozie.command.CommandException e) {\n        junit.framework.Assert.fail(\"Unexpected failure: \" + e);\n    }\n}",
        "ClassName": "TestCoordSubmitXCommand",
        "Label": 1,
        "MethodName": "testBasicSubmitWithMultipleInstancesInputEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_COORD_STATUS, \"true\");\n    services = new org.apache.oozie.service.Services();\n    setClassesToBeExcluded(services.getConf(), excludedServices);\n    services.init();\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, true, true, 3);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    coordJob.setAppNamespace(org.apache.oozie.service.SchemaService.COORDINATOR_NAMESPACE_URI_1);\n    jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobUpdateJPAExecutor(coordJob));\n    addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.KILLED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(coordJob.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(coordJob.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    sleep(1000);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    coordJob = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.RUNNING, coordJob.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServiceNoDoneWithErrorForBackwardSupport",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTableNegative(org.apache.oozie.client.Job.Status.PREP);\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    final org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor bundleJobGetExecutor = new org.apache.oozie.executor.jpa.BundleJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.PREP);\n    new org.apache.oozie.command.bundle.BundleStartXCommand(job.getId()).call();\n    waitFor(120000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.BundleJobBean job1 = jpaService.execute(bundleJobGetExecutor);\n            return job1.getStatus().equals(org.apache.oozie.client.Job.Status.FAILED);\n        }\n    });\n    job = jpaService.execute(bundleJobGetExecutor);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.FAILED, job.getStatus());\n}",
        "ClassName": "TestBundleStartXCommand",
        "Label": 1,
        "MethodName": "testBundleStartNegative2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            int wfCount = org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT;\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            java.lang.String[] args = new java.lang.String[]{ \"mapreduce\", \"-oozie\", oozieUrl, \"-config\", createMRProperties(appPath.toString(), true) };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(\"submitMR\", org.apache.oozie.servlet.MockDagEngineService.did);\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testSubmitMapReduce2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(org.apache.oozie.dependency.hcat.HCatMessageHandler.class);\n        java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream();\n        org.apache.log4j.Layout layout = new org.apache.log4j.SimpleLayout();\n        org.apache.log4j.Appender appender = new org.apache.log4j.WriterAppender(layout, out);\n        logger.addAppender(appender);\n        javax.jms.Message msg = session.createTextMessage(\"{\" + (((((\"\\\"server\\\" : \\\"thrift://localhost:1234\\\",\" + \"\\\"db\\\" : \\\"default\\\",\") + \"\\\"table\\\" : \\\"newTable\\\",\") + \"\\\"timestamp\\\" : \\\"123456\\\",\") + \"\\\"partitions\\\" : [{ \\\"dt\\\" : \\\"2012_01_01\\\", \\\"grid\\\" : \\\"AB\\\" }]\") + \"}\"));\n        msg.setStringProperty(HCatConstants.HCAT_EVENT, HCatEventMessage.EventType.DROP_PARTITION.toString());\n        org.apache.oozie.dependency.hcat.HCatMessageHandler hcatHandler = new org.apache.oozie.dependency.hcat.HCatMessageHandler(\"localhost\");\n        hcatHandler.process(msg);\n        java.lang.String logMsg = out.toString();\n        junit.framework.Assert.assertTrue(logMsg.contains(HCatEventMessage.EventType.DROP_PARTITION.toString()));\n        msg.setStringProperty(HCatConstants.HCAT_EVENT, HCatEventMessage.EventType.DROP_TABLE.toString());\n        hcatHandler.process(msg);\n        logMsg = out.toString();\n        junit.framework.Assert.assertTrue(logMsg.contains(HCatEventMessage.EventType.DROP_TABLE.toString()));\n    } catch (java.lang.Exception e) {\n        junit.framework.Assert.fail(\"Exception caused \" + e.getMessage());\n    }\n}",
        "ClassName": "TestHCatMessageHandler",
        "Label": 1,
        "MethodName": "testDropEventTypeMessage",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testAction(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_RESUME, null);\n}",
        "ClassName": "TestV0JobServlet",
        "Label": 1,
        "MethodName": "testResume",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    _testCoordActionRemove(job.getId(), action.getId());\n}",
        "ClassName": "TestCoordActionRemoveJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionRemove",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    try {\n        org.apache.oozie.service.HCatAccessorService hcatService = services.get(org.apache.oozie.service.HCatAccessorService.class);\n        org.apache.oozie.service.JMSAccessorService jmsService = services.get(org.apache.oozie.service.JMSAccessorService.class);\n        java.lang.String server = \"hcat.server.com:5080\";\n        java.lang.String topic = \"hcatalog.mydb.mytable\";\n        org.apache.oozie.jms.JMSConnectionInfo connInfo = hcatService.getJMSConnectionInfo(new java.net.URI(\"hcat://hcat.server.com:8020\"));\n        jmsService.registerForNotification(connInfo, topic, new org.apache.oozie.dependency.hcat.HCatMessageHandler(server));\n        org.apache.oozie.jms.MessageReceiver receiver1 = jmsService.getMessageReceiver(connInfo, topic);\n        junit.framework.Assert.assertNotNull(receiver1);\n        jmsService.unregisterFromNotification(connInfo, topic);\n        receiver1 = jmsService.getMessageReceiver(connInfo, topic);\n        junit.framework.Assert.assertEquals(null, receiver1);\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Exception encountered : \" + e);\n    }\n}",
        "ClassName": "TestJMSAccessorService",
        "Label": 1,
        "MethodName": "testUnRegisterTopic",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    try {\n        services.init();\n        org.apache.oozie.service.WorkflowAppService wps = services.get(org.apache.oozie.service.WorkflowAppService.class);\n        java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-schema-valid.xml\", -1);\n        java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n        org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n        org.apache.hadoop.conf.Configuration jobConf = new org.apache.oozie.util.XConfiguration();\n        jobConf.set(org.apache.oozie.client.OozieClient.APP_PATH, ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\");\n        jobConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n        org.apache.oozie.workflow.lite.LiteWorkflowApp app = ((org.apache.oozie.workflow.lite.LiteWorkflowApp) (wps.parseDef(jobConf, \"authToken\")));\n        junit.framework.Assert.assertNotNull(app);\n        junit.framework.Assert.assertEquals(\"test-wf\", app.getName());\n        junit.framework.Assert.assertNotNull(app.getNode(org.apache.oozie.workflow.lite.StartNodeDef.START));\n        junit.framework.Assert.assertEquals(\"a\", app.getNode(org.apache.oozie.workflow.lite.StartNodeDef.START).getTransitions().get(0));\n        junit.framework.Assert.assertEquals(\"b\", app.getNode(\"a\").getTransitions().get(0));\n        junit.framework.Assert.assertEquals(\"c\", app.getNode(\"a\").getTransitions().get(1));\n        junit.framework.Assert.assertEquals(\"c\", app.getNode(\"a\").getTransitions().get(2));\n        junit.framework.Assert.assertTrue(app.getNode(\"b\").getConf().contains(\"kill\"));\n        junit.framework.Assert.assertEquals(\"d\", app.getNode(\"c\").getTransitions().get(0));\n        junit.framework.Assert.assertEquals(\"e\", app.getNode(\"c\").getTransitions().get(1));\n        junit.framework.Assert.assertEquals(2, app.getNode(\"c\").getTransitions().size());\n        junit.framework.Assert.assertEquals(\"f\", app.getNode(\"d\").getTransitions().get(0));\n        junit.framework.Assert.assertEquals(\"b\", app.getNode(\"d\").getTransitions().get(1));\n        junit.framework.Assert.assertTrue(app.getNode(\"d\").getConf().startsWith(\"<map-reduce\"));\n        junit.framework.Assert.assertEquals(\"f\", app.getNode(\"e\").getTransitions().get(0));\n        junit.framework.Assert.assertEquals(\"b\", app.getNode(\"e\").getTransitions().get(1));\n        junit.framework.Assert.assertTrue(app.getNode(\"e\").getConf().startsWith(\"<pig\"));\n        junit.framework.Assert.assertEquals(\"g\", app.getNode(\"f\").getTransitions().get(0));\n        junit.framework.Assert.assertEquals(\"z\", app.getNode(\"g\").getTransitions().get(0));\n        junit.framework.Assert.assertEquals(\"b\", app.getNode(\"g\").getTransitions().get(1));\n        junit.framework.Assert.assertTrue(app.getNode(\"g\").getConf().startsWith(\"<fs\"));\n        junit.framework.Assert.assertNotNull(app.getNode(\"z\"));\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestLiteWorkflowAppService",
        "Label": 1,
        "MethodName": "testParsing",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String actionXml = ((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node> <configuration>\") + \"<property><name>oozie.launcher.mapreduce.job.acl-view-job</name><value>V</value></property>\") + \"<property><name>oozie.launcher.mapreduce.job.acl-modify-job</name><value>M</value></property>\") + \"</configuration>\") + \"<main-class>MAIN-CLASS</main-class>\") + \"</java>\";\n    org.apache.oozie.WorkflowJobBean wfBean = addRecordToWfJobTable(\"test2-acl\", actionXml);\n    org.apache.oozie.WorkflowActionBean action = ((org.apache.oozie.WorkflowActionBean) (wfBean.getActions().get(0)));\n    org.apache.oozie.action.hadoop.JavaActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    action.setType(ae.getType());\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(wfBean, action);\n    org.jdom.Element eActionXml = org.apache.oozie.util.XmlUtils.parseXml(actionXml);\n    org.apache.hadoop.conf.Configuration actionConf = ae.createBaseHadoopConf(context, eActionXml);\n    ae.setupActionConf(actionConf, context, eActionXml, getAppPath());\n    org.apache.hadoop.conf.Configuration conf = ae.createLauncherConf(getFileSystem(), context, action, eActionXml, actionConf);\n    junit.framework.Assert.assertNotNull(conf.get(org.apache.oozie.action.hadoop.JavaActionExecutor.ACL_VIEW_JOB));\n    junit.framework.Assert.assertNotNull(conf.get(org.apache.oozie.action.hadoop.JavaActionExecutor.ACL_MODIFY_JOB));\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testACLDefaults_noFalseChange",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    java.util.List<java.lang.String> filterList = new java.util.ArrayList<java.lang.String>();\n    filterList.add(\"RUNNING\");\n    filterList.add(\"KILLED\");\n    _testGetActionsSubsetFilter(job.getId(), 1, filterList, 1, 2);\n}",
        "ClassName": "TestCoordJobGetActionsSubsetJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionFilter",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, false, false);\n    _testGetJob(job.getId());\n}",
        "ClassName": "TestCoordJobGetJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordJobGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    try {\n        services.init();\n        java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-schema-valid.xml\", -1);\n        java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n        org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n        createTestCaseSubDir(\"lib\");\n        writer = new java.io.FileWriter(getTestCaseDir() + \"/lib/maputil.jar\");\n        writer.write(\"bla bla\");\n        writer.close();\n        writer = new java.io.FileWriter(getTestCaseDir() + \"/lib/reduceutil.so\");\n        writer.write(\"bla bla\");\n        writer.close();\n        createTestCaseSubDir(\"libx\");\n        writer = new java.io.FileWriter(getTestCaseDir() + \"/libx/maputilx.jar\");\n        writer.write(\"bla bla\");\n        writer.close();\n        org.apache.oozie.service.WorkflowAppService wps = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.WorkflowAppService.class);\n        org.apache.hadoop.conf.Configuration jobConf = new org.apache.oozie.util.XConfiguration();\n        jobConf.set(org.apache.oozie.client.OozieClient.APP_PATH, (\"file://\" + getTestCaseDir()) + \"/workflow.xml\");\n        jobConf.set(org.apache.oozie.client.OozieClient.LIBPATH, (\"file://\" + getTestCaseDir()) + \"/libx\");\n        jobConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n        org.apache.hadoop.conf.Configuration protoConf = wps.createProtoActionConf(jobConf, \"authToken\", true);\n        junit.framework.Assert.assertEquals(org.apache.oozie.test.XTestCase.getTestUser(), protoConf.get(org.apache.oozie.client.OozieClient.USER_NAME));\n        junit.framework.Assert.assertEquals(3, protoConf.getStrings(org.apache.oozie.service.WorkflowAppService.APP_LIB_PATH_LIST).length);\n        java.util.List<java.lang.String> found = new java.util.ArrayList<java.lang.String>();\n        found.add(protoConf.getStrings(org.apache.oozie.service.WorkflowAppService.APP_LIB_PATH_LIST)[0]);\n        found.add(protoConf.getStrings(org.apache.oozie.service.WorkflowAppService.APP_LIB_PATH_LIST)[1]);\n        found.add(protoConf.getStrings(org.apache.oozie.service.WorkflowAppService.APP_LIB_PATH_LIST)[2]);\n        java.util.List<java.lang.String> expected = new java.util.ArrayList<java.lang.String>();\n        expected.add((\"file://\" + getTestCaseDir()) + \"/lib/reduceutil.so\");\n        expected.add((\"file://\" + getTestCaseDir()) + \"/lib/maputil.jar\");\n        expected.add((\"file://\" + getTestCaseDir()) + \"/libx/maputilx.jar\");\n        java.util.Collections.sort(found);\n        java.util.Collections.sort(expected);\n        junit.framework.Assert.assertEquals(expected, found);\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestLiteWorkflowAppService",
        "Label": 1,
        "MethodName": "testCreateprotoConfWithLibPath",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.StringBuffer sb = new java.lang.StringBuffer(\"\");\n    org.apache.oozie.util.TestMemoryLocks.Locker l1 = new org.apache.oozie.util.TestMemoryLocks.WriteLocker(\"a\", 1, -1, sb);\n    org.apache.oozie.util.TestMemoryLocks.Locker l2 = new org.apache.oozie.util.TestMemoryLocks.WriteLocker(\"a\", 2, -1, sb);\n    new java.lang.Thread(l1).start();\n    java.lang.Thread.sleep(500);\n    new java.lang.Thread(l2).start();\n    java.lang.Thread.sleep(500);\n    l1.finish();\n    java.lang.Thread.sleep(500);\n    l2.finish();\n    java.lang.Thread.sleep(500);\n    junit.framework.Assert.assertEquals(\"a:1-L a:1-U a:2-L a:2-U\", sb.toString().trim());\n}",
        "ClassName": "TestMemoryLocks",
        "Label": 1,
        "MethodName": "testWaitWriteLock",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    _testAction(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_START, null);\n}",
        "ClassName": "TestV0JobServlet",
        "Label": 1,
        "MethodName": "testStart",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PAUSEDWITHERROR, false, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.PAUSEDWITHERROR);\n    new org.apache.oozie.command.coord.CoordSuspendXCommand(job.getId()).call();\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.SUSPENDEDWITHERROR);\n}",
        "ClassName": "TestCoordSuspendXCommand",
        "Label": 1,
        "MethodName": "testCoordSuspendWithErrorPostive2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.action.hadoop.FsActionExecutor ae = new org.apache.oozie.action.hadoop.FsActionExecutor();\n    junit.framework.Assert.assertEquals(\"fs\", ae.getType());\n}",
        "ClassName": "TestFsActionExecutor",
        "Label": 1,
        "MethodName": "testSetupMethods",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"one\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"f\" }))).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\", \"three\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"two\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"three\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j\" }))).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"four\")).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"four\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.SynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"f\" }))).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    try {\n        job.start();\n        junit.framework.Assert.fail();\n    } catch (org.apache.oozie.workflow.WorkflowException ex) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0709, ex.getErrorCode());\n    }\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.FAILED, job.getStatus());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testLoopFork",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().destroy();\n    setSystemProperty(org.apache.oozie.service.StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_STATES_WITHOUT_ERROR, \"false\");\n    services = new org.apache.oozie.service.Services();\n    setClassesToBeExcluded(services.getConf(), excludedServices);\n    services.init();\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean coordJob = createCoordJob(org.apache.oozie.client.Job.Status.PAUSED, start, end, true, false, 3);\n    coordJob.setPauseTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2009-02-01T01:00Z\"));\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    org.apache.oozie.executor.jpa.CoordJobInsertJPAExecutor coordInsertCmd = new org.apache.oozie.executor.jpa.CoordJobInsertJPAExecutor(coordJob);\n    jpaService.execute(coordInsertCmd);\n    addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.KILLED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(coordJob.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(coordJob.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    final java.lang.String jobId = coordJob.getId();\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(jobId));\n            return coordJob.isPending() == false;\n        }\n    });\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    coordJob = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertFalse(coordJob.isPending());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.PAUSEDWITHERROR, coordJob.getStatus());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServicePaused",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.ELEvaluator eval = org.apache.oozie.coord.CoordELEvaluator.createURIELEvaluator(\"2009-08-09T23:59Z\");\n    java.lang.String expr = \"hdfs://p1/p2/${YEAR}/${MONTH}/${DAY}/${HOUR}/${MINUTE}/\";\n    junit.framework.Assert.assertEquals(\"hdfs://p1/p2/2009/08/09/23/59/\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"hdfs://p1/p2/${YEAR}/${MONTH}/${DAY}/${MINUTE}/\";\n    junit.framework.Assert.assertEquals(\"hdfs://p1/p2/2009/08/09/59/\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n}",
        "ClassName": "TestCoordELEvaluator",
        "Label": 1,
        "MethodName": "testCreateURIELEvaluator",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    final org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.PREP, job.getStatus());\n    job.start();\n    waitFor(5 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return job.getStatus() == org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED;\n        }\n    });\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED, job.getStatus());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testEmptyWorkflow",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path root = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"root\");\n    org.apache.hadoop.fs.Path jar = new org.apache.hadoop.fs.Path(\"jar.jar\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(getAppPath(), jar)).close();\n    org.apache.hadoop.fs.Path rootJar = new org.apache.hadoop.fs.Path(root, \"rootJar.jar\");\n    getFileSystem().create(rootJar).close();\n    org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(\"file\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(getAppPath(), file)).close();\n    org.apache.hadoop.fs.Path rootFile = new org.apache.hadoop.fs.Path(root, \"rootFile\");\n    getFileSystem().create(rootFile).close();\n    org.apache.hadoop.fs.Path so = new org.apache.hadoop.fs.Path(\"soFile.so\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(getAppPath(), so)).close();\n    org.apache.hadoop.fs.Path rootSo = new org.apache.hadoop.fs.Path(root, \"rootSoFile.so\");\n    getFileSystem().create(rootSo).close();\n    org.apache.hadoop.fs.Path so1 = new org.apache.hadoop.fs.Path(\"soFile.so.1\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(getAppPath(), so1)).close();\n    org.apache.hadoop.fs.Path rootSo1 = new org.apache.hadoop.fs.Path(root, \"rootSoFile.so.1\");\n    getFileSystem().create(rootSo1).close();\n    org.apache.hadoop.fs.Path archive = new org.apache.hadoop.fs.Path(\"archive.tar\");\n    getFileSystem().create(new org.apache.hadoop.fs.Path(getAppPath(), archive)).close();\n    org.apache.hadoop.fs.Path rootArchive = new org.apache.hadoop.fs.Path(root, \"rootArchive.tar\");\n    getFileSystem().create(rootArchive).close();\n    java.lang.String actionXml = (((((((((((((((((((((((((((((((((((((\"<java>\" + \"      <job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"      <name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"      <main-class>CLASS</main-class>\") + \"      <file>\") + jar.toString()) + \"</file>\\n\") + \"      <file>\") + rootJar.toString()) + \"</file>\\n\") + \"      <file>\") + file.toString()) + \"</file>\\n\") + \"      <file>\") + rootFile.toString()) + \"</file>\\n\") + \"      <file>\") + so.toString()) + \"</file>\\n\") + \"      <file>\") + rootSo.toString()) + \"</file>\\n\") + \"      <file>\") + so1.toString()) + \"</file>\\n\") + \"      <file>\") + rootSo1.toString()) + \"</file>\\n\") + \"      <archive>\") + archive.toString()) + \"</archive>\\n\") + \"      <archive>\") + rootArchive.toString()) + \"</archive>\\n\") + \"</java>\";\n    org.jdom.Element eActionXml = org.apache.oozie.util.XmlUtils.parseXml(actionXml);\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml, null);\n    org.apache.hadoop.fs.Path appPath = getAppPath();\n    org.apache.oozie.action.hadoop.JavaActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    org.apache.hadoop.conf.Configuration jobConf = ae.createBaseHadoopConf(context, eActionXml);\n    ae.setupActionConf(jobConf, context, eActionXml, appPath);\n    ae.setLibFilesArchives(context, eActionXml, appPath, jobConf);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.filecache.DistributedCache.getSymlink(jobConf));\n    org.apache.hadoop.fs.Path[] filesInClasspath = org.apache.hadoop.filecache.DistributedCache.getFileClassPaths(jobConf);\n    for (org.apache.hadoop.fs.Path p : new org.apache.hadoop.fs.Path[]{ new org.apache.hadoop.fs.Path(getAppPath(), jar), rootJar }) {\n        boolean found = false;\n        for (org.apache.hadoop.fs.Path c : filesInClasspath) {\n            if ((!found) && p.toUri().getPath().equals(c.toUri().getPath())) {\n                found = true;\n            }\n        }\n        junit.framework.Assert.assertTrue((\"file \" + p.toUri().getPath()) + \" not found in classpath\", found);\n    }\n    for (org.apache.hadoop.fs.Path p : new org.apache.hadoop.fs.Path[]{ new org.apache.hadoop.fs.Path(getAppPath(), file), rootFile, new org.apache.hadoop.fs.Path(getAppPath(), so), rootSo, new org.apache.hadoop.fs.Path(getAppPath(), so1), rootSo1 }) {\n        boolean found = false;\n        for (org.apache.hadoop.fs.Path c : filesInClasspath) {\n            if ((!found) && p.toUri().getPath().equals(c.toUri().getPath())) {\n                found = true;\n            }\n        }\n        junit.framework.Assert.assertFalse((\"file \" + p.toUri().getPath()) + \" found in classpath\", found);\n    }\n    java.net.URI[] filesInCache = org.apache.hadoop.filecache.DistributedCache.getCacheFiles(jobConf);\n    for (org.apache.hadoop.fs.Path p : new org.apache.hadoop.fs.Path[]{ new org.apache.hadoop.fs.Path(getAppPath(), jar), rootJar, new org.apache.hadoop.fs.Path(getAppPath(), file), rootFile, new org.apache.hadoop.fs.Path(getAppPath(), so), rootSo, new org.apache.hadoop.fs.Path(getAppPath(), so1), rootSo1 }) {\n        boolean found = false;\n        for (java.net.URI c : filesInCache) {\n            if ((!found) && p.toUri().getPath().equals(c.getPath())) {\n                found = true;\n            }\n        }\n        junit.framework.Assert.assertTrue((\"file \" + p.toUri().getPath()) + \" not found in cache\", found);\n    }\n    java.net.URI[] archivesInCache = org.apache.hadoop.filecache.DistributedCache.getCacheArchives(jobConf);\n    for (org.apache.hadoop.fs.Path p : new org.apache.hadoop.fs.Path[]{ new org.apache.hadoop.fs.Path(getAppPath(), archive), rootArchive }) {\n        boolean found = false;\n        for (java.net.URI c : archivesInCache) {\n            if ((!found) && p.toUri().getPath().equals(c.getPath())) {\n                found = true;\n            }\n        }\n        junit.framework.Assert.assertTrue((\"archive \" + p.toUri().getPath()) + \" not found in cache\", found);\n    }\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testLibFileArchives",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            java.util.Properties conf = wc.createConfiguration();\n            conf.setProperty(org.apache.oozie.client.OozieClient.USER_NAME, \"x\");\n            wc.resume((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END);\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_RESUME, org.apache.oozie.servlet.MockDagEngineService.did);\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testResume",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"f\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"a\", \"b\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"a\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.AsynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"j\" }))).addNode(new org.apache.oozie.workflow.lite.NodeDef(\"b\", null, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.AsynchNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"end\" }))).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestControlNodeHandler.class));\n    org.apache.oozie.workflow.lite.LiteWorkflowInstance job = new org.apache.oozie.workflow.lite.LiteWorkflowInstance(def, new org.apache.oozie.util.XConfiguration(), \"1\");\n    job.start();\n    junit.framework.Assert.assertEquals(org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING, job.getStatus());\n    job.signal(\"/b/\", \"\");\n    junit.framework.Assert.assertEquals(2, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.enters.size());\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.kills.size());\n    junit.framework.Assert.assertEquals(1, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.exits.size());\n    junit.framework.Assert.assertEquals(0, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.fails.size());\n}",
        "ClassName": "TestLiteWorkflowLib",
        "Label": 1,
        "MethodName": "testDoneWithRunningNodes",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v0/admin/*\", org.apache.oozie.servlet.V0AdminServlet.class, org.apache.oozie.servlet.TestAdminServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.net.URL url = createURL(org.apache.oozie.client.rest.RestConstants.ADMIN_OS_ENV_RESOURCE, java.util.Collections.EMPTY_MAP);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertTrue(json.containsKey(\"USER\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestAdminServlet",
        "Label": 1,
        "MethodName": "testOsEnv",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"wf\", \"<worklfow-app/>\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"one\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"f\", \"end\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\", \"three\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"two\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"f1\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"three\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"f1\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f1\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"four\", \"five\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"four\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j1\", \"k\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"five\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j1\", \"k\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"six\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j1\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"six\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"six\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"k\", \"k\")).addNode(new org.apache.oozie.workflow.lite.KillNodeDef(\"k\", \"kill\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class)).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    try {\n        invokeForkJoin(parser, def);\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(\"Unexpected Exception\");\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testErrorTransitionForkJoin",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    javax.servlet.ServletRequest request = org.mockito.Mockito.mock(javax.servlet.ServletRequest.class);\n    org.mockito.Mockito.when(request.getRemoteAddr()).thenReturn(null);\n    javax.servlet.ServletResponse response = org.mockito.Mockito.mock(javax.servlet.ServletResponse.class);\n    final java.util.concurrent.atomic.AtomicBoolean invoked = new java.util.concurrent.atomic.AtomicBoolean();\n    javax.servlet.FilterChain chain = new javax.servlet.FilterChain() {\n        @java.lang.Override\n        public void doFilter(javax.servlet.ServletRequest servletRequest, javax.servlet.ServletResponse servletResponse) throws java.io.IOException, javax.servlet.ServletException {\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.HostnameFilter.get().contains(\"???\"));\n            invoked.set(true);\n        }\n    };\n    javax.servlet.Filter filter = new org.apache.oozie.servlet.HostnameFilter();\n    filter.init(null);\n    junit.framework.Assert.assertNull(org.apache.oozie.servlet.HostnameFilter.get());\n    filter.doFilter(request, response, chain);\n    junit.framework.Assert.assertTrue(invoked.get());\n    junit.framework.Assert.assertNull(org.apache.oozie.servlet.HostnameFilter.get());\n    filter.destroy();\n}",
        "ClassName": "TestHostnameFilter",
        "Label": 1,
        "MethodName": "testMissingHostname",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"name\", \"def\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"f\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"one\", \"two\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"one\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j1\", \"k\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j1\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"two\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j2\", \"k\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j2\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"f2\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f2\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"k\", \"k\" }))).addNode(new org.apache.oozie.workflow.lite.KillNodeDef(\"k\", \"kill\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class)).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    try {\n        invokeForkJoin(parser, def);\n        junit.framework.Assert.fail(\"Expected to catch an exception but did not encounter any\");\n    } catch (java.lang.Exception ex) {\n        org.apache.oozie.workflow.WorkflowException we = ((org.apache.oozie.workflow.WorkflowException) (ex.getCause()));\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0732, we.getErrorCode());\n        junit.framework.Assert.assertTrue(we.getMessage().contains(\"Fork [f]\"));\n        junit.framework.Assert.assertTrue(we.getMessage().contains(\"Join [j1]\"));\n        junit.framework.Assert.assertTrue(we.getMessage().contains(\"been [j2]\"));\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testForkJoinMismatch",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.util.Instrumentation inst = new org.apache.oozie.util.Instrumentation();\n    inst.addVariable(\"a\", \"1\", new org.apache.oozie.util.Instrumentation.Variable<java.lang.Long>() {\n        private long counter = 0;\n\n        public java.lang.Long getValue() {\n            return counter++;\n        }\n    });\n    inst.incr(\"a\", \"1\", 1);\n    org.apache.oozie.util.Instrumentation.Cron cron1 = new org.apache.oozie.util.Instrumentation.Cron();\n    inst.addCron(\"a\", \"1\", cron1);\n    junit.framework.Assert.assertEquals(4, inst.getAll().size());\n    junit.framework.Assert.assertEquals(1, inst.getAll().get(\"variables\").size());\n    junit.framework.Assert.assertEquals(1, inst.getAll().get(\"counters\").size());\n    junit.framework.Assert.assertEquals(1, inst.getAll().get(\"timers\").size());\n    junit.framework.Assert.assertEquals(0, inst.getAll().get(\"samplers\").size());\n    junit.framework.Assert.assertEquals(new java.lang.Long(0), ((org.apache.oozie.util.Instrumentation.Element) (inst.getAll().get(\"variables\").get(\"a\").get(\"1\"))).getValue());\n    junit.framework.Assert.assertEquals(new java.lang.Long(1), ((org.apache.oozie.util.Instrumentation.Element) (inst.getAll().get(\"counters\").get(\"a\").get(\"1\"))).getValue());\n    junit.framework.Assert.assertEquals(cron1.getOwn(), ((org.apache.oozie.util.Instrumentation.Timer) (((org.apache.oozie.util.Instrumentation.Element) (inst.getAll().get(\"timers\").get(\"a\").get(\"1\"))).getValue())).getOwn());\n}",
        "ClassName": "TestInstrumentation",
        "Label": 1,
        "MethodName": "testAll",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.jms.JMSJobEventListener wfEventListener = new org.apache.oozie.jms.JMSJobEventListener();\n    wfEventListener.init(conf);\n    org.apache.oozie.event.WorkflowJobEvent wfe = new org.apache.oozie.event.WorkflowJobEvent(\"wfId1\", \"caId1\", org.apache.oozie.client.WorkflowJob.Status.FAILED, \"user1\", \"wf-app-name1\", new java.util.Date(), new java.util.Date());\n    org.apache.oozie.jms.ConnectionContext jmsContext = getConnectionContext();\n    try {\n        javax.jms.Session session = jmsContext.createSession(Session.AUTO_ACKNOWLEDGE);\n        java.lang.String selector = ((org.apache.oozie.client.event.jms.JMSHeaderConstants.USER + \"='Non_matching_user' OR \") + org.apache.oozie.client.event.jms.JMSHeaderConstants.APP_NAME) + \"='wf-app-name1'\";\n        javax.jms.MessageConsumer consumer = jmsContext.createConsumer(session, wfEventListener.getTopic(wfe), selector);\n        wfEventListener.onWorkflowJobEvent(wfe);\n        javax.jms.TextMessage message = ((javax.jms.TextMessage) (consumer.receive(5000)));\n        org.apache.oozie.client.event.message.WorkflowJobMessage wfFailMessage = org.apache.oozie.client.event.jms.JMSMessagingUtils.getEventMessage(message);\n        org.junit.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.FAILED, wfFailMessage.getStatus());\n        junit.framework.Assert.assertEquals(\"user1\", wfFailMessage.getUser());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.Event.MessageType.JOB, wfFailMessage.getMessageType());\n        wfEventListener.destroy();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSJobEventListener",
        "Label": 1,
        "MethodName": "testWorkflowJobSelectorsOr",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestOozieCLI.END_POINTS, org.apache.oozie.client.TestOozieCLI.SERVLET_CLASSES, org.apache.oozie.client.TestOozieCLI.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            int wfCount = org.apache.oozie.servlet.MockDagEngineService.INIT_WF_COUNT;\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\")).close();\n            java.lang.String[] args = new java.lang.String[]{ \"job\", \"-submit\", \"-oozie\", oozieUrl, \"-config\", createConfigFile(appPath.toString()), \"-Da=X\", \"-Db=B\" };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            junit.framework.Assert.assertEquals(\"submit\", org.apache.oozie.servlet.MockDagEngineService.did);\n            junit.framework.Assert.assertFalse(org.apache.oozie.servlet.MockDagEngineService.started.get(wfCount));\n            junit.framework.Assert.assertEquals(\"X\", org.apache.oozie.servlet.MockDagEngineService.submittedConf.get(\"a\"));\n            junit.framework.Assert.assertEquals(\"B\", org.apache.oozie.servlet.MockDagEngineService.submittedConf.get(\"b\"));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestOozieCLI",
        "Label": 1,
        "MethodName": "testSubmitWithPropertyArguments",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.WorkflowJobBean wfJob1 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJob2 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJob3 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJob4 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean wfJob5 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowActionBean wfAction1 = addRecordToWfActionTable(wfJob1.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction2 = addRecordToWfActionTable(wfJob2.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction3 = addRecordToWfActionTable(wfJob3.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction4 = addRecordToWfActionTable(wfJob4.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.WorkflowActionBean wfAction5 = addRecordToWfActionTable(wfJob5.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    org.apache.oozie.CoordinatorActionBean coordAction1 = addRecordToCoordActionTable(coordJob.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob1.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction2 = addRecordToCoordActionTable(coordJob.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob2.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction3 = addRecordToCoordActionTable(coordJob.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob3.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction4 = addRecordToCoordActionTable(coordJob.getId(), 4, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob4.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.CoordinatorActionBean coordAction5 = addRecordToCoordActionTable(coordJob.getId(), 5, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", wfJob5.getId(), \"SUCCEEDED\", 0);\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob1GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob1.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob2GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob2.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob3GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob3.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob4GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob4.getId());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfJob5GetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(wfJob5.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction1GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction1.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction2GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction2.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction3GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction3.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction4GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction4.getId());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor wfAction5GetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(wfAction5.getId());\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction1GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction1.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction2GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction2.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction3GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction3.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction4GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction4.getId());\n    org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor coordAction5GetCmd = new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(coordAction5.getId());\n    wfJob1 = jpaService.execute(wfJob1GetCmd);\n    wfJob2 = jpaService.execute(wfJob2GetCmd);\n    wfJob3 = jpaService.execute(wfJob3GetCmd);\n    wfJob4 = jpaService.execute(wfJob4GetCmd);\n    wfJob5 = jpaService.execute(wfJob5GetCmd);\n    wfAction1 = jpaService.execute(wfAction1GetCmd);\n    wfAction2 = jpaService.execute(wfAction2GetCmd);\n    wfAction3 = jpaService.execute(wfAction3GetCmd);\n    wfAction4 = jpaService.execute(wfAction4GetCmd);\n    wfAction5 = jpaService.execute(wfAction5GetCmd);\n    coordJob = jpaService.execute(coordJobGetCmd);\n    coordAction1 = jpaService.execute(coordAction1GetCmd);\n    coordAction2 = jpaService.execute(coordAction2GetCmd);\n    coordAction3 = jpaService.execute(coordAction3GetCmd);\n    coordAction4 = jpaService.execute(coordAction4GetCmd);\n    coordAction5 = jpaService.execute(coordAction5GetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfJob5.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, wfAction5.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUCCEEDED, coordJob.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction1.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction2.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction3.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction4.getStatus());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, coordAction5.getStatus());\n    new org.apache.oozie.command.PurgeXCommand(7, 7, 1, 10).call();\n    try {\n        jpaService.execute(coordJobGetCmd);\n        junit.framework.Assert.fail(\"Coordinator Job should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordAction1GetCmd);\n        junit.framework.Assert.fail(\"Coordinator Action 1 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordAction2GetCmd);\n        junit.framework.Assert.fail(\"Coordinator Action 2 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordAction3GetCmd);\n        junit.framework.Assert.fail(\"Coordinator Action 3 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordAction4GetCmd);\n        junit.framework.Assert.fail(\"Coordinator Action 4 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(coordAction5GetCmd);\n        junit.framework.Assert.fail(\"Coordinator Action 5 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfJob1GetCmd);\n        junit.framework.Assert.fail(\"Workflow Job 1 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfJob2GetCmd);\n        junit.framework.Assert.fail(\"Workflow Job 2 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfJob3GetCmd);\n        junit.framework.Assert.fail(\"Workflow Job 3 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfJob4GetCmd);\n        junit.framework.Assert.fail(\"Workflow Job 4 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfJob5GetCmd);\n        junit.framework.Assert.fail(\"Workflow Job 5 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0604, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfAction1GetCmd);\n        junit.framework.Assert.fail(\"Workflow Action 1 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfAction2GetCmd);\n        junit.framework.Assert.fail(\"Workflow Action 2 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfAction3GetCmd);\n        junit.framework.Assert.fail(\"Workflow Action 3 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfAction4GetCmd);\n        junit.framework.Assert.fail(\"Workflow Action 4 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n    try {\n        jpaService.execute(wfAction5GetCmd);\n        junit.framework.Assert.fail(\"Workflow Action 5 should have been purged\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, je.getErrorCode());\n    }\n}",
        "ClassName": "TestPurgeXCommand",
        "Label": 1,
        "MethodName": "testPurgeCoordWithWFChild3MoreThanLimit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.WorkflowJobBean job1 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    org.apache.oozie.WorkflowJobBean job2 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.FAILED, org.apache.oozie.workflow.WorkflowInstance.Status.FAILED);\n    org.apache.oozie.WorkflowJobBean job3 = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, org.apache.oozie.workflow.WorkflowInstance.Status.SUCCEEDED);\n    job3.setParentId(job1.getId());\n    jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobUpdateJPAExecutor(job3));\n    java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>();\n    list.addAll(jpaService.execute(new org.apache.oozie.executor.jpa.WorkflowJobsGetForPurgeJPAExecutor(1, 20)));\n    checkWorkflows(list, job1.getId(), job2.getId());\n}",
        "ClassName": "TestWorkflowJobsGetForPurgeJPAExecutor",
        "Label": 1,
        "MethodName": "testWfJobsGetForPurgeWithParent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.KILLED, false, false);\n    _testGetJobsForStatus();\n    _testGetJobsForGroup();\n    addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.KILLED, false, false);\n    _testGetJobsForAppName();\n    _testGetJobInfoForUser();\n    _testGetJobsForUserAndStatus();\n}",
        "ClassName": "TestCoordJobsXCommand",
        "Label": 1,
        "MethodName": "testCoordJobsGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    setSystemProperty(\"oozie.authentication.simple.anonymous.allowed\", \"false\");\n    runTest(new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            java.lang.String[] args = new java.lang.String[]{ \"admin\", \"-status\", \"-oozie\", oozieUrl };\n            junit.framework.Assert.assertEquals(0, new org.apache.oozie.cli.OozieCLI().run(args));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestAuthFilterAuthOozieClient",
        "Label": 1,
        "MethodName": "testClientWithoutAnonymous",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String currentDatePlusMonth = org.apache.oozie.test.XDataTestCase.getCurrentDateafterIncrementingInMonths(1);\n    java.util.Date start = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    java.util.Date end = org.apache.oozie.util.DateUtils.parseDateOozieTZ(currentDatePlusMonth);\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, start, end, true, true, 4);\n    addRecordToCoordActionTable(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUSPENDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUSPENDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 3, org.apache.oozie.client.CoordinatorAction.Status.SUSPENDED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(job.getId(), 4, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    final java.lang.String jobId = job.getId();\n    final org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    java.lang.Runnable runnable = new org.apache.oozie.service.StatusTransitService.StatusTransitRunnable();\n    runnable.run();\n    waitFor(20 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            org.apache.oozie.CoordinatorJobBean coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(jobId));\n            return coordJob.getStatus() == org.apache.oozie.client.Job.Status.SUSPENDED;\n        }\n    });\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordGetCmd);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.Job.Status.SUSPENDED, job.getStatus());\n    junit.framework.Assert.assertFalse(job.isPending());\n}",
        "ClassName": "TestStatusTransitService",
        "Label": 1,
        "MethodName": "testCoordStatusTransitServiceSuspendedBottomUp",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor coordJobGetCmd = new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(job.getId());\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.SUCCEEDED);\n    new org.apache.oozie.command.coord.CoordSuspendXCommand(job.getId()).call();\n    job = jpaService.execute(coordJobGetCmd);\n    junit.framework.Assert.assertEquals(job.getStatus(), org.apache.oozie.client.Job.Status.SUCCEEDED);\n}",
        "ClassName": "TestCoordSuspendXCommand",
        "Label": 1,
        "MethodName": "testCoordSuspendNegative",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL();\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            java.util.Properties conf = wc.createConfiguration();\n            conf.setProperty(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n            org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"app\");\n            getFileSystem().mkdirs(appPath);\n            getFileSystem().create(new org.apache.hadoop.fs.Path(appPath, \"workflow.xml\")).close();\n            conf.setProperty(org.apache.oozie.client.OozieClient.APP_PATH, appPath.toString());\n            wc.reRun((org.apache.oozie.servlet.MockDagEngineService.JOB_ID + \"1\") + org.apache.oozie.servlet.MockDagEngineService.JOB_ID_END, conf);\n            junit.framework.Assert.assertEquals(org.apache.oozie.client.rest.RestConstants.JOB_ACTION_RERUN, org.apache.oozie.servlet.MockDagEngineService.did);\n            junit.framework.Assert.assertTrue(org.apache.oozie.servlet.MockDagEngineService.started.get(1));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testReRun",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    addRecordToWfActionTable(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n    addRecordToWfActionTable(job.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n    _testWfInfoWithActionSubsetGet(job.getId());\n    java.lang.System.out.println(\"testWfInfoWithActionSubsetGet Successful\");\n}",
        "ClassName": "TestWorkflowInfoWithActionsSubsetGetJPAExecutor",
        "Label": 1,
        "MethodName": "testWfInfoWithActionSubsetGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    services.destroy();\n    services = super.setupServicesForHCatalog();\n    org.apache.hadoop.conf.Configuration conf = services.getConf();\n    java.lang.String server2 = \"hcat://${1}.${2}.server.com:8020=java.naming.factory.initial#Dummy.Factory;\" + \"java.naming.provider.url#tcp://broker.${2}:61616\";\n    java.lang.String server3 = \"hcat://xyz.corp.dummy.com=java.naming.factory.initial#Dummy.Factory;\" + \"java.naming.provider.url#tcp:localhost:61616\";\n    java.lang.String jmsConnectionURL = (server2 + \",\") + server3;\n    conf.set(org.apache.oozie.service.HCatAccessorService.JMS_CONNECTIONS_PROPERTIES, jmsConnectionURL);\n    services.init();\n    org.apache.oozie.service.HCatAccessorService hcatService = services.get(org.apache.oozie.service.HCatAccessorService.class);\n    org.apache.oozie.jms.JMSConnectionInfo connInfo = hcatService.getJMSConnectionInfo(new java.net.URI(\"http://unknown:9999/fs\"));\n    junit.framework.Assert.assertNull(connInfo);\n    connInfo = hcatService.getJMSConnectionInfo(new java.net.URI(\"hcat://server1.colo1.server.com:8020/db/table/pk1=val1;pk2=val2\"));\n    junit.framework.Assert.assertEquals(\"java.naming.factory.initial#Dummy.Factory;java.naming.provider.url#tcp://broker.colo1:61616\", connInfo.getJNDIPropertiesString());\n    connInfo = hcatService.getJMSConnectionInfo(new java.net.URI(\"hcat://xyz.corp.dummy.com/db/table\"));\n    junit.framework.Assert.assertEquals(\"java.naming.factory.initial#Dummy.Factory;java.naming.provider.url#tcp:localhost:61616\", connInfo.getJNDIPropertiesString());\n}",
        "ClassName": "TestHCatAccessorService",
        "Label": 1,
        "MethodName": "testGetJMSConnectionInfoNoDefault",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(\"coord-action-create\");\n    java.lang.String expr = \"${coord:offset(-1440, \\\"MINUTE\\\")}\";\n    junit.framework.Assert.assertEquals(\"2009-09-08T23:59Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:offset(-24, \\\"HOUR\\\")}\";\n    junit.framework.Assert.assertEquals(\"2009-09-08T23:59Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:offset(-1, \\\"DAY\\\")}\";\n    junit.framework.Assert.assertEquals(\"2009-09-08T23:59Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:offset(1, \\\"MONTH\\\")}\";\n    junit.framework.Assert.assertEquals(\"2009-10-09T23:59Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:offset(1, \\\"YEAR\\\")}\";\n    junit.framework.Assert.assertEquals(\"2010-09-09T23:59Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:offset(-10, \\\"DAY\\\")}\";\n    junit.framework.Assert.assertEquals(\"\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2015-01-02T00:45Z\"));\n    ds.setFrequency(1);\n    ds.setTimeUnit(org.apache.oozie.coord.TimeUnit.YEAR);\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2010-01-02T00:01Z\"));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    expr = \"${coord:offset(0, \\\"YEAR\\\")} ${coord:offset(1, \\\"YEAR\\\")} ${coord:offset(-1, \\\"YEAR\\\")}\" + \" ${coord:offset(-3, \\\"YEAR\\\")}\";\n    junit.framework.Assert.assertEquals(\"2015-01-02T00:01Z 2016-01-02T00:01Z 2014-01-02T00:01Z 2012-01-02T00:01Z\", eval.evaluate(expr, java.lang.String.class));\n    expr = \"${coord:offset(0, \\\"MONTH\\\")} ${coord:offset(12, \\\"MONTH\\\")} ${coord:offset(-12, \\\"MONTH\\\")}\" + \" ${coord:offset(-36, \\\"MONTH\\\")}\";\n    junit.framework.Assert.assertEquals(\"2015-01-02T00:01Z 2016-01-02T00:01Z 2014-01-02T00:01Z 2012-01-02T00:01Z\", eval.evaluate(expr, java.lang.String.class));\n    expr = \"${coord:offset(0, \\\"DAY\\\")} ${coord:offset(365, \\\"DAY\\\")} ${coord:offset(-365, \\\"DAY\\\")}\" + \" ${coord:offset(-1096, \\\"DAY\\\")}\";\n    junit.framework.Assert.assertEquals(\"2015-01-02T00:01Z 2016-01-02T00:01Z 2014-01-02T00:01Z 2012-01-02T00:01Z\", eval.evaluate(expr, java.lang.String.class));\n    expr = \"${coord:offset(0, \\\"HOUR\\\")} ${coord:offset(8760, \\\"HOUR\\\")} ${coord:offset(-8760, \\\"HOUR\\\")}\" + \" ${coord:offset(-26304, \\\"HOUR\\\")}\";\n    junit.framework.Assert.assertEquals(\"2015-01-02T00:01Z 2016-01-02T00:01Z 2014-01-02T00:01Z 2012-01-02T00:01Z\", eval.evaluate(expr, java.lang.String.class));\n    expr = \"${coord:offset(0, \\\"MINUTE\\\")} ${coord:offset(525600, \\\"MINUTE\\\")} ${coord:offset(-525600, \\\"MINUTE\\\")}\" + \" ${coord:offset(-1578240, \\\"MINUTE\\\")}\";\n    junit.framework.Assert.assertEquals(\"2015-01-02T00:01Z 2016-01-02T00:01Z 2014-01-02T00:01Z 2012-01-02T00:01Z\", eval.evaluate(expr, java.lang.String.class));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2015-01-02T00:45Z\"));\n    ds.setFrequency(1);\n    ds.setTimeUnit(org.apache.oozie.coord.TimeUnit.MINUTE);\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2010-01-02T00:01Z\"));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    expr = \"${coord:offset(0, \\\"MINUTE\\\")} ${coord:offset(1, \\\"MINUTE\\\")} ${coord:offset(-1, \\\"MINUTE\\\")}\" + \" ${coord:offset(-3, \\\"MINUTE\\\")}\";\n    junit.framework.Assert.assertEquals(\"2015-01-02T00:45Z 2015-01-02T00:46Z 2015-01-02T00:44Z 2015-01-02T00:42Z\", eval.evaluate(expr, java.lang.String.class));\n    expr = \"${coord:offset(0, \\\"HOUR\\\")} ${coord:offset(1, \\\"HOUR\\\")} ${coord:offset(-1, \\\"HOUR\\\")}\" + \" ${coord:offset(-3, \\\"HOUR\\\")}\";\n    junit.framework.Assert.assertEquals(\"2015-01-02T00:45Z 2015-01-02T01:45Z 2015-01-01T23:45Z 2015-01-01T21:45Z\", eval.evaluate(expr, java.lang.String.class));\n    expr = \"${coord:offset(0, \\\"DAY\\\")} ${coord:offset(1, \\\"DAY\\\")} ${coord:offset(-1, \\\"DAY\\\")}\" + \" ${coord:offset(-3, \\\"DAY\\\")}\";\n    junit.framework.Assert.assertEquals(\"2015-01-02T00:45Z 2015-01-03T00:45Z 2015-01-01T00:45Z 2014-12-30T00:45Z\", eval.evaluate(expr, java.lang.String.class));\n    expr = \"${coord:offset(0, \\\"MONTH\\\")} ${coord:offset(1, \\\"MONTH\\\")} ${coord:offset(-1, \\\"MONTH\\\")}\" + \" ${coord:offset(-3, \\\"MONTH\\\")}\";\n    junit.framework.Assert.assertEquals(\"2015-01-02T00:45Z 2015-02-02T00:45Z 2014-12-02T00:45Z 2014-10-01T23:45Z\", eval.evaluate(expr, java.lang.String.class));\n    expr = \"${coord:offset(0, \\\"YEAR\\\")} ${coord:offset(1, \\\"YEAR\\\")} ${coord:offset(-1, \\\"YEAR\\\")}\" + \" ${coord:offset(-3, \\\"YEAR\\\")}\";\n    junit.framework.Assert.assertEquals(\"2015-01-02T00:45Z 2016-01-02T00:45Z 2014-01-02T00:45Z 2012-01-02T00:45Z\", eval.evaluate(expr, java.lang.String.class));\n    appInst.setNominalTime(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2015-01-02T00:45Z\"));\n    ds.setFrequency(4);\n    ds.setTimeUnit(org.apache.oozie.coord.TimeUnit.HOUR);\n    ds.setInitInstance(org.apache.oozie.util.DateUtils.parseDateOozieTZ(\"2010-01-02T00:01Z\"));\n    ds.setTimeZone(org.apache.oozie.util.DateUtils.getTimeZone(\"America/Los_Angeles\"));\n    expr = \"${coord:offset(5, \\\"MINUTE\\\")}\";\n    junit.framework.Assert.assertEquals(\"2015-01-02T00:01Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:offset(1, \\\"HOUR\\\")}\";\n    junit.framework.Assert.assertEquals(\"2015-01-02T00:01Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:offset(7, \\\"HOUR\\\")}\";\n    junit.framework.Assert.assertEquals(\"2015-01-02T04:01Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:offset(-2, \\\"HOUR\\\")}\";\n    junit.framework.Assert.assertEquals(\"2015-01-01T20:01Z\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:offset(-43825, \\\"HOUR\\\")}\";\n    junit.framework.Assert.assertEquals(\"\", org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr));\n    expr = \"${coord:offset(1, \\\"blah\\\")}\";\n    try {\n        org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr);\n        junit.framework.Assert.fail((\"eval of \" + expr) + \" should have thrown an exception\");\n    } catch (java.lang.Exception e) {\n        junit.framework.Assert.assertTrue(e.getMessage().contains(\"Unable to evaluate\"));\n    }\n    expr = \"${coord:offset(4.5, \\\"blah\\\")}\";\n    try {\n        org.apache.oozie.coord.CoordELFunctions.evalAndWrap(eval, expr);\n        junit.framework.Assert.fail((\"eval of \" + expr) + \" should have thrown an exception\");\n    } catch (java.lang.Exception e) {\n        junit.framework.Assert.assertTrue(e.getMessage().contains(\"Unable to evaluate\"));\n    }\n}",
        "ClassName": "TestCoordELFunctions",
        "Label": 1,
        "MethodName": "testOffset",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services services = new org.apache.oozie.service.Services();\n    try {\n        services.init();\n        java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-schema-valid.xml\", -1);\n        java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n        org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n        createTestCaseSubDir(\"lib\");\n        writer = new java.io.FileWriter(getTestCaseDir() + \"/lib/maputil.jar\");\n        writer.write(\"bla bla\");\n        writer.close();\n        writer = new java.io.FileWriter(getTestCaseDir() + \"/lib/reduceutil.so\");\n        writer.write(\"bla bla\");\n        writer.close();\n        createTestCaseSubDir(\"scripts\");\n        writer = new java.io.FileWriter(getTestCaseDir() + \"/scripts/myscript.sh\");\n        writer.write(\"bla bla\");\n        writer.close();\n        org.apache.oozie.service.WorkflowAppService wps = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.WorkflowAppService.class);\n        org.apache.hadoop.conf.Configuration jobConf = new org.apache.oozie.util.XConfiguration();\n        jobConf.set(org.apache.oozie.client.OozieClient.APP_PATH, ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\");\n        jobConf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n        org.apache.hadoop.conf.Configuration protoConf = wps.createProtoActionConf(jobConf, \"authToken\", true);\n        junit.framework.Assert.assertEquals(org.apache.oozie.test.XTestCase.getTestUser(), protoConf.get(org.apache.oozie.client.OozieClient.USER_NAME));\n        junit.framework.Assert.assertEquals(2, protoConf.getStrings(org.apache.oozie.service.WorkflowAppService.APP_LIB_PATH_LIST).length);\n        java.lang.String f1 = protoConf.getStrings(org.apache.oozie.service.WorkflowAppService.APP_LIB_PATH_LIST)[0];\n        java.lang.String f2 = protoConf.getStrings(org.apache.oozie.service.WorkflowAppService.APP_LIB_PATH_LIST)[1];\n        java.lang.String ref1 = (\"file://\" + getTestCaseDir()) + \"/lib/reduceutil.so\";\n        java.lang.String ref2 = (\"file://\" + getTestCaseDir()) + \"/lib/maputil.jar\";\n        junit.framework.Assert.assertTrue(f1.equals(ref1) || f1.equals(ref2));\n        junit.framework.Assert.assertTrue(f2.equals(ref1) || f2.equals(ref2));\n        junit.framework.Assert.assertTrue(!f1.equals(f2));\n    } finally {\n        services.destroy();\n    }\n}",
        "ClassName": "TestLiteWorkflowAppService",
        "Label": 1,
        "MethodName": "testCreateprotoConf",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean jobA = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.CoordinatorActionBean actionA1 = addRecordToCoordActionTable(jobA.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean actionA2 = addRecordToCoordActionTable(jobA.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.CoordinatorJobBean jobB = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.CoordinatorActionBean actionB1 = addRecordToCoordActionTable(jobB.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean actionB2 = addRecordToCoordActionTable(jobB.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.CoordinatorJobBean jobC = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.SUCCEEDED, false, false);\n    org.apache.oozie.CoordinatorActionBean actionC1 = addRecordToCoordActionTable(jobC.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.CoordinatorActionBean actionC2 = addRecordToCoordActionTable(jobC.getId(), 2, org.apache.oozie.client.CoordinatorAction.Status.SUCCEEDED, \"coord-action-get.xml\", 0);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    try {\n        setSystemProperty(org.apache.oozie.FaultInjection.FAULT_INJECTION, \"true\");\n        setSystemProperty(org.apache.oozie.command.SkipCommitFaultInjection.ACTION_FAILOVER_FAULT_INJECTION, \"true\");\n        java.util.List<java.lang.String> deleteList = new java.util.ArrayList<java.lang.String>();\n        deleteList.add(jobA.getId());\n        deleteList.add(jobB.getId());\n        deleteList.add(jobC.getId());\n        try {\n            jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobsDeleteJPAExecutor(deleteList));\n            junit.framework.Assert.fail(\"Should have skipped commit for failover testing\");\n        } catch (java.lang.RuntimeException re) {\n            junit.framework.Assert.assertEquals(\"Skipping Commit for Failover Testing\", re.getMessage());\n        }\n    } finally {\n        org.apache.oozie.FaultInjection.deactivate(\"org.apache.oozie.command.SkipCommitFaultInjection\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(jobA.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job A should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(actionA1.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action A1 should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(actionA2.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action A2 should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(jobB.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job B should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(actionB1.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action B1 should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(actionB2.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action B2 should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(jobC.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Job C should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(actionC1.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action C1 should not have been deleted\");\n    }\n    try {\n        jpaService.execute(new org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor(actionC2.getId()));\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException je) {\n        junit.framework.Assert.fail(\"Coordinator Action C2 should not have been deleted\");\n    }\n}",
        "ClassName": "TestCoordJobsDeleteJPAExecutor",
        "Label": 1,
        "MethodName": "testDeleteCoordsRollback",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path actionDir = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path newDir = new org.apache.hadoop.fs.Path(actionDir, \"newDir\");\n    if (fs.exists(newDir)) {\n        fs.delete(newDir, true);\n    }\n    java.lang.String prepareXML = (((\"<prepare>\" + \"<mkdir path='\") + newDir) + \"'/>\") + \"</prepare>\";\n    org.apache.hadoop.mapred.JobConf conf = createJobConf();\n    org.apache.oozie.action.hadoop.LauncherMapper.setupLauncherURIHandlerConf(conf);\n    org.apache.oozie.action.hadoop.PrepareActionsDriver.doOperations(prepareXML, conf);\n    junit.framework.Assert.assertTrue(fs.exists(newDir));\n}",
        "ClassName": "TestFSPrepareActions",
        "Label": 1,
        "MethodName": "testMkdir",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path systemLibPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"systemlib\");\n    org.apache.hadoop.fs.Path javaShareLibPath = new org.apache.hadoop.fs.Path(systemLibPath, \"java\");\n    getFileSystem().mkdirs(javaShareLibPath);\n    org.apache.hadoop.fs.Path jar1Path = new org.apache.hadoop.fs.Path(javaShareLibPath, \"jar1.jar\");\n    getFileSystem().create(jar1Path).close();\n    org.apache.hadoop.fs.Path jar2Path = new org.apache.hadoop.fs.Path(javaShareLibPath, \"jar2.jar\");\n    getFileSystem().create(jar2Path).close();\n    org.apache.hadoop.fs.Path hcatShareLibPath = new org.apache.hadoop.fs.Path(systemLibPath, \"hcat\");\n    getFileSystem().mkdirs(hcatShareLibPath);\n    org.apache.hadoop.fs.Path jar3Path = new org.apache.hadoop.fs.Path(hcatShareLibPath, \"jar3.jar\");\n    getFileSystem().create(jar3Path).close();\n    org.apache.hadoop.fs.Path jar4Path = new org.apache.hadoop.fs.Path(hcatShareLibPath, \"jar4.jar\");\n    getFileSystem().create(jar4Path).close();\n    org.apache.hadoop.fs.Path otherShareLibPath = new org.apache.hadoop.fs.Path(systemLibPath, \"other\");\n    getFileSystem().mkdirs(otherShareLibPath);\n    org.apache.hadoop.fs.Path jar5Path = new org.apache.hadoop.fs.Path(otherShareLibPath, \"jar5.jar\");\n    getFileSystem().create(jar5Path).close();\n    java.lang.String actionXml = (((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<job-xml>job.xml</job-xml>\") + \"<job-xml>job2.xml</job-xml>\") + \"<main-class>MAIN-CLASS</main-class>\") + \"</java>\";\n    org.jdom.Element eActionXml = org.apache.oozie.util.XmlUtils.parseXml(actionXml);\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml, null);\n    org.apache.oozie.WorkflowJobBean workflow = ((org.apache.oozie.WorkflowJobBean) (context.getWorkflow()));\n    org.apache.oozie.util.XConfiguration wfConf = new org.apache.oozie.util.XConfiguration();\n    wfConf.set(org.apache.oozie.service.WorkflowAppService.HADOOP_USER, org.apache.oozie.test.XTestCase.getTestUser());\n    wfConf.set(org.apache.oozie.client.OozieClient.APP_PATH, new org.apache.hadoop.fs.Path(getAppPath(), \"workflow.xml\").toString());\n    wfConf.setBoolean(org.apache.oozie.client.OozieClient.USE_SYSTEM_LIBPATH, true);\n    workflow.setConf(org.apache.oozie.util.XmlUtils.prettyPrint(wfConf).toString());\n    org.apache.oozie.service.Services.get().getConf().set(\"oozie.action.sharelib.for.java\", \"java,hcat\");\n    org.apache.oozie.action.hadoop.JavaActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    org.apache.hadoop.conf.Configuration jobConf = ae.createBaseHadoopConf(context, eActionXml);\n    ae.setupLauncherConf(jobConf, eActionXml, getAppPath(), context);\n    ae.setLibFilesArchives(context, eActionXml, getAppPath(), jobConf);\n    java.net.URI[] cacheFiles = org.apache.hadoop.filecache.DistributedCache.getCacheFiles(jobConf);\n    java.lang.String cacheFilesStr = java.util.Arrays.toString(cacheFiles);\n    junit.framework.Assert.assertTrue(cacheFilesStr.contains(jar1Path.toString()));\n    junit.framework.Assert.assertTrue(cacheFilesStr.contains(jar2Path.toString()));\n    junit.framework.Assert.assertTrue(cacheFilesStr.contains(jar3Path.toString()));\n    junit.framework.Assert.assertTrue(cacheFilesStr.contains(jar4Path.toString()));\n    workflow = ((org.apache.oozie.WorkflowJobBean) (context.getWorkflow()));\n    wfConf = new org.apache.oozie.util.XConfiguration();\n    wfConf.set(org.apache.oozie.service.WorkflowAppService.HADOOP_USER, org.apache.oozie.test.XTestCase.getTestUser());\n    wfConf.set(org.apache.oozie.client.OozieClient.APP_PATH, new org.apache.hadoop.fs.Path(getAppPath(), \"workflow.xml\").toString());\n    wfConf.setBoolean(org.apache.oozie.client.OozieClient.USE_SYSTEM_LIBPATH, true);\n    wfConf.set(\"oozie.action.sharelib.for.java\", \"other,hcat\");\n    workflow.setConf(org.apache.oozie.util.XmlUtils.prettyPrint(wfConf).toString());\n    org.apache.oozie.service.Services.get().getConf().set(\"oozie.action.sharelib.for.java\", \"java\");\n    ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    jobConf = ae.createBaseHadoopConf(context, eActionXml);\n    ae.setupLauncherConf(jobConf, eActionXml, getAppPath(), context);\n    ae.setLibFilesArchives(context, eActionXml, getAppPath(), jobConf);\n    cacheFiles = org.apache.hadoop.filecache.DistributedCache.getCacheFiles(jobConf);\n    cacheFilesStr = java.util.Arrays.toString(cacheFiles);\n    junit.framework.Assert.assertFalse(cacheFilesStr.contains(jar1Path.toString()));\n    junit.framework.Assert.assertFalse(cacheFilesStr.contains(jar2Path.toString()));\n    junit.framework.Assert.assertTrue(cacheFilesStr.contains(jar3Path.toString()));\n    junit.framework.Assert.assertTrue(cacheFilesStr.contains(jar4Path.toString()));\n    junit.framework.Assert.assertTrue(cacheFilesStr.contains(jar5Path.toString()));\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testAddActionShareLib",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.FAILED, \"coord-action-get.xml\", 0);\n    org.apache.hadoop.fs.Path appPath = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"coord\");\n    java.lang.String actionXml = getCoordActionXml(appPath, \"coord-action-get.xml\");\n    java.lang.String actionNomialTime = getActionNominalTime(actionXml);\n    java.util.Date nominalTime = org.apache.oozie.util.DateUtils.parseDateOozieTZ(actionNomialTime);\n    java.util.Date d1 = new java.util.Date(nominalTime.getTime() - 1000);\n    java.util.Date d2 = new java.util.Date(nominalTime.getTime() + 1000);\n    _testGetActionForDates(job.getId(), d1, d2, 1);\n    d1 = new java.util.Date(nominalTime.getTime() + 1000);\n    d2 = new java.util.Date(nominalTime.getTime() + 2000);\n    _testGetActionForDates(job.getId(), d1, d2, 0);\n    cleanUpDBTables();\n    job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    addRecordToCoordActionTable(job.getId(), actionNum, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    _testGetActionForDates(job.getId(), d1, d2, 0);\n}",
        "ClassName": "TestCoordJobGetActionIdsForDatesJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action1 = createWorkflowAction(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action2 = createWorkflowAction(job.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    job.setStatus(org.apache.oozie.client.WorkflowJob.Status.RUNNING);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> insertList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    insertList.add(action1);\n    insertList.add(action2);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> updateList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    updateList.add(job);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BulkUpdateInsertForCoordActionStatusJPAExecutor wfUpdateCmd1 = new org.apache.oozie.executor.jpa.BulkUpdateInsertForCoordActionStatusJPAExecutor(updateList, insertList);\n    setSystemProperty(org.apache.oozie.FaultInjection.FAULT_INJECTION, \"true\");\n    setSystemProperty(org.apache.oozie.command.SkipCommitFaultInjection.ACTION_FAILOVER_FAULT_INJECTION, \"true\");\n    try {\n        jpaService.execute(wfUpdateCmd1);\n        junit.framework.Assert.fail(\"Expected exception due to commit failure but didn't get any\");\n    } catch (java.lang.Exception e) {\n    }\n    org.apache.oozie.FaultInjection.deactivate(\"org.apache.oozie.command.SkipCommitFaultInjection\");\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId());\n    org.apache.oozie.WorkflowJobBean wfBean = jpaService.execute(wfGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", wfBean.getStatusStr());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action1.getId());\n    try {\n        action1 = jpaService.execute(actionGetCmd);\n        junit.framework.Assert.fail(\"Expected exception but didnt get any\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException jpaee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, jpaee.getErrorCode());\n    }\n    actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action2.getId());\n    try {\n        action2 = jpaService.execute(actionGetCmd);\n        junit.framework.Assert.fail(\"Expected exception but didnt get any\");\n    } catch (org.apache.oozie.executor.jpa.JPAExecutorException jpaee) {\n        junit.framework.Assert.assertEquals(org.apache.oozie.ErrorCode.E0605, jpaee.getErrorCode());\n    }\n}",
        "ClassName": "TestBulkUpdateInsertForCoordActionStatusJPAExecutor",
        "Label": 1,
        "MethodName": "testBulkInsertUpdatesRollback",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    init(false, true);\n    org.apache.oozie.BundleJobBean job = this.addRecordToBundleJobTable(org.apache.oozie.client.Job.Status.PREP, false);\n    junit.framework.Assert.assertNotNull(job);\n    org.apache.oozie.service.AuthorizationService as = services.get(org.apache.oozie.service.AuthorizationService.class);\n    junit.framework.Assert.assertNotNull(as);\n    as.authorizeForJob(org.apache.oozie.test.XTestCase.getTestUser(), job.getId(), false);\n    as.authorizeForJob(org.apache.oozie.test.XTestCase.getTestUser(), job.getId(), true);\n}",
        "ClassName": "TestAuthorizationService",
        "Label": 1,
        "MethodName": "testAuthorizationServiceForBundle",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    int actionNum = 1;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.RUNNING, false, false);\n    java.lang.String jobId = job.getId();\n    addRecordToCoordActionTable(jobId, actionNum++, org.apache.oozie.client.CoordinatorAction.Status.RUNNING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(jobId, actionNum++, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(jobId, actionNum++, org.apache.oozie.client.CoordinatorAction.Status.FAILED, \"coord-action-get.xml\", 0);\n    addRecordToCoordActionTable(jobId, actionNum++, org.apache.oozie.client.CoordinatorAction.Status.KILLED, \"coord-action-get.xml\", 0);\n    _testCoordActionsNotCompletedSize(jobId, 2);\n}",
        "ClassName": "TestCoordJobGetActionsNotCompletedJPAExecutor",
        "Label": 1,
        "MethodName": "testCoordActionsNotCompletetedForSize",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.service.Services.get().getConf().setInt(org.apache.oozie.service.RecoveryService.CONF_SERVICE_INTERVAL, 6000);\n    java.lang.String newHCatDependency1 = (\"hcat://\" + server) + \"/nodb/notable/dt=20120430;country=brazil\";\n    java.lang.String newHCatDependency2 = (\"hcat://\" + server) + \"/nodb/notable/dt=20120430;country=usa\";\n    java.lang.String newHCatDependency = (newHCatDependency1 + org.apache.oozie.coord.CoordELFunctions.INSTANCE_SEPARATOR) + newHCatDependency2;\n    org.apache.oozie.CoordinatorJobBean job = addRecordToCoordJobTableForWaiting(\"coord-job-for-action-input-check.xml\", org.apache.oozie.client.Job.Status.RUNNING, false, true);\n    org.apache.oozie.CoordinatorActionBean action = addRecordToCoordActionTableForWaiting(job.getId(), 1, org.apache.oozie.client.CoordinatorAction.Status.WAITING, \"coord-action-for-action-input-check.xml\", null, newHCatDependency, \"Z\");\n    java.lang.String actionId = action.getId();\n    checkCoordAction(actionId, newHCatDependency, org.apache.oozie.client.CoordinatorAction.Status.WAITING);\n    try {\n        new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId, true).call();\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception e) {\n        junit.framework.Assert.assertTrue(e.getMessage().contains(\"NoSuchObjectException\"));\n    }\n    org.apache.oozie.service.CallableQueueService callableQueueService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    junit.framework.Assert.assertEquals(0, callableQueueService.getQueueDump().size());\n    new org.apache.oozie.command.coord.CoordActionInputCheckXCommand(actionId, job.getId()).call();\n    callableQueueService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.CallableQueueService.class);\n    junit.framework.Assert.assertEquals(0, callableQueueService.getQueueDump().size());\n    setMissingDependencies(actionId, newHCatDependency1);\n    try {\n        new org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand(actionId, true).call();\n        junit.framework.Assert.fail();\n    } catch (java.lang.Exception e) {\n        junit.framework.Assert.assertTrue(e.getMessage().contains(\"NoSuchObjectException\"));\n    }\n    final java.util.List<java.lang.String> queueDump = callableQueueService.getQueueDump();\n    junit.framework.Assert.assertEquals(1, callableQueueService.getQueueDump().size());\n    junit.framework.Assert.assertTrue(queueDump.get(0).contains(org.apache.oozie.command.coord.CoordPushDependencyCheckXCommand.class.getName()));\n    log.info(\"Queue dump is \" + queueDump.toString());\n    junit.framework.Assert.assertTrue(queueDump.get(0).matches(\"delay=599[0-9]{3}, .*\"));\n}",
        "ClassName": "TestCoordPushDependencyCheckXCommand",
        "Label": 1,
        "MethodName": "testRequeueOnException",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.RUNNING, org.apache.oozie.workflow.WorkflowInstance.Status.RUNNING);\n    addRecordToWfActionTable(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.OK);\n    addRecordToWfActionTableWithRunningStatus(job.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.RUNNING);\n    sleep(2000);\n    _testGetRunningActions(1);\n}",
        "ClassName": "TestWorkflowActionsRunningGetJPAExecutor",
        "Label": 1,
        "MethodName": "testWfActionsRunningGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v1/admin/*\", org.apache.oozie.servlet.V1AdminServlet.class, org.apache.oozie.servlet.TestV1AdminServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.net.URL url = createURL(org.apache.oozie.client.rest.RestConstants.ADMIN_TIME_ZONES_RESOURCE, java.util.Collections.EMPTY_MAP);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertTrue(json.containsKey(org.apache.oozie.client.rest.JsonTags.AVAILABLE_TIME_ZONES));\n            org.json.simple.JSONArray array = ((org.json.simple.JSONArray) (json.get(org.apache.oozie.client.rest.JsonTags.AVAILABLE_TIME_ZONES)));\n            junit.framework.Assert.assertFalse(array.isEmpty());\n            return null;\n        }\n    });\n}",
        "ClassName": "TestV1AdminServlet",
        "Label": 1,
        "MethodName": "testAvailableTimeZones",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.CoordinatorJobBean coordJob = addRecordToCoordJobTable(org.apache.oozie.client.Job.Status.PREP, true, true);\n    org.apache.oozie.WorkflowJobBean job = addRecordToWfJobTable(org.apache.oozie.client.WorkflowJob.Status.PREP, org.apache.oozie.workflow.WorkflowInstance.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action1 = createWorkflowAction(job.getId(), \"1\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    org.apache.oozie.WorkflowActionBean action2 = createWorkflowAction(job.getId(), \"2\", org.apache.oozie.client.WorkflowAction.Status.PREP);\n    job.setStatus(org.apache.oozie.client.WorkflowJob.Status.RUNNING);\n    coordJob.setStatus(org.apache.oozie.client.Job.Status.SUCCEEDED);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> insertList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    insertList.add(action1);\n    insertList.add(action2);\n    java.util.List<org.apache.oozie.client.rest.JsonBean> updateList = new java.util.ArrayList<org.apache.oozie.client.rest.JsonBean>();\n    updateList.add(coordJob);\n    updateList.add(job);\n    org.apache.oozie.service.JPAService jpaService = org.apache.oozie.service.Services.get().get(org.apache.oozie.service.JPAService.class);\n    junit.framework.Assert.assertNotNull(jpaService);\n    org.apache.oozie.executor.jpa.BulkUpdateInsertForCoordActionStartJPAExecutor bulkUpdateCmd = new org.apache.oozie.executor.jpa.BulkUpdateInsertForCoordActionStartJPAExecutor(updateList, insertList);\n    jpaService.execute(bulkUpdateCmd);\n    coordJob = jpaService.execute(new org.apache.oozie.executor.jpa.CoordJobGetJPAExecutor(coordJob.getId()));\n    junit.framework.Assert.assertEquals(\"SUCCEEDED\", coordJob.getStatusStr());\n    org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor wfGetCmd = new org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor(job.getId());\n    org.apache.oozie.WorkflowJobBean wfBean = jpaService.execute(wfGetCmd);\n    junit.framework.Assert.assertEquals(\"RUNNING\", wfBean.getStatusStr());\n    org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action1.getId());\n    action1 = jpaService.execute(actionGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", action1.getStatusStr());\n    actionGetCmd = new org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor(action2.getId());\n    action2 = jpaService.execute(actionGetCmd);\n    junit.framework.Assert.assertEquals(\"PREP\", action2.getStatusStr());\n}",
        "ClassName": "TestBulkUpdateInsertForCoordActionStartJPAExecutor",
        "Label": 1,
        "MethodName": "testBulkInsertUpdates",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.lang.String actionXml = ((((((((((\"<java>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + \"<main-class>\") + org.apache.oozie.action.hadoop.LauncherMainTester.class.getName()) + \"</main-class>\") + \"<arg>exit1</arg>\") + \"</java>\";\n    org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context context = createContext(actionXml, null);\n    final org.apache.hadoop.mapred.RunningJob runningJob = submitAction(context);\n    waitFor(60 * 1000, new org.apache.oozie.test.XTestCase.Predicate() {\n        @java.lang.Override\n        public boolean evaluate() throws java.lang.Exception {\n            return runningJob.isComplete();\n        }\n    });\n    junit.framework.Assert.assertTrue(runningJob.isSuccessful());\n    junit.framework.Assert.assertFalse(org.apache.oozie.action.hadoop.LauncherMapper.isMainSuccessful(runningJob));\n    org.apache.oozie.action.ActionExecutor ae = new org.apache.oozie.action.hadoop.JavaActionExecutor();\n    ae.check(context, context.getAction());\n    junit.framework.Assert.assertTrue(ae.isCompleted(context.getAction().getExternalStatus()));\n    junit.framework.Assert.assertEquals(\"FAILED/KILLED\", context.getAction().getExternalStatus());\n    junit.framework.Assert.assertEquals(\"1\", context.getAction().getErrorCode());\n    junit.framework.Assert.assertNull(context.getAction().getData());\n    ae.end(context, context.getAction());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.ERROR, context.getAction().getStatus());\n}",
        "ClassName": "TestJavaActionExecutor",
        "Label": 1,
        "MethodName": "testExit1SubmitError",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.workflow.lite.LiteWorkflowAppParser parser = new org.apache.oozie.workflow.lite.LiteWorkflowAppParser(null, org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteDecisionHandler.class, org.apache.oozie.service.LiteWorkflowStoreService.LiteActionHandler.class);\n    org.apache.oozie.workflow.lite.LiteWorkflowApp def = new org.apache.oozie.workflow.lite.LiteWorkflowApp(\"name\", \"def\", new org.apache.oozie.workflow.lite.StartNodeDef(org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"one\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"one\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"f\", \"end\")).addNode(new org.apache.oozie.workflow.lite.ForkNodeDef(\"f\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, java.util.Arrays.asList(new java.lang.String[]{ \"two\", \"three\" }))).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"two\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"three\")).addNode(new org.apache.oozie.workflow.lite.ActionNodeDef(\"three\", org.apache.oozie.workflow.lite.TestLiteWorkflowAppParser.dummyConf, org.apache.oozie.workflow.lite.TestLiteWorkflowLib.TestActionNodeHandler.class, \"j\", \"k\")).addNode(new org.apache.oozie.workflow.lite.JoinNodeDef(\"j\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class, \"end\")).addNode(new org.apache.oozie.workflow.lite.KillNodeDef(\"k\", \"kill\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class)).addNode(new org.apache.oozie.workflow.lite.EndNodeDef(\"end\", org.apache.oozie.service.LiteWorkflowStoreService.LiteControlNodeHandler.class));\n    try {\n        invokeForkJoin(parser, def);\n    } catch (java.lang.Exception ex) {\n        ex.printStackTrace();\n        junit.framework.Assert.fail(\"Unexpected Exception\");\n    }\n}",
        "ClassName": "TestLiteWorkflowAppParser",
        "Label": 1,
        "MethodName": "testTransition2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.io.Reader reader = org.apache.oozie.util.IOUtils.getResourceAsReader(\"wf-ext-schema-valid.xml\", -1);\n    java.io.Writer writer = new java.io.FileWriter(getTestCaseDir() + \"/workflow.xml\");\n    org.apache.oozie.util.IOUtils.copyCharStream(reader, writer);\n    final org.apache.oozie.DagEngine engine = new org.apache.oozie.DagEngine(org.apache.oozie.test.XTestCase.getTestUser(), \"a\");\n    org.apache.hadoop.conf.Configuration conf = new org.apache.oozie.util.XConfiguration();\n    conf.set(org.apache.oozie.client.OozieClient.APP_PATH, ((\"file://\" + getTestCaseDir()) + java.io.File.separator) + \"workflow.xml\");\n    conf.set(org.apache.oozie.client.OozieClient.USER_NAME, org.apache.oozie.test.XTestCase.getTestUser());\n    conf.set(org.apache.oozie.client.OozieClient.LOG_TOKEN, \"t\");\n    conf.set(\"signal-value\", \"OK\");\n    conf.set(\"external-status\", \"ok\");\n    conf.set(\"error\", \"end.error\");\n    final java.lang.String jobId1 = engine.submitJob(conf, true);\n    java.lang.String jobId2 = engine.submitJob(conf, false);\n}",
        "ClassName": "TestDagEngine",
        "Label": 1,
        "MethodName": "testGetJobs",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path subWorkflowAppPath = getFsTestCaseDir();\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    java.io.Writer writer = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(subWorkflowAppPath, \"workflow.xml\")));\n    writer.write(org.apache.oozie.action.oozie.TestSubWorkflowActionExecutor.APP1);\n    writer.close();\n    org.apache.oozie.util.XConfiguration protoConf = getBaseProtoConf();\n    org.apache.oozie.WorkflowJobBean workflow = createBaseWorkflow(protoConf, \"W\");\n    final org.apache.oozie.WorkflowActionBean action = ((org.apache.oozie.WorkflowActionBean) (workflow.getActions().get(0)));\n    action.setConf((((((((((((\"<sub-workflow xmlns='uri:oozie:workflow:0.1'>\" + \"      <app-path>\") + subWorkflowAppPath) + java.io.File.separator) + \"workflow.xml\") + \"</app-path>\") + \"      <configuration>\") + \"        <property>\") + \"          <name>a</name>\") + \"          <value>A</value>\") + \"        </property>\") + \"      </configuration>\") + \"</sub-workflow>\");\n    org.apache.oozie.action.oozie.SubWorkflowActionExecutor subWorkflow = new org.apache.oozie.action.oozie.SubWorkflowActionExecutor();\n    subWorkflow.start(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), action);\n    final org.apache.oozie.client.OozieClient oozieClient = subWorkflow.getWorkflowClient(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action), org.apache.oozie.action.oozie.SubWorkflowActionExecutor.LOCAL);\n    waitFor(org.apache.oozie.action.oozie.TestSubWorkflowActionExecutor.JOB_TIMEOUT, new org.apache.oozie.test.XTestCase.Predicate() {\n        public boolean evaluate() throws java.lang.Exception {\n            return oozieClient.getJobInfo(action.getExternalId()).getStatus() == org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED;\n        }\n    });\n    java.lang.String extId = action.getExternalId();\n    junit.framework.Assert.assertEquals(workflow.getId(), oozieClient.getJobInfo(extId).getParentId());\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, oozieClient.getJobInfo(extId).getStatus());\n    org.apache.oozie.WorkflowActionBean action1 = new org.apache.oozie.WorkflowActionBean();\n    action1.setId(action.getId());\n    action1.setName(action.getName());\n    action1.setConf(\"<sub-workflow xmlns='uri:oozie:workflow:0.1'>\" + (((((((\"      <app-path>wrongAppPath</app-path>\" + \"      <configuration>\") + \"        <property>\") + \"          <name>a</name>\") + \"          <value>A</value>\") + \"        </property>\") + \"      </configuration>\") + \"</sub-workflow>\"));\n    subWorkflow.start(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action1), action1);\n    junit.framework.Assert.assertEquals(extId, action1.getExternalId());\n    junit.framework.Assert.assertEquals(workflow.getId(), oozieClient.getJobInfo(extId).getParentId());\n    subWorkflow.check(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action1), action1);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.DONE, action1.getStatus());\n    subWorkflow.end(new org.apache.oozie.action.hadoop.ActionExecutorTestCase.Context(workflow, action1), action1);\n    junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowAction.Status.OK, action1.getStatus());\n}",
        "ClassName": "TestSubWorkflowActionExecutor",
        "Label": 1,
        "MethodName": "testSubWorkflowRecovery",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(\"/v0/admin/*\", org.apache.oozie.servlet.V0AdminServlet.class, org.apache.oozie.servlet.TestAdminServlet.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        public java.lang.Void call() throws java.lang.Exception {\n            java.net.URL url = createURL(org.apache.oozie.client.rest.RestConstants.ADMIN_STATUS_RESOURCE, java.util.Collections.EMPTY_MAP);\n            java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection()));\n            conn.setRequestMethod(\"GET\");\n            junit.framework.Assert.assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());\n            junit.framework.Assert.assertTrue(conn.getHeaderField(\"content-type\").startsWith(org.apache.oozie.client.rest.RestConstants.JSON_CONTENT_TYPE));\n            org.json.simple.JSONObject json = ((org.json.simple.JSONObject) (org.json.simple.JSONValue.parse(new java.io.InputStreamReader(conn.getInputStream()))));\n            junit.framework.Assert.assertEquals(false, json.get(org.apache.oozie.client.rest.JsonTags.OOZIE_SAFE_MODE));\n            return null;\n        }\n    });\n}",
        "ClassName": "TestAdminServlet",
        "Label": 1,
        "MethodName": "testStatus",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    java.util.Date current = new java.util.Date();\n    final java.lang.String wfId = (\"0000000-\" + current.getTime()) + \"-TestSLAEventsGetJPAExecutor-W\";\n    addRecordToSLAEventTable(wfId, org.apache.oozie.client.SLAEvent.Status.CREATED, current);\n    addRecordToSLAEventTable(wfId, org.apache.oozie.client.SLAEvent.Status.STARTED, current);\n    addRecordToSLAEventTable(wfId, org.apache.oozie.client.SLAEvent.Status.SUCCEEDED, current);\n    _testGetSLAEventsForSeqId(wfId);\n}",
        "ClassName": "TestSLAEventsGetJPAExecutor",
        "Label": 1,
        "MethodName": "testSLAEventsGetForSeqId",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.FileSystem fs = getFileSystem();\n    org.apache.hadoop.fs.Path inputDir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"input\");\n    org.apache.hadoop.fs.Path outputDir = new org.apache.hadoop.fs.Path(getFsTestCaseDir(), \"output\");\n    java.io.Writer w = new java.io.OutputStreamWriter(fs.create(new org.apache.hadoop.fs.Path(inputDir, \"data.txt\")));\n    w.write(\"dummy\\n\");\n    w.write(\"dummy\\n\");\n    w.close();\n    java.lang.String actionXml = (((((((\"<map-reduce>\" + \"<job-tracker>\") + getJobTrackerUri()) + \"</job-tracker>\") + \"<name-node>\") + getNameNodeUri()) + \"</name-node>\") + getMapReduceConfig(inputDir.toString(), outputDir.toString()).toXmlString(false)) + \"</map-reduce>\";\n    _testSubmit(\"map-reduce\", actionXml);\n}",
        "ClassName": "TestMapReduceActionExecutor",
        "Label": 1,
        "MethodName": "testMapReduce",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    org.apache.oozie.jms.JMSJobEventListener wfEventListener = new org.apache.oozie.jms.JMSJobEventListener();\n    wfEventListener.init(conf);\n    java.util.Date startDate = org.apache.oozie.util.DateUtils.parseDateUTC(\"2012-07-22T00:00Z\");\n    java.util.Date endDate = new java.util.Date();\n    org.apache.oozie.event.WorkflowJobEvent wfe = new org.apache.oozie.event.WorkflowJobEvent(\"wfId1\", \"caId1\", org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, \"user1\", \"wf-app-name1\", startDate, endDate);\n    org.apache.oozie.jms.ConnectionContext jmsContext = getConnectionContext();\n    try {\n        javax.jms.Session session = jmsContext.createSession(Session.AUTO_ACKNOWLEDGE);\n        javax.jms.MessageConsumer consumer = jmsContext.createConsumer(session, wfEventListener.getTopic(wfe));\n        wfEventListener.onWorkflowJobEvent(wfe);\n        javax.jms.TextMessage message = ((javax.jms.TextMessage) (consumer.receive(5000)));\n        org.apache.oozie.client.event.message.WorkflowJobMessage wfSuccMessage = org.apache.oozie.client.event.jms.JMSMessagingUtils.getEventMessage(message);\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.WorkflowJob.Status.SUCCEEDED, wfSuccMessage.getStatus());\n        junit.framework.Assert.assertEquals(startDate, wfSuccMessage.getStartTime());\n        junit.framework.Assert.assertEquals(endDate, wfSuccMessage.getEndTime());\n        junit.framework.Assert.assertEquals(\"wfId1\", wfSuccMessage.getId());\n        junit.framework.Assert.assertEquals(\"caId1\", wfSuccMessage.getParentId());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.Event.MessageType.JOB, wfSuccMessage.getMessageType());\n        junit.framework.Assert.assertEquals(org.apache.oozie.AppType.WORKFLOW_JOB, wfSuccMessage.getAppType());\n        junit.framework.Assert.assertEquals(org.apache.oozie.client.event.JobEvent.EventStatus.SUCCESS, wfSuccMessage.getEventStatus());\n        junit.framework.Assert.assertEquals(\"user1\", wfSuccMessage.getUser());\n        junit.framework.Assert.assertEquals(\"wf-app-name1\", wfSuccMessage.getAppName());\n        wfEventListener.destroy();\n    } catch (java.lang.Exception e) {\n        e.printStackTrace();\n        junit.framework.Assert.fail(e.getMessage());\n    }\n}",
        "ClassName": "TestJMSJobEventListener",
        "Label": 1,
        "MethodName": "testOnWorkflowJobSuccessEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    runTest(org.apache.oozie.client.TestWorkflowClient.END_POINTS, org.apache.oozie.client.TestWorkflowClient.SERVLET_CLASSES, org.apache.oozie.client.TestWorkflowClient.IS_SECURITY_ENABLED, new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            java.lang.String oozieUrl = getContextURL() + \"dummy\";\n            org.apache.oozie.client.OozieClient wc = new org.apache.oozie.client.OozieClient(oozieUrl);\n            try {\n                wc.getJobInfo(org.apache.oozie.servlet.MockDagEngineService.JOB_ID + 1);\n                junit.framework.Assert.fail();\n            } catch (org.apache.oozie.client.OozieClientException e) {\n                junit.framework.Assert.assertNotNull(e.getErrorCode());\n                junit.framework.Assert.assertNotNull(e.getMessage());\n            }\n            return null;\n        }\n    });\n}",
        "ClassName": "TestWorkflowClient",
        "Label": 1,
        "MethodName": "testWSErrors",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oozie"
    },
    {
        "Body": "{\n    me.prettyprint.hector.api.ClockResolution clock = new me.prettyprint.cassandra.service.clock.MicrosecondsClockResolution();\n    long time = clock.createClock();\n    org.junit.Assert.assertEquals(me.prettyprint.cassandra.utils.TimeUUIDUtils.getTimeUUID(time), java.util.UUID.fromString(new com.eaio.uuid.UUID(com.eaio.uuid.UUIDGen.createTime(time), com.eaio.uuid.UUIDGen.getClockSeqAndNode()).toString()));\n    clock = new me.prettyprint.cassandra.service.clock.MicrosecondsSyncClockResolution();\n    java.util.UUID first = me.prettyprint.cassandra.utils.TimeUUIDUtils.getTimeUUID(clock);\n    java.util.UUID second = me.prettyprint.cassandra.utils.TimeUUIDUtils.getTimeUUID(clock);\n    org.junit.Assert.assertTrue(second.compareTo(first) > 0);\n}",
        "ClassName": "TimeUUIDUtilsTest",
        "Label": 1,
        "MethodName": "testTimeUUIDWithClockResolution",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hector"
    },
    {
        "Body": "{\n    java.util.List<me.prettyprint.hector.api.ddl.KeyspaceDefinition> keyspaces = cassandraCluster.describeKeyspaces();\n    org.junit.Assert.assertEquals(2, keyspaces.size());\n}",
        "ClassName": "CassandraClusterTest",
        "Label": 1,
        "MethodName": "testDescribeKeyspaces",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hector"
    },
    {
        "Body": "{\n    javax.persistence.EntityManager entityManager = entityManagerFactory.createEntityManager();\n    org.junit.Assert.assertNotNull(entityManager);\n    org.junit.Assert.assertTrue(entityManagerFactory.isOpen());\n}",
        "ClassName": "EntityManagerFactoryTest",
        "Label": 1,
        "MethodName": "testCreateEntityManager",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hector"
    },
    {
        "Body": "{\n    me.prettyprint.cassandra.model.BasicColumnFamilyDefinition columnFamilyDefinition = new me.prettyprint.cassandra.model.BasicColumnFamilyDefinition();\n    columnFamilyDefinition.setKeyspaceName(\"DynKeyspace3\");\n    columnFamilyDefinition.setName(\"DynamicCF\");\n    me.prettyprint.hector.api.ddl.ColumnFamilyDefinition cfDef = new me.prettyprint.cassandra.service.ThriftCfDef(columnFamilyDefinition);\n    me.prettyprint.hector.api.ddl.KeyspaceDefinition keyspaceDefinition = me.prettyprint.hector.api.factory.HFactory.createKeyspaceDefinition(\"DynKeyspace3\", \"org.apache.cassandra.locator.SimpleStrategy\", 1, java.util.Arrays.asList(cfDef));\n    cassandraCluster.addKeyspace(keyspaceDefinition);\n    me.prettyprint.hector.api.ddl.KeyspaceDefinition fromCluster = cassandraCluster.describeKeyspace(\"DynKeyspace3\");\n    cfDef = fromCluster.getCfDefs().get(0);\n    columnFamilyDefinition = new me.prettyprint.cassandra.model.BasicColumnFamilyDefinition(cfDef);\n    me.prettyprint.cassandra.model.BasicColumnDefinition columnDefinition = new me.prettyprint.cassandra.model.BasicColumnDefinition();\n    columnDefinition.setName(me.prettyprint.cassandra.serializers.StringSerializer.get().toByteBuffer(\"birthdate\"));\n    columnDefinition.setIndexType(me.prettyprint.hector.api.ddl.ColumnIndexType.KEYS);\n    columnDefinition.setValidationClass(me.prettyprint.hector.api.ddl.ComparatorType.LONGTYPE.getClassName());\n    columnFamilyDefinition.addColumnDefinition(columnDefinition);\n    cassandraCluster.updateColumnFamily(new me.prettyprint.cassandra.service.ThriftCfDef(columnFamilyDefinition));\n    fromCluster = cassandraCluster.describeKeyspace(\"DynKeyspace3\");\n    org.junit.Assert.assertEquals(\"birthdate\", me.prettyprint.cassandra.serializers.StringSerializer.get().fromByteBuffer(fromCluster.getCfDefs().get(0).getColumnMetadata().get(0).getName()));\n}",
        "ClassName": "CassandraClusterTest",
        "Label": 1,
        "MethodName": "testEditColumnFamily",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hector"
    },
    {
        "Body": "{\n    java.util.Date date = new java.util.Date();\n    java.sql.Timestamp timestamp = new java.sql.Timestamp(date.getTime());\n    java.lang.String timestampAsString = timestamp.toString();\n    org.assertj.core.api.Assertions.assertThat(date).isEqualTo(timestampAsString);\n}",
        "ClassName": "DateAssert_with_string_based_date_representation_Test",
        "Label": 1,
        "MethodName": "date_assertion_should_support_timestamp_string_representation",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/assertj-core"
    },
    {
        "Body": "{\n    com.google.jimfs.internal.ByteStore store = com.google.jimfs.internal.InternalTestUtils.byteStore(10);\n    final java.nio.channels.FileChannel channel = com.google.jimfs.internal.JimfsFileChannelTest.channel(store, java.nio.file.StandardOpenOption.READ, java.nio.file.StandardOpenOption.WRITE);\n    store.writeLock().lock();\n    java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newCachedThreadPool();\n    java.util.List<java.util.concurrent.Future<?>> futures = queueAllBlockingOperations(channel, executor);\n    com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly(10, java.util.concurrent.TimeUnit.MILLISECONDS);\n    channel.close();\n    for (java.util.concurrent.Future<?> future : futures) {\n        try {\n            future.get();\n            org.junit.Assert.fail();\n        } catch (java.util.concurrent.ExecutionException expected) {\n            org.junit.Assert.assertTrue(expected.getCause() instanceof java.nio.channels.AsynchronousCloseException);\n        }\n    }\n}",
        "ClassName": "JimfsFileChannelTest",
        "Label": 1,
        "MethodName": "testAsynchronousClose",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/jimfs"
    },
    {
        "Body": "{\n    com.google.jimfs.internal.ByteStore store = com.google.jimfs.internal.InternalTestUtils.byteStore(15);\n    java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newFixedThreadPool(2);\n    try {\n        com.google.jimfs.internal.JimfsAsynchronousFileChannel channel = com.google.jimfs.internal.JimfsAsynchronousFileChannelTest.channel(store, executor, java.nio.file.StandardOpenOption.READ, java.nio.file.StandardOpenOption.WRITE);\n        store.writeLock().lock();\n        java.util.concurrent.Future<java.lang.Integer> future = channel.read(java.nio.ByteBuffer.allocate(10), 0);\n        final java.util.concurrent.CountDownLatch handlerLatch = new java.util.concurrent.CountDownLatch(1);\n        final java.util.concurrent.atomic.AtomicBoolean gotAsyncCloseException = new java.util.concurrent.atomic.AtomicBoolean(false);\n        channel.read(java.nio.ByteBuffer.allocate(10), 0, null, new java.nio.channels.CompletionHandler<java.lang.Integer, java.lang.Object>() {\n            @java.lang.Override\n            public void completed(java.lang.Integer result, java.lang.Object attachment) {\n                handlerLatch.countDown();\n            }\n\n            @java.lang.Override\n            public void failed(java.lang.Throwable exc, java.lang.Object attachment) {\n                gotAsyncCloseException.set(exc instanceof java.nio.channels.AsynchronousCloseException);\n                handlerLatch.countDown();\n            }\n        });\n        com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly(10, java.util.concurrent.TimeUnit.MILLISECONDS);\n        channel.close();\n        try {\n            future.get();\n            org.junit.Assert.fail();\n        } catch (java.util.concurrent.ExecutionException expected) {\n            org.junit.Assert.assertTrue(expected.getCause() instanceof java.nio.channels.AsynchronousCloseException);\n        }\n        handlerLatch.await();\n        org.junit.Assert.assertTrue(gotAsyncCloseException.get());\n    } finally {\n        executor.shutdown();\n    }\n}",
        "ClassName": "JimfsAsynchronousFileChannelTest",
        "Label": 1,
        "MethodName": "testAsyncClose_read",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/jimfs"
    },
    {
        "Body": "{\n    com.google.jimfs.internal.ByteStore store = com.google.jimfs.internal.InternalTestUtils.byteStore(15);\n    java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newFixedThreadPool(4);\n    try {\n        com.google.jimfs.internal.JimfsAsynchronousFileChannel channel = com.google.jimfs.internal.JimfsAsynchronousFileChannelTest.channel(store, executor, java.nio.file.StandardOpenOption.READ, java.nio.file.StandardOpenOption.WRITE);\n        store.writeLock().lock();\n        java.util.concurrent.Future<java.lang.Integer> future = channel.write(java.nio.ByteBuffer.allocate(10), 0);\n        final java.util.concurrent.CountDownLatch handlerLatch = new java.util.concurrent.CountDownLatch(1);\n        final java.util.concurrent.atomic.AtomicBoolean gotAsyncCloseException = new java.util.concurrent.atomic.AtomicBoolean(false);\n        channel.write(java.nio.ByteBuffer.allocate(10), 0, null, new java.nio.channels.CompletionHandler<java.lang.Integer, java.lang.Object>() {\n            @java.lang.Override\n            public void completed(java.lang.Integer result, java.lang.Object attachment) {\n                handlerLatch.countDown();\n            }\n\n            @java.lang.Override\n            public void failed(java.lang.Throwable exc, java.lang.Object attachment) {\n                gotAsyncCloseException.set(exc instanceof java.nio.channels.AsynchronousCloseException);\n                handlerLatch.countDown();\n            }\n        });\n        com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly(10, java.util.concurrent.TimeUnit.MILLISECONDS);\n        channel.close();\n        try {\n            future.get();\n            org.junit.Assert.fail();\n        } catch (java.util.concurrent.ExecutionException expected) {\n            org.junit.Assert.assertTrue(expected.getCause() instanceof java.nio.channels.AsynchronousCloseException);\n        }\n        handlerLatch.await();\n        org.junit.Assert.assertTrue(gotAsyncCloseException.get());\n    } finally {\n        executor.shutdown();\n    }\n}",
        "ClassName": "JimfsAsynchronousFileChannelTest",
        "Label": 1,
        "MethodName": "testAsyncClose_write",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/jimfs"
    },
    {
        "Body": "{\n    com.google.jimfs.JimfsPath path = createDirectory();\n    watcher.register(path, com.google.common.collect.ImmutableList.of(java.nio.file.StandardWatchEventKinds.ENTRY_CREATE, java.nio.file.StandardWatchEventKinds.ENTRY_DELETE, java.nio.file.StandardWatchEventKinds.ENTRY_MODIFY));\n    java.nio.file.Files.createDirectory(path.resolve(\"foo\"));\n    java.nio.file.Files.createFile(path.resolve(\"bar\"));\n    com.google.jimfs.PollingWatchServiceTest.assertWatcherHasEvents(watcher, new com.google.jimfs.AbstractWatchService.Event<>(java.nio.file.StandardWatchEventKinds.ENTRY_CREATE, 1, fs.getPath(\"foo\")), new com.google.jimfs.AbstractWatchService.Event<>(java.nio.file.StandardWatchEventKinds.ENTRY_CREATE, 1, fs.getPath(\"bar\")));\n    java.nio.file.Files.createFile(path.resolve(\"baz\"));\n    java.nio.file.Files.delete(path.resolve(\"bar\"));\n    java.nio.file.Files.createFile(path.resolve(\"foo/bar\"));\n    com.google.jimfs.PollingWatchServiceTest.assertWatcherHasEvents(watcher, new com.google.jimfs.AbstractWatchService.Event<>(java.nio.file.StandardWatchEventKinds.ENTRY_CREATE, 1, fs.getPath(\"baz\")), new com.google.jimfs.AbstractWatchService.Event<>(java.nio.file.StandardWatchEventKinds.ENTRY_DELETE, 1, fs.getPath(\"bar\")), new com.google.jimfs.AbstractWatchService.Event<>(java.nio.file.StandardWatchEventKinds.ENTRY_MODIFY, 1, fs.getPath(\"foo\")));\n    java.nio.file.Files.delete(path.resolve(\"foo/bar\"));\n    com.google.jimfs.PollingWatchServiceTest.ensureTimeToPoll();\n    java.nio.file.Files.delete(path.resolve(\"foo\"));\n    com.google.jimfs.PollingWatchServiceTest.assertWatcherHasEvents(watcher, new com.google.jimfs.AbstractWatchService.Event<>(java.nio.file.StandardWatchEventKinds.ENTRY_MODIFY, 1, fs.getPath(\"foo\")), new com.google.jimfs.AbstractWatchService.Event<>(java.nio.file.StandardWatchEventKinds.ENTRY_DELETE, 1, fs.getPath(\"foo\")));\n    java.nio.file.Files.createDirectories(path.resolve(\"foo/bar\"));\n    com.google.jimfs.PollingWatchServiceTest.assertWatcherHasEvents(watcher, new com.google.jimfs.AbstractWatchService.Event<>(java.nio.file.StandardWatchEventKinds.ENTRY_CREATE, 1, fs.getPath(\"foo\")));\n    java.nio.file.Files.delete(path.resolve(\"foo/bar\"));\n    java.nio.file.Files.delete(path.resolve(\"foo\"));\n    com.google.jimfs.PollingWatchServiceTest.assertWatcherHasEvents(watcher, new com.google.jimfs.AbstractWatchService.Event<>(java.nio.file.StandardWatchEventKinds.ENTRY_DELETE, 1, fs.getPath(\"foo\")));\n}",
        "ClassName": "PollingWatchServiceTest",
        "Label": 1,
        "MethodName": "testWatchForMultipleEventTypes",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/jimfs"
    },
    {
        "Body": "{\n    com.google.jimfs.internal.ByteStore store = com.google.jimfs.internal.JimfsFileChannelTest.store(10);\n    final java.nio.channels.FileChannel channel = com.google.jimfs.internal.JimfsFileChannelTest.channel(store, java.nio.file.StandardOpenOption.READ, java.nio.file.StandardOpenOption.WRITE);\n    store.writeLock().lock();\n    java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newCachedThreadPool();\n    final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1);\n    final java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> interruptException = new java.util.concurrent.atomic.AtomicReference<>();\n    java.lang.Thread thread = new java.lang.Thread(new java.lang.Runnable() {\n        @java.lang.Override\n        public void run() {\n            try {\n                channel.write(java.nio.ByteBuffer.allocate(20));\n                latch.countDown();\n            } catch (java.lang.Throwable e) {\n                interruptException.set(e);\n                latch.countDown();\n            }\n        }\n    });\n    thread.start();\n    com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly(5, java.util.concurrent.TimeUnit.MILLISECONDS);\n    java.util.List<java.util.concurrent.Future<?>> futures = queueAllBlockingOperations(channel, executor);\n    com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly(10, java.util.concurrent.TimeUnit.MILLISECONDS);\n    thread.interrupt();\n    latch.await();\n    org.junit.Assert.assertTrue(interruptException.get() instanceof java.nio.channels.ClosedByInterruptException);\n    for (java.util.concurrent.Future<?> future : futures) {\n        try {\n            future.get();\n            org.junit.Assert.fail();\n        } catch (java.util.concurrent.ExecutionException expected) {\n            org.junit.Assert.assertTrue(expected.getCause() instanceof java.nio.channels.AsynchronousCloseException);\n        }\n    }\n}",
        "ClassName": "JimfsFileChannelTest",
        "Label": 1,
        "MethodName": "testCloseByInterrupt",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/jimfs"
    },
    {
        "Body": "{\n    event = new ch.qos.logback.classic.spi.LoggingEvent(\"a\", logger, ch.qos.logback.classic.Level.DEBUG, \"\", null, null);\n    org.junit.Assert.assertEquals(new java.util.HashMap(), event.getMDCPropertyMap());\n    java.lang.String discriminatorValue = discriminator.getDiscriminatingValue(event);\n    org.junit.Assert.assertEquals(ch.qos.logback.classic.sift.MDCBasedDiscriminatorTest.DEFAULT_VAL, discriminatorValue);\n}",
        "ClassName": "MDCBasedDiscriminatorTest",
        "Label": 1,
        "MethodName": "nullMDC",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/logback"
    },
    {
        "Body": "{\n    ch.qos.logback.core.recovery.RecoveryCoordinator rc = new ch.qos.logback.core.recovery.RecoveryCoordinator();\n    long now = java.lang.System.currentTimeMillis();\n    rc.setCurrentTime(now + ch.qos.logback.core.recovery.RecoveryCoordinator.BACKOFF_COEFFICIENT_MIN);\n    org.junit.Assert.assertTrue(rc.isTooSoon());\n}",
        "ClassName": "RecoveryCoordinatorTest",
        "Label": 1,
        "MethodName": "recoveryNotNeededIfCurrentTimeSetToBackOffTime",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/logback"
    },
    {
        "Body": "{\n    delayingListAppender.delay = 100;\n    asyncAppenderBase.addAppender(delayingListAppender);\n    asyncAppenderBase.start();\n    asyncAppenderBase.doAppend(0);\n    asyncAppenderBase.stop();\n    verify(delayingListAppender, 1);\n    org.junit.Assert.assertTrue(delayingListAppender.interrupted);\n}",
        "ClassName": "AsyncAppenderBaseTest",
        "Label": 1,
        "MethodName": "workerShouldStopEvenIfInterruptExceptionConsumedWithinSubappender",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/logback"
    },
    {
        "Body": "{\n    doThrow(new java.io.IOException()).when(objectWriter).write(anyObject());\n    appender.start();\n    awaitStartOfEventDispatching();\n    appender.append(\"some event\");\n    verify(deque, timeout(ch.qos.logback.core.net.AbstractSocketAppenderTest.TIMEOUT).atLeastOnce()).offerFirst(\"some event\");\n}",
        "ClassName": "AbstractSocketAppenderTest",
        "Label": 1,
        "MethodName": "reAddsEventAtTheFrontOfTheDequeWhenTransmissionFails",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/logback"
    },
    {
        "Body": "{\n    doThrow(new java.lang.InterruptedException()).when(deque).takeFirst();\n    appender.start();\n    verify(deque, timeout(ch.qos.logback.core.net.AbstractSocketAppenderTest.TIMEOUT)).takeFirst();\n}",
        "ClassName": "AbstractSocketAppenderTest",
        "Label": 1,
        "MethodName": "shutsDownOnInterruptWhileWaitingForEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/logback"
    },
    {
        "Body": "{\n    doThrow(new java.io.IOException()).when(objectWriterFactory).newAutoFlushingObjectWriter(any(java.io.OutputStream.class));\n    appender.start();\n    appender.append(\"some event\");\n    verify(socket, timeout(ch.qos.logback.core.net.AbstractSocketAppenderTest.TIMEOUT).atLeastOnce()).close();\n}",
        "ClassName": "AbstractSocketAppenderTest",
        "Label": 1,
        "MethodName": "closesSocketOnException",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/logback"
    },
    {
        "Body": "{\n    doThrow(new java.io.IOException()).when(objectWriterFactory).newAutoFlushingObjectWriter(any(java.io.OutputStream.class));\n    appender.start();\n    appender.append(\"some event\");\n    verify(appender, timeout(ch.qos.logback.core.net.AbstractSocketAppenderTest.TIMEOUT).atLeastOnce()).addInfo(contains(\"connection failed\"));\n}",
        "ClassName": "AbstractSocketAppenderTest",
        "Label": 1,
        "MethodName": "addsInfoMessageWhenSocketConnectionFailed",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/logback"
    },
    {
        "Body": "{\n    doThrow(new java.io.IOException()).when(objectWriter).write(anyObject());\n    appender.start();\n    awaitStartOfEventDispatching();\n    reset(appender);\n    int max = deque.remainingCapacity();\n    for (int i = 0; i < max; i++) {\n        deque.offer(\"\" + i);\n    }\n    appender.append(\"some event\");\n    verify(appender, timeout(ch.qos.logback.core.net.AbstractSocketAppenderTest.TIMEOUT)).addInfo(\"Dropping event due to socket connection error and maxed out deque capacity\");\n}",
        "ClassName": "AbstractSocketAppenderTest",
        "Label": 1,
        "MethodName": "addsInfoMessageWhenEventIsBeingDroppedBecauseOfConnectionProblemAndDequeCapacityLimitReached",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/logback"
    },
    {
        "Body": "{\n    doThrow(new java.io.IOException()).when(objectWriterFactory).newAutoFlushingObjectWriter(any(java.io.OutputStream.class));\n    appender.start();\n    appender.append(\"some event\");\n    verify(appender, timeout(ch.qos.logback.core.net.AbstractSocketAppenderTest.TIMEOUT).atLeastOnce()).addInfo(contains(\"connection closed\"));\n}",
        "ClassName": "AbstractSocketAppenderTest",
        "Label": 1,
        "MethodName": "addsInfoMessageWhenSocketConnectionClosed",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/logback"
    },
    {
        "Body": "{\n    final java.lang.InterruptedException interruptedException = new java.lang.InterruptedException();\n    doThrow(interruptedException).when(deque).offer(eq(\"some event\"), anyLong(), any(java.util.concurrent.TimeUnit.class));\n    appender.start();\n    appender.append(\"some event\");\n    verify(appender).addError(\"Interrupted while appending event to SocketAppender\", interruptedException);\n}",
        "ClassName": "AbstractSocketAppenderTest",
        "Label": 1,
        "MethodName": "addsErrorMessageWhenAppendingIsInterruptedWhileWaitingForTheQueueToAcceptTheEvent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/logback"
    },
    {
        "Body": "{\n    ch.qos.logback.core.pattern.DynamicConverter<ch.qos.logback.classic.spi.ILoggingEvent> converter = new ch.qos.logback.classic.pattern.RelativeTimeConverter();\n    java.lang.StringBuilder buf0 = new java.lang.StringBuilder();\n    java.lang.StringBuilder buf1 = new java.lang.StringBuilder();\n    ch.qos.logback.classic.spi.ILoggingEvent e0 = makeLoggingEvent(null);\n    ch.qos.logback.classic.spi.ILoggingEvent e1 = makeLoggingEvent(null);\n    converter.write(buf0, e0);\n    converter.write(buf1, e1);\n    org.junit.Assert.assertEquals(buf0.toString(), buf1.toString());\n}",
        "ClassName": "ConverterTest",
        "Label": 1,
        "MethodName": "testRelativeTime",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/logback"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.client.Scan s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(new org.apache.hadoop.hbase.filter.FirstKeyOnlyFilter());\n    org.apache.hadoop.hbase.KeyValue[] kvs = new org.apache.hadoop.hbase.KeyValue[]{ new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]) };\n    verifyScanFull(s, kvs);\n}",
        "ClassName": "TestScannersWithFilters",
        "Label": 1,
        "MethodName": "testFirstKeyOnlyFilter",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    long maxSize = 100000;\n    long blockSize = calculateBlockSizeDefault(maxSize, 9);\n    org.apache.hadoop.hbase.io.hfile.LruBlockCache cache = new org.apache.hadoop.hbase.io.hfile.LruBlockCache(maxSize, blockSize);\n    org.apache.hadoop.hbase.io.hfile.TestLruBlockCache.Block[] blocks = generateFixedBlocks(10, blockSize, \"block\");\n    for (org.apache.hadoop.hbase.io.hfile.TestLruBlockCache.Block block : blocks) {\n        cache.cacheBlock(block.blockName, block.buf);\n    }\n    int n = 0;\n    while (cache.getEvictionCount() == 0) {\n        java.lang.System.out.println(\"sleep\");\n        java.lang.Thread.sleep(1000);\n        junit.framework.Assert.assertTrue((n++) < 2);\n    } \n    java.lang.System.out.println(\"Background Evictions run: \" + cache.getEvictionCount());\n    junit.framework.Assert.assertEquals(cache.getEvictionCount(), 1);\n}",
        "ClassName": "TestLruBlockCache",
        "Label": 1,
        "MethodName": "testBackgroundEvictionThread",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.master.TestMasterTransitions.LOG.info(\"Running testRegionCloseWhenNoMetaHBase2428\");\n    org.apache.hadoop.hbase.MiniHBaseCluster cluster = org.apache.hadoop.hbase.master.TestMasterTransitions.TEST_UTIL.getHBaseCluster();\n    final org.apache.hadoop.hbase.master.HMaster master = cluster.getMaster();\n    int metaIndex = cluster.getServerWithMeta();\n    int otherServerIndex = -1;\n    for (int i = 0; i < cluster.getRegionServerThreads().size(); i++) {\n        if (i == metaIndex)\n            continue;\n\n        otherServerIndex = i;\n        break;\n    }\n    final org.apache.hadoop.hbase.regionserver.HRegionServer otherServer = cluster.getRegionServer(otherServerIndex);\n    final org.apache.hadoop.hbase.regionserver.HRegionServer metaHRS = cluster.getRegionServer(metaIndex);\n    final org.apache.hadoop.hbase.HRegionInfo hri = otherServer.getOnlineRegions().iterator().next().getRegionInfo();\n    org.apache.hadoop.hbase.master.TestMasterTransitions.HBase2428Listener listener = new org.apache.hadoop.hbase.master.TestMasterTransitions.HBase2428Listener(cluster, metaHRS.getHServerInfo().getServerAddress(), hri, otherServerIndex);\n    master.getRegionServerOperationQueue().registerRegionServerOperationListener(listener);\n    try {\n        cluster.abortRegionServer(metaIndex);\n        while (!listener.metaShutdownReceived)\n            org.apache.hadoop.hbase.util.Threads.sleep(100);\n\n        while (!listener.isDone())\n            org.apache.hadoop.hbase.util.Threads.sleep(10);\n\n        org.junit.Assert.assertTrue(listener.getCloseCount() > 1);\n        org.junit.Assert.assertTrue(listener.getCloseCount() < ((org.apache.hadoop.hbase.master.TestMasterTransitions.HBase2428Listener.SERVER_DURATION / org.apache.hadoop.hbase.master.TestMasterTransitions.HBase2428Listener.CLOSE_DURATION) * 2));\n        assertRegionIsBackOnline(hri);\n    } finally {\n        master.getRegionServerOperationQueue().unregisterRegionServerOperationListener(listener);\n    }\n}",
        "ClassName": "TestMasterTransitions",
        "Label": 1,
        "MethodName": "testRegionCloseWhenNoMetaHBase2428",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.HTableDescriptor htd = new org.apache.hadoop.hbase.HTableDescriptor(org.apache.hadoop.hbase.master.TestMasterWithDisabling.TABLENAME);\n    htd.setMaxFileSize(1024);\n    htd.setMemStoreFlushSize(1024);\n    org.apache.hadoop.hbase.HColumnDescriptor hcd = new org.apache.hadoop.hbase.HColumnDescriptor(org.apache.hadoop.hbase.master.TestMasterWithDisabling.FAMILYNAME);\n    htd.addFamily(hcd);\n    org.apache.hadoop.hbase.master.TestMasterWithDisabling.TEST_UTIL.getHBaseAdmin().createTable(htd);\n    org.apache.hadoop.hbase.client.HTable t = new org.apache.hadoop.hbase.client.HTable(org.apache.hadoop.hbase.master.TestMasterWithDisabling.TEST_UTIL.getConfiguration(), org.apache.hadoop.hbase.master.TestMasterWithDisabling.TABLENAME);\n    org.apache.hadoop.hbase.master.TestMasterWithDisabling.HBase2515Listener list = new org.apache.hadoop.hbase.master.TestMasterWithDisabling.HBase2515Listener(org.apache.hadoop.hbase.master.TestMasterWithDisabling.TEST_UTIL.getHBaseAdmin());\n    org.apache.hadoop.hbase.MiniHBaseCluster cluster = org.apache.hadoop.hbase.master.TestMasterWithDisabling.TEST_UTIL.getHBaseCluster();\n    org.apache.hadoop.hbase.master.HMaster m = cluster.getMaster();\n    m.getRegionServerOperationQueue().registerRegionServerOperationListener(list);\n    try {\n        org.apache.hadoop.hbase.master.TestMasterWithDisabling.TEST_UTIL.loadTable(t, org.apache.hadoop.hbase.master.TestMasterWithDisabling.FAMILYNAME);\n    } catch (java.io.IOException ex) {\n        org.apache.hadoop.hbase.master.TestMasterWithDisabling.LOG.info(\"Expected\", ex);\n    }\n    org.junit.Assert.assertEquals(0, cluster.getMaster().getClusterStatus().getRegionsInTransition().size());\n}",
        "ClassName": "TestMasterWithDisabling",
        "Label": 1,
        "MethodName": "testDisableBetweenSplit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    final byte[] TABLENAME = org.apache.hadoop.hbase.util.Bytes.toBytes(\"testCachePrewarm\");\n    org.apache.hadoop.conf.Configuration conf = org.apache.hadoop.hbase.client.TestFromClientSide.TEST_UTIL.getConfiguration();\n    org.apache.hadoop.hbase.client.TestFromClientSide.TEST_UTIL.createTable(TABLENAME, org.apache.hadoop.hbase.client.TestFromClientSide.FAMILY);\n    org.apache.hadoop.hbase.client.HTable.setRegionCachePrefetch(conf, TABLENAME, false);\n    org.junit.Assert.assertFalse(\"The table is disabled for region cache prefetch\", org.apache.hadoop.hbase.client.HTable.getRegionCachePrefetch(conf, TABLENAME));\n    org.apache.hadoop.hbase.client.HTable table = new org.apache.hadoop.hbase.client.HTable(conf, TABLENAME);\n    org.apache.hadoop.hbase.client.TestFromClientSide.TEST_UTIL.createMultiRegions(table, org.apache.hadoop.hbase.client.TestFromClientSide.FAMILY);\n    org.apache.hadoop.hbase.client.Get g = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.util.Bytes.toBytes(\"aaa\"));\n    table.get(g);\n    org.junit.Assert.assertEquals(\"Number of cached region is incorrect \", 1, org.apache.hadoop.hbase.client.HConnectionManager.getCachedRegionCount(conf, TABLENAME));\n    org.apache.hadoop.hbase.client.HTable.setRegionCachePrefetch(conf, TABLENAME, true);\n    org.junit.Assert.assertTrue(\"The table is enabled for region cache prefetch\", org.apache.hadoop.hbase.client.HTable.getRegionCachePrefetch(conf, TABLENAME));\n    org.apache.hadoop.hbase.client.HTable.setRegionCachePrefetch(conf, TABLENAME, false);\n    org.junit.Assert.assertFalse(\"The table is disabled for region cache prefetch\", org.apache.hadoop.hbase.client.HTable.getRegionCachePrefetch(conf, TABLENAME));\n    org.apache.hadoop.hbase.client.HTable.setRegionCachePrefetch(conf, TABLENAME, true);\n    org.junit.Assert.assertTrue(\"The table is enabled for region cache prefetch\", org.apache.hadoop.hbase.client.HTable.getRegionCachePrefetch(conf, TABLENAME));\n    table.getConnection().clearRegionCache();\n    org.junit.Assert.assertEquals(\"Number of cached region is incorrect \", 0, org.apache.hadoop.hbase.client.HConnectionManager.getCachedRegionCount(conf, TABLENAME));\n    org.apache.hadoop.hbase.client.Get g2 = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.util.Bytes.toBytes(\"bbb\"));\n    table.get(g2);\n    int prefetchRegionNumber = conf.getInt(\"hbase.client.prefetch.limit\", 10);\n    org.junit.Assert.assertEquals(\"Number of cached region is incorrect \", prefetchRegionNumber, org.apache.hadoop.hbase.client.HConnectionManager.getCachedRegionCount(conf, TABLENAME));\n    table.getConnection().clearRegionCache();\n    org.apache.hadoop.hbase.client.Get g3 = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.util.Bytes.toBytes(\"abc\"));\n    table.get(g3);\n    org.junit.Assert.assertEquals(\"Number of cached region is incorrect \", prefetchRegionNumber, org.apache.hadoop.hbase.client.HConnectionManager.getCachedRegionCount(conf, TABLENAME));\n}",
        "ClassName": "TestFromClientSide",
        "Label": 1,
        "MethodName": "testRegionCachePreWarm",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    addRows(this.memstore);\n    java.lang.Thread.sleep(1);\n    addRows(this.memstore);\n    org.apache.hadoop.hbase.KeyValue closestToEmpty = this.memstore.getNextRow(org.apache.hadoop.hbase.KeyValue.LOWESTKEY);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.KeyValue.COMPARATOR.compareRows(closestToEmpty, new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.util.Bytes.toBytes(0), java.lang.System.currentTimeMillis())) == 0);\n    for (int i = 0; i < org.apache.hadoop.hbase.regionserver.TestMemStore.ROW_COUNT; i++) {\n        org.apache.hadoop.hbase.KeyValue nr = this.memstore.getNextRow(new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.util.Bytes.toBytes(i), java.lang.System.currentTimeMillis()));\n        if ((i + 1) == org.apache.hadoop.hbase.regionserver.TestMemStore.ROW_COUNT) {\n            junit.framework.Assert.assertEquals(nr, null);\n        } else {\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.KeyValue.COMPARATOR.compareRows(nr, new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.util.Bytes.toBytes(i + 1), java.lang.System.currentTimeMillis())) == 0);\n        }\n    }\n    for (int startRowId = 0; startRowId < org.apache.hadoop.hbase.regionserver.TestMemStore.ROW_COUNT; startRowId++) {\n        org.apache.hadoop.hbase.regionserver.InternalScanner scanner = new org.apache.hadoop.hbase.regionserver.StoreScanner(new org.apache.hadoop.hbase.client.Scan(org.apache.hadoop.hbase.util.Bytes.toBytes(startRowId)), org.apache.hadoop.hbase.regionserver.TestMemStore.FAMILY, java.lang.Integer.MAX_VALUE, this.memstore.comparator, null, memstore.getScanners());\n        java.util.List<org.apache.hadoop.hbase.KeyValue> results = new java.util.ArrayList<org.apache.hadoop.hbase.KeyValue>();\n        for (int i = 0; scanner.next(results); i++) {\n            int rowId = startRowId + i;\n            junit.framework.Assert.assertTrue(\"Row name\", org.apache.hadoop.hbase.KeyValue.COMPARATOR.compareRows(results.get(0), org.apache.hadoop.hbase.util.Bytes.toBytes(rowId)) == 0);\n            junit.framework.Assert.assertEquals(\"Count of columns\", org.apache.hadoop.hbase.regionserver.TestMemStore.QUALIFIER_COUNT, results.size());\n            java.util.List<org.apache.hadoop.hbase.KeyValue> row = new java.util.ArrayList<org.apache.hadoop.hbase.KeyValue>();\n            for (org.apache.hadoop.hbase.KeyValue kv : results) {\n                row.add(kv);\n            }\n            isExpectedRowWithoutTimestamps(rowId, row);\n            results.clear();\n        }\n    }\n}",
        "ClassName": "TestMemStore",
        "Label": 1,
        "MethodName": "testGetNextRow",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    new org.apache.hadoop.hbase.client.HTable(conf, \".META.\");\n    int port = cluster.getMaster().getInfoServer().getPort();\n    assertHasExpectedContent(new java.net.URL((\"http://localhost:\" + port) + \"/index.html\"), \"master\");\n    port = cluster.getRegionServerThreads().get(0).getRegionServer().getInfoServer().getPort();\n    assertHasExpectedContent(new java.net.URL((\"http://localhost:\" + port) + \"/index.html\"), \"regionserver\");\n}",
        "ClassName": "TestInfoServers",
        "Label": 1,
        "MethodName": "testInfoServersAreUp",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.client.Response response = client.get(\"/version\", org.apache.hadoop.hbase.rest.Constants.MIMETYPE_TEXT);\n    junit.framework.Assert.assertTrue(response.getCode() == 200);\n    java.lang.String body = org.apache.hadoop.hbase.util.Bytes.toString(response.getBody());\n    junit.framework.Assert.assertTrue(body.length() > 0);\n    junit.framework.Assert.assertTrue(body.contains(org.apache.hadoop.hbase.rest.RESTServlet.VERSION_STRING));\n    junit.framework.Assert.assertTrue(body.contains(java.lang.System.getProperty(\"java.vm.vendor\")));\n    junit.framework.Assert.assertTrue(body.contains(java.lang.System.getProperty(\"java.version\")));\n    junit.framework.Assert.assertTrue(body.contains(java.lang.System.getProperty(\"java.vm.version\")));\n    junit.framework.Assert.assertTrue(body.contains(java.lang.System.getProperty(\"os.name\")));\n    junit.framework.Assert.assertTrue(body.contains(java.lang.System.getProperty(\"os.version\")));\n    junit.framework.Assert.assertTrue(body.contains(java.lang.System.getProperty(\"os.arch\")));\n    junit.framework.Assert.assertTrue(body.contains(com.sun.jersey.spi.container.servlet.ServletContainer.class.getPackage().getImplementationVersion()));\n}",
        "ClassName": "TestVersionResource",
        "Label": 1,
        "MethodName": "testGetStargateVersionText",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.model.ScannerModel model = new org.apache.hadoop.hbase.rest.model.ScannerModel();\n    model.addColumn(org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestScannerResource.COLUMN_1));\n    junit.framework.Assert.assertEquals(fullTableScan(model), org.apache.hadoop.hbase.rest.TestScannerResource.expectedRows1);\n    model = new org.apache.hadoop.hbase.rest.model.ScannerModel();\n    model.addColumn(org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestScannerResource.COLUMN_2));\n    junit.framework.Assert.assertEquals(fullTableScan(model), org.apache.hadoop.hbase.rest.TestScannerResource.expectedRows2);\n}",
        "ClassName": "TestScannerResource",
        "Label": 1,
        "MethodName": "testFullTableScan",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.model.ScannerModel model = new org.apache.hadoop.hbase.rest.model.ScannerModel();\n    model.setBatch(1);\n    model.addColumn(org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestScannerResource.COLUMN_1));\n    org.apache.hadoop.hbase.rest.client.Response response = client.put((\"/\" + org.apache.hadoop.hbase.rest.TestScannerResource.TABLE) + \"/scanner\", org.apache.hadoop.hbase.rest.Constants.MIMETYPE_PROTOBUF, model.createProtobufOutput());\n    junit.framework.Assert.assertEquals(response.getCode(), 201);\n    java.lang.String scannerURI = response.getLocation();\n    junit.framework.Assert.assertNotNull(scannerURI);\n    response = client.get(scannerURI, org.apache.hadoop.hbase.rest.Constants.MIMETYPE_BINARY);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    junit.framework.Assert.assertTrue(response.getBody().length > 0);\n    boolean foundRowHeader = false;\n    boolean foundColumnHeader = false;\n    boolean foundTimestampHeader = false;\n    for (org.apache.commons.httpclient.Header header : response.getHeaders()) {\n        if (header.getName().equals(\"X-Row\")) {\n            foundRowHeader = true;\n        } else\n            if (header.getName().equals(\"X-Column\")) {\n                foundColumnHeader = true;\n            } else\n                if (header.getName().equals(\"X-Timestamp\")) {\n                    foundTimestampHeader = true;\n                }\n\n\n    }\n    junit.framework.Assert.assertTrue(foundRowHeader);\n    junit.framework.Assert.assertTrue(foundColumnHeader);\n    junit.framework.Assert.assertTrue(foundTimestampHeader);\n    response = client.delete(scannerURI);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n}",
        "ClassName": "TestScannerResource",
        "Label": 1,
        "MethodName": "testSimpleScannerBinary",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    java.util.Map<byte[], java.lang.Long> regionsToSeqids = new java.util.HashMap<byte[], java.lang.Long>();\n    for (int i = 0; i < 10; i++) {\n        java.lang.Long l = java.lang.Long.valueOf(i);\n        regionsToSeqids.put(l.toString().getBytes(), l);\n    }\n    byte[][] regions = org.apache.hadoop.hbase.regionserver.wal.HLog.findMemstoresWithEditsOlderThan(1, regionsToSeqids);\n    junit.framework.Assert.assertEquals(1, regions.length);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(regions[0], \"0\".getBytes()));\n    regions = org.apache.hadoop.hbase.regionserver.wal.HLog.findMemstoresWithEditsOlderThan(3, regionsToSeqids);\n    int count = 3;\n    junit.framework.Assert.assertEquals(count, regions.length);\n    for (int i = 0; i < count; i++) {\n        junit.framework.Assert.assertTrue((org.apache.hadoop.hbase.util.Bytes.equals(regions[i], \"0\".getBytes()) || org.apache.hadoop.hbase.util.Bytes.equals(regions[i], \"1\".getBytes())) || org.apache.hadoop.hbase.util.Bytes.equals(regions[i], \"2\".getBytes()));\n    }\n}",
        "ClassName": "TestHLog",
        "Label": 1,
        "MethodName": "testFindMemstoresWithEditsOlderThan",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.client.HTable t = new org.apache.hadoop.hbase.client.HTable(conf, TABLE_NAME);\n    for (int i = 0; i < ROWS.length; i++) {\n        for (int j = 0; j < TIMESTAMPS.length; j++) {\n            org.apache.hadoop.hbase.client.Get get = new org.apache.hadoop.hbase.client.Get(ROWS[i]);\n            get.addFamily(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY);\n            get.setTimeStamp(TIMESTAMPS[j]);\n            org.apache.hadoop.hbase.client.Result result = t.get(get);\n            int cellCount = 0;\n            for (@java.lang.SuppressWarnings(\"unused\")\n            org.apache.hadoop.hbase.KeyValue kv : result.sorted()) {\n                cellCount++;\n            }\n            junit.framework.Assert.assertTrue(cellCount == 1);\n        }\n    }\n    int count = 0;\n    org.apache.hadoop.hbase.client.Scan scan = new org.apache.hadoop.hbase.client.Scan();\n    scan.addFamily(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY);\n    org.apache.hadoop.hbase.client.ResultScanner s = t.getScanner(scan);\n    try {\n        for (org.apache.hadoop.hbase.client.Result rr = null; (rr = s.next()) != null;) {\n            java.lang.System.out.println(rr.toString());\n            count += 1;\n        }\n        junit.framework.Assert.assertEquals(\"Number of rows should be 2\", 2, count);\n    } finally {\n        s.close();\n    }\n    count = 0;\n    scan = new org.apache.hadoop.hbase.client.Scan();\n    scan.setTimeRange(1000L, java.lang.Long.MAX_VALUE);\n    scan.addFamily(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY);\n    s = t.getScanner(scan);\n    try {\n        while (s.next() != null) {\n            count += 1;\n        } \n        junit.framework.Assert.assertEquals(\"Number of rows should be 2\", 2, count);\n    } finally {\n        s.close();\n    }\n    count = 0;\n    scan = new org.apache.hadoop.hbase.client.Scan();\n    scan.setTimeStamp(1000L);\n    scan.addFamily(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY);\n    s = t.getScanner(scan);\n    try {\n        while (s.next() != null) {\n            count += 1;\n        } \n        junit.framework.Assert.assertEquals(\"Number of rows should be 2\", 2, count);\n    } finally {\n        s.close();\n    }\n    count = 0;\n    scan = new org.apache.hadoop.hbase.client.Scan();\n    scan.setTimeRange(100L, 1000L);\n    scan.addFamily(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY);\n    s = t.getScanner(scan);\n    try {\n        while (s.next() != null) {\n            count += 1;\n        } \n        junit.framework.Assert.assertEquals(\"Number of rows should be 2\", 2, count);\n    } finally {\n        s.close();\n    }\n    count = 0;\n    scan = new org.apache.hadoop.hbase.client.Scan();\n    scan.setTimeStamp(100L);\n    scan.addFamily(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY);\n    s = t.getScanner(scan);\n    try {\n        while (s.next() != null) {\n            count += 1;\n        } \n        junit.framework.Assert.assertEquals(\"Number of rows should be 2\", 2, count);\n    } finally {\n        s.close();\n    }\n}",
        "ClassName": "TestScanMultipleVersions",
        "Label": 1,
        "MethodName": "testScanMultipleVersions",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    prepareTest();\n    runTestOnTable();\n    verify();\n}",
        "ClassName": "TestTimeRangeMapRed",
        "Label": 1,
        "MethodName": "testTimeRangeMapRed",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    doATest(true);\n}",
        "ClassName": "TestMultiParallelPut",
        "Label": 1,
        "MethodName": "testParallelPutWithRSAbort",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.KeyValue[] expectedKVs = new org.apache.hadoop.hbase.KeyValue[]{ new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]) };\n    long expectedRows = 6;\n    long expectedKeys = this.colsPerRow;\n    org.apache.hadoop.hbase.client.Scan s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(new org.apache.hadoop.hbase.filter.PageFilter(expectedRows));\n    verifyScan(s, expectedRows, expectedKeys);\n    s.setFilter(new org.apache.hadoop.hbase.filter.PageFilter(expectedRows));\n    verifyScanFull(s, expectedKVs);\n    expectedRows = 4;\n    expectedKeys = this.colsPerRow;\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(new org.apache.hadoop.hbase.filter.PageFilter(expectedRows));\n    verifyScan(s, expectedRows, expectedKeys);\n    s.setFilter(new org.apache.hadoop.hbase.filter.PageFilter(expectedRows));\n    verifyScanFull(s, java.util.Arrays.copyOf(expectedKVs, 24));\n    expectedRows = 2;\n    expectedKeys = this.colsPerRow;\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(new org.apache.hadoop.hbase.filter.PageFilter(expectedRows));\n    verifyScan(s, expectedRows, expectedKeys);\n    s.setFilter(new org.apache.hadoop.hbase.filter.PageFilter(expectedRows));\n    verifyScanFull(s, java.util.Arrays.copyOf(expectedKVs, 12));\n    expectedRows = 1;\n    expectedKeys = this.colsPerRow;\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(new org.apache.hadoop.hbase.filter.PageFilter(expectedRows));\n    verifyScan(s, expectedRows, expectedKeys);\n    s.setFilter(new org.apache.hadoop.hbase.filter.PageFilter(expectedRows));\n    verifyScanFull(s, java.util.Arrays.copyOf(expectedKVs, 6));\n}",
        "ClassName": "TestScannersWithFilters",
        "Label": 1,
        "MethodName": "testPageFilter",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.client.Put put = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_3);\n    put.add(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_1);\n    remoteTable.put(put);\n    org.apache.hadoop.hbase.client.Get get = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_3);\n    get.addFamily(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1);\n    org.apache.hadoop.hbase.client.Result result = remoteTable.get(get);\n    byte[] value = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1);\n    junit.framework.Assert.assertNotNull(value);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_1, value));\n    java.util.List<org.apache.hadoop.hbase.client.Put> puts = new java.util.ArrayList<org.apache.hadoop.hbase.client.Put>();\n    put = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_3);\n    put.add(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_2);\n    puts.add(put);\n    put = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_4);\n    put.add(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_1);\n    puts.add(put);\n    put = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_4);\n    put.add(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_2);\n    puts.add(put);\n    remoteTable.put(puts);\n    get = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_3);\n    get.addFamily(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2);\n    result = remoteTable.get(get);\n    value = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2);\n    junit.framework.Assert.assertNotNull(value);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_2, value));\n    get = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_4);\n    result = remoteTable.get(get);\n    value = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1);\n    junit.framework.Assert.assertNotNull(value);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_1, value));\n    value = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2);\n    junit.framework.Assert.assertNotNull(value);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_2, value));\n}",
        "ClassName": "TestRemoteTable",
        "Label": 1,
        "MethodName": "testPut",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    java.lang.String schemaPath = (\"/\" + org.apache.hadoop.hbase.rest.TestSchemaResource.TABLE2) + \"/schema\";\n    org.apache.hadoop.hbase.rest.model.TableSchemaModel model;\n    org.apache.hadoop.hbase.rest.client.Response response;\n    junit.framework.Assert.assertFalse(admin.tableExists(org.apache.hadoop.hbase.rest.TestSchemaResource.TABLE2));\n    model = org.apache.hadoop.hbase.rest.model.TestTableSchemaModel.buildTestModel(org.apache.hadoop.hbase.rest.TestSchemaResource.TABLE2);\n    org.apache.hadoop.hbase.rest.model.TestTableSchemaModel.checkModel(model, org.apache.hadoop.hbase.rest.TestSchemaResource.TABLE2);\n    response = client.put(schemaPath, org.apache.hadoop.hbase.rest.Constants.MIMETYPE_PROTOBUF, model.createProtobufOutput());\n    junit.framework.Assert.assertEquals(response.getCode(), 201);\n    admin.enableTable(org.apache.hadoop.hbase.rest.TestSchemaResource.TABLE2);\n    response = client.get(schemaPath, org.apache.hadoop.hbase.rest.Constants.MIMETYPE_PROTOBUF);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    model = new org.apache.hadoop.hbase.rest.model.TableSchemaModel();\n    model.getObjectFromMessage(response.getBody());\n    org.apache.hadoop.hbase.rest.model.TestTableSchemaModel.checkModel(model, org.apache.hadoop.hbase.rest.TestSchemaResource.TABLE2);\n    client.delete(schemaPath);\n    junit.framework.Assert.assertFalse(admin.tableExists(org.apache.hadoop.hbase.rest.TestSchemaResource.TABLE2));\n}",
        "ClassName": "TestSchemaResource",
        "Label": 1,
        "MethodName": "testTableCreateAndDeletePB",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    final byte[] tableName = org.apache.hadoop.hbase.util.Bytes.toBytes(getName());\n    final byte[] rowName = tableName;\n    org.apache.hadoop.hbase.regionserver.wal.HLog log = new org.apache.hadoop.hbase.regionserver.wal.HLog(this.fs, this.dir, this.oldLogDir, this.conf, null);\n    final int howmany = 3;\n    org.apache.hadoop.hbase.HRegionInfo[] infos = new org.apache.hadoop.hbase.HRegionInfo[3];\n    for (int i = 0; i < howmany; i++) {\n        infos[i] = new org.apache.hadoop.hbase.HRegionInfo(new org.apache.hadoop.hbase.HTableDescriptor(tableName), org.apache.hadoop.hbase.util.Bytes.toBytes(\"\" + i), org.apache.hadoop.hbase.util.Bytes.toBytes(\"\" + (i + 1)), false);\n    }\n    try {\n        for (int ii = 0; ii < howmany; ii++) {\n            for (int i = 0; i < howmany; i++) {\n                for (int j = 0; j < howmany; j++) {\n                    org.apache.hadoop.hbase.regionserver.wal.WALEdit edit = new org.apache.hadoop.hbase.regionserver.wal.WALEdit();\n                    byte[] family = org.apache.hadoop.hbase.util.Bytes.toBytes(\"column\");\n                    byte[] qualifier = org.apache.hadoop.hbase.util.Bytes.toBytes(java.lang.Integer.toString(j));\n                    byte[] column = org.apache.hadoop.hbase.util.Bytes.toBytes(\"column:\" + java.lang.Integer.toString(j));\n                    edit.add(new org.apache.hadoop.hbase.KeyValue(rowName, family, qualifier, java.lang.System.currentTimeMillis(), column));\n                    java.lang.System.out.println(((\"Region \" + i) + \": \") + edit);\n                    log.append(infos[i], tableName, edit, java.lang.System.currentTimeMillis());\n                }\n            }\n            log.hflush();\n            log.rollWriter();\n        }\n        java.util.List<org.apache.hadoop.fs.Path> splits = org.apache.hadoop.hbase.regionserver.wal.HLog.splitLog(this.testDir, this.dir, this.oldLogDir, this.fs, this.conf);\n        verifySplits(splits, howmany);\n        log = null;\n    } finally {\n        if (log != null) {\n            log.closeAndDelete();\n        }\n    }\n}",
        "ClassName": "TestHLog",
        "Label": 1,
        "MethodName": "testSplit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertNotNull(dfsCluster);\n    org.apache.hadoop.hbase.HMerge.merge(conf, dfsCluster.getFileSystem(), desc.getName());\n}",
        "ClassName": "TestMergeTable",
        "Label": 1,
        "MethodName": "testMergeTable",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.client.Response response = client.get(\"/\", org.apache.hadoop.hbase.rest.Constants.MIMETYPE_JSON);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n}",
        "ClassName": "TestTableResource",
        "Label": 1,
        "MethodName": "testTableListJSON",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    util.startMiniCluster(1);\n    try {\n        runTestAtomicity(20000, 5, 5, 0, 3);\n    } finally {\n        util.shutdownMiniCluster();\n    }\n}",
        "ClassName": "TestAcidGuarantees",
        "Label": 1,
        "MethodName": "testGetAtomicity",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.client.HBaseAdmin admin = new org.apache.hadoop.hbase.client.HBaseAdmin(conf);\n    admin.createTable(createTableDescriptor(org.apache.hadoop.hbase.master.TestMinimumServerCount.TABLE_NAME));\n    admin.disableTable(org.apache.hadoop.hbase.master.TestMinimumServerCount.TABLE_NAME);\n    junit.framework.Assert.assertFalse(admin.isTableEnabled(org.apache.hadoop.hbase.master.TestMinimumServerCount.TABLE_NAME));\n    cluster.hbaseCluster.getMaster().getServerManager().setMinimumServerCount(2);\n    try {\n        admin.enableTable(org.apache.hadoop.hbase.master.TestMinimumServerCount.TABLE_NAME);\n    } catch (java.io.IOException ex) {\n    }\n    java.lang.Thread.sleep(10 * 1000);\n    junit.framework.Assert.assertFalse(admin.isTableAvailable(org.apache.hadoop.hbase.master.TestMinimumServerCount.TABLE_NAME));\n    cluster.startRegionServer();\n    java.lang.Thread.sleep(10 * 1000);\n    junit.framework.Assert.assertTrue(admin.isTableAvailable(org.apache.hadoop.hbase.master.TestMinimumServerCount.TABLE_NAME));\n}",
        "ClassName": "TestMinimumServerCount",
        "Label": 1,
        "MethodName": "testMinimumServerCount",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    this.tableName = getName();\n    try {\n        startAndWriteData();\n        org.apache.hadoop.hbase.regionserver.wal.TestLogRolling.LOG.info((\"after writing there are \" + log.getNumLogFiles()) + \" log files\");\n        java.util.List<org.apache.hadoop.hbase.regionserver.HRegion> regions = new java.util.ArrayList<org.apache.hadoop.hbase.regionserver.HRegion>(server.getOnlineRegions());\n        for (org.apache.hadoop.hbase.regionserver.HRegion r : regions) {\n            r.flushcache();\n        }\n        log.rollWriter();\n        int count = log.getNumLogFiles();\n        org.apache.hadoop.hbase.regionserver.wal.TestLogRolling.LOG.info((\"after flushing all regions and rolling logs there are \" + log.getNumLogFiles()) + \" log files\");\n        junit.framework.Assert.assertTrue(\"actual count: \" + count, count <= 2);\n    } catch (java.lang.Exception e) {\n        org.apache.hadoop.hbase.regionserver.wal.TestLogRolling.LOG.fatal(\"unexpected exception\", e);\n        throw e;\n    }\n}",
        "ClassName": "TestLogRolling",
        "Label": 1,
        "MethodName": "testLogRolling",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.io.hfile.HFile.Writer writer = org.apache.hadoop.hbase.regionserver.StoreFile.createWriter(this.fs, new org.apache.hadoop.fs.Path(new org.apache.hadoop.fs.Path(this.testDir, \"regionname\"), \"familyname\"), 2 * 1024);\n    writeStoreFile(writer);\n    checkHalfHFile(new org.apache.hadoop.hbase.regionserver.StoreFile(this.fs, writer.getPath(), true, conf, org.apache.hadoop.hbase.regionserver.StoreFile.BloomType.NONE, false));\n}",
        "ClassName": "TestStoreFile",
        "Label": 1,
        "MethodName": "testBasicHalfMapFile",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.Path storedir = new org.apache.hadoop.fs.Path(new org.apache.hadoop.fs.Path(this.testDir, \"regionname\"), \"familyname\");\n    org.apache.hadoop.fs.Path dir = new org.apache.hadoop.fs.Path(storedir, \"1234567890\");\n    org.apache.hadoop.hbase.io.hfile.HFile.Writer writer = org.apache.hadoop.hbase.regionserver.StoreFile.createWriter(this.fs, dir, 8 * 1024);\n    writeStoreFile(writer);\n    org.apache.hadoop.hbase.regionserver.StoreFile hsf = new org.apache.hadoop.hbase.regionserver.StoreFile(this.fs, writer.getPath(), true, conf, org.apache.hadoop.hbase.regionserver.StoreFile.BloomType.NONE, false);\n    org.apache.hadoop.hbase.io.hfile.HFile.Reader reader = hsf.createReader();\n    org.apache.hadoop.hbase.KeyValue kv = org.apache.hadoop.hbase.KeyValue.createKeyValueFromKey(reader.midkey());\n    byte[] midRow = kv.getRow();\n    kv = org.apache.hadoop.hbase.KeyValue.createKeyValueFromKey(reader.getLastKey());\n    byte[] finalRow = kv.getRow();\n    org.apache.hadoop.fs.Path refPath = org.apache.hadoop.hbase.regionserver.StoreFile.split(fs, dir, hsf, midRow, org.apache.hadoop.hbase.io.Reference.Range.top);\n    org.apache.hadoop.hbase.regionserver.StoreFile refHsf = new org.apache.hadoop.hbase.regionserver.StoreFile(this.fs, refPath, true, conf, org.apache.hadoop.hbase.regionserver.StoreFile.BloomType.NONE, false);\n    org.apache.hadoop.hbase.io.hfile.HFileScanner s = refHsf.createReader().getScanner(false, false);\n    for (boolean first = true; ((!s.isSeeked()) && s.seekTo()) || s.next();) {\n        java.nio.ByteBuffer bb = s.getKey();\n        kv = org.apache.hadoop.hbase.KeyValue.createKeyValueFromKey(bb);\n        if (first) {\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(kv.getRow(), midRow));\n            first = false;\n        }\n    }\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(kv.getRow(), finalRow));\n}",
        "ClassName": "TestStoreFile",
        "Label": 1,
        "MethodName": "testReference",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    java.lang.String path = (\"/\" + org.apache.hadoop.hbase.rest.TestRowResource.TABLE) + \"/fakerow\";\n    org.apache.hadoop.hbase.rest.model.CellSetModel cellSetModel = new org.apache.hadoop.hbase.rest.model.CellSetModel();\n    org.apache.hadoop.hbase.rest.model.RowModel rowModel = new org.apache.hadoop.hbase.rest.model.RowModel(org.apache.hadoop.hbase.rest.TestRowResource.ROW_1);\n    rowModel.addCell(new org.apache.hadoop.hbase.rest.model.CellModel(org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1), org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.VALUE_1)));\n    rowModel.addCell(new org.apache.hadoop.hbase.rest.model.CellModel(org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_2), org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.VALUE_2)));\n    cellSetModel.addRow(rowModel);\n    rowModel = new org.apache.hadoop.hbase.rest.model.RowModel(org.apache.hadoop.hbase.rest.TestRowResource.ROW_2);\n    rowModel.addCell(new org.apache.hadoop.hbase.rest.model.CellModel(org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1), org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.VALUE_3)));\n    rowModel.addCell(new org.apache.hadoop.hbase.rest.model.CellModel(org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_2), org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.VALUE_4)));\n    cellSetModel.addRow(rowModel);\n    java.io.StringWriter writer = new java.io.StringWriter();\n    marshaller.marshal(cellSetModel, writer);\n    org.apache.hadoop.hbase.rest.client.Response response = client.put(path, org.apache.hadoop.hbase.rest.Constants.MIMETYPE_XML, org.apache.hadoop.hbase.util.Bytes.toBytes(writer.toString()));\n    java.lang.Thread.yield();\n    response = client.get(path, org.apache.hadoop.hbase.rest.Constants.MIMETYPE_XML);\n    junit.framework.Assert.assertEquals(response.getCode(), 404);\n    checkValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_1);\n    checkValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_2, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_2);\n    checkValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_2, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_3);\n    checkValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_2, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_2, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_4);\n    response = deleteRow(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    response = deleteRow(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_2);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n}",
        "ClassName": "TestRowResource",
        "Label": 1,
        "MethodName": "testMultiCellGetPutXML",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    doTestTableCreateDrop();\n    doTestTableMutations();\n    doTestTableTimestampsAndColumns();\n    doTestTableScanners();\n}",
        "ClassName": "TestThriftServer",
        "Label": 1,
        "MethodName": "testAll",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    try {\n        this.r = createNewHRegion(org.apache.hadoop.hbase.regionserver.TestScanner.REGION_INFO.getTableDesc(), null, null);\n        org.apache.hadoop.hbase.HBaseTestCase.addContent(this.r, org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY);\n        byte[] prefix = org.apache.hadoop.hbase.util.Bytes.toBytes(\"ab\");\n        org.apache.hadoop.hbase.filter.Filter newFilter = new org.apache.hadoop.hbase.filter.PrefixFilter(prefix);\n        org.apache.hadoop.hbase.client.Scan scan = new org.apache.hadoop.hbase.client.Scan();\n        scan.setFilter(newFilter);\n        rowPrefixFilter(scan);\n        byte[] stopRow = org.apache.hadoop.hbase.util.Bytes.toBytes(\"bbc\");\n        newFilter = new org.apache.hadoop.hbase.filter.WhileMatchFilter(new org.apache.hadoop.hbase.filter.InclusiveStopFilter(stopRow));\n        scan = new org.apache.hadoop.hbase.client.Scan();\n        scan.setFilter(newFilter);\n        rowInclusiveStopFilter(scan, stopRow);\n    } finally {\n        this.r.close();\n        this.r.getLog().closeAndDelete();\n        org.apache.hadoop.hbase.HBaseTestCase.shutdownDfs(this.cluster);\n    }\n}",
        "ClassName": "TestScanner",
        "Label": 1,
        "MethodName": "testFilters",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    testScan(null, null, null);\n}",
        "ClassName": "TestTableInputFormatScan",
        "Label": 1,
        "MethodName": "testScanEmptyToEmpty",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.client.Response response = getValuePB(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1);\n    junit.framework.Assert.assertEquals(response.getCode(), 404);\n    response = putValuePB(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_1);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    checkValuePB(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_1);\n    response = putValuePB(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_1);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    checkValuePB(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_1);\n    response = putValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_2);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    checkValuePB(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_2);\n    response = deleteRow(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n}",
        "ClassName": "TestRowResource",
        "Label": 1,
        "MethodName": "testSingleCellGetPutPB",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.MiniHBaseCluster cluster = org.apache.hadoop.hbase.master.TestMaster.TEST_UTIL.getHBaseCluster();\n    org.apache.hadoop.hbase.master.HMaster m = cluster.getMaster();\n    org.apache.hadoop.hbase.client.HBaseAdmin admin = org.apache.hadoop.hbase.master.TestMaster.TEST_UTIL.getHBaseAdmin();\n    org.apache.hadoop.hbase.master.TestMaster.TEST_UTIL.createTable(org.apache.hadoop.hbase.master.TestMaster.TABLENAME, org.apache.hadoop.hbase.master.TestMaster.FAMILYNAME);\n    org.apache.hadoop.hbase.master.TestMaster.TEST_UTIL.loadTable(new org.apache.hadoop.hbase.client.HTable(org.apache.hadoop.hbase.master.TestMaster.TABLENAME), org.apache.hadoop.hbase.master.TestMaster.FAMILYNAME);\n    java.util.concurrent.CountDownLatch aboutToOpen = new java.util.concurrent.CountDownLatch(1);\n    java.util.concurrent.CountDownLatch proceed = new java.util.concurrent.CountDownLatch(1);\n    org.apache.hadoop.hbase.master.TestMaster.RegionOpenListener list = new org.apache.hadoop.hbase.master.TestMaster.RegionOpenListener(aboutToOpen, proceed);\n    org.apache.hadoop.hbase.executor.HBaseEventHandler.registerListener(list);\n    admin.split(org.apache.hadoop.hbase.master.TestMaster.TABLENAME);\n    aboutToOpen.await(60, java.util.concurrent.TimeUnit.SECONDS);\n    try {\n        m.getTableRegions(org.apache.hadoop.hbase.master.TestMaster.TABLENAME);\n        org.apache.hadoop.hbase.util.Pair<org.apache.hadoop.hbase.HRegionInfo, org.apache.hadoop.hbase.HServerAddress> pair = m.getTableRegionClosest(org.apache.hadoop.hbase.master.TestMaster.TABLENAME, org.apache.hadoop.hbase.util.Bytes.toBytes(\"cde\"));\n        org.junit.Assert.assertNotNull(pair);\n        m.getTableRegionFromName(pair.getFirst().getRegionName());\n    } finally {\n        proceed.countDown();\n    }\n}",
        "ClassName": "TestMaster",
        "Label": 1,
        "MethodName": "testMasterOpsWhileSplitting",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    long expectedRows = this.numRows;\n    long expectedKeys = this.colsPerRow;\n    org.apache.hadoop.hbase.client.Scan s = new org.apache.hadoop.hbase.client.Scan();\n    verifyScan(s, expectedRows, expectedKeys);\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.addFamily(org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0]);\n    verifyScan(s, expectedRows, expectedKeys / 2);\n}",
        "ClassName": "TestScannersWithFilters",
        "Label": 1,
        "MethodName": "testNoFilter",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.client.Response response = getValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1);\n    junit.framework.Assert.assertEquals(response.getCode(), 404);\n    response = putValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_1);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    checkValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_1);\n    response = putValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_2);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    checkValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_2);\n    response = deleteRow(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n}",
        "ClassName": "TestRowResource",
        "Label": 1,
        "MethodName": "testSingleCellGetPutXML",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    new org.apache.hadoop.hbase.client.HTable(conf, org.apache.hadoop.hbase.HConstants.META_TABLE_NAME);\n    org.apache.hadoop.hbase.zookeeper.ZooKeeperWrapper zkw = new org.apache.hadoop.hbase.zookeeper.ZooKeeperWrapper(conf, org.apache.hadoop.hbase.EmptyWatcher.instance);\n    java.lang.String quorumServers = zkw.getQuorumServers();\n    int sessionTimeout = 5 * 1000;\n    org.apache.hadoop.hbase.client.HConnection connection = org.apache.hadoop.hbase.client.HConnectionManager.getConnection(conf);\n    org.apache.hadoop.hbase.zookeeper.ZooKeeperWrapper connectionZK = connection.getZooKeeperWrapper();\n    long sessionID = connectionZK.getSessionID();\n    byte[] password = connectionZK.getSessionPassword();\n    org.apache.zookeeper.ZooKeeper zk = new org.apache.zookeeper.ZooKeeper(quorumServers, sessionTimeout, org.apache.hadoop.hbase.EmptyWatcher.instance, sessionID, password);\n    zk.close();\n    java.lang.Thread.sleep(sessionTimeout * 3L);\n    java.lang.System.err.println(\"ZooKeeper should have timed out\");\n    connection.relocateRegion(org.apache.hadoop.hbase.HConstants.ROOT_TABLE_NAME, org.apache.hadoop.hbase.HConstants.EMPTY_BYTE_ARRAY);\n}",
        "ClassName": "TestZooKeeper",
        "Label": 1,
        "MethodName": "testClientSessionExpired",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    byte[] tableName = org.apache.hadoop.hbase.util.Bytes.toBytes(\"testtable\");\n    byte[] row1 = org.apache.hadoop.hbase.util.Bytes.toBytes(\"row1\");\n    byte[] fam1 = org.apache.hadoop.hbase.util.Bytes.toBytes(\"fam1\");\n    byte[] fam2 = org.apache.hadoop.hbase.util.Bytes.toBytes(\"fam2\");\n    byte[] fam3 = org.apache.hadoop.hbase.util.Bytes.toBytes(\"fam3\");\n    byte[] fam4 = org.apache.hadoop.hbase.util.Bytes.toBytes(\"fam4\");\n    byte[][] families = new byte[][]{ fam1, fam2, fam3, fam4 };\n    java.lang.String method = this.getName();\n    initHRegion(tableName, method, families);\n    org.apache.hadoop.hbase.client.Put put = new org.apache.hadoop.hbase.client.Put(row1);\n    put.add(fam1, null, null);\n    put.add(fam2, null, null);\n    put.add(fam3, null, null);\n    put.add(fam4, null, null);\n    region.put(put);\n    org.apache.hadoop.hbase.client.Scan scan = null;\n    org.apache.hadoop.hbase.regionserver.HRegion.RegionScanner is = null;\n    scan = new org.apache.hadoop.hbase.client.Scan();\n    scan.addFamily(fam2);\n    scan.addFamily(fam4);\n    is = ((org.apache.hadoop.hbase.regionserver.HRegion.RegionScanner) (region.getScanner(scan)));\n    is.initHeap();\n    junit.framework.Assert.assertEquals(1, ((org.apache.hadoop.hbase.regionserver.HRegion.RegionScanner) (is)).storeHeap.getHeap().size());\n    scan = new org.apache.hadoop.hbase.client.Scan();\n    is = ((org.apache.hadoop.hbase.regionserver.HRegion.RegionScanner) (region.getScanner(scan)));\n    is.initHeap();\n    junit.framework.Assert.assertEquals(families.length - 1, ((org.apache.hadoop.hbase.regionserver.HRegion.RegionScanner) (is)).storeHeap.getHeap().size());\n}",
        "ClassName": "TestHRegion",
        "Label": 1,
        "MethodName": "testGetScanner_WithNoFamilies",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.TestFullLogReconstruction.TEST_UTIL.createTable(org.apache.hadoop.hbase.TestFullLogReconstruction.TABLE_NAME, org.apache.hadoop.hbase.TestFullLogReconstruction.FAMILY);\n    org.apache.hadoop.hbase.client.HTable table = new org.apache.hadoop.hbase.client.HTable(org.apache.hadoop.hbase.TestFullLogReconstruction.TABLE_NAME);\n    org.apache.hadoop.hbase.TestFullLogReconstruction.TEST_UTIL.createMultiRegions(table, org.apache.hadoop.hbase.util.Bytes.toBytes(\"family\"));\n    int initialCount = org.apache.hadoop.hbase.TestFullLogReconstruction.TEST_UTIL.loadTable(table, org.apache.hadoop.hbase.TestFullLogReconstruction.FAMILY);\n    org.apache.hadoop.hbase.client.Scan scan = new org.apache.hadoop.hbase.client.Scan();\n    org.apache.hadoop.hbase.client.ResultScanner results = table.getScanner(scan);\n    int count = 0;\n    for (org.apache.hadoop.hbase.client.Result res : results) {\n        count++;\n    }\n    results.close();\n    org.junit.Assert.assertEquals(initialCount, count);\n    for (int i = 0; i < 4; i++) {\n        org.apache.hadoop.hbase.TestFullLogReconstruction.TEST_UTIL.loadTable(table, org.apache.hadoop.hbase.TestFullLogReconstruction.FAMILY);\n    }\n    org.apache.hadoop.hbase.TestFullLogReconstruction.TEST_UTIL.expireRegionServerSession(0);\n    scan = new org.apache.hadoop.hbase.client.Scan();\n    results = table.getScanner(scan);\n    int newCount = 0;\n    for (org.apache.hadoop.hbase.client.Result res : results) {\n        newCount++;\n    }\n    org.junit.Assert.assertEquals(count, newCount);\n}",
        "ClassName": "TestFullLogReconstruction",
        "Label": 1,
        "MethodName": "testReconstruction",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    long expectedRows = this.numRows / 2;\n    long expectedKeys = this.colsPerRow;\n    org.apache.hadoop.hbase.client.Scan s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(new org.apache.hadoop.hbase.filter.PrefixFilter(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowOne\")));\n    verifyScan(s, expectedRows, expectedKeys);\n}",
        "ClassName": "TestScannersWithFilters",
        "Label": 1,
        "MethodName": "testPrefixFilter",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    createStoreFile(r);\n    for (int i = 0; i < org.apache.hadoop.hbase.regionserver.TestCompaction.COMPACTION_THRESHOLD; i++) {\n        createStoreFile(r);\n    }\n    org.apache.hadoop.hbase.regionserver.InternalScanner s = r.getScanner(new org.apache.hadoop.hbase.client.Scan());\n    do {\n        java.util.List<org.apache.hadoop.hbase.KeyValue> results = new java.util.ArrayList<org.apache.hadoop.hbase.KeyValue>();\n        boolean result = s.next(results);\n        r.delete(new org.apache.hadoop.hbase.client.Delete(results.get(0).getRow()), null, false);\n        if (!result)\n            break;\n\n    } while (true );\n    r.flushcache();\n    r.compactStores(true);\n    s = r.getScanner(new org.apache.hadoop.hbase.client.Scan());\n    int counter = 0;\n    do {\n        java.util.List<org.apache.hadoop.hbase.KeyValue> results = new java.util.ArrayList<org.apache.hadoop.hbase.KeyValue>();\n        boolean result = s.next(results);\n        if (!result)\n            break;\n\n        counter++;\n    } while (true );\n    junit.framework.Assert.assertEquals(0, counter);\n}",
        "ClassName": "TestCompaction",
        "Label": 1,
        "MethodName": "testMajorCompactingToNoOutput",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    final int COL_COUNT = 10;\n    final byte[] tableName = org.apache.hadoop.hbase.util.Bytes.toBytes(\"tablename\");\n    final byte[] row = org.apache.hadoop.hbase.util.Bytes.toBytes(\"row\");\n    org.apache.hadoop.hbase.regionserver.wal.HLog.Reader reader = null;\n    org.apache.hadoop.hbase.regionserver.wal.HLog log = new org.apache.hadoop.hbase.regionserver.wal.HLog(fs, dir, this.oldLogDir, this.conf, null);\n    try {\n        long timestamp = java.lang.System.currentTimeMillis();\n        org.apache.hadoop.hbase.regionserver.wal.WALEdit cols = new org.apache.hadoop.hbase.regionserver.wal.WALEdit();\n        for (int i = 0; i < COL_COUNT; i++) {\n            cols.add(new org.apache.hadoop.hbase.KeyValue(row, org.apache.hadoop.hbase.util.Bytes.toBytes(\"column\"), org.apache.hadoop.hbase.util.Bytes.toBytes(java.lang.Integer.toString(i)), timestamp, new byte[]{ ((byte) (i + '0')) }));\n        }\n        org.apache.hadoop.hbase.HRegionInfo info = new org.apache.hadoop.hbase.HRegionInfo(new org.apache.hadoop.hbase.HTableDescriptor(tableName), row, org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.util.Bytes.toString(row) + \"1\"), false);\n        final byte[] regionName = info.getRegionName();\n        log.append(info, tableName, cols, java.lang.System.currentTimeMillis());\n        long logSeqId = log.startCacheFlush();\n        log.completeCacheFlush(regionName, tableName, logSeqId, info.isMetaRegion());\n        log.close();\n        org.apache.hadoop.fs.Path filename = log.computeFilename(log.getFilenum());\n        log = null;\n        reader = org.apache.hadoop.hbase.regionserver.wal.HLog.getReader(fs, filename, conf);\n        for (int i = 0; i < 1; i++) {\n            org.apache.hadoop.hbase.regionserver.wal.HLog.Entry entry = reader.next(null);\n            if (entry == null)\n                break;\n\n            org.apache.hadoop.hbase.regionserver.wal.HLogKey key = entry.getKey();\n            org.apache.hadoop.hbase.regionserver.wal.WALEdit val = entry.getEdit();\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(regionName, key.getRegionName()));\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(tableName, key.getTablename()));\n            org.apache.hadoop.hbase.KeyValue kv = val.getKeyValues().get(0);\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(row, kv.getRow()));\n            junit.framework.Assert.assertEquals(((byte) (i + '0')), kv.getValue()[0]);\n            java.lang.System.out.println((key + \" \") + val);\n        }\n        org.apache.hadoop.hbase.regionserver.wal.HLog.Entry entry = null;\n        while ((entry = reader.next(null)) != null) {\n            org.apache.hadoop.hbase.regionserver.wal.HLogKey key = entry.getKey();\n            org.apache.hadoop.hbase.regionserver.wal.WALEdit val = entry.getEdit();\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(regionName, key.getRegionName()));\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(tableName, key.getTablename()));\n            org.apache.hadoop.hbase.KeyValue kv = val.getKeyValues().get(0);\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.wal.HLog.METAROW, kv.getRow()));\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.wal.HLog.METAFAMILY, kv.getFamily()));\n            junit.framework.Assert.assertEquals(0, org.apache.hadoop.hbase.util.Bytes.compareTo(org.apache.hadoop.hbase.regionserver.wal.HLog.COMPLETE_CACHE_FLUSH, val.getKeyValues().get(0).getValue()));\n            java.lang.System.out.println((key + \" \") + val);\n        } \n    } finally {\n        if (log != null) {\n            log.closeAndDelete();\n        }\n        if (reader != null) {\n            reader.close();\n        }\n    }\n}",
        "ClassName": "TestHLog",
        "Label": 1,
        "MethodName": "testEditAdd",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.client.Response response = client.get(\"/version/cluster\", org.apache.hadoop.hbase.rest.Constants.MIMETYPE_TEXT);\n    junit.framework.Assert.assertTrue(response.getCode() == 200);\n}",
        "ClassName": "TestVersionResource",
        "Label": 1,
        "MethodName": "testGetStorageClusterVersionText",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    for (int i = 0; i < regions.length; i++) {\n        for (int j = 0; j < rows[i].length; j++) {\n            org.apache.hadoop.hbase.client.Get get = new org.apache.hadoop.hbase.client.Get(rows[i][j]);\n            get.addFamily(org.apache.hadoop.hbase.util.TestMergeTool.FAMILY);\n            org.apache.hadoop.hbase.client.Result result = regions[i].get(get, null);\n            byte[] bytes = result.sorted()[0].getValue();\n            junit.framework.Assert.assertNotNull(bytes);\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(bytes, rows[i][j]));\n        }\n        regions[i].close();\n        regions[i].getLog().closeAndDelete();\n    }\n    org.apache.hadoop.fs.Path logPath = new org.apache.hadoop.fs.Path(\"/tmp\", (org.apache.hadoop.hbase.HConstants.HREGION_LOGDIR_NAME + \"_\") + java.lang.System.currentTimeMillis());\n    org.apache.hadoop.hbase.util.TestMergeTool.LOG.info(\"Creating log \" + logPath.toString());\n    org.apache.hadoop.fs.Path oldLogDir = new org.apache.hadoop.fs.Path(\"/tmp\", org.apache.hadoop.hbase.HConstants.HREGION_OLDLOGDIR_NAME);\n    org.apache.hadoop.hbase.regionserver.wal.HLog log = new org.apache.hadoop.hbase.regionserver.wal.HLog(this.fs, logPath, oldLogDir, this.conf, null);\n    try {\n        org.apache.hadoop.hbase.regionserver.HRegion merged = mergeAndVerify(\"merging regions 0 and 1\", this.sourceRegions[0].getRegionNameAsString(), this.sourceRegions[1].getRegionNameAsString(), log, 2);\n        merged = mergeAndVerify(\"merging regions 0+1 and 2\", merged.getRegionInfo().getRegionNameAsString(), this.sourceRegions[2].getRegionNameAsString(), log, 3);\n        merged = mergeAndVerify(\"merging regions 0+1+2 and 3\", merged.getRegionInfo().getRegionNameAsString(), this.sourceRegions[3].getRegionNameAsString(), log, 4);\n        merged = mergeAndVerify(\"merging regions 0+1+2+3 and 4\", merged.getRegionInfo().getRegionNameAsString(), this.sourceRegions[4].getRegionNameAsString(), log, rows.length);\n    } finally {\n        log.closeAndDelete();\n    }\n}",
        "ClassName": "TestMergeTool",
        "Label": 1,
        "MethodName": "testMergeTool",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    try {\n        this.r = createNewHRegion(org.apache.hadoop.hbase.regionserver.TestScanner.REGION_INFO.getTableDesc(), null, null);\n        org.apache.hadoop.hbase.HBaseTestCase.addContent(this.r, org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY);\n        org.apache.hadoop.hbase.client.Scan scan = new org.apache.hadoop.hbase.client.Scan();\n        org.apache.hadoop.hbase.regionserver.InternalScanner s = r.getScanner(scan);\n        java.util.List<org.apache.hadoop.hbase.KeyValue> results = new java.util.ArrayList<org.apache.hadoop.hbase.KeyValue>();\n        try {\n            s.next(results);\n            s.close();\n            s.next(results);\n            junit.framework.Assert.fail(\"We don't want anything more, we should be failing\");\n        } catch (org.apache.hadoop.hbase.UnknownScannerException ex) {\n            return;\n        }\n    } finally {\n        this.r.close();\n        this.r.getLog().closeAndDelete();\n        org.apache.hadoop.hbase.HBaseTestCase.shutdownDfs(this.cluster);\n    }\n}",
        "ClassName": "TestScanner",
        "Label": 1,
        "MethodName": "testRaceBetweenClientAndTimeout",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.client.Response response = client.get(\"/status/cluster\", org.apache.hadoop.hbase.rest.Constants.MIMETYPE_PROTOBUF);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    org.apache.hadoop.hbase.rest.model.StorageClusterStatusModel model = new org.apache.hadoop.hbase.rest.model.StorageClusterStatusModel();\n    model.getObjectFromMessage(response.getBody());\n    validate(model);\n}",
        "ClassName": "TestStatusResource",
        "Label": 1,
        "MethodName": "testGetClusterStatusPB",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.filter.Filter f = new org.apache.hadoop.hbase.filter.SkipFilter(new org.apache.hadoop.hbase.filter.QualifierFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.NOT_EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testQualifierOne-2\"))));\n    org.apache.hadoop.hbase.client.Scan s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    org.apache.hadoop.hbase.KeyValue[] kvs = new org.apache.hadoop.hbase.KeyValue[]{ new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]) };\n    verifyScanFull(s, kvs);\n}",
        "ClassName": "TestScannersWithFilters",
        "Label": 1,
        "MethodName": "testSkipFilter",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.fs.FileSystem filesystem = org.apache.hadoop.fs.FileSystem.get(conf);\n    org.apache.hadoop.fs.Path rootdir = filesystem.makeQualified(new org.apache.hadoop.fs.Path(conf.get(org.apache.hadoop.hbase.HConstants.HBASE_DIR)));\n    filesystem.mkdirs(rootdir);\n    org.apache.hadoop.hbase.HRegionInfo.FIRST_META_REGIONINFO.getTableDesc().setMemStoreFlushSize((64 * 1024) * 1024);\n    org.apache.hadoop.hbase.regionserver.HRegion mr = org.apache.hadoop.hbase.regionserver.HRegion.createHRegion(org.apache.hadoop.hbase.HRegionInfo.FIRST_META_REGIONINFO, rootdir, this.conf);\n    for (char c = 'A'; c < 'D'; c++) {\n        org.apache.hadoop.hbase.HTableDescriptor htd = new org.apache.hadoop.hbase.HTableDescriptor(\"\" + c);\n        final int last = 128;\n        final int interval = 2;\n        for (int i = 0; i <= last; i += interval) {\n            org.apache.hadoop.hbase.HRegionInfo hri = new org.apache.hadoop.hbase.HRegionInfo(htd, i == 0 ? org.apache.hadoop.hbase.HConstants.EMPTY_BYTE_ARRAY : org.apache.hadoop.hbase.util.Bytes.toBytes(((byte) (i))), i == last ? org.apache.hadoop.hbase.HConstants.EMPTY_BYTE_ARRAY : org.apache.hadoop.hbase.util.Bytes.toBytes(((byte) (i)) + interval));\n            org.apache.hadoop.hbase.client.Put put = new org.apache.hadoop.hbase.client.Put(hri.getRegionName());\n            put.add(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY, org.apache.hadoop.hbase.HConstants.REGIONINFO_QUALIFIER, org.apache.hadoop.hbase.util.Writables.getBytes(hri));\n            mr.put(put, false);\n        }\n    }\n    org.apache.hadoop.hbase.regionserver.InternalScanner s = mr.getScanner(new org.apache.hadoop.hbase.client.Scan());\n    try {\n        java.util.List<org.apache.hadoop.hbase.KeyValue> keys = new java.util.ArrayList<org.apache.hadoop.hbase.KeyValue>();\n        while (s.next(keys)) {\n            org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.LOG.info(keys);\n            keys.clear();\n        } \n    } finally {\n        s.close();\n    }\n    findRow(mr, 'C', 44, 44);\n    findRow(mr, 'C', 45, 44);\n    findRow(mr, 'C', 46, 46);\n    findRow(mr, 'C', 43, 42);\n    mr.flushcache();\n    findRow(mr, 'C', 44, 44);\n    findRow(mr, 'C', 45, 44);\n    findRow(mr, 'C', 46, 46);\n    findRow(mr, 'C', 43, 42);\n    byte[] firstRowInC = org.apache.hadoop.hbase.HRegionInfo.createRegionName(org.apache.hadoop.hbase.util.Bytes.toBytes(\"\" + 'C'), org.apache.hadoop.hbase.HConstants.EMPTY_BYTE_ARRAY, org.apache.hadoop.hbase.HConstants.ZEROES);\n    org.apache.hadoop.hbase.client.Scan scan = new org.apache.hadoop.hbase.client.Scan(firstRowInC);\n    s = mr.getScanner(scan);\n    try {\n        java.util.List<org.apache.hadoop.hbase.KeyValue> keys = new java.util.ArrayList<org.apache.hadoop.hbase.KeyValue>();\n        while (s.next(keys)) {\n            mr.delete(new org.apache.hadoop.hbase.client.Delete(keys.get(0).getRow()), null, false);\n            keys.clear();\n        } \n    } finally {\n        s.close();\n    }\n    findRow(mr, 'C', 44, -1);\n    findRow(mr, 'C', 45, -1);\n    findRow(mr, 'C', 46, -1);\n    findRow(mr, 'C', 43, -1);\n    mr.flushcache();\n    findRow(mr, 'C', 44, -1);\n    findRow(mr, 'C', 45, -1);\n    findRow(mr, 'C', 46, -1);\n    findRow(mr, 'C', 43, -1);\n}",
        "ClassName": "TestGetClosestAtOrBefore",
        "Label": 1,
        "MethodName": "testUsingMetaAndBinary",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.client.Get get = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_1);\n    org.apache.hadoop.hbase.client.Result result = remoteTable.get(get);\n    byte[] value1 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1);\n    byte[] value2 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2);\n    junit.framework.Assert.assertNotNull(value1);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_1, value1));\n    junit.framework.Assert.assertNull(value2);\n    get = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_1);\n    get.addFamily(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_3);\n    result = remoteTable.get(get);\n    value1 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1);\n    value2 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2);\n    junit.framework.Assert.assertNull(value1);\n    junit.framework.Assert.assertNull(value2);\n    get = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_1);\n    get.addColumn(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1);\n    get.addColumn(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2);\n    result = remoteTable.get(get);\n    value1 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1);\n    value2 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2);\n    junit.framework.Assert.assertNotNull(value1);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_1, value1));\n    junit.framework.Assert.assertNull(value2);\n    get = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_2);\n    result = remoteTable.get(get);\n    value1 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1);\n    value2 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2);\n    junit.framework.Assert.assertNotNull(value1);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_2, value1));\n    junit.framework.Assert.assertNotNull(value2);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_2, value2));\n    get = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_2);\n    get.addFamily(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1);\n    result = remoteTable.get(get);\n    value1 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1);\n    value2 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2);\n    junit.framework.Assert.assertNotNull(value1);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_2, value1));\n    junit.framework.Assert.assertNull(value2);\n    get = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_2);\n    get.addColumn(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1);\n    get.addColumn(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2);\n    result = remoteTable.get(get);\n    value1 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1);\n    value2 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2);\n    junit.framework.Assert.assertNotNull(value1);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_2, value1));\n    junit.framework.Assert.assertNotNull(value2);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_2, value2));\n    get = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_2);\n    get.addFamily(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1);\n    get.addFamily(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2);\n    get.setTimeStamp(org.apache.hadoop.hbase.rest.client.TestRemoteTable.TS_1);\n    result = remoteTable.get(get);\n    value1 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1);\n    value2 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2);\n    junit.framework.Assert.assertNotNull(value1);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_1, value1));\n    junit.framework.Assert.assertNull(value2);\n    get = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_2);\n    get.addFamily(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1);\n    get.addFamily(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2);\n    get.setTimeRange(0, org.apache.hadoop.hbase.rest.client.TestRemoteTable.TS_1 + 1);\n    result = remoteTable.get(get);\n    value1 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1);\n    value2 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2);\n    junit.framework.Assert.assertNotNull(value1);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_1, value1));\n    junit.framework.Assert.assertNull(value2);\n    get = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_2);\n    get.addFamily(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1);\n    get.setMaxVersions(2);\n    result = remoteTable.get(get);\n    int count = 0;\n    for (org.apache.hadoop.hbase.KeyValue kv : result.list()) {\n        if (org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, kv.getFamily()) && (org.apache.hadoop.hbase.rest.client.TestRemoteTable.TS_1 == kv.getTimestamp())) {\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_1, kv.getValue()));\n            count++;\n        }\n        if (org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, kv.getFamily()) && (org.apache.hadoop.hbase.rest.client.TestRemoteTable.TS_2 == kv.getTimestamp())) {\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_2, kv.getValue()));\n            count++;\n        }\n    }\n    junit.framework.Assert.assertEquals(2, count);\n}",
        "ClassName": "TestRemoteTable",
        "Label": 1,
        "MethodName": "testGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    runTestOnTable(new org.apache.hadoop.hbase.client.HTable(conf, org.apache.hadoop.hbase.mapreduce.TestTableMapReduce.MULTI_REGION_TABLE_NAME));\n}",
        "ClassName": "TestTableMapReduce",
        "Label": 1,
        "MethodName": "testMultiRegionTable",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    final java.lang.String path = ((((\"/\" + org.apache.hadoop.hbase.rest.TestRowResource.TABLE) + \"/\") + org.apache.hadoop.hbase.rest.TestRowResource.ROW_3) + \"/\") + org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1;\n    final byte[] body = org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.VALUE_3);\n    org.apache.hadoop.hbase.rest.client.Response response = client.put(path, org.apache.hadoop.hbase.rest.Constants.MIMETYPE_BINARY, body);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    java.lang.Thread.yield();\n    response = client.get(path, org.apache.hadoop.hbase.rest.Constants.MIMETYPE_BINARY);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(response.getBody(), body));\n    boolean foundTimestampHeader = false;\n    for (org.apache.commons.httpclient.Header header : response.getHeaders()) {\n        if (header.getName().equals(\"X-Timestamp\")) {\n            foundTimestampHeader = true;\n            break;\n        }\n    }\n    junit.framework.Assert.assertTrue(foundTimestampHeader);\n    response = deleteRow(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_3);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n}",
        "ClassName": "TestRowResource",
        "Label": 1,
        "MethodName": "testSingleCellGetPutBinary",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    java.util.List<org.apache.hadoop.hbase.filter.Filter> filters = new java.util.ArrayList<org.apache.hadoop.hbase.filter.Filter>();\n    filters.add(new org.apache.hadoop.hbase.filter.RowFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.EQUAL, new org.apache.hadoop.hbase.filter.RegexStringComparator(\".+-2\")));\n    filters.add(new org.apache.hadoop.hbase.filter.QualifierFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.EQUAL, new org.apache.hadoop.hbase.filter.RegexStringComparator(\".+-2\")));\n    filters.add(new org.apache.hadoop.hbase.filter.ValueFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.EQUAL, new org.apache.hadoop.hbase.filter.SubstringComparator(\"One\")));\n    org.apache.hadoop.hbase.filter.Filter f = new org.apache.hadoop.hbase.filter.FilterList(org.apache.hadoop.hbase.filter.FilterList.Operator.MUST_PASS_ALL, filters);\n    org.apache.hadoop.hbase.client.Scan s = new org.apache.hadoop.hbase.client.Scan();\n    s.addFamily(org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0]);\n    s.setFilter(f);\n    org.apache.hadoop.hbase.KeyValue[] kvs = new org.apache.hadoop.hbase.KeyValue[]{ new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]) };\n    verifyScanFull(s, kvs);\n    filters.clear();\n    filters.add(new org.apache.hadoop.hbase.filter.RowFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.EQUAL, new org.apache.hadoop.hbase.filter.RegexStringComparator(\".+Two.+\")));\n    filters.add(new org.apache.hadoop.hbase.filter.QualifierFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.EQUAL, new org.apache.hadoop.hbase.filter.RegexStringComparator(\".+-2\")));\n    filters.add(new org.apache.hadoop.hbase.filter.ValueFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.EQUAL, new org.apache.hadoop.hbase.filter.SubstringComparator(\"One\")));\n    f = new org.apache.hadoop.hbase.filter.FilterList(org.apache.hadoop.hbase.filter.FilterList.Operator.MUST_PASS_ONE, filters);\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, this.numRows, this.colsPerRow);\n}",
        "ClassName": "TestScannersWithFilters",
        "Label": 1,
        "MethodName": "testFilterList",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    long expectedRows = this.numRows / 2;\n    long expectedKeys = 2;\n    org.apache.hadoop.hbase.filter.Filter f = new org.apache.hadoop.hbase.filter.QualifierFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testQualifierOne-2\")));\n    org.apache.hadoop.hbase.client.Scan s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows / 2;\n    expectedKeys = 2;\n    f = new org.apache.hadoop.hbase.filter.QualifierFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.LESS, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testQualifierOne-2\")));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows / 2;\n    expectedKeys = 4;\n    f = new org.apache.hadoop.hbase.filter.QualifierFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.LESS_OR_EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testQualifierOne-2\")));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows / 2;\n    expectedKeys = 4;\n    f = new org.apache.hadoop.hbase.filter.QualifierFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.NOT_EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testQualifierOne-2\")));\n    s = new org.apache.hadoop.hbase.client.Scan(org.apache.hadoop.hbase.HConstants.EMPTY_START_ROW, org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowTwo\"));\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows / 2;\n    expectedKeys = 4;\n    f = new org.apache.hadoop.hbase.filter.QualifierFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.GREATER_OR_EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testQualifierOne-2\")));\n    s = new org.apache.hadoop.hbase.client.Scan(org.apache.hadoop.hbase.HConstants.EMPTY_START_ROW, org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowTwo\"));\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows / 2;\n    expectedKeys = 2;\n    f = new org.apache.hadoop.hbase.filter.QualifierFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.GREATER, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testQualifierOne-2\")));\n    s = new org.apache.hadoop.hbase.client.Scan(org.apache.hadoop.hbase.HConstants.EMPTY_START_ROW, org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowTwo\"));\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    f = new org.apache.hadoop.hbase.filter.QualifierFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.NOT_EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[2]));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    org.apache.hadoop.hbase.KeyValue[] kvs = new org.apache.hadoop.hbase.KeyValue[]{ new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]) };\n    verifyScanFull(s, kvs);\n    f = new org.apache.hadoop.hbase.filter.QualifierFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.NOT_EQUAL, new org.apache.hadoop.hbase.filter.RegexStringComparator(\"test.+-2\"));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    kvs = new org.apache.hadoop.hbase.KeyValue[]{ new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]) };\n    verifyScanFull(s, kvs);\n}",
        "ClassName": "TestScannersWithFilters",
        "Label": 1,
        "MethodName": "testQualifierFilter",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    this.r = createNewHRegion(org.apache.hadoop.hbase.regionserver.TestScanner.REGION_INFO.getTableDesc(), null, null);\n    org.apache.hadoop.hbase.HBaseTestCase.HRegionIncommon hri = new org.apache.hadoop.hbase.HBaseTestCase.HRegionIncommon(r);\n    try {\n        LOG.info(\"Added: \" + org.apache.hadoop.hbase.HBaseTestCase.addContent(hri, org.apache.hadoop.hbase.util.Bytes.toString(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY), org.apache.hadoop.hbase.util.Bytes.toString(org.apache.hadoop.hbase.HConstants.REGIONINFO_QUALIFIER)));\n        int count = count(hri, -1, false);\n        junit.framework.Assert.assertEquals(count, count(hri, 100, true));\n    } catch (java.lang.Exception e) {\n        LOG.error(\"Failed\", e);\n        throw e;\n    } finally {\n        this.r.close();\n        this.r.getLog().closeAndDelete();\n        org.apache.hadoop.hbase.HBaseTestCase.shutdownDfs(cluster);\n    }\n}",
        "ClassName": "TestScanner",
        "Label": 1,
        "MethodName": "testScanAndRealConcurrentFlush",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.client.Response response = client.get(\"/\", org.apache.hadoop.hbase.rest.Constants.MIMETYPE_PROTOBUF);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    org.apache.hadoop.hbase.rest.model.TableListModel model = new org.apache.hadoop.hbase.rest.model.TableListModel();\n    model.getObjectFromMessage(response.getBody());\n    checkTableList(model);\n}",
        "ClassName": "TestTableResource",
        "Label": 1,
        "MethodName": "testTableListPB",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.client.Put put = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_3);\n    put.add(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_1);\n    put.add(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_2);\n    remoteTable.put(put);\n    org.apache.hadoop.hbase.client.Get get = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_3);\n    get.addFamily(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1);\n    get.addFamily(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2);\n    org.apache.hadoop.hbase.client.Result result = remoteTable.get(get);\n    byte[] value1 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1);\n    byte[] value2 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2);\n    junit.framework.Assert.assertNotNull(value1);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_1, value1));\n    junit.framework.Assert.assertNotNull(value2);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_2, value2));\n    org.apache.hadoop.hbase.client.Delete delete = new org.apache.hadoop.hbase.client.Delete(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_3);\n    delete.deleteColumn(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2);\n    remoteTable.delete(delete);\n    get = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_3);\n    get.addFamily(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1);\n    get.addFamily(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2);\n    result = remoteTable.get(get);\n    value1 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1);\n    value2 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2);\n    junit.framework.Assert.assertNotNull(value1);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_1, value1));\n    junit.framework.Assert.assertNull(value2);\n    delete = new org.apache.hadoop.hbase.client.Delete(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_3);\n    remoteTable.delete(delete);\n    get = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_3);\n    get.addFamily(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1);\n    get.addFamily(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2);\n    result = remoteTable.get(get);\n    value1 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1);\n    value2 = result.getValue(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_2, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_2);\n    junit.framework.Assert.assertNull(value1);\n    junit.framework.Assert.assertNull(value2);\n}",
        "ClassName": "TestRemoteTable",
        "Label": 1,
        "MethodName": "testDelete",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    java.lang.String path = (\"/\" + org.apache.hadoop.hbase.rest.TestRowResource.TABLE) + \"/fakerow\";\n    org.apache.hadoop.hbase.rest.model.CellSetModel cellSetModel = new org.apache.hadoop.hbase.rest.model.CellSetModel();\n    org.apache.hadoop.hbase.rest.model.RowModel rowModel = new org.apache.hadoop.hbase.rest.model.RowModel(org.apache.hadoop.hbase.rest.TestRowResource.ROW_1);\n    rowModel.addCell(new org.apache.hadoop.hbase.rest.model.CellModel(org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1), org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.VALUE_1)));\n    rowModel.addCell(new org.apache.hadoop.hbase.rest.model.CellModel(org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_2), org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.VALUE_2)));\n    cellSetModel.addRow(rowModel);\n    rowModel = new org.apache.hadoop.hbase.rest.model.RowModel(org.apache.hadoop.hbase.rest.TestRowResource.ROW_2);\n    rowModel.addCell(new org.apache.hadoop.hbase.rest.model.CellModel(org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1), org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.VALUE_3)));\n    rowModel.addCell(new org.apache.hadoop.hbase.rest.model.CellModel(org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_2), org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.VALUE_4)));\n    cellSetModel.addRow(rowModel);\n    org.apache.hadoop.hbase.rest.client.Response response = client.put(path, org.apache.hadoop.hbase.rest.Constants.MIMETYPE_PROTOBUF, cellSetModel.createProtobufOutput());\n    java.lang.Thread.yield();\n    response = client.get(path, org.apache.hadoop.hbase.rest.Constants.MIMETYPE_PROTOBUF);\n    junit.framework.Assert.assertEquals(response.getCode(), 404);\n    checkValuePB(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_1);\n    checkValuePB(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_2, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_2);\n    checkValuePB(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_2, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_3);\n    checkValuePB(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_2, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_2, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_4);\n    response = deleteRow(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    response = deleteRow(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_2);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n}",
        "ClassName": "TestRowResource",
        "Label": 1,
        "MethodName": "testMultiCellGetPutPB",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    byte[] tableName = org.apache.hadoop.hbase.util.Bytes.toBytes(\"testWritesWhileScanning\");\n    int testCount = 100;\n    int numRows = 1;\n    int numFamilies = 10;\n    int numQualifiers = 100;\n    int flushInterval = 10;\n    int compactInterval = 10 * flushInterval;\n    byte[][] families = new byte[numFamilies][];\n    for (int i = 0; i < numFamilies; i++) {\n        families[i] = org.apache.hadoop.hbase.util.Bytes.toBytes(\"family\" + i);\n    }\n    byte[][] qualifiers = new byte[numQualifiers][];\n    for (int i = 0; i < numQualifiers; i++) {\n        qualifiers[i] = org.apache.hadoop.hbase.util.Bytes.toBytes(\"qual\" + i);\n    }\n    java.lang.String method = \"testWritesWhileScanning\";\n    initHRegion(tableName, method, families);\n    org.apache.hadoop.hbase.regionserver.TestHRegion.PutThread putThread = new org.apache.hadoop.hbase.regionserver.TestHRegion.PutThread(numRows, families, qualifiers);\n    putThread.start();\n    org.apache.hadoop.hbase.regionserver.TestHRegion.FlushThread flushThread = new org.apache.hadoop.hbase.regionserver.TestHRegion.FlushThread();\n    flushThread.start();\n    org.apache.hadoop.hbase.client.Get get = new org.apache.hadoop.hbase.client.Get(org.apache.hadoop.hbase.util.Bytes.toBytes(\"row0\"));\n    org.apache.hadoop.hbase.client.Result result = null;\n    int expectedCount = numFamilies * numQualifiers;\n    long prevTimestamp = 0L;\n    for (int i = 0; i < testCount; i++) {\n        if ((i != 0) && ((i % compactInterval) == 0)) {\n            region.compactStores(true);\n        }\n        if ((i != 0) && ((i % flushInterval) == 0)) {\n            flushThread.flush();\n        }\n        boolean previousEmpty = (result == null) || result.isEmpty();\n        result = region.get(get, null);\n        if (((!result.isEmpty()) || (!previousEmpty)) || (i > compactInterval)) {\n            junit.framework.Assert.assertEquals(\"i=\" + i, expectedCount, result.size());\n            long timestamp = 0;\n            for (org.apache.hadoop.hbase.KeyValue kv : result.sorted()) {\n                if (org.apache.hadoop.hbase.util.Bytes.equals(kv.getFamily(), families[0]) && org.apache.hadoop.hbase.util.Bytes.equals(kv.getQualifier(), qualifiers[0])) {\n                    timestamp = kv.getTimestamp();\n                }\n            }\n            junit.framework.Assert.assertTrue(timestamp >= prevTimestamp);\n            prevTimestamp = timestamp;\n            byte[] gotValue = null;\n            for (org.apache.hadoop.hbase.KeyValue kv : result.raw()) {\n                byte[] thisValue = kv.getValue();\n                if (gotValue != null) {\n                    org.apache.hadoop.hbase.HBaseTestCase.assertEquals(gotValue, thisValue);\n                }\n                gotValue = thisValue;\n            }\n        }\n    }\n    putThread.done();\n    region.flushcache();\n    putThread.join();\n    putThread.checkNoError();\n    flushThread.done();\n    flushThread.join();\n    flushThread.checkNoError();\n}",
        "ClassName": "TestHRegion",
        "Label": 1,
        "MethodName": "testWritesWhileGetting",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.client.Response response;\n    response = putValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_1);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    response = putValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_2, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_2);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    checkValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_1);\n    checkValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_2, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_2);\n    response = deleteValue(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    response = getValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1);\n    junit.framework.Assert.assertEquals(response.getCode(), 404);\n    checkValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_2, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_2);\n    response = deleteRow(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    response = getValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1);\n    junit.framework.Assert.assertEquals(response.getCode(), 404);\n    response = getValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_1, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_2);\n    junit.framework.Assert.assertEquals(response.getCode(), 404);\n}",
        "ClassName": "TestRowResource",
        "Label": 1,
        "MethodName": "testDelete",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    final byte[] row = org.apache.hadoop.hbase.util.Bytes.toBytes(\"row\");\n    final byte[] qualifier = org.apache.hadoop.hbase.util.Bytes.toBytes(\"qualifier\");\n    final byte[] value = org.apache.hadoop.hbase.util.Bytes.toBytes(\"value\");\n    final byte[] table = org.apache.hadoop.hbase.util.Bytes.toBytes(\"testDisableAndEnableTable\");\n    org.apache.hadoop.hbase.client.HTable ht = org.apache.hadoop.hbase.client.TestAdmin.TEST_UTIL.createTable(table, org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY);\n    org.apache.hadoop.hbase.client.Put put = new org.apache.hadoop.hbase.client.Put(row);\n    put.add(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY, qualifier, value);\n    ht.put(put);\n    this.admin.disableTable(table);\n    org.apache.hadoop.hbase.client.Get get = new org.apache.hadoop.hbase.client.Get(row);\n    get.addColumn(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY, qualifier);\n    boolean ok = false;\n    try {\n        ht.get(get);\n    } catch (org.apache.hadoop.hbase.client.RetriesExhaustedException e) {\n        ok = true;\n    }\n    org.junit.Assert.assertEquals(true, ok);\n    this.admin.enableTable(table);\n    try {\n        ht.get(get);\n    } catch (org.apache.hadoop.hbase.client.RetriesExhaustedException e) {\n        ok = false;\n    }\n    org.junit.Assert.assertEquals(true, ok);\n}",
        "ClassName": "TestAdmin",
        "Label": 1,
        "MethodName": "testDisableAndEnableTable",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.master.TestMasterTransitions.LOG.info(\"Running testKillRSWithOpeningRegion2482\");\n    org.apache.hadoop.hbase.MiniHBaseCluster cluster = org.apache.hadoop.hbase.master.TestMasterTransitions.TEST_UTIL.getHBaseCluster();\n    if (cluster.getLiveRegionServerThreads().size() < 2) {\n        cluster.startRegionServer();\n    }\n    int countOfMetaRegions = org.apache.hadoop.hbase.master.TestMasterTransitions.countOfMetaRegions();\n    org.apache.hadoop.hbase.master.HMaster m = cluster.getMaster();\n    org.apache.hadoop.hbase.MiniHBaseCluster.MiniHBaseClusterRegionServer hrs = ((org.apache.hadoop.hbase.MiniHBaseCluster.MiniHBaseClusterRegionServer) (cluster.startRegionServer().getRegionServer()));\n    org.apache.hadoop.hbase.master.TestMasterTransitions.LOG.info(\"Started new regionserver: \" + hrs.toString());\n    int minimumRegions = countOfMetaRegions / (cluster.getRegionServerThreads().size() * 2);\n    while (hrs.getOnlineRegions().size() < minimumRegions)\n        org.apache.hadoop.hbase.util.Threads.sleep(100);\n\n    org.apache.hadoop.hbase.master.TestMasterTransitions.HBase2482Listener listener = new org.apache.hadoop.hbase.master.TestMasterTransitions.HBase2482Listener(hrs);\n    m.getRegionServerOperationQueue().registerRegionServerOperationListener(listener);\n    try {\n        closeAllNonCatalogRegions(cluster, hrs);\n        cluster.addMessageToSendRegionServer(hrs, new org.apache.hadoop.hbase.HMsg(org.apache.hadoop.hbase.HMsg.Type.TESTING_MSG_BLOCK_RS));\n        while (!listener.closed)\n            org.apache.hadoop.hbase.util.Threads.sleep(100);\n\n        org.apache.hadoop.hbase.master.TestMasterTransitions.LOG.info(\"Past close\");\n        while (!listener.abortSent)\n            org.apache.hadoop.hbase.util.Threads.sleep(100);\n\n        org.apache.hadoop.hbase.master.TestMasterTransitions.LOG.info(\"Past abort send; waiting on all regions to redeploy\");\n        assertRegionIsBackOnline(listener.regionToFind);\n    } finally {\n        m.getRegionServerOperationQueue().unregisterRegionServerOperationListener(listener);\n    }\n}",
        "ClassName": "TestMasterTransitions",
        "Label": 1,
        "MethodName": "testKillRSWithOpeningRegion2482",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.client.Response response = client.get(\"/version/cluster\", org.apache.hadoop.hbase.rest.Constants.MIMETYPE_XML);\n    junit.framework.Assert.assertTrue(response.getCode() == 200);\n    org.apache.hadoop.hbase.rest.model.StorageClusterVersionModel clusterVersionModel = ((org.apache.hadoop.hbase.rest.model.StorageClusterVersionModel) (context.createUnmarshaller().unmarshal(new java.io.ByteArrayInputStream(response.getBody()))));\n    junit.framework.Assert.assertNotNull(clusterVersionModel);\n    junit.framework.Assert.assertNotNull(clusterVersionModel.getVersion());\n    org.apache.hadoop.hbase.rest.TestVersionResource.LOG.info(\"success retrieving storage cluster version as XML\");\n}",
        "ClassName": "TestVersionResource",
        "Label": 1,
        "MethodName": "testGetStorageClusterVersionXML",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    util.startMiniCluster(3);\n    try {\n        runTestAtomicity(20000);\n    } finally {\n        util.shutdownMiniCluster();\n    }\n}",
        "ClassName": "TestAcidGuarantees",
        "Label": 1,
        "MethodName": "testAtomicity",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    java.lang.String encodedKey = java.net.URLEncoder.encode(\"http://www.google.com/\", org.apache.hadoop.hbase.HConstants.UTF8_ENCODING);\n    org.apache.hadoop.hbase.rest.client.Response response;\n    response = putValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, encodedKey, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_1);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    response = putValuePB(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, encodedKey, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_2, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_2);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    checkValuePB(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, encodedKey, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_1);\n    checkValueXML(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, encodedKey, org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_2, org.apache.hadoop.hbase.rest.TestRowResource.VALUE_2);\n}",
        "ClassName": "TestRowResource",
        "Label": 1,
        "MethodName": "testURLEncodedKey",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    createStoreFile(r);\n    for (int i = 0; i < org.apache.hadoop.hbase.regionserver.TestCompaction.COMPACTION_THRESHOLD; i++) {\n        createStoreFile(r);\n    }\n    org.apache.hadoop.hbase.HBaseTestCase.addContent(new org.apache.hadoop.hbase.HBaseTestCase.HRegionIncommon(r), org.apache.hadoop.hbase.util.Bytes.toString(org.apache.hadoop.hbase.regionserver.TestCompaction.COLUMN_FAMILY));\n    org.apache.hadoop.hbase.client.Result result = r.get(new org.apache.hadoop.hbase.client.Get(STARTROW).addFamily(org.apache.hadoop.hbase.regionserver.TestCompaction.COLUMN_FAMILY_TEXT).setMaxVersions(100), null);\n    junit.framework.Assert.assertEquals(org.apache.hadoop.hbase.regionserver.TestCompaction.COMPACTION_THRESHOLD, result.size());\n    r.flushcache();\n    r.compactStores();\n    junit.framework.Assert.assertTrue(this.cluster.getFileSystem().exists(this.compactionDir));\n    junit.framework.Assert.assertTrue(!this.cluster.getFileSystem().exists(this.regionCompactionDir));\n    byte[] secondRowBytes = START_KEY.getBytes(org.apache.hadoop.hbase.HConstants.UTF8_ENCODING);\n    secondRowBytes[org.apache.hadoop.hbase.regionserver.TestCompaction.START_KEY_BYTES.length - 1]++;\n    result = r.get(new org.apache.hadoop.hbase.client.Get(secondRowBytes).addFamily(org.apache.hadoop.hbase.regionserver.TestCompaction.COLUMN_FAMILY_TEXT).setMaxVersions(100), null);\n    junit.framework.Assert.assertEquals(3, result.size());\n    org.apache.hadoop.hbase.client.Delete delete = new org.apache.hadoop.hbase.client.Delete(secondRowBytes, java.lang.System.currentTimeMillis(), null);\n    byte[][] famAndQf = new byte[][]{ org.apache.hadoop.hbase.regionserver.TestCompaction.COLUMN_FAMILY, null };\n    delete.deleteFamily(famAndQf[0]);\n    r.delete(delete, null, true);\n    result = r.get(new org.apache.hadoop.hbase.client.Get(secondRowBytes).addFamily(org.apache.hadoop.hbase.regionserver.TestCompaction.COLUMN_FAMILY_TEXT).setMaxVersions(100), null);\n    junit.framework.Assert.assertTrue(result.isEmpty());\n    r.flushcache();\n    result = r.get(new org.apache.hadoop.hbase.client.Get(secondRowBytes).addFamily(org.apache.hadoop.hbase.regionserver.TestCompaction.COLUMN_FAMILY_TEXT).setMaxVersions(100), null);\n    junit.framework.Assert.assertTrue(result.isEmpty());\n    createSmallerStoreFile(this.r);\n    r.flushcache();\n    result = r.get(new org.apache.hadoop.hbase.client.Get(secondRowBytes).addFamily(org.apache.hadoop.hbase.regionserver.TestCompaction.COLUMN_FAMILY_TEXT).setMaxVersions(100), null);\n    junit.framework.Assert.assertTrue(result.isEmpty());\n    r.compactStores(true);\n    junit.framework.Assert.assertEquals(r.getStore(org.apache.hadoop.hbase.regionserver.TestCompaction.COLUMN_FAMILY_TEXT).getStorefiles().size(), 1);\n    result = r.get(new org.apache.hadoop.hbase.client.Get(secondRowBytes).addFamily(org.apache.hadoop.hbase.regionserver.TestCompaction.COLUMN_FAMILY_TEXT).setMaxVersions(100), null);\n    junit.framework.Assert.assertTrue(result.isEmpty());\n    int count = 0;\n    boolean containsStartRow = false;\n    for (org.apache.hadoop.hbase.regionserver.StoreFile f : this.r.stores.get(org.apache.hadoop.hbase.regionserver.TestCompaction.COLUMN_FAMILY_TEXT).getStorefiles().values()) {\n        org.apache.hadoop.hbase.io.hfile.HFileScanner scanner = f.getReader().getScanner(false, false);\n        scanner.seekTo();\n        do {\n            byte[] row = scanner.getKeyValue().getRow();\n            if (org.apache.hadoop.hbase.util.Bytes.equals(row, STARTROW)) {\n                containsStartRow = true;\n                count++;\n            } else {\n                junit.framework.Assert.assertFalse(org.apache.hadoop.hbase.util.Bytes.equals(row, secondRowBytes));\n            }\n        } while (scanner.next() );\n    }\n    junit.framework.Assert.assertTrue(containsStartRow);\n    junit.framework.Assert.assertTrue(count == 3);\n    final int ttlInSeconds = 1;\n    for (org.apache.hadoop.hbase.regionserver.Store store : this.r.stores.values()) {\n        store.ttl = ttlInSeconds * 1000;\n    }\n    java.lang.Thread.sleep(ttlInSeconds * 1000);\n    r.compactStores(true);\n    count = count();\n    junit.framework.Assert.assertTrue(count == 0);\n}",
        "ClassName": "TestCompaction",
        "Label": 1,
        "MethodName": "testCompaction",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.client.Response response = client.get(\"/version/cluster\", org.apache.hadoop.hbase.rest.Constants.MIMETYPE_JSON);\n    junit.framework.Assert.assertTrue(response.getCode() == 200);\n}",
        "ClassName": "TestVersionResource",
        "Label": 1,
        "MethodName": "testGetStorageClusterVersionJSON",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    doATest(false);\n}",
        "ClassName": "TestMultiParallelPut",
        "Label": 1,
        "MethodName": "testParallelPut",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    byte[] startrow = org.apache.hadoop.hbase.util.Bytes.toBytes(\"bbb\");\n    byte[] stoprow = org.apache.hadoop.hbase.util.Bytes.toBytes(\"ccc\");\n    try {\n        this.r = createNewHRegion(org.apache.hadoop.hbase.regionserver.TestScanner.REGION_INFO.getTableDesc(), null, null);\n        org.apache.hadoop.hbase.HBaseTestCase.addContent(this.r, org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY);\n        java.util.List<org.apache.hadoop.hbase.KeyValue> results = new java.util.ArrayList<org.apache.hadoop.hbase.KeyValue>();\n        org.apache.hadoop.hbase.client.Scan scan = new org.apache.hadoop.hbase.client.Scan(org.apache.hadoop.hbase.util.Bytes.toBytes(\"abc\"), org.apache.hadoop.hbase.util.Bytes.toBytes(\"abd\"));\n        scan.addFamily(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY);\n        org.apache.hadoop.hbase.regionserver.InternalScanner s = r.getScanner(scan);\n        int count = 0;\n        while (s.next(results)) {\n            count++;\n        } \n        s.close();\n        junit.framework.Assert.assertEquals(0, count);\n        scan = new org.apache.hadoop.hbase.client.Scan(startrow, stoprow);\n        scan.addFamily(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY);\n        s = r.getScanner(scan);\n        count = 0;\n        org.apache.hadoop.hbase.KeyValue kv = null;\n        results = new java.util.ArrayList<org.apache.hadoop.hbase.KeyValue>();\n        for (boolean first = true; s.next(results);) {\n            kv = results.get(0);\n            if (first) {\n                junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.BYTES_COMPARATOR.compare(startrow, kv.getRow()) == 0);\n                first = false;\n            }\n            count++;\n        }\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.BYTES_COMPARATOR.compare(stoprow, kv.getRow()) > 0);\n        junit.framework.Assert.assertTrue(count > 10);\n        s.close();\n    } finally {\n        this.r.close();\n        this.r.getLog().closeAndDelete();\n        org.apache.hadoop.hbase.HBaseTestCase.shutdownDfs(this.cluster);\n    }\n}",
        "ClassName": "TestScanner",
        "Label": 1,
        "MethodName": "testStopRow",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.client.Response response = client.get(\"/version\", org.apache.hadoop.hbase.rest.Constants.MIMETYPE_XML);\n    junit.framework.Assert.assertTrue(response.getCode() == 200);\n    org.apache.hadoop.hbase.rest.model.VersionModel model = ((org.apache.hadoop.hbase.rest.model.VersionModel) (context.createUnmarshaller().unmarshal(new java.io.ByteArrayInputStream(response.getBody()))));\n    org.apache.hadoop.hbase.rest.TestVersionResource.validate(model);\n    org.apache.hadoop.hbase.rest.TestVersionResource.LOG.info(\"success retrieving Stargate version as XML\");\n}",
        "ClassName": "TestVersionResource",
        "Label": 1,
        "MethodName": "testGetStargateVersionXML",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    table = new org.apache.hadoop.hbase.client.HTable(conf, \"test\");\n    junit.framework.Assert.assertEquals(\"Test table should have 20 regions\", 20, table.getStartKeys().length);\n    assertRegionsAreBalanced();\n    LOG.debug(\"Adding 2nd region server.\");\n    cluster.startRegionServer();\n    assertRegionsAreBalanced();\n    LOG.debug(\"Adding 3rd region server.\");\n    cluster.startRegionServer();\n    assertRegionsAreBalanced();\n    LOG.debug(\"Killing the 3rd region server.\");\n    cluster.stopRegionServer(2, false);\n    cluster.waitOnRegionServer(2);\n    assertRegionsAreBalanced();\n    LOG.debug(\"Adding 3rd region server\");\n    cluster.startRegionServer();\n    LOG.debug(\"Adding 4th region server\");\n    cluster.startRegionServer();\n    assertRegionsAreBalanced();\n    for (int i = 0; i < 6; i++) {\n        LOG.debug((\"Adding \" + (i + 5)) + \"th region server\");\n        cluster.startRegionServer();\n    }\n    assertRegionsAreBalanced();\n}",
        "ClassName": "TestRegionRebalancing",
        "Label": 1,
        "MethodName": "testRebalancing",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    long expectedRows = (this.numRows / 2) - 1;\n    long expectedKeys = this.colsPerRow;\n    org.apache.hadoop.hbase.client.Scan s = new org.apache.hadoop.hbase.client.Scan(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowOne-0\"), org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowOne-3\"));\n    verifyScan(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows / 2;\n    s = new org.apache.hadoop.hbase.client.Scan(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowOne-0\"));\n    s.setFilter(new org.apache.hadoop.hbase.filter.InclusiveStopFilter(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowOne-3\")));\n    verifyScan(s, expectedRows, expectedKeys);\n    expectedRows = (this.numRows / 2) - 1;\n    expectedKeys = this.colsPerRow;\n    s = new org.apache.hadoop.hbase.client.Scan(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowTwo-0\"), org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowTwo-3\"));\n    verifyScan(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows / 2;\n    s = new org.apache.hadoop.hbase.client.Scan(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowTwo-0\"));\n    s.setFilter(new org.apache.hadoop.hbase.filter.InclusiveStopFilter(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowTwo-3\")));\n    verifyScan(s, expectedRows, expectedKeys);\n}",
        "ClassName": "TestScannersWithFilters",
        "Label": 1,
        "MethodName": "testInclusiveStopFilter",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    this.r = createNewHRegion(org.apache.hadoop.hbase.regionserver.TestScanner.REGION_INFO.getTableDesc(), null, null);\n    org.apache.hadoop.hbase.HBaseTestCase.HRegionIncommon hri = new org.apache.hadoop.hbase.HBaseTestCase.HRegionIncommon(r);\n    try {\n        LOG.info(\"Added: \" + org.apache.hadoop.hbase.HBaseTestCase.addContent(hri, org.apache.hadoop.hbase.util.Bytes.toString(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY), org.apache.hadoop.hbase.util.Bytes.toString(org.apache.hadoop.hbase.HConstants.REGIONINFO_QUALIFIER)));\n        int count = count(hri, -1, false);\n        junit.framework.Assert.assertEquals(count, count(hri, 100, false));\n    } catch (java.lang.Exception e) {\n        LOG.error(\"Failed\", e);\n        throw e;\n    } finally {\n        this.r.close();\n        this.r.getLog().closeAndDelete();\n        org.apache.hadoop.hbase.HBaseTestCase.shutdownDfs(cluster);\n    }\n}",
        "ClassName": "TestScanner",
        "Label": 1,
        "MethodName": "testScanAndSyncFlush",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    java.lang.String schemaPath = (\"/\" + org.apache.hadoop.hbase.rest.TestSchemaResource.TABLE1) + \"/schema\";\n    org.apache.hadoop.hbase.rest.model.TableSchemaModel model;\n    org.apache.hadoop.hbase.rest.client.Response response;\n    junit.framework.Assert.assertFalse(admin.tableExists(org.apache.hadoop.hbase.rest.TestSchemaResource.TABLE1));\n    model = org.apache.hadoop.hbase.rest.model.TestTableSchemaModel.buildTestModel(org.apache.hadoop.hbase.rest.TestSchemaResource.TABLE1);\n    org.apache.hadoop.hbase.rest.model.TestTableSchemaModel.checkModel(model, org.apache.hadoop.hbase.rest.TestSchemaResource.TABLE1);\n    response = client.put(schemaPath, org.apache.hadoop.hbase.rest.Constants.MIMETYPE_XML, toXML(model));\n    junit.framework.Assert.assertEquals(response.getCode(), 201);\n    admin.enableTable(org.apache.hadoop.hbase.rest.TestSchemaResource.TABLE1);\n    response = client.get(schemaPath, org.apache.hadoop.hbase.rest.Constants.MIMETYPE_XML);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    model = fromXML(response.getBody());\n    org.apache.hadoop.hbase.rest.model.TestTableSchemaModel.checkModel(model, org.apache.hadoop.hbase.rest.TestSchemaResource.TABLE1);\n    client.delete(schemaPath);\n    junit.framework.Assert.assertFalse(admin.tableExists(org.apache.hadoop.hbase.rest.TestSchemaResource.TABLE1));\n}",
        "ClassName": "TestSchemaResource",
        "Label": 1,
        "MethodName": "testTableCreateAndDeleteXML",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertFalse(remoteAdmin.isTableAvailable(org.apache.hadoop.hbase.rest.client.TestRemoteAdmin.TABLE_1));\n    remoteAdmin.createTable(org.apache.hadoop.hbase.rest.client.TestRemoteAdmin.DESC_1);\n    junit.framework.Assert.assertTrue(remoteAdmin.isTableAvailable(org.apache.hadoop.hbase.rest.client.TestRemoteAdmin.TABLE_1));\n}",
        "ClassName": "TestRemoteAdmin",
        "Label": 1,
        "MethodName": "testCreateTable",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    final int BATCH_SIZE = 10;\n    org.apache.hadoop.hbase.rest.model.ScannerModel model = new org.apache.hadoop.hbase.rest.model.ScannerModel();\n    model.setBatch(BATCH_SIZE);\n    model.addColumn(org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestScannerResource.COLUMN_1));\n    org.apache.hadoop.hbase.rest.client.Response response = client.put((\"/\" + org.apache.hadoop.hbase.rest.TestScannerResource.TABLE) + \"/scanner\", org.apache.hadoop.hbase.rest.Constants.MIMETYPE_PROTOBUF, model.createProtobufOutput());\n    junit.framework.Assert.assertEquals(response.getCode(), 201);\n    java.lang.String scannerURI = response.getLocation();\n    junit.framework.Assert.assertNotNull(scannerURI);\n    response = client.get(scannerURI, org.apache.hadoop.hbase.rest.Constants.MIMETYPE_PROTOBUF);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    org.apache.hadoop.hbase.rest.model.CellSetModel cellSet = new org.apache.hadoop.hbase.rest.model.CellSetModel();\n    cellSet.getObjectFromMessage(response.getBody());\n    junit.framework.Assert.assertEquals(countCellSet(cellSet), BATCH_SIZE);\n    response = client.delete(scannerURI);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n}",
        "ClassName": "TestScannerResource",
        "Label": 1,
        "MethodName": "testSimpleScannerPB",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.client.Response response = client.get(\"/\", org.apache.hadoop.hbase.rest.Constants.MIMETYPE_XML);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    org.apache.hadoop.hbase.rest.model.TableListModel model = ((org.apache.hadoop.hbase.rest.model.TableListModel) (context.createUnmarshaller().unmarshal(new java.io.ByteArrayInputStream(response.getBody()))));\n    checkTableList(model);\n}",
        "ClassName": "TestTableResource",
        "Label": 1,
        "MethodName": "testTableListXML",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.client.Response response = client.get(\"/version\", org.apache.hadoop.hbase.rest.Constants.MIMETYPE_PROTOBUF);\n    junit.framework.Assert.assertTrue(response.getCode() == 200);\n    org.apache.hadoop.hbase.rest.model.VersionModel model = new org.apache.hadoop.hbase.rest.model.VersionModel();\n    model.getObjectFromMessage(response.getBody());\n    org.apache.hadoop.hbase.rest.TestVersionResource.validate(model);\n    org.apache.hadoop.hbase.rest.TestVersionResource.LOG.info(\"success retrieving Stargate version as protobuf\");\n}",
        "ClassName": "TestVersionResource",
        "Label": 1,
        "MethodName": "testGetStargateVersionPB",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.client.Response response = client.get(\"/status/cluster\", org.apache.hadoop.hbase.rest.Constants.MIMETYPE_XML);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    org.apache.hadoop.hbase.rest.model.StorageClusterStatusModel model = ((org.apache.hadoop.hbase.rest.model.StorageClusterStatusModel) (context.createUnmarshaller().unmarshal(new java.io.ByteArrayInputStream(response.getBody()))));\n    validate(model);\n}",
        "ClassName": "TestStatusResource",
        "Label": 1,
        "MethodName": "testGetClusterStatusXML",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.util.EnvironmentEdge edge = org.apache.hadoop.hbase.util.EnvironmentEdgeManager.getDelegate();\n    org.junit.Assert.assertNotNull(edge);\n    org.junit.Assert.assertTrue(edge instanceof org.apache.hadoop.hbase.util.DefaultEnvironmentEdge);\n    org.apache.hadoop.hbase.util.EnvironmentEdgeManager.reset();\n    org.apache.hadoop.hbase.util.EnvironmentEdge edge2 = org.apache.hadoop.hbase.util.EnvironmentEdgeManager.getDelegate();\n    org.junit.Assert.assertFalse(edge == edge2);\n    org.apache.hadoop.hbase.util.IncrementingEnvironmentEdge newEdge = new org.apache.hadoop.hbase.util.IncrementingEnvironmentEdge();\n    org.apache.hadoop.hbase.util.EnvironmentEdgeManager.injectEdge(newEdge);\n    org.junit.Assert.assertEquals(newEdge, org.apache.hadoop.hbase.util.EnvironmentEdgeManager.getDelegate());\n    org.apache.hadoop.hbase.util.EnvironmentEdgeManager.injectEdge(null);\n    org.apache.hadoop.hbase.util.EnvironmentEdge nullResult = org.apache.hadoop.hbase.util.EnvironmentEdgeManager.getDelegate();\n    org.junit.Assert.assertTrue(nullResult instanceof org.apache.hadoop.hbase.util.DefaultEnvironmentEdge);\n}",
        "ClassName": "TestEnvironmentEdgeManager",
        "Label": 1,
        "MethodName": "testManageSingleton",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    byte[] tableName = org.apache.hadoop.hbase.util.Bytes.toBytes(\"testtable\");\n    byte[] fam = org.apache.hadoop.hbase.util.Bytes.toBytes(\"info\");\n    byte[][] families = new byte[][]{ fam };\n    java.lang.String method = this.getName();\n    initHRegion(tableName, method, families);\n    byte[] row = org.apache.hadoop.hbase.util.Bytes.toBytes(\"table_name\");\n    byte[] serverinfo = org.apache.hadoop.hbase.util.Bytes.toBytes(\"serverinfo\");\n    byte[] splitA = org.apache.hadoop.hbase.util.Bytes.toBytes(\"splitA\");\n    byte[] splitB = org.apache.hadoop.hbase.util.Bytes.toBytes(\"splitB\");\n    org.apache.hadoop.hbase.client.Put put = new org.apache.hadoop.hbase.client.Put(row);\n    put.add(fam, splitA, org.apache.hadoop.hbase.util.Bytes.toBytes(\"reference_A\"));\n    region.put(put);\n    put = new org.apache.hadoop.hbase.client.Put(row);\n    put.add(fam, splitB, org.apache.hadoop.hbase.util.Bytes.toBytes(\"reference_B\"));\n    region.put(put);\n    put = new org.apache.hadoop.hbase.client.Put(row);\n    put.add(fam, serverinfo, org.apache.hadoop.hbase.util.Bytes.toBytes(\"ip_address\"));\n    region.put(put);\n    org.apache.hadoop.hbase.client.Delete delete = new org.apache.hadoop.hbase.client.Delete(row);\n    delete.deleteColumns(fam, splitA);\n    region.delete(delete, null, true);\n    org.apache.hadoop.hbase.client.Get get = new org.apache.hadoop.hbase.client.Get(row).addColumn(fam, serverinfo);\n    org.apache.hadoop.hbase.client.Result result = region.get(get, null);\n    junit.framework.Assert.assertEquals(1, result.size());\n    get = new org.apache.hadoop.hbase.client.Get(row).addColumn(fam, splitA);\n    result = region.get(get, null);\n    junit.framework.Assert.assertEquals(0, result.size());\n    get = new org.apache.hadoop.hbase.client.Get(row).addColumn(fam, splitB);\n    result = region.get(get, null);\n    junit.framework.Assert.assertEquals(1, result.size());\n    put = new org.apache.hadoop.hbase.client.Put(row);\n    put.add(fam, splitA, org.apache.hadoop.hbase.util.Bytes.toBytes(\"reference_A\"));\n    region.put(put);\n    get = new org.apache.hadoop.hbase.client.Get(row);\n    result = region.get(get, null);\n    junit.framework.Assert.assertEquals(3, result.size());\n    delete = new org.apache.hadoop.hbase.client.Delete(row);\n    region.delete(delete, null, false);\n    junit.framework.Assert.assertEquals(0, region.get(get, null).size());\n    try {\n        java.lang.Thread.sleep(10);\n    } catch (java.lang.InterruptedException e) {\n        e.printStackTrace();\n    }\n    region.put(new org.apache.hadoop.hbase.client.Put(row).add(fam, splitA, org.apache.hadoop.hbase.util.Bytes.toBytes(\"reference_A\")));\n    result = region.get(get, null);\n    junit.framework.Assert.assertEquals(1, result.size());\n}",
        "ClassName": "TestHRegion",
        "Label": 1,
        "MethodName": "testDelete_mixed",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.client.Response response = client.get(\"/version\", org.apache.hadoop.hbase.rest.Constants.MIMETYPE_JSON);\n    junit.framework.Assert.assertTrue(response.getCode() == 200);\n}",
        "ClassName": "TestVersionResource",
        "Label": 1,
        "MethodName": "testGetStargateVersionJSON",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    java.util.List<org.apache.hadoop.hbase.client.Put> puts = new java.util.ArrayList<org.apache.hadoop.hbase.client.Put>();\n    org.apache.hadoop.hbase.client.Put put = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_1);\n    put.add(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_1);\n    puts.add(put);\n    put = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_2);\n    put.add(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_1);\n    puts.add(put);\n    put = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_3);\n    put.add(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_1);\n    puts.add(put);\n    put = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_4);\n    put.add(org.apache.hadoop.hbase.rest.client.TestRemoteTable.COLUMN_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.QUALIFIER_1, org.apache.hadoop.hbase.rest.client.TestRemoteTable.VALUE_1);\n    puts.add(put);\n    remoteTable.put(puts);\n    org.apache.hadoop.hbase.client.ResultScanner scanner = remoteTable.getScanner(new org.apache.hadoop.hbase.client.Scan());\n    org.apache.hadoop.hbase.client.Result[] results = scanner.next(1);\n    junit.framework.Assert.assertNotNull(results);\n    junit.framework.Assert.assertEquals(1, results.length);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_1, results[0].getRow()));\n    results = scanner.next(3);\n    junit.framework.Assert.assertNotNull(results);\n    junit.framework.Assert.assertEquals(3, results.length);\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_2, results[0].getRow()));\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_3, results[1].getRow()));\n    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.rest.client.TestRemoteTable.ROW_4, results[2].getRow()));\n    results = scanner.next(1);\n    junit.framework.Assert.assertNull(results);\n    scanner.close();\n}",
        "ClassName": "TestRemoteTable",
        "Label": 1,
        "MethodName": "testScanner",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.HTableDescriptor local = new org.apache.hadoop.hbase.client.HTable(conf, org.apache.hadoop.hbase.rest.client.TestRemoteTable.TABLE).getTableDescriptor();\n    junit.framework.Assert.assertEquals(remoteTable.getTableDescriptor(), local);\n}",
        "ClassName": "TestRemoteTable",
        "Label": 1,
        "MethodName": "testGetTableDescriptor",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    int keyInterval = 1000;\n    float err = ((float) (0.01));\n    java.util.BitSet valid = new java.util.BitSet(keyInterval * 4);\n    org.apache.hadoop.hbase.util.DynamicByteBloomFilter bf1 = new org.apache.hadoop.hbase.util.DynamicByteBloomFilter(keyInterval, err, org.apache.hadoop.hbase.util.Hash.MURMUR_HASH);\n    bf1.allocBloom();\n    long seed = java.lang.System.currentTimeMillis();\n    java.util.Random r = new java.util.Random(seed);\n    java.lang.System.out.println(\"seed = \" + seed);\n    for (int i = 0; i < (keyInterval * 4); ++i) {\n        if (r.nextBoolean()) {\n            bf1.add(org.apache.hadoop.hbase.util.Bytes.toBytes(i));\n            valid.set(i);\n            if (bf1.getKeyCount() == 2000) {\n                break;\n            }\n        }\n    }\n    junit.framework.Assert.assertTrue(2 <= bf1.bloomCount());\n    java.lang.System.out.println(\"keys added = \" + bf1.getKeyCount());\n    java.io.ByteArrayOutputStream metaOut = new java.io.ByteArrayOutputStream();\n    java.io.ByteArrayOutputStream dataOut = new java.io.ByteArrayOutputStream();\n    bf1.getMetaWriter().write(new java.io.DataOutputStream(metaOut));\n    bf1.getDataWriter().write(new java.io.DataOutputStream(dataOut));\n    java.nio.ByteBuffer bb = java.nio.ByteBuffer.wrap(dataOut.toByteArray());\n    org.apache.hadoop.hbase.util.DynamicByteBloomFilter newBf1 = new org.apache.hadoop.hbase.util.DynamicByteBloomFilter(java.nio.ByteBuffer.wrap(metaOut.toByteArray()));\n    int falsePositives = 0;\n    for (int i = 0; i < (keyInterval * 4); ++i) {\n        if (newBf1.contains(org.apache.hadoop.hbase.util.Bytes.toBytes(i), bb)) {\n            if (!valid.get(i))\n                ++falsePositives;\n\n        } else {\n            if (valid.get(i)) {\n                assert false;\n            }\n        }\n    }\n    java.lang.System.out.println(\"False positives: \" + falsePositives);\n    junit.framework.Assert.assertTrue(falsePositives <= ((keyInterval * 5) * err));\n}",
        "ClassName": "TestByteBloomFilter",
        "Label": 1,
        "MethodName": "testDynamicBloom",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertNotNull(dfsCluster);\n    org.apache.hadoop.hbase.HMerge.merge(conf, dfsCluster.getFileSystem(), org.apache.hadoop.hbase.HConstants.META_TABLE_NAME);\n}",
        "ClassName": "TestMergeMeta",
        "Label": 1,
        "MethodName": "testMergeMeta",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    try {\n        this.r = createNewHRegion(org.apache.hadoop.hbase.regionserver.TestWideScanner.REGION_INFO.getTableDesc(), null, null);\n        int inserted = addWideContent(this.r, org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY);\n        java.util.List<org.apache.hadoop.hbase.KeyValue> results = new java.util.ArrayList<org.apache.hadoop.hbase.KeyValue>();\n        org.apache.hadoop.hbase.client.Scan scan = new org.apache.hadoop.hbase.client.Scan();\n        scan.addFamily(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY);\n        scan.setBatch(org.apache.hadoop.hbase.regionserver.TestWideScanner.BATCH);\n        org.apache.hadoop.hbase.regionserver.InternalScanner s = r.getScanner(scan);\n        int total = 0;\n        int i = 0;\n        boolean more;\n        do {\n            more = s.next(results);\n            i++;\n            LOG.info(((\"iteration #\" + i) + \", results.size=\") + results.size());\n            junit.framework.Assert.assertTrue(results.size() <= org.apache.hadoop.hbase.regionserver.TestWideScanner.BATCH);\n            total += results.size();\n            if (results.size() > 0) {\n                byte[] row = results.get(0).getRow();\n                for (org.apache.hadoop.hbase.KeyValue kv : results) {\n                    junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(row, kv.getRow()));\n                }\n            }\n            results.clear();\n        } while (more );\n        LOG.info(((\"inserted \" + inserted) + \", scanned \") + total);\n        junit.framework.Assert.assertTrue(total == inserted);\n        s.close();\n    } finally {\n        this.r.close();\n        this.r.getLog().closeAndDelete();\n        org.apache.hadoop.hbase.HBaseTestCase.shutdownDfs(this.cluster);\n    }\n}",
        "ClassName": "TestWideScanner",
        "Label": 1,
        "MethodName": "testWideScanBatching",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.client.HTable t = createTable();\n    org.apache.hadoop.hbase.HBaseTestCase.Incommon incommon = new org.apache.hadoop.hbase.HBaseTestCase.HTableIncommon(t);\n    org.apache.hadoop.hbase.TimestampTestBase.doTestDelete(incommon, new org.apache.hadoop.hbase.HBaseTestCase.FlushCache() {\n        public void flushcache() throws java.io.IOException {\n            cluster.flushcache();\n        }\n    });\n    org.apache.hadoop.hbase.TimestampTestBase.doTestTimestampScanning(incommon, new org.apache.hadoop.hbase.HBaseTestCase.FlushCache() {\n        public void flushcache() throws java.io.IOException {\n            cluster.flushcache();\n        }\n    });\n}",
        "ClassName": "TestTimestamp",
        "Label": 1,
        "MethodName": "testTimestamps",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    long expectedRows = 1;\n    long expectedKeys = this.colsPerRow;\n    org.apache.hadoop.hbase.filter.Filter f = new org.apache.hadoop.hbase.filter.RowFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowOne-2\")));\n    org.apache.hadoop.hbase.client.Scan s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = 2;\n    expectedKeys = this.colsPerRow;\n    f = new org.apache.hadoop.hbase.filter.RowFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.EQUAL, new org.apache.hadoop.hbase.filter.RegexStringComparator(\"testRow.+-2\"));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = 1;\n    expectedKeys = this.colsPerRow;\n    f = new org.apache.hadoop.hbase.filter.RowFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.LESS, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowOne-2\")));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = 2;\n    expectedKeys = this.colsPerRow;\n    f = new org.apache.hadoop.hbase.filter.RowFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.LESS_OR_EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowOne-2\")));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows - 1;\n    expectedKeys = this.colsPerRow;\n    f = new org.apache.hadoop.hbase.filter.RowFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.NOT_EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowOne-2\")));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows - 1;\n    expectedKeys = this.colsPerRow;\n    f = new org.apache.hadoop.hbase.filter.RowFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.GREATER_OR_EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowOne-2\")));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows - 2;\n    expectedKeys = this.colsPerRow;\n    f = new org.apache.hadoop.hbase.filter.RowFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.GREATER, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowOne-2\")));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    f = new org.apache.hadoop.hbase.filter.RowFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.NOT_EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testRowOne-2\")));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    org.apache.hadoop.hbase.KeyValue[] kvs = new org.apache.hadoop.hbase.KeyValue[]{ new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]) };\n    verifyScanFull(s, kvs);\n    f = new org.apache.hadoop.hbase.filter.RowFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.EQUAL, new org.apache.hadoop.hbase.filter.RegexStringComparator(\".+-2\"));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    kvs = new org.apache.hadoop.hbase.KeyValue[]{ new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_ONE[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_ONE[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[0]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]) };\n    verifyScanFull(s, kvs);\n}",
        "ClassName": "TestScannersWithFilters",
        "Label": 1,
        "MethodName": "testRowFilter",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertTrue(\"This test requires HLog file replication.\", fs.getDefaultReplication() > 1);\n    new org.apache.hadoop.hbase.client.HTable(conf, org.apache.hadoop.hbase.HConstants.META_TABLE_NAME);\n    this.server = cluster.getRegionServer(0);\n    this.log = server.getLog();\n    junit.framework.Assert.assertTrue(\"Need HDFS-826 for this test\", log.canGetCurReplicas());\n    junit.framework.Assert.assertTrue(\"Need append support for this test\", org.apache.hadoop.hbase.regionserver.wal.HLog.isAppend(conf));\n    dfsCluster.startDataNodes(conf, 1, true, null, null);\n    dfsCluster.waitActive();\n    junit.framework.Assert.assertTrue(dfsCluster.getDataNodes().size() >= (fs.getDefaultReplication() + 1));\n    java.lang.String tableName = getName();\n    org.apache.hadoop.hbase.HTableDescriptor desc = new org.apache.hadoop.hbase.HTableDescriptor(tableName);\n    desc.addFamily(new org.apache.hadoop.hbase.HColumnDescriptor(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY));\n    org.apache.hadoop.hbase.client.HBaseAdmin admin = new org.apache.hadoop.hbase.client.HBaseAdmin(conf);\n    admin.createTable(desc);\n    org.apache.hadoop.hbase.client.HTable table = new org.apache.hadoop.hbase.client.HTable(conf, tableName);\n    table.setAutoFlush(true);\n    long curTime = java.lang.System.currentTimeMillis();\n    long oldFilenum = log.getFilenum();\n    junit.framework.Assert.assertTrue(\"Log should have a timestamp older than now\", (curTime > oldFilenum) && (oldFilenum != (-1)));\n    writeData(table, 1);\n    junit.framework.Assert.assertTrue(\"The log shouldn't have rolled yet\", oldFilenum == log.getFilenum());\n    java.io.OutputStream stm = log.getOutputStream();\n    java.lang.reflect.Method getPipeline = null;\n    for (java.lang.reflect.Method m : stm.getClass().getDeclaredMethods()) {\n        if (m.getName().endsWith(\"getPipeline\")) {\n            getPipeline = m;\n            getPipeline.setAccessible(true);\n            break;\n        }\n    }\n    junit.framework.Assert.assertTrue(\"Need DFSOutputStream.getPipeline() for this test\", getPipeline != null);\n    java.lang.Object repl = getPipeline.invoke(stm, new java.lang.Object[]{  });\n    org.apache.hadoop.hdfs.protocol.DatanodeInfo[] pipeline = ((org.apache.hadoop.hdfs.protocol.DatanodeInfo[]) (repl));\n    junit.framework.Assert.assertTrue(pipeline.length == fs.getDefaultReplication());\n    org.apache.hadoop.hdfs.MiniDFSCluster.DataNodeProperties dnprop = dfsCluster.stopDataNode(pipeline[0].getName());\n    junit.framework.Assert.assertTrue(dnprop != null);\n    writeData(table, 2);\n    long newFilenum = log.getFilenum();\n    junit.framework.Assert.assertTrue(\"Missing datanode should've triggered a log roll\", (newFilenum > oldFilenum) && (newFilenum > curTime));\n    writeData(table, 3);\n    junit.framework.Assert.assertTrue(\"The log should not roll again.\", log.getFilenum() == newFilenum);\n    junit.framework.Assert.assertTrue(\"New log file should have the default replication\", log.getLogReplication() == fs.getDefaultReplication());\n}",
        "ClassName": "TestLogRolling",
        "Label": 1,
        "MethodName": "testLogRollOnDatanodeDeath",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    long expectedRows = this.numRows / 2;\n    long expectedKeys = this.colsPerRow;\n    org.apache.hadoop.hbase.filter.Filter f = new org.apache.hadoop.hbase.filter.ValueFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testValueOne\")));\n    org.apache.hadoop.hbase.client.Scan s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows / 2;\n    expectedKeys = this.colsPerRow;\n    f = new org.apache.hadoop.hbase.filter.ValueFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testValueTwo\")));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows;\n    expectedKeys = this.colsPerRow;\n    f = new org.apache.hadoop.hbase.filter.ValueFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.EQUAL, new org.apache.hadoop.hbase.filter.RegexStringComparator(\"testValue((One)|(Two))\"));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows / 2;\n    expectedKeys = this.colsPerRow;\n    f = new org.apache.hadoop.hbase.filter.ValueFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.LESS, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testValueTwo\")));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows;\n    expectedKeys = this.colsPerRow;\n    f = new org.apache.hadoop.hbase.filter.ValueFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.LESS_OR_EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testValueTwo\")));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows / 2;\n    expectedKeys = this.colsPerRow;\n    f = new org.apache.hadoop.hbase.filter.ValueFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.LESS_OR_EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testValueOne\")));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows / 2;\n    expectedKeys = this.colsPerRow;\n    f = new org.apache.hadoop.hbase.filter.ValueFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.NOT_EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testValueOne\")));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows;\n    expectedKeys = this.colsPerRow;\n    f = new org.apache.hadoop.hbase.filter.ValueFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.GREATER_OR_EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testValueOne\")));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    expectedRows = this.numRows / 2;\n    expectedKeys = this.colsPerRow;\n    f = new org.apache.hadoop.hbase.filter.ValueFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.GREATER, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testValueOne\")));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    verifyScanNoEarlyOut(s, expectedRows, expectedKeys);\n    f = new org.apache.hadoop.hbase.filter.ValueFilter(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp.NOT_EQUAL, new org.apache.hadoop.hbase.filter.BinaryComparator(org.apache.hadoop.hbase.util.Bytes.toBytes(\"testValueOne\")));\n    s = new org.apache.hadoop.hbase.client.Scan();\n    s.setFilter(f);\n    org.apache.hadoop.hbase.KeyValue[] kvs = new org.apache.hadoop.hbase.KeyValue[]{ new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[0], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[2], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]), new org.apache.hadoop.hbase.KeyValue(org.apache.hadoop.hbase.rest.TestScannersWithFilters.ROWS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.FAMILIES[1], org.apache.hadoop.hbase.rest.TestScannersWithFilters.QUALIFIERS_TWO[3], org.apache.hadoop.hbase.rest.TestScannersWithFilters.VALUES[1]) };\n    verifyScanFull(s, kvs);\n}",
        "ClassName": "TestScannersWithFilters",
        "Label": 1,
        "MethodName": "testValueFilter",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    byte[] tableName = org.apache.hadoop.hbase.util.Bytes.toBytes(\"testWritesWhileScanning\");\n    int testCount = 100;\n    int numRows = 1;\n    int numFamilies = 10;\n    int numQualifiers = 100;\n    int flushInterval = 7;\n    int compactInterval = 5 * flushInterval;\n    byte[][] families = new byte[numFamilies][];\n    for (int i = 0; i < numFamilies; i++) {\n        families[i] = org.apache.hadoop.hbase.util.Bytes.toBytes(\"family\" + i);\n    }\n    byte[][] qualifiers = new byte[numQualifiers][];\n    for (int i = 0; i < numQualifiers; i++) {\n        qualifiers[i] = org.apache.hadoop.hbase.util.Bytes.toBytes(\"qual\" + i);\n    }\n    java.lang.String method = \"testWritesWhileScanning\";\n    initHRegion(tableName, method, families);\n    org.apache.hadoop.hbase.regionserver.TestHRegion.PutThread putThread = new org.apache.hadoop.hbase.regionserver.TestHRegion.PutThread(numRows, families, qualifiers);\n    putThread.start();\n    org.apache.hadoop.hbase.regionserver.TestHRegion.FlushThread flushThread = new org.apache.hadoop.hbase.regionserver.TestHRegion.FlushThread();\n    flushThread.start();\n    org.apache.hadoop.hbase.client.Scan scan = new org.apache.hadoop.hbase.client.Scan(org.apache.hadoop.hbase.util.Bytes.toBytes(\"row0\"), org.apache.hadoop.hbase.util.Bytes.toBytes(\"row1\"));\n    int expectedCount = numFamilies * numQualifiers;\n    java.util.List<org.apache.hadoop.hbase.KeyValue> res = new java.util.ArrayList<org.apache.hadoop.hbase.KeyValue>();\n    long prevTimestamp = 0L;\n    for (int i = 0; i < testCount; i++) {\n        if ((i != 0) && ((i % compactInterval) == 0)) {\n            region.compactStores(true);\n        }\n        if ((i != 0) && ((i % flushInterval) == 0)) {\n            flushThread.flush();\n        }\n        boolean previousEmpty = res.isEmpty();\n        res.clear();\n        org.apache.hadoop.hbase.regionserver.InternalScanner scanner = region.getScanner(scan);\n        while (scanner.next(res));\n        if (((!res.isEmpty()) || (!previousEmpty)) || (i > compactInterval)) {\n            junit.framework.Assert.assertEquals(\"i=\" + i, expectedCount, res.size());\n            long timestamp = res.get(0).getTimestamp();\n            junit.framework.Assert.assertTrue(((\"Timestamps were broke: \" + timestamp) + \" prev: \") + prevTimestamp, timestamp >= prevTimestamp);\n            prevTimestamp = timestamp;\n        }\n    }\n    putThread.done();\n    region.flushcache();\n    putThread.join();\n    putThread.checkNoError();\n    flushThread.done();\n    flushThread.join();\n    flushThread.checkNoError();\n}",
        "ClassName": "TestHRegion",
        "Label": 1,
        "MethodName": "testWritesWhileScanning",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.regionserver.HRegion region = null;\n    byte[] c0 = org.apache.hadoop.hbase.HBaseTestCase.COLUMNS[0];\n    try {\n        org.apache.hadoop.hbase.HTableDescriptor htd = createTableDescriptor(getName());\n        region = createNewHRegion(htd, null, null);\n        org.apache.hadoop.hbase.client.Put p = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T10);\n        p.add(c0, c0, org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T10);\n        region.put(p);\n        p = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T30);\n        p.add(c0, c0, org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T30);\n        region.put(p);\n        p = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T40);\n        p.add(c0, c0, org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T40);\n        region.put(p);\n        org.apache.hadoop.hbase.client.Result r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T35, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T30, r.getRow()));\n        region.flushcache();\n        r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T35, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T30, r.getRow()));\n        p = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T20);\n        p.add(c0, c0, org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T20);\n        region.put(p);\n        r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T35, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T30, r.getRow()));\n        region.flushcache();\n        r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T35, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T30, r.getRow()));\n    } finally {\n        if (region != null) {\n            try {\n                region.close();\n            } catch (java.lang.Exception e) {\n                e.printStackTrace();\n            }\n            region.getLog().closeAndDelete();\n        }\n    }\n}",
        "ClassName": "TestGetClosestAtOrBefore",
        "Label": 1,
        "MethodName": "testGetClosestRowBefore2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.rest.client.Response response = client.get(\"/\", org.apache.hadoop.hbase.rest.Constants.MIMETYPE_TEXT);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n}",
        "ClassName": "TestTableResource",
        "Label": 1,
        "MethodName": "testTableListText",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.client.HTable meta = new org.apache.hadoop.hbase.client.HTable(org.apache.hadoop.hbase.HConstants.META_TABLE_NAME);\n    org.apache.hadoop.hbase.master.HMaster master = this.cluster.getMaster();\n    org.apache.hadoop.hbase.HServerAddress address = master.getMasterAddress();\n    org.apache.hadoop.hbase.HTableDescriptor tableDesc = new org.apache.hadoop.hbase.HTableDescriptor(org.apache.hadoop.hbase.util.Bytes.toBytes(\"_MY_TABLE_\"));\n    org.apache.hadoop.hbase.HTableDescriptor metaTableDesc = meta.getTableDescriptor();\n    byte[] startKey0 = org.apache.hadoop.hbase.util.Bytes.toBytes(\"f\");\n    byte[] endKey0 = org.apache.hadoop.hbase.util.Bytes.toBytes(\"h\");\n    org.apache.hadoop.hbase.HRegionInfo regionInfo0 = new org.apache.hadoop.hbase.HRegionInfo(tableDesc, startKey0, endKey0);\n    org.apache.hadoop.hbase.HRegionInfo metaRegionInfo0 = new org.apache.hadoop.hbase.HRegionInfo(metaTableDesc, org.apache.hadoop.hbase.util.Bytes.toBytes(\"\"), regionInfo0.getRegionName());\n    org.apache.hadoop.hbase.master.MetaRegion meta0 = new org.apache.hadoop.hbase.master.MetaRegion(address, metaRegionInfo0);\n    byte[] startKey1 = org.apache.hadoop.hbase.util.Bytes.toBytes(\"j\");\n    byte[] endKey1 = org.apache.hadoop.hbase.util.Bytes.toBytes(\"m\");\n    org.apache.hadoop.hbase.HRegionInfo regionInfo1 = new org.apache.hadoop.hbase.HRegionInfo(tableDesc, startKey1, endKey1);\n    org.apache.hadoop.hbase.HRegionInfo metaRegionInfo1 = new org.apache.hadoop.hbase.HRegionInfo(metaTableDesc, regionInfo0.getRegionName(), regionInfo1.getRegionName());\n    org.apache.hadoop.hbase.master.MetaRegion meta1 = new org.apache.hadoop.hbase.master.MetaRegion(address, metaRegionInfo1);\n    org.apache.hadoop.hbase.HRegionInfo metaRegionInfo2 = new org.apache.hadoop.hbase.HRegionInfo(metaTableDesc, regionInfo1.getRegionName(), org.apache.hadoop.hbase.util.Bytes.toBytes(\"\"));\n    org.apache.hadoop.hbase.master.MetaRegion meta2 = new org.apache.hadoop.hbase.master.MetaRegion(address, metaRegionInfo2);\n    byte[] startKeyX = org.apache.hadoop.hbase.util.Bytes.toBytes(\"h\");\n    byte[] endKeyX = org.apache.hadoop.hbase.util.Bytes.toBytes(\"j\");\n    org.apache.hadoop.hbase.HRegionInfo regionInfoX = new org.apache.hadoop.hbase.HRegionInfo(tableDesc, startKeyX, endKeyX);\n    master.getRegionManager().offlineMetaRegionWithStartKey(startKey0);\n    master.getRegionManager().putMetaRegionOnline(meta0);\n    master.getRegionManager().putMetaRegionOnline(meta1);\n    master.getRegionManager().putMetaRegionOnline(meta2);\n    org.apache.hadoop.hbase.HBaseTestCase.assertEquals(metaRegionInfo1.getStartKey(), master.getRegionManager().getFirstMetaRegionForRegion(regionInfoX).getStartKey());\n    org.apache.hadoop.hbase.HBaseTestCase.assertEquals(metaRegionInfo1.getRegionName(), master.getRegionManager().getFirstMetaRegionForRegion(regionInfoX).getRegionName());\n}",
        "ClassName": "TestRegionManager",
        "Label": 1,
        "MethodName": "testGetFirstMetaRegionForRegionAfterMetaSplit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    org.apache.hadoop.hbase.regionserver.HRegion region = null;\n    byte[] c0 = org.apache.hadoop.hbase.HBaseTestCase.COLUMNS[0];\n    byte[] c1 = org.apache.hadoop.hbase.HBaseTestCase.COLUMNS[1];\n    try {\n        org.apache.hadoop.hbase.HTableDescriptor htd = createTableDescriptor(getName());\n        region = createNewHRegion(htd, null, null);\n        org.apache.hadoop.hbase.client.Put p = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T00);\n        p.add(c0, c0, org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T00);\n        region.put(p);\n        p = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T10);\n        p.add(c0, c0, org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T10);\n        region.put(p);\n        p = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T20);\n        p.add(c0, c0, org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T20);\n        region.put(p);\n        org.apache.hadoop.hbase.client.Result r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T20, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T20, r.getRow()));\n        org.apache.hadoop.hbase.client.Delete d = new org.apache.hadoop.hbase.client.Delete(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T20);\n        d.deleteColumn(c0, c0);\n        region.delete(d, null, false);\n        r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T20, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T10, r.getRow()));\n        p = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T30);\n        p.add(c0, c0, org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T30);\n        region.put(p);\n        r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T30, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T30, r.getRow()));\n        d = new org.apache.hadoop.hbase.client.Delete(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T30);\n        d.deleteColumn(c0, c0);\n        region.delete(d, null, false);\n        r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T30, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T10, r.getRow()));\n        r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T31, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T10, r.getRow()));\n        region.flushcache();\n        r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T30, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T10, r.getRow()));\n        r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T31, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T10, r.getRow()));\n        p = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T20);\n        p.add(c1, c1, org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T20);\n        region.put(p);\n        r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T30, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T10, r.getRow()));\n        r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T31, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T10, r.getRow()));\n        region.flushcache();\n        r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T30, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T10, r.getRow()));\n        r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T31, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T10, r.getRow()));\n        d = new org.apache.hadoop.hbase.client.Delete(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T20);\n        d.deleteColumn(c1, c1);\n        region.delete(d, null, false);\n        r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T30, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T10, r.getRow()));\n        r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T31, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T10, r.getRow()));\n        region.flushcache();\n        r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T31, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T10, r.getRow()));\n        p = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T11);\n        p.add(c0, c0, org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T11);\n        region.put(p);\n        d = new org.apache.hadoop.hbase.client.Delete(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T10);\n        d.deleteColumn(c1, c1);\n        r = region.getClosestRowBefore(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T12, c0);\n        junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore.T11, r.getRow()));\n    } finally {\n        if (region != null) {\n            try {\n                region.close();\n            } catch (java.lang.Exception e) {\n                e.printStackTrace();\n            }\n            region.getLog().closeAndDelete();\n        }\n    }\n}",
        "ClassName": "TestGetClosestAtOrBefore",
        "Label": 1,
        "MethodName": "testGetClosestRowBefore3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    try {\n        r = createNewHRegion(org.apache.hadoop.hbase.regionserver.TestScanner.TESTTABLEDESC, null, null);\n        region = new org.apache.hadoop.hbase.HBaseTestCase.HRegionIncommon(r);\n        org.apache.hadoop.hbase.client.Put put = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.regionserver.TestScanner.ROW_KEY, java.lang.System.currentTimeMillis(), null);\n        java.io.ByteArrayOutputStream byteStream = new java.io.ByteArrayOutputStream();\n        java.io.DataOutputStream s = new java.io.DataOutputStream(byteStream);\n        org.apache.hadoop.hbase.regionserver.TestScanner.REGION_INFO.write(s);\n        put.add(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY, org.apache.hadoop.hbase.HConstants.REGIONINFO_QUALIFIER, byteStream.toByteArray());\n        region.put(put);\n        scan(false, null);\n        getRegionInfo();\n        r.close();\n        r = openClosedRegion(r);\n        region = new org.apache.hadoop.hbase.HBaseTestCase.HRegionIncommon(r);\n        scan(false, null);\n        getRegionInfo();\n        org.apache.hadoop.hbase.HServerAddress address = new org.apache.hadoop.hbase.HServerAddress(\"foo.bar.com:1234\");\n        put = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.regionserver.TestScanner.ROW_KEY, java.lang.System.currentTimeMillis(), null);\n        put.add(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY, org.apache.hadoop.hbase.HConstants.SERVER_QUALIFIER, org.apache.hadoop.hbase.util.Bytes.toBytes(address.toString()));\n        region.put(put);\n        scan(true, address.toString());\n        getRegionInfo();\n        region.flushcache();\n        scan(true, address.toString());\n        getRegionInfo();\n        r.close();\n        r = openClosedRegion(r);\n        region = new org.apache.hadoop.hbase.HBaseTestCase.HRegionIncommon(r);\n        scan(true, address.toString());\n        getRegionInfo();\n        address = new org.apache.hadoop.hbase.HServerAddress(\"bar.foo.com:4321\");\n        put = new org.apache.hadoop.hbase.client.Put(org.apache.hadoop.hbase.regionserver.TestScanner.ROW_KEY, java.lang.System.currentTimeMillis(), null);\n        put.add(org.apache.hadoop.hbase.HConstants.CATALOG_FAMILY, org.apache.hadoop.hbase.HConstants.SERVER_QUALIFIER, org.apache.hadoop.hbase.util.Bytes.toBytes(address.toString()));\n        region.put(put);\n        scan(true, address.toString());\n        getRegionInfo();\n        region.flushcache();\n        scan(true, address.toString());\n        getRegionInfo();\n        r.close();\n        r = openClosedRegion(r);\n        region = new org.apache.hadoop.hbase.HBaseTestCase.HRegionIncommon(r);\n        scan(true, address.toString());\n        getRegionInfo();\n        r.close();\n        r.getLog().closeAndDelete();\n    } finally {\n        org.apache.hadoop.hbase.HBaseTestCase.shutdownDfs(cluster);\n    }\n}",
        "ClassName": "TestScanner",
        "Label": 1,
        "MethodName": "testScanner",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    final java.lang.String path = ((((\"/\" + org.apache.hadoop.hbase.rest.TestRowResource.TABLE) + \"/\") + org.apache.hadoop.hbase.rest.TestRowResource.ROW_4) + \"/\") + org.apache.hadoop.hbase.rest.TestRowResource.COLUMN_1;\n    org.apache.hadoop.hbase.rest.client.Response response = client.put(path, org.apache.hadoop.hbase.rest.Constants.MIMETYPE_BINARY, org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestRowResource.VALUE_4));\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    java.lang.Thread.yield();\n    response = client.get(path, org.apache.hadoop.hbase.rest.Constants.MIMETYPE_JSON);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    response = deleteRow(org.apache.hadoop.hbase.rest.TestRowResource.TABLE, org.apache.hadoop.hbase.rest.TestRowResource.ROW_4);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n}",
        "ClassName": "TestRowResource",
        "Label": 1,
        "MethodName": "testSingleCellGetJSON",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    junit.framework.Assert.assertTrue(remoteAdmin.isTableAvailable(org.apache.hadoop.hbase.rest.client.TestRemoteAdmin.TABLE_2));\n    remoteAdmin.deleteTable(org.apache.hadoop.hbase.rest.client.TestRemoteAdmin.TABLE_2);\n    junit.framework.Assert.assertFalse(remoteAdmin.isTableAvailable(org.apache.hadoop.hbase.rest.client.TestRemoteAdmin.TABLE_2));\n}",
        "ClassName": "TestRemoteAdmin",
        "Label": 1,
        "MethodName": "testDeleteTable",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    final int COL_COUNT = 10;\n    final byte[] tableName = org.apache.hadoop.hbase.util.Bytes.toBytes(\"tablename\");\n    final byte[] row = org.apache.hadoop.hbase.util.Bytes.toBytes(\"row\");\n    this.conf.setBoolean(\"dfs.support.append\", true);\n    org.apache.hadoop.hbase.regionserver.wal.HLog.Reader reader = null;\n    org.apache.hadoop.hbase.regionserver.wal.HLog log = new org.apache.hadoop.hbase.regionserver.wal.HLog(this.fs, dir, this.oldLogDir, this.conf, null);\n    try {\n        long timestamp = java.lang.System.currentTimeMillis();\n        org.apache.hadoop.hbase.regionserver.wal.WALEdit cols = new org.apache.hadoop.hbase.regionserver.wal.WALEdit();\n        for (int i = 0; i < COL_COUNT; i++) {\n            cols.add(new org.apache.hadoop.hbase.KeyValue(row, org.apache.hadoop.hbase.util.Bytes.toBytes(\"column\"), org.apache.hadoop.hbase.util.Bytes.toBytes(java.lang.Integer.toString(i)), timestamp, new byte[]{ ((byte) (i + '0')) }));\n        }\n        org.apache.hadoop.hbase.HRegionInfo hri = new org.apache.hadoop.hbase.HRegionInfo(new org.apache.hadoop.hbase.HTableDescriptor(tableName), org.apache.hadoop.hbase.HConstants.EMPTY_START_ROW, org.apache.hadoop.hbase.HConstants.EMPTY_END_ROW);\n        log.append(hri, tableName, cols, java.lang.System.currentTimeMillis());\n        long logSeqId = log.startCacheFlush();\n        log.completeCacheFlush(hri.getRegionName(), tableName, logSeqId, false);\n        log.close();\n        org.apache.hadoop.fs.Path filename = log.computeFilename(log.getFilenum());\n        log = null;\n        reader = org.apache.hadoop.hbase.regionserver.wal.HLog.getReader(fs, filename, conf);\n        org.apache.hadoop.hbase.regionserver.wal.HLog.Entry entry = reader.next();\n        junit.framework.Assert.assertEquals(COL_COUNT, entry.getEdit().size());\n        int idx = 0;\n        for (org.apache.hadoop.hbase.KeyValue val : entry.getEdit().getKeyValues()) {\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(hri.getRegionName(), entry.getKey().getRegionName()));\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(tableName, entry.getKey().getTablename()));\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(row, val.getRow()));\n            junit.framework.Assert.assertEquals(((byte) (idx + '0')), val.getValue()[0]);\n            java.lang.System.out.println((entry.getKey() + \" \") + val);\n            idx++;\n        }\n        entry = reader.next();\n        junit.framework.Assert.assertEquals(1, entry.getEdit().size());\n        for (org.apache.hadoop.hbase.KeyValue val : entry.getEdit().getKeyValues()) {\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(hri.getRegionName(), entry.getKey().getRegionName()));\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(tableName, entry.getKey().getTablename()));\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.wal.HLog.METAROW, val.getRow()));\n            junit.framework.Assert.assertTrue(org.apache.hadoop.hbase.util.Bytes.equals(org.apache.hadoop.hbase.regionserver.wal.HLog.METAFAMILY, val.getFamily()));\n            junit.framework.Assert.assertEquals(0, org.apache.hadoop.hbase.util.Bytes.compareTo(org.apache.hadoop.hbase.regionserver.wal.HLog.COMPLETE_CACHE_FLUSH, val.getValue()));\n            java.lang.System.out.println((entry.getKey() + \" \") + val);\n        }\n    } finally {\n        if (log != null) {\n            log.closeAndDelete();\n        }\n        if (reader != null) {\n            reader.close();\n        }\n    }\n}",
        "ClassName": "TestHLog",
        "Label": 1,
        "MethodName": "testAppend",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    final int BATCH_SIZE = 5;\n    org.apache.hadoop.hbase.rest.model.ScannerModel model = new org.apache.hadoop.hbase.rest.model.ScannerModel();\n    model.setBatch(BATCH_SIZE);\n    model.addColumn(org.apache.hadoop.hbase.util.Bytes.toBytes(org.apache.hadoop.hbase.rest.TestScannerResource.COLUMN_1));\n    java.io.StringWriter writer = new java.io.StringWriter();\n    marshaller.marshal(model, writer);\n    byte[] body = org.apache.hadoop.hbase.util.Bytes.toBytes(writer.toString());\n    org.apache.hadoop.hbase.rest.client.Response response = client.put((\"/\" + org.apache.hadoop.hbase.rest.TestScannerResource.TABLE) + \"/scanner\", org.apache.hadoop.hbase.rest.Constants.MIMETYPE_XML, body);\n    junit.framework.Assert.assertEquals(response.getCode(), 201);\n    java.lang.String scannerURI = response.getLocation();\n    junit.framework.Assert.assertNotNull(scannerURI);\n    response = client.get(scannerURI, org.apache.hadoop.hbase.rest.Constants.MIMETYPE_XML);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n    org.apache.hadoop.hbase.rest.model.CellSetModel cellSet = ((org.apache.hadoop.hbase.rest.model.CellSetModel) (unmarshaller.unmarshal(new java.io.ByteArrayInputStream(response.getBody()))));\n    junit.framework.Assert.assertEquals(countCellSet(cellSet), BATCH_SIZE);\n    response = client.delete(scannerURI);\n    junit.framework.Assert.assertEquals(response.getCode(), 200);\n}",
        "ClassName": "TestScannerResource",
        "Label": 1,
        "MethodName": "testSimpleScannerXML",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/hbase"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> normal = target(\"/recommend/U4\").queryParam(\"rescorerParams\", \"foo\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(1, normal.size());\n    org.junit.Assert.assertEquals(\"I3\", normal.get(0).getID());\n    org.junit.Assert.assertEquals(2.0 * (-0.2599307053020734), normal.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "RecommendTest",
        "Label": 1,
        "MethodName": "testRescorer",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    testHowMany(\"/recommendToMany/U2/U5\", 10, 2);\n    testHowMany(\"/recommendToMany/U5\", 2, 2);\n    testHowMany(\"/recommendToMany/U2\", 1, 1);\n}",
        "ClassName": "RecommendToManyTest",
        "Label": 1,
        "MethodName": "testHowMany",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    java.nio.file.Path dataDir = tempDir.resolve(\"data\");\n    java.nio.file.Path modelDir = tempDir.resolve(\"model\");\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.batch.update-class\", com.cloudera.oryx.app.mllib.rdf.RDFUpdate.class.getName());\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.data-dir\", dataDir);\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.model-dir\", modelDir);\n    overlayConfig.put(\"oryx.batch.streaming.generation-interval-sec\", com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.GEN_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.batch.streaming.block-interval-sec\", com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.BLOCK_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.rdf.num-trees\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.NUM_TREES);\n    overlayConfig.put(\"oryx.rdf.hyperparams.max-depth\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.MAX_DEPTH);\n    overlayConfig.put(\"oryx.rdf.hyperparams.max-split-candidates\", (\"[2,\" + com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.MAX_SPLIT_CANDIDATES) + \"]\");\n    overlayConfig.put(\"oryx.rdf.hyperparams.impurity\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.IMPURITY);\n    overlayConfig.put(\"oryx.input-schema.num-features\", 5);\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[\\\"4\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.id-features\", \"[\\\"0\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.target-feature\", \"\\\"4\\\"\");\n    overlayConfig.put(\"oryx.ml.eval.candidates\", 3);\n    overlayConfig.put(\"oryx.ml.eval.parallelism\", 2);\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    startServerProduceConsumeTopics(config, new com.cloudera.oryx.app.mllib.rdf.RandomCategoricalRDFDataGenerator(3), com.cloudera.oryx.app.mllib.rdf.RDFCategoricalHyperParamTuningIT.DATA_TO_WRITE, com.cloudera.oryx.app.mllib.rdf.RDFCategoricalHyperParamTuningIT.WRITE_INTERVAL_MSEC);\n    java.util.List<java.nio.file.Path> modelInstanceDirs = com.cloudera.oryx.common.io.IOUtils.listFiles(modelDir, \"*\");\n    com.cloudera.oryx.app.mllib.rdf.RDFCategoricalHyperParamTuningIT.log.info(\"Model instance dirs: {}\", modelInstanceDirs);\n    org.junit.Assert.assertFalse(\"No models?\", modelInstanceDirs.isEmpty());\n    com.cloudera.oryx.lambda.AbstractBatchIT.checkIntervals(modelInstanceDirs.size(), com.cloudera.oryx.app.mllib.rdf.RDFCategoricalHyperParamTuningIT.DATA_TO_WRITE, com.cloudera.oryx.app.mllib.rdf.RDFCategoricalHyperParamTuningIT.WRITE_INTERVAL_MSEC, com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.GEN_INTERVAL_SEC);\n    java.nio.file.Path latestModelDir = modelInstanceDirs.get(modelInstanceDirs.size() - 1);\n    java.nio.file.Path modelFile = latestModelDir.resolve(com.cloudera.oryx.ml.MLUpdate.MODEL_FILE_NAME);\n    org.junit.Assert.assertTrue(\"No such model file: \" + modelFile, java.nio.file.Files.exists(modelFile));\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.read(modelFile);\n    com.cloudera.oryx.app.mllib.rdf.RDFCategoricalHyperParamTuningIT.log.info(\"{}\", com.cloudera.oryx.common.pmml.PMMLUtils.toString(pmml));\n    org.junit.Assert.assertEquals(3, pmml.getExtensions().size());\n    java.util.Map<java.lang.String, java.lang.Object> expected = new java.util.HashMap<>();\n    expected.put(\"maxSplitCandidates\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.MAX_SPLIT_CANDIDATES);\n    expected.put(\"maxDepth\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.MAX_DEPTH);\n    expected.put(\"impurity\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.IMPURITY);\n    com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.checkExtensions(pmml, expected);\n    com.cloudera.oryx.common.collection.Pair<com.cloudera.oryx.app.rdf.tree.DecisionForest, com.cloudera.oryx.app.schema.CategoricalValueEncodings> forestEncoding = com.cloudera.oryx.app.rdf.RDFPMMLUtils.read(pmml, new com.cloudera.oryx.app.schema.InputSchema(config));\n    com.cloudera.oryx.app.rdf.tree.DecisionForest forest = forestEncoding.getFirst();\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings encoding = forestEncoding.getSecond();\n    java.util.Map<java.lang.String, java.lang.Integer> targetEncoding = encoding.getValueEncodingMap(4);\n    for (int f1 = 0; f1 <= 1; f1++) {\n        for (int f2 = 0; f2 <= 1; f2++) {\n            for (int f3 = 0; f3 <= 1; f3++) {\n                com.cloudera.oryx.app.rdf.predict.CategoricalPrediction prediction = ((com.cloudera.oryx.app.rdf.predict.CategoricalPrediction) (forest.predict(new com.cloudera.oryx.app.rdf.example.Example(null, null, com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(f1), com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(f2), com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(f3)))));\n                boolean expectedPositive = ((f1 == 1) && (f2 == 1)) && (f3 == 1);\n                org.junit.Assert.assertEquals(targetEncoding.get(java.lang.Boolean.toString(expectedPositive)).intValue(), prediction.getMostProbableCategoryEncoding());\n            }\n        }\n    }\n}",
        "ClassName": "RDFCategoricalHyperParamTuningIT",
        "Label": 1,
        "MethodName": "testRDF",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> normal = target(\"/recommend/U4\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(3, normal.size());\n    org.junit.Assert.assertEquals(\"I2\", normal.get(0).getID());\n    org.junit.Assert.assertEquals(0.141347957620267, normal.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> withConsider = target(\"/recommend/U4\").queryParam(\"considerKnownItems\", \"true\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(9, withConsider.size());\n    org.junit.Assert.assertEquals(\"I7\", withConsider.get(0).getID());\n    org.junit.Assert.assertEquals(2.00474569593095, withConsider.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "RecommendTest",
        "Label": 1,
        "MethodName": "testConsiderKnownItems",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    org.dmg.pmml.PMML model = com.cloudera.oryx.app.pmml.AppPMMLUtilsTest.buildDummyModel();\n    org.junit.Assert.assertNull(com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionContent(model, \"foo\"));\n    com.cloudera.oryx.app.pmml.AppPMMLUtils.addExtensionContent(model, \"foo1\", java.util.Arrays.asList(\"bar\", \"baz\"));\n    com.cloudera.oryx.app.pmml.AppPMMLUtils.addExtensionContent(model, \"foo2\", java.util.Collections.emptyList());\n    com.cloudera.oryx.app.pmml.AppPMMLUtils.addExtensionContent(model, \"foo3\", java.util.Arrays.asList(\" c\\\" d \\\"e \", \" c\\\" d \\\"e \"));\n    org.dmg.pmml.PMML reserializedModel = com.cloudera.oryx.common.pmml.PMMLUtils.fromString(com.cloudera.oryx.common.pmml.PMMLUtils.toString(model));\n    org.junit.Assert.assertEquals(java.util.Arrays.asList(\"bar\", \"baz\"), com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionContent(reserializedModel, \"foo1\"));\n    org.junit.Assert.assertNull(com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionContent(reserializedModel, \"foo2\"));\n    org.junit.Assert.assertEquals(java.util.Arrays.asList(\" c\\\" d \\\"e \", \" c\\\" d \\\"e \"), com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionContent(reserializedModel, \"foo3\"));\n}",
        "ClassName": "AppPMMLUtilsTest",
        "Label": 1,
        "MethodName": "testExtensionContent",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDCount> top = target(\"/mostPopularItems\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_COUNT_TYPE);\n    org.junit.Assert.assertEquals(9, top.size());\n    for (int i = 0; i < top.size(); i++) {\n        int thisCount = top.get(i).getValue();\n        org.junit.Assert.assertTrue(thisCount >= 1);\n        if (i > 0) {\n            org.junit.Assert.assertTrue(top.get(i - 1).getValue() >= thisCount);\n        }\n    }\n    org.junit.Assert.assertEquals(6, top.get(0).getValue());\n    org.junit.Assert.assertEquals(6, top.get(1).getValue());\n}",
        "ClassName": "MostPopularItemsTest",
        "Label": 1,
        "MethodName": "testMostPopular",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/recommend/U0\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(6, recs, false);\n    org.junit.Assert.assertEquals(\"I1\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(0.465396924146558, recs.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "RecommendTest",
        "Label": 1,
        "MethodName": "testRecommend",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"similarity/I0/I4/I6\").queryParam(\"rescorerParams\", \"foo\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(4, recs, false);\n    org.junit.Assert.assertEquals(\"I1\", recs.get(1).getID());\n    org.junit.Assert.assertEquals(2.0 * 0.5571406877613947, recs.get(2).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.DOUBLE_EPSILON);\n}",
        "ClassName": "SimilarityTest",
        "Label": 1,
        "MethodName": "testRescorer",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    testHowMany(\"/recommendToAnonymous/I1\", 10, 8);\n    testHowMany(\"/recommendToAnonymous/I1\", 2, 2);\n    testHowMany(\"/recommendToAnonymous/I1\", 1, 1);\n}",
        "ClassName": "RecommendToAnonymousTest",
        "Label": 1,
        "MethodName": "testHowMany",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    testOffset(\"/mostSurprising/U4\", 10, 0, 6);\n    testOffset(\"/mostSurprising/U4\", 9, 3, 3);\n    testOffset(\"/mostSurprising/U4\", 5, 6, 0);\n}",
        "ClassName": "MostSurprisingTest",
        "Label": 1,
        "MethodName": "testOffset",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    testOffset(\"/because/U6/I6\", 2, 1, 2);\n    testOffset(\"/because/U6/I6\", 3, 1, 3);\n    testOffset(\"/because/U6/I6\", 1, 1, 1);\n    testOffset(\"/because/U6/I6\", 3, 3, 3);\n}",
        "ClassName": "BecauseTest",
        "Label": 1,
        "MethodName": "testOffset",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDCount> top = target(\"/mostPopularItems\").queryParam(\"rescorerParams\", \"foo\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_COUNT_TYPE);\n    org.junit.Assert.assertEquals(4, top.size());\n    org.junit.Assert.assertEquals(6, top.get(0).getValue());\n    org.junit.Assert.assertEquals(5, top.get(1).getValue());\n}",
        "ClassName": "MostPopularItemsTest",
        "Label": 1,
        "MethodName": "testRescorer",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/recommendToMany/U0/U2\").queryParam(\"rescorerParams\", \"foo\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(2, recs, false);\n    org.junit.Assert.assertEquals(\"I1\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(2.0 * 0.3434463501376608, recs.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "RecommendToManyTest",
        "Label": 1,
        "MethodName": "testRescorer",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.speed.model-manager-class\", com.cloudera.oryx.app.speed.rdf.RDFSpeedModelManager.class.getName());\n    overlayConfig.put(\"oryx.speed.streaming.generation-interval-sec\", 5);\n    overlayConfig.put(\"oryx.speed.streaming.block-interval-sec\", 1);\n    overlayConfig.put(\"oryx.input-schema.feature-names\", \"[\\\"color\\\",\\\"fruit\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.numeric-features\", \"[]\");\n    overlayConfig.put(\"oryx.input-schema.target-feature\", \"fruit\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> updates = startServerProduceConsumeTopics(config, new com.cloudera.oryx.app.speed.rdf.MockRDFClassificationInputGenerator(), new com.cloudera.oryx.app.speed.rdf.MockRDFClassificationModelGenerator(), com.cloudera.oryx.app.speed.rdf.RDFSpeedIT.NUM_INPUT, 1);\n    if (com.cloudera.oryx.app.speed.rdf.RDFSpeedIT.log.isDebugEnabled()) {\n        for (com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> update : updates) {\n            com.cloudera.oryx.app.speed.rdf.RDFSpeedIT.log.debug(\"{}\", update);\n        }\n    }\n    int numUpdates = updates.size();\n    org.junit.Assert.assertTrue((numUpdates >= 3) && ((numUpdates % 2) != 0));\n    org.junit.Assert.assertEquals(\"MODEL\", updates.get(0).getFirst());\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.fromString(updates.get(0).getSecond());\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings encodings = com.cloudera.oryx.app.pmml.AppPMMLUtils.buildCategoricalValueEncodings(pmml.getDataDictionary());\n    com.cloudera.oryx.app.speed.rdf.RDFSpeedIT.log.info(\"{}\", encodings);\n    java.util.Map<java.lang.String, java.lang.Integer> fruitEncoding = encodings.getValueEncodingMap(0);\n    java.lang.String red = java.lang.Integer.toString(fruitEncoding.get(\"red\"));\n    java.lang.String yellow = java.lang.Integer.toString(fruitEncoding.get(\"yellow\"));\n    for (int i = 1; i < numUpdates; i++) {\n        com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> update = updates.get(i);\n        org.junit.Assert.assertEquals(\"UP\", update.getFirst());\n        java.util.List<?> fields = com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.readValue(update.getSecond(), java.util.List.class);\n        int treeID = ((java.lang.Integer) (fields.get(0)));\n        java.lang.String nodeID = fields.get(1).toString();\n        @java.lang.SuppressWarnings(\"unchecked\")\n        java.util.Map<java.lang.String, java.lang.Integer> countMap = ((java.util.Map<java.lang.String, java.lang.Integer>) (fields.get(2)));\n        org.junit.Assert.assertEquals(0, treeID);\n        org.junit.Assert.assertTrue(\"r-\".equals(nodeID) || \"r+\".equals(nodeID));\n        int yellowCount = (countMap.containsKey(yellow)) ? countMap.get(yellow) : 0;\n        int redCount = (countMap.containsKey(red)) ? countMap.get(red) : 0;\n        int count = yellowCount + redCount;\n        org.junit.Assert.assertTrue(count > 0);\n        org.apache.commons.math3.distribution.BinomialDistribution dist = new org.apache.commons.math3.distribution.BinomialDistribution(count, 0.9);\n        if (\"r+\".equals(nodeID)) {\n            com.cloudera.oryx.app.speed.rdf.RDFSpeedIT.checkProbability(yellowCount, count, dist);\n        } else {\n            com.cloudera.oryx.app.speed.rdf.RDFSpeedIT.checkProbability(redCount, count, dist);\n        }\n    }\n}",
        "ClassName": "RDFSpeedIT",
        "Label": 1,
        "MethodName": "testRDFSpeedClassification",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    int zkPort = com.cloudera.oryx.common.io.IOUtils.chooseFreePort();\n    int kafkaBrokerPort = com.cloudera.oryx.common.io.IOUtils.chooseFreePort();\n    try (com.cloudera.oryx.zk.LocalZKServer localZKServer = new com.cloudera.oryx.zk.LocalZKServer(zkPort);com.cloudera.oryx.kafka.util.LocalKafkaBroker localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(kafkaBrokerPort, zkPort)) {\n        localZKServer.start();\n        localKafkaBroker.start();\n        com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", zkPort, com.cloudera.oryx.kafka.util.ProduceConsumeIT.TOPIC);\n        com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", zkPort, com.cloudera.oryx.kafka.util.ProduceConsumeIT.TOPIC);\n        com.cloudera.oryx.kafka.util.ProduceData produce = new com.cloudera.oryx.kafka.util.ProduceData(new com.cloudera.oryx.kafka.util.DefaultCSVDatumGenerator(), zkPort, localKafkaBroker.getPort(), com.cloudera.oryx.kafka.util.ProduceConsumeIT.TOPIC, com.cloudera.oryx.kafka.util.ProduceConsumeIT.NUM_DATA, 50);\n        final java.util.Collection<java.lang.Integer> keys = new java.util.HashSet<>();\n        try (com.cloudera.oryx.common.collection.CloseableIterator<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = new com.cloudera.oryx.kafka.util.ConsumeData(com.cloudera.oryx.kafka.util.ProduceConsumeIT.TOPIC, zkPort).iterator()) {\n            com.cloudera.oryx.kafka.util.ProduceConsumeIT.log.info(\"Starting consumer thread\");\n            com.cloudera.oryx.common.lang.WaitToScheduleRunnable readData = new com.cloudera.oryx.common.lang.WaitToScheduleRunnable(new com.cloudera.oryx.common.lang.LoggingRunnable() {\n                @java.lang.Override\n                public void doRun() {\n                    while (data.hasNext()) {\n                        keys.add(java.lang.Integer.valueOf(data.next().getFirst()));\n                    } \n                }\n            });\n            new java.lang.Thread(readData).start();\n            readData.awaitScheduling();\n            com.cloudera.oryx.kafka.util.ProduceConsumeIT.log.info(\"Producing data\");\n            produce.start();\n            java.lang.Thread.sleep(1000);\n        } finally {\n            com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", zkPort, com.cloudera.oryx.kafka.util.ProduceConsumeIT.TOPIC);\n        }\n        org.junit.Assert.assertEquals(com.cloudera.oryx.kafka.util.ProduceConsumeIT.NUM_DATA, keys.size());\n        for (int i = 0; i < com.cloudera.oryx.kafka.util.ProduceConsumeIT.NUM_DATA; i++) {\n            org.junit.Assert.assertTrue(keys.contains(i));\n        }\n    }\n}",
        "ClassName": "ProduceConsumeIT",
        "Label": 1,
        "MethodName": "testProduceConsume",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/mostSurprising/U0\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(3, recs, true);\n    org.junit.Assert.assertEquals(\"I0\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(0.38761317555864894, recs.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.DOUBLE_EPSILON);\n}",
        "ClassName": "MostSurprisingTest",
        "Label": 1,
        "MethodName": "testMostSurprising",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/because/U0/I0\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(3, recs, false);\n    org.junit.Assert.assertEquals(\"I0\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(1.0, recs.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.DOUBLE_EPSILON);\n}",
        "ClassName": "BecauseTest",
        "Label": 1,
        "MethodName": "testBecause",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"similarity/I0/I4/I6\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(6, recs, false);\n    org.junit.Assert.assertEquals(\"I1\", recs.get(1).getID());\n    org.junit.Assert.assertEquals(0.5571406877613947, recs.get(2).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.DOUBLE_EPSILON);\n}",
        "ClassName": "SimilarityTest",
        "Label": 1,
        "MethodName": "testSimilarItems",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> normal = target(\"/recommendToMany/U4\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(3, normal.size());\n    org.junit.Assert.assertEquals(\"I2\", normal.get(0).getID());\n    org.junit.Assert.assertEquals(0.141347957620267, normal.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> withConsider = target(\"/recommendToMany/U4\").queryParam(\"considerKnownItems\", \"true\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(9, withConsider.size());\n    org.junit.Assert.assertEquals(\"I7\", withConsider.get(0).getID());\n    org.junit.Assert.assertEquals(2.00474569593095, withConsider.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "RecommendToManyTest",
        "Label": 1,
        "MethodName": "testConsiderKnownItems",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.speed.model-manager-class\", com.cloudera.oryx.app.speed.als.ALSSpeedModelManager.class.getName());\n    overlayConfig.put(\"oryx.speed.streaming.generation-interval-sec\", 5);\n    overlayConfig.put(\"oryx.speed.streaming.block-interval-sec\", 1);\n    overlayConfig.put(\"oryx.als.hyperparams.features\", 2);\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> updates = startServerProduceConsumeTopics(config, new com.cloudera.oryx.app.speed.als.MockALSInputGenerator(), new com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator(), 9, 10);\n    if (com.cloudera.oryx.app.speed.als.ALSSpeedIT.log.isDebugEnabled()) {\n        for (com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> update : updates) {\n            com.cloudera.oryx.app.speed.als.ALSSpeedIT.log.debug(\"{}\", update);\n        }\n    }\n    org.junit.Assert.assertEquals(19, updates.size());\n    org.junit.Assert.assertEquals(\"MODEL\", updates.get(0).getFirst());\n    org.junit.Assert.assertEquals(2, java.lang.Integer.parseInt(com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionValue(com.cloudera.oryx.common.pmml.PMMLUtils.fromString(updates.get(0).getSecond()), \"features\")));\n    for (int i = 1; i <= 9; i++) {\n        org.junit.Assert.assertEquals(\"UP\", updates.get(i).getFirst());\n        java.util.List<?> update = com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.readValue(updates.get(i).getSecond(), java.util.List.class);\n        boolean isX = \"X\".equals(update.get(0).toString());\n        java.lang.String id = update.get(1).toString();\n        float[] expected = (isX ? com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator.X : com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator.Y).get(id);\n        com.cloudera.oryx.common.OryxTest.assertArrayEquals(expected, com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.convertValue(update.get(2), float[].class));\n        @java.lang.SuppressWarnings(\"unchecked\")\n        java.util.Collection<java.lang.String> knownUsersItems = ((java.util.Collection<java.lang.String>) (update.get(3)));\n        java.util.Collection<java.lang.String> expectedKnownUsersItems = (isX ? com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator.A : com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator.At).get(id);\n        org.junit.Assert.assertTrue(knownUsersItems.containsAll(expectedKnownUsersItems));\n        org.junit.Assert.assertTrue(expectedKnownUsersItems.containsAll(knownUsersItems));\n    }\n    java.util.Map<java.lang.String, float[]> X = com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator.buildMatrix(100, new double[][]{ new double[]{ -0.2085992442067743, 0.2523213360207475 }, new double[]{ -0.2247280310573082, -0.1929485017146139 }, new double[]{ -0.1559213545536042, 0.3977631145260019 }, new double[]{ -0.3006521945941331, -0.1223970296839849 }, new double[]{ -0.0920529503873587, -0.3747183657047325 } });\n    java.util.Map<java.lang.String, float[]> Y = com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator.buildMatrix(105, new double[][]{ new double[]{ -0.196632880060491, 0.0957410625834965 }, new double[]{ -0.2384041642283309, -0.5085072425781164 }, new double[]{ -0.343609754906773, 0.2466687004987837 }, new double[]{ -0.0602045721873638, 0.2931111530627041 } });\n    for (int i = 10; i <= 18; i++) {\n        org.junit.Assert.assertEquals(\"UP\", updates.get(i).getFirst());\n        java.util.List<?> update = com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.readValue(updates.get(i).getSecond(), java.util.List.class);\n        boolean isX = \"X\".equals(update.get(0).toString());\n        java.lang.String id = update.get(1).toString();\n        float[] expected = (isX ? X : Y).get(id);\n        org.junit.Assert.assertArrayEquals(expected, com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.convertValue(update.get(2), float[].class), 1.0E-5F);\n        java.lang.String otherID = java.lang.Integer.toString(java.lang.Integer.parseInt(id) - 99);\n        @java.lang.SuppressWarnings(\"unchecked\")\n        java.util.Collection<java.lang.String> knownUsersItems = ((java.util.Collection<java.lang.String>) (update.get(3)));\n        org.junit.Assert.assertEquals(1, knownUsersItems.size());\n        org.junit.Assert.assertEquals(otherID, knownUsersItems.iterator().next());\n    }\n}",
        "ClassName": "ALSSpeedIT",
        "Label": 1,
        "MethodName": "testALSSpeed",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(\"ab \\\"a b\\\" \\\"with \\\\\\\"quotes\\\\\\\" \\\"\", com.cloudera.oryx.common.text.TextUtils.joinPMMLDelimited(java.util.Arrays.asList(\"ab\", \"a b\", \"with \\\"quotes\\\" \")));\n    org.junit.Assert.assertEquals(\"1 22 3\", com.cloudera.oryx.common.text.TextUtils.joinPMMLDelimited(java.util.Arrays.asList(\"1\", \"22\", \"3\")));\n    org.junit.Assert.assertEquals(\"\\\" c\\\\\\\" d \\\\\\\"e \\\" \\\" c\\\\\\\" d \\\\\\\"e \\\"\", com.cloudera.oryx.common.text.TextUtils.joinPMMLDelimited(java.util.Arrays.asList(\" c\\\" d \\\"e \", \" c\\\" d \\\"e \")));\n}",
        "ClassName": "TextUtilsTest",
        "Label": 1,
        "MethodName": "testJoinPMMLDelimited",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDCount> top = target(\"/mostActiveUsers\").queryParam(\"rescorerParams\", \"foo\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_COUNT_TYPE);\n    org.junit.Assert.assertEquals(3, top.size());\n    org.junit.Assert.assertEquals(7, top.get(0).getValue());\n    org.junit.Assert.assertEquals(5, top.get(1).getValue());\n}",
        "ClassName": "MostActiveUsersTest",
        "Label": 1,
        "MethodName": "testRescorer",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    testOffset(\"/recommend/U6\", 2, 1, 2);\n    testOffset(\"/recommend/U6\", 3, 1, 2);\n    testOffset(\"/recommend/U6\", 1, 1, 1);\n    testOffset(\"/recommend/U6\", 3, 3, 0);\n}",
        "ClassName": "RecommendTest",
        "Label": 1,
        "MethodName": "testOffset",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/recommendToAnonymous/I4=1.0/I5=2.0\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(7, recs, false);\n    org.junit.Assert.assertEquals(\"I7\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(0.41001138390689273, recs.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "RecommendToAnonymousTest",
        "Label": 1,
        "MethodName": "testRecommendToAnonymous",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    testHowMany(\"/similarity/I0/I2/I4\", 10, 6);\n    testHowMany(\"/similarity/I0/I2/I4\", 9, 6);\n    testHowMany(\"/similarity/I0/I2/I4\", 5, 5);\n}",
        "ClassName": "SimilarityTest",
        "Label": 1,
        "MethodName": "testHowMany",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    testOffset(\"/recommendToMany/U0/U6\", 5, 0, 1);\n    testOffset(\"/recommendToMany/U0/U6\", 3, 0, 1);\n    testOffset(\"/recommendToMany/U6\", 1, 1, 1);\n    testOffset(\"/recommendToMany/U6\", 3, 3, 0);\n}",
        "ClassName": "RecommendToManyTest",
        "Label": 1,
        "MethodName": "testOffset",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    testHowMany(\"/mostSurprising/U4\", 10, 6);\n    testHowMany(\"/mostSurprising/U4\", 9, 6);\n    testHowMany(\"/mostSurprising/U4\", 5, 5);\n}",
        "ClassName": "MostSurprisingTest",
        "Label": 1,
        "MethodName": "testHowMany",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.speed.model-manager-class\", com.cloudera.oryx.lambda.speed.MockSpeedModelManager.class.getName());\n    overlayConfig.put(\"oryx.speed.streaming.generation-interval-sec\", 3);\n    overlayConfig.put(\"oryx.speed.streaming.block-interval-sec\", 1);\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> updates = startServerProduceConsumeTopics(config, 1000, 10);\n    int inputToUpdate = 0;\n    int receivedUpdates = 0;\n    int models = 0;\n    for (com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> update : updates) {\n        java.lang.String key = update.getFirst();\n        java.lang.String message = update.getSecond();\n        if (message.contains(\",\")) {\n            org.junit.Assert.assertEquals(\"UP\", update.getFirst());\n            inputToUpdate++;\n        } else {\n            boolean shouldBeModel = (java.lang.Integer.parseInt(message) % 10) == 0;\n            org.junit.Assert.assertEquals(shouldBeModel ? \"MODEL\" : \"UP\", key);\n            if (shouldBeModel) {\n                models++;\n            } else {\n                receivedUpdates++;\n            }\n        }\n    }\n    com.cloudera.oryx.lambda.speed.SpeedLayerIT.log.info(\"Received {} models, {} inputs converted to updates, and {} other updates\", models, inputToUpdate, receivedUpdates);\n    org.junit.Assert.assertEquals(1, models);\n    org.junit.Assert.assertEquals(9, receivedUpdates);\n    org.junit.Assert.assertEquals(1000, inputToUpdate);\n}",
        "ClassName": "SpeedLayerIT",
        "Label": 1,
        "MethodName": "testSpeedLayer",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDCount> top = target(\"/mostActiveUsers\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_COUNT_TYPE);\n    org.junit.Assert.assertEquals(7, top.size());\n    for (int i = 0; i < top.size(); i++) {\n        int thisCount = top.get(i).getValue();\n        org.junit.Assert.assertTrue(thisCount >= 1);\n        if (i > 0) {\n            org.junit.Assert.assertTrue(top.get(i - 1).getValue() >= thisCount);\n        }\n    }\n    org.junit.Assert.assertEquals(7, top.get(0).getValue());\n    org.junit.Assert.assertEquals(6, top.get(1).getValue());\n}",
        "ClassName": "MostActiveUsersTest",
        "Label": 1,
        "MethodName": "testMostPopular",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.Set<java.lang.Integer> ports = new java.util.HashSet<>();\n    for (int i = 0; i < 10; i++) {\n        ports.add(com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    }\n    org.junit.Assert.assertEquals(10, ports.size());\n}",
        "ClassName": "IOUtilsTest",
        "Label": 1,
        "MethodName": "testDistinctFreePorts",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/recommendToAnonymous/I4=1.0/I5=2.0\").queryParam(\"rescorerParams\", \"foo\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(3, recs, false);\n    org.junit.Assert.assertEquals(\"I7\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(2.0 * 0.41001138390689273, recs.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "RecommendToAnonymousTest",
        "Label": 1,
        "MethodName": "testRescorer",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/classificationDistribution/B,0,\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.rdf.AbstractRDFServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(\"X\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(((10.0 / 90.0) + (2 * (1000.0 / 111000.0))) / 3, recs.get(0).getValue(), com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n    org.junit.Assert.assertEquals(\"Y\", recs.get(1).getID());\n    org.junit.Assert.assertEquals(((30.0 / 90.0) + (2 * (10000.0 / 111000.0))) / 3, recs.get(1).getValue(), com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n    org.junit.Assert.assertEquals(\"Z\", recs.get(2).getID());\n    org.junit.Assert.assertEquals(((50.0 / 90.0) + (2 * (100000.0 / 111000.0))) / 3, recs.get(2).getValue(), com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
        "ClassName": "ClassificationDistributionTest",
        "Label": 1,
        "MethodName": "testDistribution",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    testHowMany(\"/because/U5/I4\", 10, 7);\n    testHowMany(\"/because/U5/I4\", 9, 7);\n    testHowMany(\"/because/U5/I4\", 5, 5);\n}",
        "ClassName": "BecauseTest",
        "Label": 1,
        "MethodName": "testHowMany",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    testOffset(\"/similarity/I0/I2/I6\", 2, 1, 2);\n    testOffset(\"/similarity/I0/I2/I6\", 3, 1, 3);\n    testOffset(\"/similarity/I0/I2/I6\", 1, 1, 1);\n    testOffset(\"/similarity/I0/I2/I6\", 3, 3, 3);\n}",
        "ClassName": "SimilarityTest",
        "Label": 1,
        "MethodName": "testOffset",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    testHowMany(\"/recommend/U5\", 10, 2);\n    testHowMany(\"/recommend/U5\", 2, 2);\n    testHowMany(\"/recommend/U5\", 1, 1);\n}",
        "ClassName": "RecommendTest",
        "Label": 1,
        "MethodName": "testHowMany",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/classificationDistribution/A,-5,\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.rdf.AbstractRDFServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(\"X\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(((1.0 / 6.0) + (2 * (100.0 / 1400.0))) / 3, recs.get(0).getValue(), com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n    org.junit.Assert.assertEquals(\"Y\", recs.get(1).getID());\n    org.junit.Assert.assertEquals(((2.0 / 6.0) + (2 * (400.0 / 1400.0))) / 3, recs.get(1).getValue(), com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n    org.junit.Assert.assertEquals(\"Z\", recs.get(2).getID());\n    org.junit.Assert.assertEquals(((3.0 / 6.0) + (2 * (900.0 / 1400.0))) / 3, recs.get(2).getValue(), com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
        "ClassName": "ClassificationDistributionTest",
        "Label": 1,
        "MethodName": "testDistribution2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/recommendToMany/U0/U2\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(2, recs, false);\n    org.junit.Assert.assertEquals(\"I1\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(0.3434463501376608, recs.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "RecommendToManyTest",
        "Label": 1,
        "MethodName": "testRecommendToMany",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    testOffset(\"/recommendToAnonymous/I1\", 2, 1, 2);\n    testOffset(\"/recommendToAnonymous/I1\", 3, 7, 1);\n    testOffset(\"/recommendToAnonymous/I1\", 1, 1, 1);\n    testOffset(\"/recommendToAnonymous/I1\", 3, 8, 0);\n}",
        "ClassName": "RecommendToAnonymousTest",
        "Label": 1,
        "MethodName": "testOffset",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/oryx"
    },
    {
        "Body": "{\n    com.fasterxml.jackson.databind.ObjectMapper objectMapper = io.dropwizard.jackson.Jackson.newObjectMapper();\n    javax.validation.Validator validator = javax.validation.Validation.buildDefaultValidatorFactory().getValidator();\n    com.codahale.metrics.MetricRegistry metricRegistry = new com.codahale.metrics.MetricRegistry();\n    io.dropwizard.setup.Environment environment = new io.dropwizard.setup.Environment(\"test\", objectMapper, validator, metricRegistry, java.lang.ClassLoader.getSystemClassLoader());\n    java.util.concurrent.CountDownLatch requestReceived = new java.util.concurrent.CountDownLatch(1);\n    java.util.concurrent.CountDownLatch shutdownInvoked = new java.util.concurrent.CountDownLatch(1);\n    environment.jersey().register(new io.dropwizard.server.DefaultServerFactoryTest.TestResource(requestReceived, shutdownInvoked));\n    final java.util.concurrent.ScheduledExecutorService executor = java.util.concurrent.Executors.newScheduledThreadPool(3);\n    final org.eclipse.jetty.server.Server server = http.build(environment);\n    ((org.eclipse.jetty.server.AbstractNetworkConnector) (server.getConnectors()[0])).setPort(0);\n    java.util.concurrent.ScheduledFuture<java.lang.Void> cleanup = executor.schedule(new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            if (!server.isStopped()) {\n                server.stop();\n            }\n            executor.shutdownNow();\n            return null;\n        }\n    }, 5, java.util.concurrent.TimeUnit.SECONDS);\n    server.start();\n    final int port = ((org.eclipse.jetty.server.AbstractNetworkConnector) (server.getConnectors()[0])).getLocalPort();\n    java.util.concurrent.Future<java.lang.String> futureResult = executor.submit(new java.util.concurrent.Callable<java.lang.String>() {\n        @java.lang.Override\n        public java.lang.String call() throws java.lang.Exception {\n            java.net.URL url = new java.net.URL((\"http://localhost:\" + port) + \"/test\");\n            java.net.URLConnection connection = url.openConnection();\n            connection.connect();\n            return com.google.common.io.CharStreams.toString(new java.io.InputStreamReader(connection.getInputStream()));\n        }\n    });\n    requestReceived.await();\n    java.util.concurrent.Future<java.lang.Void> serverStopped = executor.submit(new java.util.concurrent.Callable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void call() throws java.lang.Exception {\n            server.stop();\n            return null;\n        }\n    });\n    org.eclipse.jetty.server.Connector[] connectors = server.getConnectors();\n    assertThat(connectors).isNotEmpty();\n    assertThat(connectors[0]).isInstanceOf(org.eclipse.jetty.server.NetworkConnector.class);\n    org.eclipse.jetty.server.NetworkConnector connector = ((org.eclipse.jetty.server.NetworkConnector) (connectors[0]));\n    while (true) {\n        if (!connector.isOpen()) {\n            shutdownInvoked.countDown();\n            break;\n        }\n        java.lang.Thread.sleep(5);\n    } \n    java.lang.String result = futureResult.get();\n    assertThat(result).isEqualTo(\"test\");\n    serverStopped.get();\n    cleanup.cancel(false);\n    executor.shutdownNow();\n}",
        "ClassName": "DefaultServerFactoryTest",
        "Label": 1,
        "MethodName": "testGracefulShutdown",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/dropwizard"
    },
    {
        "Body": "{\n    peer.sendFrame().ping(false, 2, 0);\n    peer.acceptFrame();\n    peer.sendFrame().ping(true, 3, 0);\n    peer.sendFrame().ping(false, 4, 0);\n    peer.acceptFrame();\n    peer.play();\n    connection(peer, com.squareup.okhttp.internal.spdy.Spdy3ConnectionTest.SPDY3);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame ping2 = peer.takeFrame();\n    org.junit.Assert.assertEquals(2, ping2.payload1);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame ping4 = peer.takeFrame();\n    org.junit.Assert.assertEquals(4, ping4.payload1);\n}",
        "ClassName": "Spdy3ConnectionTest",
        "Label": 1,
        "MethodName": "unexpectedPingIsNotReturned",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.setVariantAndClient(variant, false);\n    peer.acceptFrame();\n    peer.acceptFrame();\n    peer.sendFrame().goAway(1, com.squareup.okhttp.internal.spdy.ErrorCode.PROTOCOL_ERROR, com.squareup.okhttp.internal.Util.EMPTY_BYTE_ARRAY);\n    peer.acceptFrame();\n    peer.sendFrame().ping(true, 1, 0);\n    peer.acceptFrame();\n    peer.play();\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connection(peer, variant);\n    com.squareup.okhttp.internal.spdy.SpdyStream stream1 = connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"), true, true);\n    com.squareup.okhttp.internal.spdy.SpdyStream stream2 = connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"b\", \"banana\"), true, true);\n    connection.ping().roundTripTime();\n    okio.BufferedSink sink1 = okio.Okio.buffer(stream1.getSink());\n    okio.BufferedSink sink2 = okio.Okio.buffer(stream2.getSink());\n    sink1.writeUtf8(\"abc\");\n    try {\n        sink2.writeUtf8(\"abc\");\n        sink2.flush();\n        org.junit.Assert.fail();\n    } catch (java.io.IOException expected) {\n        org.junit.Assert.assertEquals(\"stream was reset: REFUSED_STREAM\", expected.getMessage());\n    }\n    sink1.writeUtf8(\"def\");\n    sink1.close();\n    try {\n        connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"c\", \"cola\"), true, true);\n        org.junit.Assert.fail();\n    } catch (java.io.IOException expected) {\n        org.junit.Assert.assertEquals(\"shutdown\", expected.getMessage());\n    }\n    org.junit.Assert.assertEquals(1, connection.openStreamCount());\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame synStream1 = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, synStream1.type);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame synStream2 = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, synStream2.type);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame ping = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_PING, ping.type);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame data1 = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_DATA, data1.type);\n    org.junit.Assert.assertEquals(1, data1.streamId);\n    org.junit.Assert.assertTrue(java.util.Arrays.equals(\"abcdef\".getBytes(\"UTF-8\"), data1.data));\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "receiveGoAway",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().addHeader(\"Last-Modified: \" + formatDate(-105, java.util.concurrent.TimeUnit.SECONDS)).addHeader(\"Date: \" + formatDate(-5, java.util.concurrent.TimeUnit.SECONDS)).setBody(\"A\"));\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"B\"));\n    java.net.URL url = server.getUrl(\"/?foo=bar\");\n    org.junit.Assert.assertEquals(\"A\", get(url).body().string());\n    org.junit.Assert.assertEquals(\"B\", get(url).body().string());\n}",
        "ClassName": "CacheTest",
        "Label": 1,
        "MethodName": "noDefaultExpirationForUrlsWithQueryString",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"A\").addHeader(\"Cache-Control: max-age=0\").addHeader(\"Date: \" + formatDate(0, java.util.concurrent.TimeUnit.MINUTES)));\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setResponseCode(304));\n    server.play();\n    org.junit.Assert.assertEquals(\"A\", readAscii(openConnection(server.getUrl(\"/\"))));\n    java.net.HttpURLConnection connection = openConnection(server.getUrl(\"/\"));\n    org.junit.Assert.assertEquals(\"A\", readAscii(connection));\n    java.lang.String source = connection.getHeaderField(com.squareup.okhttp.internal.http.OkHeaders.RESPONSE_SOURCE);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.ResponseSource.CONDITIONAL_CACHE + \" 304\", source);\n}",
        "ClassName": "ResponseCacheTest",
        "Label": 1,
        "MethodName": "responseSourceHeaderConditionalCacheNotFetched",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"abc\\r\\nYOU SHOULD NOT SEE THIS\").clearHeaders().addHeader(\"Content-Length: 3\"));\n    server.play();\n    assertContent(\"abc\", client.open(server.getUrl(\"/\")));\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "contentDisagreesWithContentLengthHeader",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    testFlushAfterStreamTransmitted(com.squareup.okhttp.internal.http.URLConnectionTest.TransferKind.FIXED_LENGTH);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "flushAfterStreamTransmittedWithFixedLength",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(gzip(\"ABCABCABC\")).addHeader(\"Content-Encoding: gzip\"));\n    server.play();\n    java.net.URLConnection connection = client.open(server.getUrl(\"/\"));\n    org.junit.Assert.assertEquals(\"ABCABCABC\", readAscii(connection.getInputStream(), java.lang.Integer.MAX_VALUE));\n    org.junit.Assert.assertNull(connection.getContentEncoding());\n    org.junit.Assert.assertEquals(-1, connection.getContentLength());\n    com.squareup.okhttp.mockwebserver.RecordedRequest request = server.takeRequest();\n    assertContains(request.getHeaders(), \"Accept-Encoding: gzip\");\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "gzipEncodingEnabledByDefault",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setResponseCode(java.net.HttpURLConnection.HTTP_NOT_MODIFIED));\n    com.squareup.okhttp.Request request = new com.squareup.okhttp.Request.Builder().url(server.getUrl(\"/\")).header(\"If-Modified-Since\", formatDate(-24, java.util.concurrent.TimeUnit.HOURS)).build();\n    com.squareup.okhttp.Response response = client.newCall(request).execute();\n    org.junit.Assert.assertEquals(java.net.HttpURLConnection.HTTP_NOT_MODIFIED, response.code());\n    org.junit.Assert.assertEquals(\"\", response.body().string());\n}",
        "ClassName": "CacheTest",
        "Label": 1,
        "MethodName": "clientSuppliedConditionWithoutCachedResult",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    testCreateOkResponseInternal(new com.squareup.okhttp.internal.huc.JavaApiConverterTest.JavaHttpURLConnectionFactory(), true);\n}",
        "ClassName": "JavaApiConverterTest",
        "Label": 1,
        "MethodName": "createOkResponse_fromJavaHttpsUrlConnection",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Content-Location: /bar\").setBody(\"A\"));\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"B\"));\n    server.play();\n    org.junit.Assert.assertEquals(\"A\", readAscii(openConnection(server.getUrl(\"/foo\"))));\n    org.junit.Assert.assertEquals(\"B\", readAscii(openConnection(server.getUrl(\"/bar\"))));\n}",
        "ClassName": "HttpResponseCacheTest",
        "Label": 1,
        "MethodName": "contentLocationDoesNotPopulateCache",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().addHeader(\"Warning: 199 test danger\").addHeader(\"Last-Modified: \" + formatDate(-1, java.util.concurrent.TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").setBody(\"A\"));\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setResponseCode(java.net.HttpURLConnection.HTTP_NOT_MODIFIED));\n    server.play();\n    java.net.URLConnection connection1 = openConnection(server.getUrl(\"/\"));\n    org.junit.Assert.assertEquals(\"A\", readAscii(connection1));\n    org.junit.Assert.assertEquals(\"199 test danger\", connection1.getHeaderField(\"Warning\"));\n    java.net.URLConnection connection2 = openConnection(server.getUrl(\"/\"));\n    org.junit.Assert.assertEquals(\"A\", readAscii(connection2));\n    org.junit.Assert.assertEquals(null, connection2.getHeaderField(\"Warning\"));\n}",
        "ClassName": "ResponseCacheTest",
        "Label": 1,
        "MethodName": "getHeadersDeletesCached100LevelWarnings",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.acceptFrame();\n    peer.sendFrame().ping(true, 1, 5);\n    peer.play();\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connection(peer, com.squareup.okhttp.internal.spdy.SpdyConnectionTest.SPDY3);\n    com.squareup.okhttp.internal.spdy.Ping ping = connection.ping();\n    org.junit.Assert.assertTrue(ping.roundTripTime() > 0);\n    org.junit.Assert.assertTrue(ping.roundTripTime() < java.util.concurrent.TimeUnit.SECONDS.toNanos(1));\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame pingFrame = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_PING, pingFrame.type);\n    org.junit.Assert.assertEquals(1, pingFrame.payload1);\n    org.junit.Assert.assertEquals(0, pingFrame.payload2);\n    org.junit.Assert.assertFalse(pingFrame.ack);\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "clientPingsServer",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    java.lang.String lastModifiedDate = formatDate(-2, java.util.concurrent.TimeUnit.HOURS);\n    com.squareup.okhttp.mockwebserver.RecordedRequest conditionalRequest = assertConditionallyCached(new com.squareup.okhttp.mockwebserver.MockResponse().addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Expires: \" + formatDate(1, java.util.concurrent.TimeUnit.HOURS)).addHeader(\"Cache-Control: no-cache\"));\n    java.util.List<java.lang.String> headers = conditionalRequest.getHeaders();\n    org.junit.Assert.assertTrue(headers.contains(\"If-Modified-Since: \" + lastModifiedDate));\n}",
        "ClassName": "CacheTest",
        "Label": 1,
        "MethodName": "cacheControlNoCacheAndExpirationDateInTheFuture",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setResponseCode(301).addHeader(\"Location: /b\").addHeader(\"Test\", \"Redirect from /a to /b\").setBody(\"/a has moved!\"));\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setResponseCode(302).addHeader(\"Location: /c\").addHeader(\"Test\", \"Redirect from /b to /c\").setBody(\"/b has moved!\"));\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"C\"));\n    server.play();\n    com.squareup.okhttp.Request request = new com.squareup.okhttp.Request.Builder().url(server.getUrl(\"/a\")).build();\n    client.enqueue(request, receiver);\n    receiver.await(server.getUrl(\"/c\")).assertCode(200).assertBody(\"C\").redirectedBy().assertCode(302).assertContainsHeaders(\"Test: Redirect from /b to /c\").redirectedBy().assertCode(301).assertContainsHeaders(\"Test: Redirect from /a to /b\");\n    org.junit.Assert.assertEquals(0, server.takeRequest().getSequenceNumber());\n    org.junit.Assert.assertEquals(1, server.takeRequest().getSequenceNumber());\n    org.junit.Assert.assertEquals(2, server.takeRequest().getSequenceNumber());\n}",
        "ClassName": "AsyncApiTest",
        "Label": 1,
        "MethodName": "redirect",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.setVariantAndClient(variant, false);\n    peer.acceptFrame();\n    peer.acceptFrame();\n    peer.sendFrame().synReply(false, 3, com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"));\n    peer.play();\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connection(peer, variant);\n    com.squareup.okhttp.internal.spdy.SpdyStream client = connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"b\", \"banana\"), true, true);\n    okio.BufferedSink out = okio.Okio.buffer(client.getSink());\n    out.write(com.squareup.okhttp.internal.Util.EMPTY_BYTE_ARRAY);\n    out.flush();\n    out.close();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, peer.takeFrame().type);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_DATA, peer.takeFrame().type);\n    org.junit.Assert.assertEquals(3, peer.frameCount());\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "clientSendsEmptyDataServerDoesntSendWindowUpdate",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.setVariantAndClient(com.squareup.okhttp.internal.spdy.SpdyConnectionTest.HTTP_20_DRAFT_09, false);\n    com.squareup.okhttp.internal.spdy.Settings initial = new com.squareup.okhttp.internal.spdy.Settings();\n    initial.set(com.squareup.okhttp.internal.spdy.Settings.INITIAL_WINDOW_SIZE, com.squareup.okhttp.internal.spdy.Settings.PERSIST_VALUE, 1684);\n    com.squareup.okhttp.internal.spdy.Settings shouldntImpactConnection = new com.squareup.okhttp.internal.spdy.Settings();\n    shouldntImpactConnection.set(com.squareup.okhttp.internal.spdy.Settings.INITIAL_WINDOW_SIZE, com.squareup.okhttp.internal.spdy.Settings.PERSIST_VALUE, 3368);\n    peer.sendFrame().settings(initial);\n    peer.acceptFrame();\n    peer.sendFrame().settings(shouldntImpactConnection);\n    peer.acceptFrame();\n    peer.acceptFrame();\n    peer.play();\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connection(peer, com.squareup.okhttp.internal.spdy.SpdyConnectionTest.HTTP_20_DRAFT_09);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame ackFrame = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_SETTINGS, ackFrame.type);\n    org.junit.Assert.assertEquals(0, ackFrame.streamId);\n    org.junit.Assert.assertTrue(ackFrame.ack);\n    ackFrame = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_SETTINGS, ackFrame.type);\n    org.junit.Assert.assertEquals(0, ackFrame.streamId);\n    org.junit.Assert.assertTrue(ackFrame.ack);\n    com.squareup.okhttp.internal.spdy.SpdyStream stream = connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"), false, true);\n    org.junit.Assert.assertEquals(3368, connection.peerSettings.getInitialWindowSize(com.squareup.okhttp.internal.spdy.Settings.DEFAULT_INITIAL_WINDOW_SIZE));\n    org.junit.Assert.assertEquals(1684, connection.bytesLeftInWriteWindow);\n    org.junit.Assert.assertEquals(3368, stream.bytesLeftInWriteWindow);\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "peerHttp2ServerLowersInitialWindowSize",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    redirectToAnotherOriginServer(true);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "redirectToAnotherOriginServerWithHttps",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    testClientConfiguredGzipContentEncodingAndConnectionReuse(com.squareup.okhttp.internal.http.URLConnectionTest.TransferKind.CHUNKED, false);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "gzipAndConnectionReuseWithChunkedEncoding",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    testConnectViaHttpProxyToHttps(com.squareup.okhttp.internal.http.URLConnectionTest.ProxyConfig.CREATE_ARG);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "connectViaHttpProxyToHttpsUsingProxyArg",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    testFlushAfterStreamTransmitted(com.squareup.okhttp.internal.http.URLConnectionTest.TransferKind.END_OF_STREAM);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "flushAfterStreamTransmittedWithNoLengthHeaders",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    testRedirected(com.squareup.okhttp.internal.http.URLConnectionTest.TransferKind.FIXED_LENGTH, true);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "redirectedWithContentLengthHeader",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    initResponseCache();\n    server.useHttps(com.squareup.okhttp.internal.http.URLConnectionTest.sslContext.getSocketFactory(), true);\n    com.squareup.okhttp.mockwebserver.MockResponse response = new com.squareup.okhttp.mockwebserver.MockResponse().setSocketPolicy(com.squareup.okhttp.mockwebserver.SocketPolicy.UPGRADE_TO_SSL_AT_END).setBody(\"bogus proxy connect response content\");\n    for (java.net.InetAddress inetAddress : java.net.InetAddress.getAllByName(server.getHostName())) {\n        server.enqueue(response);\n        server.enqueue(response);\n    }\n    server.play();\n    client.setProxy(server.toProxyAddress());\n    java.net.URL url = new java.net.URL(\"https://android.com/foo\");\n    client.setSslSocketFactory(com.squareup.okhttp.internal.http.URLConnectionTest.sslContext.getSocketFactory());\n    connection = client.open(url);\n    try {\n        connection.getResponseCode();\n        org.junit.Assert.fail();\n    } catch (java.io.IOException expected) {\n    }\n    com.squareup.okhttp.mockwebserver.RecordedRequest connect = server.takeRequest();\n    org.junit.Assert.assertEquals(\"Connect line failure on proxy\", \"CONNECT android.com:443 HTTP/1.1\", connect.getRequestLine());\n    assertContains(connect.getHeaders(), \"Host: android.com\");\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "connectViaHttpProxyToHttpsUsingBadProxyAndHttpResponseCache",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    client.getDispatcher().setMaxRequests(1);\n    server.setDispatcher(new com.squareup.okhttp.mockwebserver.Dispatcher() {\n        char nextResponse = 'A';\n\n        @java.lang.Override\n        public com.squareup.okhttp.mockwebserver.MockResponse dispatch(com.squareup.okhttp.mockwebserver.RecordedRequest request) {\n            client.cancel(\"request A\");\n            return new com.squareup.okhttp.mockwebserver.MockResponse().setBody(java.lang.Character.toString(nextResponse++));\n        }\n    });\n    server.play();\n    com.squareup.okhttp.Request requestA = new com.squareup.okhttp.Request.Builder().url(server.getUrl(\"/a\")).tag(\"request A\").build();\n    client.enqueue(requestA, receiver);\n    org.junit.Assert.assertEquals(\"/a\", server.takeRequest().getPath());\n    com.squareup.okhttp.Request requestB = new com.squareup.okhttp.Request.Builder().url(server.getUrl(\"/b\")).tag(\"request B\").build();\n    client.enqueue(requestB, receiver);\n    org.junit.Assert.assertEquals(\"/b\", server.takeRequest().getPath());\n    receiver.await(requestB.url()).assertBody(\"B\");\n    receiver.assertNoResponse(requestA.url());\n}",
        "ClassName": "AsyncApiTest",
        "Label": 1,
        "MethodName": "canceledBeforeResponseReadIsNeverDelivered",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().clearHeaders().setResponseCode(java.net.HttpURLConnection.HTTP_NOT_MODIFIED).addHeader(\"Content-Encoding: gzip\"));\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"b\"));\n    server.play();\n    java.net.HttpURLConnection connection1 = client.open(server.getUrl(\"/\"));\n    org.junit.Assert.assertEquals(java.net.HttpURLConnection.HTTP_NOT_MODIFIED, connection1.getResponseCode());\n    assertContent(\"\", connection1);\n    java.net.HttpURLConnection connection2 = client.open(server.getUrl(\"/\"));\n    org.junit.Assert.assertEquals(java.net.HttpURLConnection.HTTP_OK, connection2.getResponseCode());\n    assertContent(\"b\", connection2);\n    com.squareup.okhttp.mockwebserver.RecordedRequest requestA = server.takeRequest();\n    org.junit.Assert.assertEquals(0, requestA.getSequenceNumber());\n    com.squareup.okhttp.mockwebserver.RecordedRequest requestB = server.takeRequest();\n    org.junit.Assert.assertEquals(1, requestB.getSequenceNumber());\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "noTransparentGzipFor304NotModified",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.acceptFrame();\n    peer.sendFrame().synReply(false, 1, com.squareup.okhttp.internal.Util.headerEntries(\"b\", \"banana\"));\n    peer.play();\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connection(peer, com.squareup.okhttp.internal.spdy.SpdyConnectionTest.SPDY3);\n    com.squareup.okhttp.internal.spdy.SpdyStream stream = connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"), false, false);\n    org.junit.Assert.assertEquals(1, connection.openStreamCount());\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.Util.headerEntries(\"b\", \"banana\"), stream.getResponseHeaders());\n    org.junit.Assert.assertEquals(0, connection.openStreamCount());\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "headersOnlyStreamIsClosedAfterReplyHeaders",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Accept-Language, Accept-Charset\").addHeader(\"Vary: Accept-Encoding\").setBody(\"A\"));\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"B\"));\n    server.play();\n    java.net.URL url = server.getUrl(\"/\");\n    java.net.URLConnection connection1 = openConnection(url);\n    connection1.addRequestProperty(\"Accept-Language\", \"fr-CA\");\n    connection1.addRequestProperty(\"Accept-Charset\", \"UTF-8\");\n    connection1.addRequestProperty(\"Accept-Encoding\", \"identity\");\n    org.junit.Assert.assertEquals(\"A\", readAscii(connection1));\n    java.net.URLConnection connection2 = openConnection(url);\n    connection2.addRequestProperty(\"Accept-Language\", \"fr-CA\");\n    connection2.addRequestProperty(\"Accept-Charset\", \"UTF-8\");\n    connection2.addRequestProperty(\"Accept-Encoding\", \"identity\");\n    org.junit.Assert.assertEquals(\"A\", readAscii(connection2));\n}",
        "ClassName": "HttpResponseCacheTest",
        "Label": 1,
        "MethodName": "varyMultipleFieldsWithMatch",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    com.squareup.okhttp.mockwebserver.MockResponse timeout = new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"ABC\").clearHeaders().addHeader(\"Content-Length: 4\");\n    server.enqueue(timeout);\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"unused\"));\n    server.play();\n    java.net.URLConnection connection = client.open(server.getUrl(\"/\"));\n    connection.setReadTimeout(1000);\n    java.io.InputStream in = connection.getInputStream();\n    org.junit.Assert.assertEquals('A', in.read());\n    org.junit.Assert.assertEquals('B', in.read());\n    org.junit.Assert.assertEquals('C', in.read());\n    try {\n        in.read();\n        org.junit.Assert.fail();\n    } catch (java.net.SocketTimeoutException expected) {\n    }\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "readTimeouts",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"A\"));\n    server.play();\n    java.net.URL url = new java.net.URL(\"http\", server.getHostName(), server.getPort(), \"?query\");\n    org.junit.Assert.assertEquals(\"A\", readAscii(client.open(url).getInputStream(), java.lang.Integer.MAX_VALUE));\n    com.squareup.okhttp.mockwebserver.RecordedRequest request = server.takeRequest();\n    org.junit.Assert.assertEquals(\"GET /?query HTTP/1.1\", request.getRequestLine());\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "urlContainsQueryButNoPath",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"abc\"));\n    server.play();\n    com.squareup.okhttp.Request request = new com.squareup.okhttp.Request.Builder().url(server.getUrl(\"/\")).post(com.squareup.okhttp.Request.Body.create(com.squareup.okhttp.MediaType.parse(\"text/plain\"), \"def\")).build();\n    client.enqueue(request, receiver);\n    receiver.await(request.url()).assertCode(200).assertBody(\"abc\");\n    com.squareup.okhttp.mockwebserver.RecordedRequest recordedRequest = server.takeRequest();\n    org.junit.Assert.assertEquals(\"def\", recordedRequest.getUtf8Body());\n    org.junit.Assert.assertEquals(\"3\", recordedRequest.getHeader(\"Content-Length\"));\n    org.junit.Assert.assertEquals(\"text/plain; charset=utf-8\", recordedRequest.getHeader(\"Content-Type\"));\n}",
        "ClassName": "AsyncApiTest",
        "Label": 1,
        "MethodName": "post",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    boolean client = false;\n    com.squareup.okhttp.internal.spdy.Settings settings = new com.squareup.okhttp.internal.spdy.Settings();\n    settings.set(com.squareup.okhttp.internal.spdy.Settings.HEADER_TABLE_SIZE, com.squareup.okhttp.internal.spdy.Settings.PERSIST_VALUE, 0);\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = sendHttp2SettingsAndCheckForAck(client, settings);\n    synchronized(connection) {\n        org.junit.Assert.assertEquals(0, connection.peerSettings.getHeaderTableSize());\n        com.squareup.okhttp.internal.spdy.Http20Draft10.Reader frameReader = ((com.squareup.okhttp.internal.spdy.Http20Draft10.Reader) (connection.frameReader));\n        org.junit.Assert.assertEquals(0, frameReader.hpackReader.maxHeaderTableByteCount());\n    }\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "peerHttp2ServerZerosCompressionTable",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    enableProtocol(com.squareup.okhttp.Protocol.SPDY_3);\n    canceledBeforeResponseReadSignalsOnFailure();\n}",
        "ClassName": "CallTest",
        "Label": 1,
        "MethodName": "canceledBeforeResponseReadSignalsOnFailure_SPDY_3",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.sendFrame().data(true, 41, new okio.Buffer().writeUtf8(\"bogus\"));\n    peer.acceptFrame();\n    peer.sendFrame().ping(false, 2, 0);\n    peer.acceptFrame();\n    peer.play();\n    connection(peer, com.squareup.okhttp.internal.spdy.Spdy3ConnectionTest.SPDY3);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame rstStream = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_RST_STREAM, rstStream.type);\n    org.junit.Assert.assertEquals(41, rstStream.streamId);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.ErrorCode.INVALID_STREAM, rstStream.errorCode);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame ping = peer.takeFrame();\n    org.junit.Assert.assertEquals(2, ping.payload1);\n}",
        "ClassName": "Spdy3ConnectionTest",
        "Label": 1,
        "MethodName": "bogusDataFrameDoesNotDisruptConnection",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n}",
        "ClassName": "HttpResponseCacheTest",
        "Label": 1,
        "MethodName": "serverDisconnectsPrematurelyWithNoLengthHeaders",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    com.squareup.okhttp.mockwebserver.MockWebServer redirectTarget = new com.squareup.okhttp.mockwebserver.MockWebServer();\n    redirectTarget.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"A\"));\n    redirectTarget.play();\n    com.squareup.okhttp.mockwebserver.MockWebServer redirectSource = new com.squareup.okhttp.mockwebserver.MockWebServer();\n    redirectSource.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setResponseCode(java.net.HttpURLConnection.HTTP_MOVED_TEMP).addHeader(\"Location: \" + redirectTarget.getUrl(\"/\")));\n    redirectSource.play();\n    java.net.CookieManager cookieManager = new java.net.CookieManager(null, java.net.CookiePolicy.ACCEPT_ORIGINAL_SERVER);\n    java.net.HttpCookie cookie = new java.net.HttpCookie(\"c\", \"cookie\");\n    cookie.setDomain(redirectSource.getCookieDomain());\n    cookie.setPath(\"/\");\n    java.lang.String portList = java.lang.Integer.toString(redirectSource.getPort());\n    cookie.setPortlist(portList);\n    cookieManager.getCookieStore().add(redirectSource.getUrl(\"/\").toURI(), cookie);\n    java.net.CookieHandler.setDefault(cookieManager);\n    get(redirectSource, \"/\");\n    com.squareup.okhttp.mockwebserver.RecordedRequest request = redirectSource.takeRequest();\n    assertContains(request.getHeaders(), ((((\"Cookie: $Version=\\\"1\\\"; \" + \"c=\\\"cookie\\\";$Path=\\\"/\\\";$Domain=\\\"\") + redirectSource.getCookieDomain()) + \"\\\";$Port=\\\"\") + portList) + \"\\\"\");\n    for (java.lang.String header : redirectTarget.takeRequest().getHeaders()) {\n        if (header.startsWith(\"Cookie\")) {\n            org.junit.Assert.fail(header);\n        }\n    }\n}",
        "ClassName": "CookiesTest",
        "Label": 1,
        "MethodName": "testRedirectsDoNotIncludeTooManyCookies",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.setVariantAndClient(com.squareup.okhttp.internal.spdy.Spdy3ConnectionTest.SPDY3, false);\n    peer.acceptFrame();\n    peer.acceptFrame();\n    peer.sendFrame().goAway(1, com.squareup.okhttp.internal.spdy.ErrorCode.PROTOCOL_ERROR, com.squareup.okhttp.internal.Util.EMPTY_BYTE_ARRAY);\n    peer.acceptFrame();\n    peer.sendFrame().ping(true, 1, 0);\n    peer.acceptFrame();\n    peer.play();\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connection(peer, com.squareup.okhttp.internal.spdy.Spdy3ConnectionTest.SPDY3);\n    com.squareup.okhttp.internal.spdy.SpdyStream stream1 = connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"), true, true);\n    com.squareup.okhttp.internal.spdy.SpdyStream stream2 = connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"b\", \"banana\"), true, true);\n    connection.ping().roundTripTime();\n    okio.BufferedSink sink1 = okio.Okio.buffer(stream1.getSink());\n    okio.BufferedSink sink2 = okio.Okio.buffer(stream2.getSink());\n    sink1.writeUtf8(\"abc\");\n    try {\n        sink2.writeUtf8(\"abc\");\n        sink2.flush();\n        org.junit.Assert.fail();\n    } catch (java.io.IOException expected) {\n        org.junit.Assert.assertEquals(\"stream was reset: REFUSED_STREAM\", expected.getMessage());\n    }\n    sink1.writeUtf8(\"def\");\n    sink1.close();\n    try {\n        connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"c\", \"cola\"), true, true);\n        org.junit.Assert.fail();\n    } catch (java.io.IOException expected) {\n        org.junit.Assert.assertEquals(\"shutdown\", expected.getMessage());\n    }\n    org.junit.Assert.assertTrue(stream1.isOpen());\n    org.junit.Assert.assertFalse(stream2.isOpen());\n    org.junit.Assert.assertEquals(1, connection.openStreamCount());\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame synStream1 = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, synStream1.type);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame synStream2 = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, synStream2.type);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame ping = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_PING, ping.type);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame data1 = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_DATA, data1.type);\n    org.junit.Assert.assertEquals(1, data1.streamId);\n    org.junit.Assert.assertTrue(java.util.Arrays.equals(\"abcdef\".getBytes(\"UTF-8\"), data1.data));\n}",
        "ClassName": "Spdy3ConnectionTest",
        "Label": 1,
        "MethodName": "receiveGoAway",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    assertNotCached(new com.squareup.okhttp.mockwebserver.MockResponse().addHeader(\"Last-Modified: \" + formatDate(-2, java.util.concurrent.TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1, java.util.concurrent.TimeUnit.HOURS)).addHeader(\"Cache-Control: no-store\"));\n}",
        "ClassName": "HttpResponseCacheTest",
        "Label": 1,
        "MethodName": "cacheControlNoStoreAndExpirationDateInTheFuture",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setResponseCode(301).addHeader(\"Location: /b\").addHeader(\"Test\", \"Redirect from /a to /b\").setBody(\"/a has moved!\"));\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setResponseCode(302).addHeader(\"Location: /c\").addHeader(\"Test\", \"Redirect from /b to /c\").setBody(\"/b has moved!\"));\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"C\"));\n    server.play();\n    onSuccess(new com.squareup.okhttp.Request.Builder().url(server.getUrl(\"/a\")).build()).assertCode(200).assertBody(\"C\").redirectedBy().assertCode(302).assertContainsHeaders(\"Test: Redirect from /b to /c\").redirectedBy().assertCode(301).assertContainsHeaders(\"Test: Redirect from /a to /b\");\n    org.junit.Assert.assertEquals(0, server.takeRequest().getSequenceNumber());\n    org.junit.Assert.assertEquals(1, server.takeRequest().getSequenceNumber());\n    org.junit.Assert.assertEquals(2, server.takeRequest().getSequenceNumber());\n}",
        "ClassName": "SyncApiTest",
        "Label": 1,
        "MethodName": "redirect",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.setVariantAndClient(variant, false);\n    int windowUpdateThreshold = com.squareup.okhttp.internal.spdy.Settings.DEFAULT_INITIAL_WINDOW_SIZE / 2;\n    peer.acceptFrame();\n    peer.sendFrame().synReply(false, 1, com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"));\n    for (int i = 0; i < 3; i++) {\n        for (int sent = 0, count; sent < windowUpdateThreshold; sent += count) {\n            count = java.lang.Math.min(variant.maxFrameSize(), windowUpdateThreshold - sent);\n            peer.sendFrame().data(false, 1, data(count));\n        }\n        peer.acceptFrame();\n        peer.acceptFrame();\n    }\n    peer.sendFrame().data(true, 1, data(0));\n    peer.play();\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connection(peer, variant);\n    com.squareup.okhttp.internal.spdy.SpdyStream stream = connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"b\", \"banana\"), false, true);\n    org.junit.Assert.assertEquals(0, stream.unacknowledgedBytesRead);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"), stream.getResponseHeaders());\n    okio.Source in = stream.getSource();\n    okio.OkBuffer buffer = new okio.OkBuffer();\n    while (in.read(buffer, 1024) != (-1)) {\n        if (buffer.size() == (3 * windowUpdateThreshold))\n            break;\n\n    } \n    org.junit.Assert.assertEquals(-1, in.read(buffer, 1));\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame synStream = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, synStream.type);\n    for (int i = 0; i < 3; i++) {\n        java.util.List<java.lang.Integer> windowUpdateStreamIds = new java.util.ArrayList(2);\n        for (int j = 0; j < 2; j++) {\n            com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame windowUpdate = peer.takeFrame();\n            org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_WINDOW_UPDATE, windowUpdate.type);\n            windowUpdateStreamIds.add(windowUpdate.streamId);\n            org.junit.Assert.assertEquals(windowUpdateThreshold, windowUpdate.windowSizeIncrement);\n        }\n        org.junit.Assert.assertTrue(windowUpdateStreamIds.contains(0));\n        org.junit.Assert.assertTrue(windowUpdateStreamIds.contains(1));\n    }\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "readSendsWindowUpdate",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    java.net.CookieManager cookieManager = new java.net.CookieManager(null, java.net.CookiePolicy.ACCEPT_ORIGINAL_SERVER);\n    java.net.CookieHandler.setDefault(cookieManager);\n    com.squareup.okhttp.mockwebserver.MockWebServer server = new com.squareup.okhttp.mockwebserver.MockWebServer();\n    server.play();\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().addHeader((((((((((\"Set-Cookie2: a=\\\"android\\\"; \" + (((\"Comment=\\\"this cookie is delicious\\\"; \" + \"CommentURL=\\\"http://google.com/\\\"; \") + \"Discard; \") + \"Domain=\\\"\")) + server.getCookieDomain()) + \"\\\"; \") + \"Max-Age=\\\"60\\\"; \") + \"Path=\\\"/path\\\"; \") + \"Port=\\\"80,443,\") + server.getPort()) + \"\\\"; \") + \"Secure; \") + \"Version=\\\"1\\\"\"));\n    get(server, \"/path/foo\");\n    java.util.List<java.net.HttpCookie> cookies = cookieManager.getCookieStore().getCookies();\n    org.junit.Assert.assertEquals(1, cookies.size());\n    java.net.HttpCookie cookie = cookies.get(0);\n    org.junit.Assert.assertEquals(\"a\", cookie.getName());\n    org.junit.Assert.assertEquals(\"android\", cookie.getValue());\n    org.junit.Assert.assertEquals(\"this cookie is delicious\", cookie.getComment());\n    org.junit.Assert.assertEquals(\"http://google.com/\", cookie.getCommentURL());\n    org.junit.Assert.assertEquals(true, cookie.getDiscard());\n    org.junit.Assert.assertEquals(server.getCookieDomain(), cookie.getDomain());\n    org.junit.Assert.assertEquals(60, cookie.getMaxAge());\n    org.junit.Assert.assertEquals(\"/path\", cookie.getPath());\n    org.junit.Assert.assertEquals(\"80,443,\" + server.getPort(), cookie.getPortlist());\n    org.junit.Assert.assertEquals(true, cookie.getSecure());\n    org.junit.Assert.assertEquals(1, cookie.getVersion());\n}",
        "ClassName": "CookiesTest",
        "Label": 1,
        "MethodName": "testQuotedAttributeValues",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.sendFrame().data(true, 41, new okio.Buffer().writeUtf8(\"bogus\"));\n    peer.acceptFrame();\n    peer.sendFrame().ping(false, 2, 0);\n    peer.acceptFrame();\n    peer.play();\n    connection(peer, com.squareup.okhttp.internal.spdy.SpdyConnectionTest.SPDY3);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame rstStream = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_RST_STREAM, rstStream.type);\n    org.junit.Assert.assertEquals(41, rstStream.streamId);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.ErrorCode.INVALID_STREAM, rstStream.errorCode);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame ping = peer.takeFrame();\n    org.junit.Assert.assertEquals(2, ping.payload1);\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "bogusDataFrameDoesNotDisruptConnection",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    receiveGoAway(com.squareup.okhttp.internal.spdy.SpdyConnectionTest.HTTP_20_DRAFT_09);\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "receiveGoAwayHttp2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    java.util.List<java.lang.String> calls = authCallsForHeader(\"WWW-Authenticate: Digest \" + ((\"realm=\\\"testrealm@host.com\\\", qop=\\\"auth,auth-int\\\", \" + \"nonce=\\\"dcd98b7102dd2f0e8b11d0f600bfb0c093\\\", \") + \"opaque=\\\"5ccc069c403ebaf9f0171e9517f40e41\\\"\"));\n    org.junit.Assert.assertEquals(0, calls.size());\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "digestAuthentication",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"abc\").addHeader(\"Content-Type: text/plain\"));\n    server.play();\n    com.squareup.okhttp.Request request = new com.squareup.okhttp.Request.Builder().url(server.getUrl(\"/\")).header(\"User-Agent\", \"AsyncApiTest\").build();\n    client.enqueue(request, receiver);\n    receiver.await(request.url()).assertCode(200).assertContainsHeaders(\"Content-Type: text/plain\").assertBody(\"abc\");\n    org.junit.Assert.assertTrue(server.takeRequest().getHeaders().contains(\"User-Agent: AsyncApiTest\"));\n}",
        "ClassName": "AsyncApiTest",
        "Label": 1,
        "MethodName": "get",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    com.squareup.okhttp.mockwebserver.MockResponse pleaseAuthenticate = new com.squareup.okhttp.mockwebserver.MockResponse().setResponseCode(401).addHeader(\"WWW-Authenticate: Basic realm=\\\"protected area\\\"\").setBody(\"Please authenticate.\");\n    server.enqueue(pleaseAuthenticate);\n    server.enqueue(pleaseAuthenticate);\n    server.enqueue(pleaseAuthenticate);\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"Successful auth!\"));\n    server.play();\n    java.net.Authenticator.setDefault(new com.squareup.okhttp.internal.RecordingAuthenticator());\n    connection = client.open(server.getUrl(\"/\"));\n    org.junit.Assert.assertEquals(\"Successful auth!\", readAscii(connection.getInputStream(), java.lang.Integer.MAX_VALUE));\n    com.squareup.okhttp.mockwebserver.RecordedRequest request = server.takeRequest();\n    assertContainsNoneMatching(request.getHeaders(), \"Authorization: Basic .*\");\n    for (int i = 0; i < 3; i++) {\n        request = server.takeRequest();\n        org.junit.Assert.assertEquals(\"GET / HTTP/1.1\", request.getRequestLine());\n        assertContains(request.getHeaders(), \"Authorization: Basic \" + com.squareup.okhttp.internal.RecordingAuthenticator.BASE_64_CREDENTIALS);\n    }\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "authenticateWithGet",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    for (int i = 0; i < 21; i++) {\n        server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setResponseCode(301).addHeader(\"Location: /\" + (i + 1)).setBody(\"Redirecting to /\" + (i + 1)));\n    }\n    server.play();\n    com.squareup.okhttp.Request request = new com.squareup.okhttp.Request.Builder().url(server.getUrl(\"/0\")).build();\n    client.enqueue(request, receiver);\n    receiver.await(server.getUrl(\"/20\")).assertFailure(\"Too many redirects: 21\");\n}",
        "ClassName": "AsyncApiTest",
        "Label": 1,
        "MethodName": "doesNotFollow21Redirects",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.sendFrame().synStream(false, false, 2, 0, 0, 0, com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"));\n    peer.acceptFrame();\n    peer.sendFrame().synStream(false, false, 2, 0, 0, 0, com.squareup.okhttp.internal.Util.headerEntries(\"b\", \"banana\"));\n    peer.acceptFrame();\n    peer.play();\n    final java.util.concurrent.atomic.AtomicInteger receiveCount = new java.util.concurrent.atomic.AtomicInteger();\n    com.squareup.okhttp.internal.spdy.IncomingStreamHandler handler = new com.squareup.okhttp.internal.spdy.IncomingStreamHandler() {\n        @java.lang.Override\n        public void receive(com.squareup.okhttp.internal.spdy.SpdyStream stream) throws java.io.IOException {\n            receiveCount.incrementAndGet();\n            org.junit.Assert.assertEquals(com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"), stream.getRequestHeaders());\n            org.junit.Assert.assertEquals(null, stream.getErrorCode());\n            stream.reply(com.squareup.okhttp.internal.Util.headerEntries(\"c\", \"cola\"), true);\n        }\n    };\n    new com.squareup.okhttp.internal.spdy.SpdyConnection.Builder(true, peer.openSocket()).handler(handler).build();\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame reply = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, reply.type);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.HeadersMode.SPDY_REPLY, reply.headersMode);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame rstStream = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_RST_STREAM, rstStream.type);\n    org.junit.Assert.assertEquals(2, rstStream.streamId);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.ErrorCode.PROTOCOL_ERROR, rstStream.errorCode);\n    org.junit.Assert.assertEquals(1, receiveCount.intValue());\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "remoteDoubleSynStream",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    com.squareup.okhttp.mockwebserver.MockWebServer server = new com.squareup.okhttp.mockwebserver.MockWebServer();\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse());\n    server.play();\n    java.net.CookieManager cookieManager = new java.net.CookieManager(null, java.net.CookiePolicy.ACCEPT_ORIGINAL_SERVER);\n    java.net.HttpCookie cookieA = new java.net.HttpCookie(\"a\", \"android\");\n    cookieA.setDomain(server.getCookieDomain());\n    cookieA.setPath(\"/\");\n    cookieManager.getCookieStore().add(server.getUrl(\"/\").toURI(), cookieA);\n    java.net.HttpCookie cookieB = new java.net.HttpCookie(\"b\", \"banana\");\n    cookieB.setDomain(server.getCookieDomain());\n    cookieB.setPath(\"/\");\n    cookieManager.getCookieStore().add(server.getUrl(\"/\").toURI(), cookieB);\n    java.net.CookieHandler.setDefault(cookieManager);\n    get(server, \"/\");\n    com.squareup.okhttp.mockwebserver.RecordedRequest request = server.takeRequest();\n    java.util.List<java.lang.String> receivedHeaders = request.getHeaders();\n    assertContains(receivedHeaders, (((((\"Cookie: $Version=\\\"1\\\"; \" + \"a=\\\"android\\\";$Path=\\\"/\\\";$Domain=\\\"\") + server.getCookieDomain()) + \"\\\"; \") + \"b=\\\"banana\\\";$Path=\\\"/\\\";$Domain=\\\"\") + server.getCookieDomain()) + \"\\\"\");\n}",
        "ClassName": "CookiesTest",
        "Label": 1,
        "MethodName": "testSendingCookiesFromStore",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setResponseCode(404).setBody(\"A\"));\n    server.play();\n    connection = client.open(server.getUrl(\"/\"));\n    org.junit.Assert.assertEquals(\"A\", readAscii(connection.getErrorStream(), java.lang.Integer.MAX_VALUE));\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "getErrorStreamOnUnsuccessfulRequest",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    testClientPrematureDisconnect(com.squareup.okhttp.internal.http.HttpResponseCacheTest.TransferKind.END_OF_STREAM);\n}",
        "ClassName": "HttpResponseCacheTest",
        "Label": 1,
        "MethodName": "clientPrematureDisconnectWithNoLengthHeaders",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    doUpload(com.squareup.okhttp.internal.http.URLConnectionTest.TransferKind.CHUNKED, com.squareup.okhttp.internal.http.URLConnectionTest.WriteKind.LARGE_BUFFERS);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "chunkedUpload_largeBuffers",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    com.squareup.okhttp.mockwebserver.MockResponse response = new com.squareup.okhttp.mockwebserver.MockResponse().addHeader(\"ETag: v3\").addHeader(\"Cache-Control: max-age=0\");\n    java.lang.String ifModifiedSinceDate = formatDate(-24, java.util.concurrent.TimeUnit.HOURS);\n    com.squareup.okhttp.mockwebserver.RecordedRequest request = assertClientSuppliedCondition(response, \"If-Modified-Since\", ifModifiedSinceDate);\n    java.util.List<java.lang.String> headers = request.getHeaders();\n    org.junit.Assert.assertTrue(headers.contains(\"If-Modified-Since: \" + ifModifiedSinceDate));\n    org.junit.Assert.assertFalse(headers.contains(\"If-None-Match: v3\"));\n}",
        "ClassName": "ResponseCacheTest",
        "Label": 1,
        "MethodName": "clientSuppliedIfModifiedSinceWithCachedResult",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.get().setDispatcher(new com.squareup.okhttp.mockwebserver.Dispatcher() {\n        @java.lang.Override\n        public com.squareup.okhttp.mockwebserver.MockResponse dispatch(com.squareup.okhttp.mockwebserver.RecordedRequest request) {\n            client.cancel(\"request\");\n            return new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"A\");\n        }\n    });\n    com.squareup.okhttp.Request request = new com.squareup.okhttp.Request.Builder().url(server.getUrl(\"/a\")).tag(\"request\").build();\n    try {\n        client.newCall(request).execute();\n        org.junit.Assert.fail();\n    } catch (java.io.IOException expected) {\n    }\n}",
        "ClassName": "CallTest",
        "Label": 1,
        "MethodName": "cancelInFlightBeforeResponseReadThrowsIOE",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Foo\").setBody(\"A\"));\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"B\"));\n    server.play();\n    java.net.URLConnection fooConnection = openConnection(server.getUrl(\"/\"));\n    fooConnection.addRequestProperty(\"Foo\", \"bar\");\n    org.junit.Assert.assertEquals(\"A\", readAscii(fooConnection));\n    org.junit.Assert.assertEquals(\"B\", readAscii(openConnection(server.getUrl(\"/\"))));\n}",
        "ClassName": "HttpResponseCacheTest",
        "Label": 1,
        "MethodName": "varyMatchesRemovedRequestHeaderField",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    testCreateOkResponseInternal(new com.squareup.okhttp.internal.http.JavaApiConverterTest.OkHttpURLConnectionFactory(client), false);\n}",
        "ClassName": "JavaApiConverterTest",
        "Label": 1,
        "MethodName": "createOkResponse_fromOkHttpUrlConnection",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    reusedConnectionFailsWithPost(com.squareup.okhttp.internal.http.URLConnectionTest.TransferKind.END_OF_STREAM, 16384);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "postFailsWithBufferedRequestForLargeRequest",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.setVariantAndClient(com.squareup.okhttp.internal.spdy.SpdyConnectionTest.HTTP_20_DRAFT_09, false);\n    peer.acceptFrame();\n    peer.sendFrame().ping(true, 1, 5);\n    peer.play();\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connection(peer, com.squareup.okhttp.internal.spdy.SpdyConnectionTest.HTTP_20_DRAFT_09);\n    com.squareup.okhttp.internal.spdy.Ping ping = connection.ping();\n    org.junit.Assert.assertTrue(ping.roundTripTime() > 0);\n    org.junit.Assert.assertTrue(ping.roundTripTime() < java.util.concurrent.TimeUnit.SECONDS.toNanos(1));\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame pingFrame = peer.takeFrame();\n    org.junit.Assert.assertEquals(0, pingFrame.streamId);\n    org.junit.Assert.assertEquals(1, pingFrame.payload1);\n    org.junit.Assert.assertEquals(0x4f4b6f6b, pingFrame.payload2);\n    org.junit.Assert.assertFalse(pingFrame.ack);\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "clientPingsServerHttp2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"abc\"));\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"def\"));\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"ghi\"));\n    server.play();\n    client.enqueue(new com.squareup.okhttp.Request.Builder().url(server.getUrl(\"/a\")).build(), receiver);\n    receiver.await(server.getUrl(\"/a\")).assertBody(\"abc\");\n    client.enqueue(new com.squareup.okhttp.Request.Builder().url(server.getUrl(\"/b\")).build(), receiver);\n    receiver.await(server.getUrl(\"/b\")).assertBody(\"def\");\n    client.enqueue(new com.squareup.okhttp.Request.Builder().url(server.getUrl(\"/c\")).build(), receiver);\n    receiver.await(server.getUrl(\"/c\")).assertBody(\"ghi\");\n    org.junit.Assert.assertEquals(0, server.takeRequest().getSequenceNumber());\n    org.junit.Assert.assertEquals(1, server.takeRequest().getSequenceNumber());\n    org.junit.Assert.assertEquals(2, server.takeRequest().getSequenceNumber());\n}",
        "ClassName": "AsyncApiTest",
        "Label": 1,
        "MethodName": "connectionPooling",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    enableProtocol(com.squareup.okhttp.Protocol.HTTP_2);\n    canceledBeforeResponseReadSignalsOnFailure();\n}",
        "ClassName": "CallTest",
        "Label": 1,
        "MethodName": "canceledBeforeResponseReadSignalsOnFailure_HTTP_2",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.acceptFrame();\n    peer.sendFrame().synReply(false, 1, com.squareup.okhttp.internal.Util.headerEntries(\"b\", \"banana\"));\n    peer.sendFrame().data(true, 1, new okio.OkBuffer().writeUtf8(\"square\"));\n    peer.play();\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connection(peer, com.squareup.okhttp.internal.spdy.SpdyConnectionTest.SPDY3);\n    com.squareup.okhttp.internal.spdy.SpdyStream stream = connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"), false, true);\n    okio.Source source = stream.getSource();\n    assertStreamData(\"square\", source);\n    org.junit.Assert.assertEquals(0, connection.openStreamCount());\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame synStream = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, synStream.type);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.HeadersMode.SPDY_SYN_STREAM, synStream.headersMode);\n    org.junit.Assert.assertTrue(synStream.inFinished);\n    org.junit.Assert.assertFalse(synStream.outFinished);\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "serverClosesClientInputStream",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    testConnectViaProxy(com.squareup.okhttp.internal.http.URLConnectionTest.ProxyConfig.HTTP_PROXY_SYSTEM_PROPERTY);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "connectViaProxyUsingHttpProxySystemProperty",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    reusedConnectionFailsWithPost(com.squareup.okhttp.internal.http.URLConnectionTest.TransferKind.FIXED_LENGTH, 16384);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "postFailsWithFixedLengthRequestForLargeRequest",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"A\").addHeader(\"ETag: v1\"));\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().clearHeaders().setResponseCode(java.net.HttpURLConnection.HTTP_NOT_MODIFIED));\n    server.play();\n    client.setOkResponseCache(cache);\n    com.squareup.okhttp.Request request1 = new com.squareup.okhttp.Request.Builder().url(server.getUrl(\"/\")).build();\n    client.enqueue(request1, receiver);\n    receiver.await(request1.url()).assertCode(200).assertBody(\"A\");\n    org.junit.Assert.assertNull(server.takeRequest().getHeader(\"If-None-Match\"));\n    com.squareup.okhttp.Request request2 = new com.squareup.okhttp.Request.Builder().url(server.getUrl(\"/\")).build();\n    client.enqueue(request2, receiver);\n    receiver.await(request2.url()).assertCode(200).assertBody(\"A\");\n    org.junit.Assert.assertEquals(\"v1\", server.takeRequest().getHeader(\"If-None-Match\"));\n}",
        "ClassName": "AsyncApiTest",
        "Label": 1,
        "MethodName": "conditionalCacheHit",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.setVariantAndClient(com.squareup.okhttp.internal.spdy.SpdyConnectionTest.HTTP_20_DRAFT_09, false);\n    peer.acceptFrame();\n    peer.sendFrame().synReply(false, 1, com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"));\n    final java.util.List<com.squareup.okhttp.internal.spdy.Header> expectedRequestHeaders = java.util.Arrays.asList(new com.squareup.okhttp.internal.spdy.Header(com.squareup.okhttp.internal.spdy.Header.TARGET_METHOD, \"GET\"), new com.squareup.okhttp.internal.spdy.Header(com.squareup.okhttp.internal.spdy.Header.TARGET_SCHEME, \"https\"), new com.squareup.okhttp.internal.spdy.Header(com.squareup.okhttp.internal.spdy.Header.TARGET_AUTHORITY, \"squareup.com\"), new com.squareup.okhttp.internal.spdy.Header(com.squareup.okhttp.internal.spdy.Header.TARGET_PATH, \"/cached\"));\n    peer.sendFrame().pushPromise(1, 2, expectedRequestHeaders);\n    final java.util.List<com.squareup.okhttp.internal.spdy.Header> expectedResponseHeaders = java.util.Arrays.asList(new com.squareup.okhttp.internal.spdy.Header(com.squareup.okhttp.internal.spdy.Header.RESPONSE_STATUS, \"200\"));\n    peer.sendFrame().synReply(true, 2, expectedResponseHeaders);\n    peer.sendFrame().data(true, 1, data(0));\n    peer.play();\n    final java.util.List events = new java.util.ArrayList();\n    com.squareup.okhttp.internal.spdy.PushObserver observer = new com.squareup.okhttp.internal.spdy.PushObserver() {\n        @java.lang.Override\n        public boolean onRequest(int streamId, java.util.List<com.squareup.okhttp.internal.spdy.Header> requestHeaders) {\n            org.junit.Assert.assertEquals(2, streamId);\n            events.add(requestHeaders);\n            return false;\n        }\n\n        @java.lang.Override\n        public boolean onHeaders(int streamId, java.util.List<com.squareup.okhttp.internal.spdy.Header> responseHeaders, boolean last) {\n            org.junit.Assert.assertEquals(2, streamId);\n            org.junit.Assert.assertTrue(last);\n            events.add(responseHeaders);\n            return false;\n        }\n\n        @java.lang.Override\n        public boolean onData(int streamId, okio.BufferedSource source, int byteCount, boolean last) throws java.io.IOException {\n            events.add(new java.lang.AssertionError(\"onData\"));\n            return false;\n        }\n\n        @java.lang.Override\n        public void onReset(int streamId, com.squareup.okhttp.internal.spdy.ErrorCode errorCode) {\n            events.add(new java.lang.AssertionError(\"onReset\"));\n        }\n    };\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connectionBuilder(peer, com.squareup.okhttp.internal.spdy.SpdyConnectionTest.HTTP_20_DRAFT_09).pushObserver(observer).build();\n    com.squareup.okhttp.internal.spdy.SpdyStream client = connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"b\", \"banana\"), false, true);\n    org.junit.Assert.assertEquals(-1, client.getSource().read(new okio.OkBuffer(), 1));\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, peer.takeFrame().type);\n    org.junit.Assert.assertEquals(2, events.size());\n    org.junit.Assert.assertEquals(expectedRequestHeaders, events.get(0));\n    org.junit.Assert.assertEquals(expectedResponseHeaders, events.get(1));\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "pushPromiseStream",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    cache.close();\n    cache = com.squareup.okhttp.internal.DiskLruCache.open(cacheDir, appVersion, 2, 20);\n    set(\"a\", \"a\", \"aaa\");\n    set(\"b\", \"bb\", \"bbbb\");\n    set(\"c\", \"c\", \"c\");\n    cache.setMaxSize(10);\n    org.junit.Assert.assertEquals(1, cache.executorService.getQueue().size());\n    cache.executorService.purge();\n}",
        "ClassName": "DiskLruCacheTest",
        "Label": 1,
        "MethodName": "shrinkMaxSizeEvicts",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.acceptFrame();\n    peer.sendFrame().synReply(false, 3, com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"));\n    peer.sendFrame().data(true, 3, new okio.Buffer().writeUtf8(\"robot\"));\n    peer.sendFrame().data(true, 3, new okio.Buffer().writeUtf8(\"c3po\"));\n    peer.sendFrame().ping(false, 2, 0);\n    peer.acceptFrame();\n    peer.play();\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connection(peer, com.squareup.okhttp.internal.spdy.SpdyConnectionTest.SPDY3);\n    com.squareup.okhttp.internal.spdy.SpdyStream stream = connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"b\", \"banana\"), true, true);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"), stream.getResponseHeaders());\n    assertStreamData(\"robot\", stream.getSource());\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame synStream = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, synStream.type);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.HeadersMode.SPDY_SYN_STREAM, synStream.headersMode);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame ping = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_PING, ping.type);\n    org.junit.Assert.assertEquals(2, ping.payload1);\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "remoteSendsDataAfterInFinished",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.sendFrame().synStream(false, false, 2, 0, com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"));\n    peer.acceptFrame();\n    peer.sendFrame().synStream(false, false, 2, 0, com.squareup.okhttp.internal.Util.headerEntries(\"b\", \"banana\"));\n    peer.acceptFrame();\n    peer.play();\n    final java.util.concurrent.atomic.AtomicInteger receiveCount = new java.util.concurrent.atomic.AtomicInteger();\n    com.squareup.okhttp.internal.spdy.IncomingStreamHandler handler = new com.squareup.okhttp.internal.spdy.IncomingStreamHandler() {\n        @java.lang.Override\n        public void receive(com.squareup.okhttp.internal.spdy.SpdyStream stream) throws java.io.IOException {\n            receiveCount.incrementAndGet();\n            org.junit.Assert.assertEquals(com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"), stream.getRequestHeaders());\n            org.junit.Assert.assertEquals(null, stream.getErrorCode());\n            stream.reply(com.squareup.okhttp.internal.Util.headerEntries(\"c\", \"cola\"), true);\n        }\n    };\n    new com.squareup.okhttp.internal.spdy.SpdyConnection.Builder(true, peer.openSocket()).handler(handler).build();\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame reply = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, reply.type);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.HeadersMode.SPDY_REPLY, reply.headersMode);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame rstStream = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_RST_STREAM, rstStream.type);\n    org.junit.Assert.assertEquals(2, rstStream.streamId);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.ErrorCode.PROTOCOL_ERROR, rstStream.errorCode);\n    org.junit.Assert.assertEquals(1, receiveCount.intValue());\n}",
        "ClassName": "Spdy3ConnectionTest",
        "Label": 1,
        "MethodName": "remoteDoubleSynStream",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    java.lang.String frame = \"gAMAAgAAB/sAAAABeLvjxqfCAqYjRhAGJmxGxUQAAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAA\" + ((((((((((((((((((((((((((((((\"AAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP/\" + \"/SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQ\") + \"AAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD\") + \"//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0o\") + \"EAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAA\") + \"A//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9\") + \"KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAA\") + \"AAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP/\") + \"/SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQ\") + \"AAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD\") + \"//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0o\") + \"EAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAA\") + \"A//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9\") + \"KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAA\") + \"AAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP/\") + \"/SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQ\") + \"AAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD\") + \"//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0o\") + \"EAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAA\") + \"A//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9\") + \"KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAA\") + \"AAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP/\") + \"/SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQ\") + \"AAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD\") + \"//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0o\") + \"EAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAA\") + \"A//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9\") + \"KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAA\") + \"AAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP/\") + \"/SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQ\") + \"AAAD//0oEAAAA//8=\");\n    headerBlockHasTrailingCompressedBytes(frame, 289);\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "headerBlockHasTrailingCompressedBytes2048",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setStatus(\"ICY 200 OK\").addHeader(\"Accept-Ranges: none\").addHeader(\"Content-Type: audio/mpeg\").addHeader(\"icy-br:128\").addHeader(\"ice-audio-info: bitrate=128;samplerate=44100;channels=2\").addHeader(\"icy-br:128\").addHeader(\"icy-description:Rock\").addHeader(\"icy-genre:riders\").addHeader(\"icy-name:A2RRock\").addHeader(\"icy-pub:1\").addHeader(\"icy-url:http://www.A2Rradio.com\").addHeader(\"Server: Icecast 2.3.3-kh8\").addHeader(\"Cache-Control: no-cache\").addHeader(\"Pragma: no-cache\").addHeader(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\").addHeader(\"icy-metaint:16000\").setBody(\"mp3 data\"));\n    server.play();\n    connection = client.open(server.getUrl(\"/\"));\n    org.junit.Assert.assertEquals(200, connection.getResponseCode());\n    org.junit.Assert.assertEquals(\"OK\", connection.getResponseMessage());\n    assertContent(\"mp3 data\", connection);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "shoutcast",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    int framesThatFillWindow = com.squareup.okhttp.internal.spdy.SpdyConnectionTest.roundUp(com.squareup.okhttp.internal.spdy.Settings.DEFAULT_INITIAL_WINDOW_SIZE, com.squareup.okhttp.internal.spdy.SpdyConnectionTest.HTTP_20_DRAFT_09.maxFrameSize());\n    peer.acceptFrame();\n    for (int i = 0; i < framesThatFillWindow; i++) {\n        peer.acceptFrame();\n    }\n    peer.acceptFrame();\n    peer.play();\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connection(peer, com.squareup.okhttp.internal.spdy.SpdyConnectionTest.SPDY3);\n    com.squareup.okhttp.internal.spdy.SpdyStream stream = connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"b\", \"banana\"), true, true);\n    okio.BufferedSink out = okio.Okio.buffer(stream.getSink());\n    out.write(new byte[com.squareup.okhttp.internal.spdy.Settings.DEFAULT_INITIAL_WINDOW_SIZE]);\n    out.flush();\n    org.junit.Assert.assertEquals(0, connection.bytesLeftInWriteWindow);\n    org.junit.Assert.assertEquals(0, connection.getStream(1).bytesLeftInWriteWindow);\n    out.writeByte('a');\n    assertFlushBlocks(out);\n    connection.readerRunnable.windowUpdate(0, 1);\n    assertFlushBlocks(out);\n    connection.readerRunnable.windowUpdate(1, 1);\n    out.flush();\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame synStream = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, synStream.type);\n    for (int i = 0; i < framesThatFillWindow; i++) {\n        com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame data = peer.takeFrame();\n        org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_DATA, data.type);\n    }\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "writeAwaitsWindowUpdate",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    testResponseRedirectedWithPost(java.net.HttpURLConnection.HTTP_MULT_CHOICE, com.squareup.okhttp.internal.http.URLConnectionTest.TransferKind.END_OF_STREAM);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "response300MultipleChoiceWithPost",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    reusedConnectionFailsWithPost(com.squareup.okhttp.internal.http.URLConnectionTest.TransferKind.CHUNKED, 16384);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "postFailsWithChunkedRequestForLargeRequest",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    reusedConnectionFailsWithPost(com.squareup.okhttp.internal.http.URLConnectionTest.TransferKind.CHUNKED, 1024);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "postFailsWithChunkedRequestForSmallRequest",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse());\n    server.play();\n    connection = client.open(server.getUrl(\"/\"));\n    connection.setDoOutput(true);\n    try {\n        connection.getInputStream();\n        connection.getOutputStream();\n        org.junit.Assert.fail();\n    } catch (java.net.ProtocolException expected) {\n    }\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "getOutputAfterGetInputStreamFails",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.setVariantAndClient(com.squareup.okhttp.internal.spdy.Spdy3ConnectionTest.SPDY3, false);\n    int windowUpdateThreshold = com.squareup.okhttp.internal.spdy.Settings.DEFAULT_INITIAL_WINDOW_SIZE / 2;\n    peer.acceptFrame();\n    peer.sendFrame().synReply(false, 1, com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"));\n    for (int i = 0; i < 3; i++) {\n        for (int sent = 0, count; sent < windowUpdateThreshold; sent += count) {\n            count = java.lang.Math.min(com.squareup.okhttp.internal.spdy.Spdy3ConnectionTest.SPDY3.maxFrameSize(), windowUpdateThreshold - sent);\n            peer.sendFrame().data(false, 1, data(count));\n        }\n        peer.acceptFrame();\n        peer.acceptFrame();\n    }\n    peer.sendFrame().data(true, 1, data(0));\n    peer.play();\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connection(peer, com.squareup.okhttp.internal.spdy.Spdy3ConnectionTest.SPDY3);\n    com.squareup.okhttp.internal.spdy.SpdyStream stream = connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"b\", \"banana\"), false, true);\n    org.junit.Assert.assertEquals(0, stream.unacknowledgedBytesRead);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"), stream.getResponseHeaders());\n    okio.Source in = stream.getSource();\n    okio.Buffer buffer = new okio.Buffer();\n    while (in.read(buffer, 1024) != (-1)) {\n        if (buffer.size() == (3 * windowUpdateThreshold))\n            break;\n\n    } \n    org.junit.Assert.assertEquals(-1, in.read(buffer, 1));\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame synStream = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, synStream.type);\n    for (int i = 0; i < 3; i++) {\n        java.util.List<java.lang.Integer> windowUpdateStreamIds = new java.util.ArrayList<>(2);\n        for (int j = 0; j < 2; j++) {\n            com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame windowUpdate = peer.takeFrame();\n            org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_WINDOW_UPDATE, windowUpdate.type);\n            windowUpdateStreamIds.add(windowUpdate.streamId);\n            org.junit.Assert.assertEquals(windowUpdateThreshold, windowUpdate.windowSizeIncrement);\n        }\n        org.junit.Assert.assertTrue(windowUpdateStreamIds.contains(0));\n        org.junit.Assert.assertTrue(windowUpdateStreamIds.contains(1));\n    }\n}",
        "ClassName": "Spdy3ConnectionTest",
        "Label": 1,
        "MethodName": "readSendsWindowUpdate",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    testClientConfiguredGzipContentEncodingAndConnectionReuse(com.squareup.okhttp.internal.http.URLConnectionTest.TransferKind.FIXED_LENGTH, false);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "gzipAndConnectionReuseWithFixedLength",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.acceptFrame();\n    peer.acceptFrame();\n    peer.play();\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connection(peer, com.squareup.okhttp.internal.spdy.Spdy3ConnectionTest.SPDY3);\n    com.squareup.okhttp.internal.spdy.SpdyStream stream = connection.newStream(com.squareup.okhttp.TestUtil.headerEntries(\"b\", \"banana\"), true, true);\n    stream.readTimeout().timeout(500, java.util.concurrent.TimeUnit.MILLISECONDS);\n    long startNanos = java.lang.System.nanoTime();\n    try {\n        stream.getResponseHeaders();\n        org.junit.Assert.fail();\n    } catch (java.io.InterruptedIOException expected) {\n    }\n    long elapsedNanos = java.lang.System.nanoTime() - startNanos;\n    org.junit.Assert.assertEquals(500.0, java.util.concurrent.TimeUnit.NANOSECONDS.toMillis(elapsedNanos), 200.0);\n    org.junit.Assert.assertEquals(0, connection.openStreamCount());\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, peer.takeFrame().type);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_RST_STREAM, peer.takeFrame().type);\n}",
        "ClassName": "Spdy3ConnectionTest",
        "Label": 1,
        "MethodName": "getResponseHeadersTimesOut",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    java.lang.String lastModifiedDate = formatDate(-2, java.util.concurrent.TimeUnit.HOURS);\n    com.squareup.okhttp.mockwebserver.RecordedRequest conditionalRequest = assertConditionallyCached(new com.squareup.okhttp.mockwebserver.MockResponse().addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Expires: \" + formatDate(1, java.util.concurrent.TimeUnit.HOURS)).addHeader(\"Cache-Control: no-cache\"));\n    java.util.List<java.lang.String> headers = conditionalRequest.getHeaders();\n    org.junit.Assert.assertTrue(headers.contains(\"If-Modified-Since: \" + lastModifiedDate));\n}",
        "ClassName": "ResponseCacheTest",
        "Label": 1,
        "MethodName": "cacheControlNoCacheAndExpirationDateInTheFuture",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.sendFrame().ping(false, 2, 0);\n    peer.acceptFrame();\n    peer.sendFrame().ping(true, 3, 0);\n    peer.sendFrame().ping(false, 4, 0);\n    peer.acceptFrame();\n    peer.play();\n    connection(peer, com.squareup.okhttp.internal.spdy.SpdyConnectionTest.SPDY3);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame ping2 = peer.takeFrame();\n    org.junit.Assert.assertEquals(2, ping2.payload1);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame ping4 = peer.takeFrame();\n    org.junit.Assert.assertEquals(4, ping4.payload1);\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "unexpectedPingIsNotReturned",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.acceptFrame();\n    peer.sendFrame().synReply(false, 3, com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"));\n    peer.acceptFrame();\n    peer.sendFrame().ping(true, 1, 0);\n    peer.play();\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connection(peer, com.squareup.okhttp.internal.spdy.SpdyConnectionTest.SPDY3);\n    com.squareup.okhttp.internal.spdy.SpdyStream stream = connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"b\", \"banana\"), true, true);\n    stream.setReadTimeout(1000);\n    okio.Source source = stream.getSource();\n    long startNanos = java.lang.System.nanoTime();\n    try {\n        source.read(new okio.Buffer(), 1);\n        org.junit.Assert.fail();\n    } catch (java.io.IOException expected) {\n    }\n    long elapsedNanos = java.lang.System.nanoTime() - startNanos;\n    org.junit.Assert.assertEquals(1000.0, java.util.concurrent.TimeUnit.NANOSECONDS.toMillis(elapsedNanos), 200.0);\n    org.junit.Assert.assertEquals(1, connection.openStreamCount());\n    connection.ping().roundTripTime();\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame synStream = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, synStream.type);\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "readTimeoutExpires",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.acceptFrame();\n    peer.acceptFrame();\n    peer.sendFrame().synReply(true, 3, com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"));\n    peer.sendFrame().ping(true, 1, 0);\n    peer.play();\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connection(peer, com.squareup.okhttp.internal.spdy.SpdyConnectionTest.SPDY3);\n    connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"b\", \"banana\"), false, true);\n    org.junit.Assert.assertEquals(1, connection.openStreamCount());\n    connection.ping().roundTripTime();\n    org.junit.Assert.assertEquals(0, connection.openStreamCount());\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame synStream = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, synStream.type);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.HeadersMode.SPDY_SYN_STREAM, synStream.headersMode);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame ping = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_PING, ping.type);\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "clientCreatesStreamAndServerRepliesWithFin",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    testInputStreamAvailable(com.squareup.okhttp.internal.http.URLConnectionTest.TransferKind.CHUNKED);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "inputStreamAvailableWithChunkedEncoding",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    testClientPrematureDisconnect(com.squareup.okhttp.CacheTest.TransferKind.END_OF_STREAM);\n}",
        "ClassName": "CacheTest",
        "Label": 1,
        "MethodName": "clientPrematureDisconnectWithNoLengthHeaders",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    testClientPrematureDisconnect(com.squareup.okhttp.internal.http.ResponseCacheTest.TransferKind.CHUNKED);\n}",
        "ClassName": "ResponseCacheTest",
        "Label": 1,
        "MethodName": "clientPrematureDisconnectWithChunkedEncoding",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(com.squareup.okhttp.internal.http.ResponseCacheTest.InMemoryResponseCache.CACHE_VARIANT_HEADER, \"A\").setBody(\"A\"));\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(com.squareup.okhttp.internal.http.ResponseCacheTest.InMemoryResponseCache.CACHE_VARIANT_HEADER, \"B\").setBody(\"B\"));\n    server.play();\n    java.net.URL url = server.getUrl(\"/\");\n    java.net.URLConnection connection1 = openConnection(url);\n    connection1.addRequestProperty(com.squareup.okhttp.internal.http.ResponseCacheTest.InMemoryResponseCache.CACHE_VARIANT_HEADER, \"A\");\n    org.junit.Assert.assertEquals(\"A\", readAscii(connection1));\n    java.net.URLConnection connection2 = openConnection(url);\n    connection2.addRequestProperty(com.squareup.okhttp.internal.http.ResponseCacheTest.InMemoryResponseCache.CACHE_VARIANT_HEADER, \"A\");\n    org.junit.Assert.assertEquals(\"A\", readAscii(connection2));\n    org.junit.Assert.assertEquals(1, server.getRequestCount());\n    java.net.URLConnection connection3 = openConnection(url);\n    connection3.addRequestProperty(com.squareup.okhttp.internal.http.ResponseCacheTest.InMemoryResponseCache.CACHE_VARIANT_HEADER, \"B\");\n    org.junit.Assert.assertEquals(\"B\", readAscii(connection3));\n    org.junit.Assert.assertEquals(2, server.getRequestCount());\n    java.net.URLConnection connection4 = openConnection(url);\n    connection4.addRequestProperty(com.squareup.okhttp.internal.http.ResponseCacheTest.InMemoryResponseCache.CACHE_VARIANT_HEADER, \"A\");\n    org.junit.Assert.assertEquals(\"A\", readAscii(connection4));\n    org.junit.Assert.assertEquals(2, server.getRequestCount());\n}",
        "ClassName": "ResponseCacheTest",
        "Label": 1,
        "MethodName": "cacheCanUseCriteriaBesidesVariantObeyed",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    testClientPrematureDisconnect(com.squareup.okhttp.internal.huc.ResponseCacheTest.TransferKind.FIXED_LENGTH);\n}",
        "ClassName": "ResponseCacheTest",
        "Label": 1,
        "MethodName": "clientPrematureDisconnectWithContentLengthHeader",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setStatus(\"HTTP/1.0 200 OK\"));\n    server.play();\n    connection = client.open(server.getUrl(\"/\"));\n    java.util.List<java.lang.String> protocolValues = connection.getHeaderFields().get(com.squareup.okhttp.internal.http.OkHeaders.SELECTED_PROTOCOL);\n    org.junit.Assert.assertEquals(java.util.Arrays.asList(\"http/1.0\"), protocolValues);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "http10SelectedProtocol",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    final java.util.Map<java.lang.String, java.util.List<java.lang.String>> cookieHandlerHeaders = new java.util.HashMap<>();\n    java.net.CookieHandler.setDefault(new java.net.CookieManager() {\n        @java.lang.Override\n        public java.util.Map<java.lang.String, java.util.List<java.lang.String>> get(java.net.URI uri, java.util.Map<java.lang.String, java.util.List<java.lang.String>> requestHeaders) throws java.io.IOException {\n            cookieHandlerHeaders.putAll(requestHeaders);\n            java.util.Map<java.lang.String, java.util.List<java.lang.String>> result = new java.util.HashMap<>();\n            result.put(\"Cookie\", java.util.Collections.singletonList(\"Bar=bar\"));\n            result.put(\"Cookie2\", java.util.Collections.singletonList(\"Baz=baz\"));\n            result.put(\"Quux\", java.util.Collections.singletonList(\"quux\"));\n            return result;\n        }\n    });\n    com.squareup.okhttp.mockwebserver.MockWebServer server = new com.squareup.okhttp.mockwebserver.MockWebServer();\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse());\n    server.play();\n    java.net.HttpURLConnection connection = new com.squareup.okhttp.OkUrlFactory(client).open(server.getUrl(\"/\"));\n    org.junit.Assert.assertEquals(java.util.Collections.<java.lang.String, java.util.List<java.lang.String>>emptyMap(), connection.getRequestProperties());\n    connection.setRequestProperty(\"Foo\", \"foo\");\n    connection.setDoOutput(true);\n    connection.getOutputStream().write(5);\n    connection.getOutputStream().close();\n    connection.getInputStream().close();\n    com.squareup.okhttp.mockwebserver.RecordedRequest request = server.takeRequest();\n    assertContainsAll(cookieHandlerHeaders.keySet(), \"Foo\");\n    assertContainsAll(cookieHandlerHeaders.keySet(), \"Content-type\", \"User-Agent\", \"Connection\", \"Host\");\n    org.junit.Assert.assertFalse(cookieHandlerHeaders.containsKey(\"Cookie\"));\n    try {\n        assertContainsAll(connection.getRequestProperties().keySet(), \"Foo\");\n        assertContainsAll(connection.getRequestProperties().keySet(), \"Content-type\", \"Content-Length\", \"User-Agent\", \"Connection\", \"Host\");\n        assertContainsAll(connection.getRequestProperties().keySet(), \"Cookie\", \"Cookie2\");\n        org.junit.Assert.assertFalse(connection.getRequestProperties().containsKey(\"Quux\"));\n    } catch (java.lang.IllegalStateException expected) {\n    }\n    assertContainsAll(request.getHeaders(), \"Foo: foo\", \"Cookie: Bar=bar\", \"Cookie2: Baz=baz\");\n    org.junit.Assert.assertFalse(request.getHeaders().contains(\"Quux: quux\"));\n}",
        "ClassName": "CookiesTest",
        "Label": 1,
        "MethodName": "testHeadersSentToCookieHandler",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    assertFullyCached(new com.squareup.okhttp.mockwebserver.MockResponse().addHeader(\"Date: \" + formatDate(0, java.util.concurrent.TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=60\"));\n}",
        "ClassName": "ResponseCacheTest",
        "Label": 1,
        "MethodName": "maxAgeInTheFutureWithDateHeader",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.setVariantAndClient(com.squareup.okhttp.internal.spdy.Spdy3ConnectionTest.SPDY3, false);\n    peer.acceptFrame();\n    peer.acceptFrame();\n    peer.sendFrame().synReply(false, 1, com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"));\n    peer.play();\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connection(peer, com.squareup.okhttp.internal.spdy.Spdy3ConnectionTest.SPDY3);\n    com.squareup.okhttp.internal.spdy.SpdyStream client = connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"b\", \"banana\"), true, true);\n    okio.BufferedSink out = okio.Okio.buffer(client.getSink());\n    out.write(com.squareup.okhttp.internal.Util.EMPTY_BYTE_ARRAY);\n    out.flush();\n    out.close();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, peer.takeFrame().type);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_DATA, peer.takeFrame().type);\n    org.junit.Assert.assertEquals(3, peer.frameCount());\n}",
        "ClassName": "Spdy3ConnectionTest",
        "Label": 1,
        "MethodName": "clientSendsEmptyDataServerDoesntSendWindowUpdate",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    assertNotCached(new com.squareup.okhttp.mockwebserver.MockResponse().setResponseCode(java.net.HttpURLConnection.HTTP_PARTIAL).addHeader(\"Date: \" + formatDate(0, java.util.concurrent.TimeUnit.HOURS)).addHeader(\"Content-Range: bytes 100-100/200\").addHeader(\"Cache-Control: max-age=60\"));\n}",
        "ClassName": "HttpResponseCacheTest",
        "Label": 1,
        "MethodName": "cachePlusRange",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.setVariantAndClient(com.squareup.okhttp.internal.spdy.SpdyConnectionTest.HTTP_20_DRAFT_09, false);\n    peer.sendFrame().pushPromise(3, 2, java.util.Arrays.asList(new com.squareup.okhttp.internal.spdy.Header(com.squareup.okhttp.internal.spdy.Header.TARGET_METHOD, \"GET\"), new com.squareup.okhttp.internal.spdy.Header(com.squareup.okhttp.internal.spdy.Header.TARGET_SCHEME, \"https\"), new com.squareup.okhttp.internal.spdy.Header(com.squareup.okhttp.internal.spdy.Header.TARGET_AUTHORITY, \"squareup.com\"), new com.squareup.okhttp.internal.spdy.Header(com.squareup.okhttp.internal.spdy.Header.TARGET_PATH, \"/cached\")));\n    peer.sendFrame().synReply(true, 2, java.util.Arrays.asList(new com.squareup.okhttp.internal.spdy.Header(com.squareup.okhttp.internal.spdy.Header.RESPONSE_STATUS, \"200\")));\n    peer.acceptFrame();\n    peer.play();\n    connectionBuilder(peer, com.squareup.okhttp.internal.spdy.SpdyConnectionTest.HTTP_20_DRAFT_09).pushObserver(com.squareup.okhttp.internal.spdy.PushObserver.CANCEL).build();\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame rstStream = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_RST_STREAM, rstStream.type);\n    org.junit.Assert.assertEquals(2, rstStream.streamId);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.ErrorCode.CANCEL, rstStream.errorCode);\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "pushPromiseStreamsAutomaticallyCancel",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    testServerClosesOutput(com.squareup.okhttp.mockwebserver.SocketPolicy.SHUTDOWN_OUTPUT_AT_END);\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "serverShutdownOutput",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    assertFullyCached(new com.squareup.okhttp.mockwebserver.MockResponse().addHeader(\"Date: \" + formatDate(0, java.util.concurrent.TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=60\"));\n}",
        "ClassName": "CacheTest",
        "Label": 1,
        "MethodName": "maxAgeInTheFutureWithDateHeader",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"ABCDEF\").setBodyDelay(1, java.util.concurrent.TimeUnit.SECONDS));\n    long startNanos = java.lang.System.nanoTime();\n    java.net.URLConnection connection = server.getUrl(\"/\").openConnection();\n    java.io.InputStream in = connection.getInputStream();\n    org.junit.Assert.assertEquals('A', in.read());\n    org.junit.Assert.assertEquals('B', in.read());\n    org.junit.Assert.assertEquals('C', in.read());\n    org.junit.Assert.assertEquals('D', in.read());\n    org.junit.Assert.assertEquals('E', in.read());\n    org.junit.Assert.assertEquals('F', in.read());\n    org.junit.Assert.assertEquals(-1, in.read());\n    long elapsedNanos = java.lang.System.nanoTime() - startNanos;\n    long elapsedMillis = java.util.concurrent.TimeUnit.NANOSECONDS.toMillis(elapsedNanos);\n    org.junit.Assert.assertTrue(java.lang.String.format(\"Request + Response: %sms\", elapsedMillis), elapsedMillis >= 1000);\n    org.junit.Assert.assertTrue(java.lang.String.format(\"Request + Response: %sms\", elapsedMillis), elapsedMillis <= 1100);\n}",
        "ClassName": "MockWebServerTest",
        "Label": 1,
        "MethodName": "delayResponse",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setResponseCode(java.net.HttpURLConnection.HTTP_MOVED_TEMP).setSocketPolicy(com.squareup.okhttp.mockwebserver.SocketPolicy.SHUTDOWN_INPUT_AT_END).addHeader(\"Location: /foo\"));\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"This is the new page!\"));\n    server.play();\n    assertContent(\"This is the new page!\", client.open(server.getUrl(\"/\")));\n    org.junit.Assert.assertEquals(0, server.takeRequest().getSequenceNumber());\n    org.junit.Assert.assertEquals(0, server.takeRequest().getSequenceNumber());\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "sameConnectionRedirectAndReuse",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    com.squareup.okhttp.mockwebserver.MockWebServer server = new com.squareup.okhttp.mockwebserver.MockWebServer();\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"ABC\"));\n    server.play();\n    java.net.HttpURLConnection connection1 = client.open(server.getUrl(\"\"));\n    connection1.setReadTimeout(100);\n    java.io.InputStream input = connection1.getInputStream();\n    org.junit.Assert.assertEquals(\"ABC\", readAscii(input, java.lang.Integer.MAX_VALUE));\n    server.shutdown();\n    try {\n        java.net.HttpURLConnection connection2 = client.open(server.getUrl(\"\"));\n        connection2.setReadTimeout(100);\n        connection2.getInputStream();\n        org.junit.Assert.fail();\n    } catch (java.net.ConnectException expected) {\n    }\n}",
        "ClassName": "URLConnectionTest",
        "Label": 1,
        "MethodName": "getKeepAlive",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    for (int i = 0; i < 20; i++) {\n        server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setResponseCode(301).addHeader(\"Location: /\" + (i + 1)).setBody(\"Redirecting to /\" + (i + 1)));\n    }\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse().setBody(\"Success!\"));\n    server.play();\n    com.squareup.okhttp.Request request = new com.squareup.okhttp.Request.Builder().url(server.getUrl(\"/0\")).build();\n    client.enqueue(request, receiver);\n    receiver.await(server.getUrl(\"/20\")).assertCode(200).assertBody(\"Success!\");\n}",
        "ClassName": "AsyncApiTest",
        "Label": 1,
        "MethodName": "follow20Redirects",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    java.net.CookieHandler.setDefault(new java.net.CookieManager() {\n        @java.lang.Override\n        public java.util.Map<java.lang.String, java.util.List<java.lang.String>> get(java.net.URI uri, java.util.Map<java.lang.String, java.util.List<java.lang.String>> requestHeaders) throws java.io.IOException {\n            java.util.Map<java.lang.String, java.util.List<java.lang.String>> result = new java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>();\n            result.put(\"COOKIE\", java.util.Collections.singletonList(\"Bar=bar\"));\n            result.put(\"cooKIE2\", java.util.Collections.singletonList(\"Baz=baz\"));\n            return result;\n        }\n    });\n    com.squareup.okhttp.mockwebserver.MockWebServer server = new com.squareup.okhttp.mockwebserver.MockWebServer();\n    server.enqueue(new com.squareup.okhttp.mockwebserver.MockResponse());\n    server.play();\n    get(server, \"/\");\n    com.squareup.okhttp.mockwebserver.RecordedRequest request = server.takeRequest();\n    assertContainsAll(request.getHeaders(), \"COOKIE: Bar=bar\", \"cooKIE2: Baz=baz\");\n    org.junit.Assert.assertFalse(request.getHeaders().contains(\"Quux: quux\"));\n}",
        "ClassName": "CookiesTest",
        "Label": 1,
        "MethodName": "testCookiesSentIgnoresCase",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    java.lang.String lastModifiedDate = formatDate(-2, java.util.concurrent.TimeUnit.HOURS);\n    com.squareup.okhttp.mockwebserver.RecordedRequest conditionalRequest = assertConditionallyCached(new com.squareup.okhttp.mockwebserver.MockResponse().addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Expires: \" + formatDate(1, java.util.concurrent.TimeUnit.HOURS)).addHeader(\"Cache-Control: no-cache\"));\n    java.util.List<java.lang.String> headers = conditionalRequest.getHeaders();\n    org.junit.Assert.assertTrue(headers.contains(\"If-Modified-Since: \" + lastModifiedDate));\n}",
        "ClassName": "HttpResponseCacheTest",
        "Label": 1,
        "MethodName": "cacheControlNoCacheAndExpirationDateInTheFuture",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    java.lang.String frame = \"gAMAAgAAB/sAAAABeLvjxqfCAqYjRhAGJmxGxUQAAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAA\" + ((((((((((((((((((((((((((((((\"AAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP/\" + \"/SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQ\") + \"AAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD\") + \"//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0o\") + \"EAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAA\") + \"A//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9\") + \"KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAA\") + \"AAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP/\") + \"/SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQ\") + \"AAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD\") + \"//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0o\") + \"EAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAA\") + \"A//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9\") + \"KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAA\") + \"AAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP/\") + \"/SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQ\") + \"AAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD\") + \"//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0o\") + \"EAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAA\") + \"A//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9\") + \"KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAA\") + \"AAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP/\") + \"/SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQ\") + \"AAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD\") + \"//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0o\") + \"EAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAA\") + \"A//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9\") + \"KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAA\") + \"AAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP/\") + \"/SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQAAAD//0oEAAAA//9KBAAAAP//SgQ\") + \"AAAD//0oEAAAA//8=\");\n    headerBlockHasTrailingCompressedBytes(frame, 289);\n}",
        "ClassName": "Spdy3ConnectionTest",
        "Label": 1,
        "MethodName": "headerBlockHasTrailingCompressedBytes2048",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    peer.acceptFrame();\n    peer.sendFrame().synReply(false, 3, com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"));\n    peer.acceptFrame();\n    peer.sendFrame().synReply(false, 3, com.squareup.okhttp.internal.Util.headerEntries(\"b\", \"banana\"));\n    peer.sendFrame().ping(true, 1, 0);\n    peer.acceptFrame();\n    peer.play();\n    com.squareup.okhttp.internal.spdy.SpdyConnection connection = connection(peer, com.squareup.okhttp.internal.spdy.SpdyConnectionTest.SPDY3);\n    com.squareup.okhttp.internal.spdy.SpdyStream stream = connection.newStream(com.squareup.okhttp.internal.Util.headerEntries(\"c\", \"cola\"), true, true);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.Util.headerEntries(\"a\", \"android\"), stream.getResponseHeaders());\n    connection.ping().roundTripTime();\n    try {\n        stream.getSource().read(new okio.Buffer(), 1);\n        org.junit.Assert.fail();\n    } catch (java.io.IOException expected) {\n        org.junit.Assert.assertEquals(\"stream was reset: STREAM_IN_USE\", expected.getMessage());\n    }\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame synStream = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS, synStream.type);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.HeadersMode.SPDY_SYN_STREAM, synStream.headersMode);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame ping = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_PING, ping.type);\n    com.squareup.okhttp.internal.spdy.MockSpdyPeer.InFrame rstStream = peer.takeFrame();\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.Spdy3.TYPE_RST_STREAM, rstStream.type);\n    org.junit.Assert.assertEquals(3, rstStream.streamId);\n    org.junit.Assert.assertEquals(com.squareup.okhttp.internal.spdy.ErrorCode.STREAM_IN_USE, rstStream.errorCode);\n}",
        "ClassName": "SpdyConnectionTest",
        "Label": 1,
        "MethodName": "remoteDoubleSynReply",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/okhttp"
    },
    {
        "Body": "{\n    int[] received = com.google.zxing.pdf417.decoder.ec.ErrorCorrectionTestCase.PDF417_TEST_WITH_EC.clone();\n    java.util.Random random = com.google.zxing.pdf417.decoder.ec.AbstractErrorCorrectionTestCase.getRandom();\n    com.google.zxing.pdf417.decoder.ec.AbstractErrorCorrectionTestCase.corrupt(received, com.google.zxing.pdf417.decoder.ec.ErrorCorrectionTestCase.MAX_ERRORS + 3, random);\n    try {\n        checkDecode(received);\n        org.junit.Assert.fail(\"Should not have decoded\");\n    } catch (com.google.zxing.ChecksumException ce) {\n    }\n}",
        "ClassName": "ErrorCorrectionTestCase",
        "Label": 1,
        "MethodName": "testTooManyErrors",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/zxing"
    },
    {
        "Body": "{\n    com.google.zxing.aztec.encoder.EncoderTest.testWriter(\"\\u20ac 1 sample data.\", \"ISO-8859-1\", 25, true, 2);\n    com.google.zxing.aztec.encoder.EncoderTest.testWriter(\"\\u20ac 1 sample data.\", \"ISO-8859-15\", 25, true, 2);\n    com.google.zxing.aztec.encoder.EncoderTest.testWriter(\"\\u20ac 1 sample data.\", \"UTF-8\", 25, true, 2);\n    com.google.zxing.aztec.encoder.EncoderTest.testWriter(\"\\u20ac 1 sample data.\", \"UTF-8\", 100, true, 3);\n    com.google.zxing.aztec.encoder.EncoderTest.testWriter(\"\\u20ac 1 sample data.\", \"UTF-8\", 300, true, 4);\n    com.google.zxing.aztec.encoder.EncoderTest.testWriter(\"\\u20ac 1 sample data.\", \"UTF-8\", 500, false, 5);\n    java.lang.String data = \"In ut magna vel mauris malesuada\";\n    com.google.zxing.aztec.AztecWriter writer = new com.google.zxing.aztec.AztecWriter();\n    com.google.zxing.common.BitMatrix matrix = writer.encode(data, com.google.zxing.BarcodeFormat.AZTEC, 0, 0);\n    com.google.zxing.aztec.encoder.AztecCode aztec = com.google.zxing.aztec.encoder.Encoder.encode(data.getBytes(java.nio.charset.StandardCharsets.ISO_8859_1), com.google.zxing.aztec.encoder.Encoder.DEFAULT_EC_PERCENT, com.google.zxing.aztec.encoder.Encoder.DEFAULT_AZTEC_LAYERS);\n    com.google.zxing.common.BitMatrix expectedMatrix = aztec.getMatrix();\n    org.junit.Assert.assertEquals(matrix, expectedMatrix);\n}",
        "ClassName": "EncoderTest",
        "Label": 1,
        "MethodName": "testAztecWriter",
        "ProjectName": "/Users/guillaume.haben/Desktop/results-FT-bodyText/zxing"
    }
]
