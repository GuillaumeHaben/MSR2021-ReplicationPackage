[
    {
        "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    java.nio.file.Path dataDir = tempDir.resolve(\"data\");\n    java.nio.file.Path modelDir = tempDir.resolve(\"model\");\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.batch.update-class\", com.cloudera.oryx.app.mllib.rdf.RDFUpdate.class.getName());\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.data-dir\", dataDir);\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.model-dir\", modelDir);\n    overlayConfig.put(\"oryx.batch.streaming.generation-interval-sec\", com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.GEN_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.batch.streaming.block-interval-sec\", com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.BLOCK_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.rdf.num-trees\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.NUM_TREES);\n    overlayConfig.put(\"oryx.rdf.hyperparams.max-depth\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.MAX_DEPTH);\n    overlayConfig.put(\"oryx.rdf.hyperparams.max-split-candidates\", (\"[2,\" + com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.MAX_SPLIT_CANDIDATES) + \"]\");\n    overlayConfig.put(\"oryx.rdf.hyperparams.impurity\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.IMPURITY);\n    overlayConfig.put(\"oryx.input-schema.num-features\", 5);\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[\\\"4\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.id-features\", \"[\\\"0\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.target-feature\", \"\\\"4\\\"\");\n    overlayConfig.put(\"oryx.ml.eval.candidates\", 3);\n    overlayConfig.put(\"oryx.ml.eval.parallelism\", 2);\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    startServerProduceConsumeTopics(config, new com.cloudera.oryx.app.mllib.rdf.RandomCategoricalRDFDataGenerator(3), com.cloudera.oryx.app.mllib.rdf.RDFCategoricalHyperParamTuningIT.DATA_TO_WRITE, com.cloudera.oryx.app.mllib.rdf.RDFCategoricalHyperParamTuningIT.WRITE_INTERVAL_MSEC);\n    java.util.List<java.nio.file.Path> modelInstanceDirs = com.cloudera.oryx.common.io.IOUtils.listFiles(modelDir, \"*\");\n    com.cloudera.oryx.app.mllib.rdf.RDFCategoricalHyperParamTuningIT.log.info(\"Model instance dirs: {}\", modelInstanceDirs);\n    org.junit.Assert.assertFalse(\"No models?\", modelInstanceDirs.isEmpty());\n    com.cloudera.oryx.lambda.AbstractBatchIT.checkIntervals(modelInstanceDirs.size(), com.cloudera.oryx.app.mllib.rdf.RDFCategoricalHyperParamTuningIT.DATA_TO_WRITE, com.cloudera.oryx.app.mllib.rdf.RDFCategoricalHyperParamTuningIT.WRITE_INTERVAL_MSEC, com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.GEN_INTERVAL_SEC);\n    java.nio.file.Path latestModelDir = modelInstanceDirs.get(modelInstanceDirs.size() - 1);\n    java.nio.file.Path modelFile = latestModelDir.resolve(com.cloudera.oryx.ml.MLUpdate.MODEL_FILE_NAME);\n    org.junit.Assert.assertTrue(\"No such model file: \" + modelFile, java.nio.file.Files.exists(modelFile));\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.read(modelFile);\n    com.cloudera.oryx.app.mllib.rdf.RDFCategoricalHyperParamTuningIT.log.info(\"{}\", com.cloudera.oryx.common.pmml.PMMLUtils.toString(pmml));\n    org.junit.Assert.assertEquals(3, pmml.getExtensions().size());\n    java.util.Map<java.lang.String, java.lang.Object> expected = new java.util.HashMap<>();\n    expected.put(\"maxSplitCandidates\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.MAX_SPLIT_CANDIDATES);\n    expected.put(\"maxDepth\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.MAX_DEPTH);\n    expected.put(\"impurity\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.IMPURITY);\n    com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.checkExtensions(pmml, expected);\n    com.cloudera.oryx.common.collection.Pair<com.cloudera.oryx.app.rdf.tree.DecisionForest, com.cloudera.oryx.app.schema.CategoricalValueEncodings> forestEncoding = com.cloudera.oryx.app.rdf.RDFPMMLUtils.read(pmml, new com.cloudera.oryx.app.schema.InputSchema(config));\n    com.cloudera.oryx.app.rdf.tree.DecisionForest forest = forestEncoding.getFirst();\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings encoding = forestEncoding.getSecond();\n    java.util.Map<java.lang.String, java.lang.Integer> targetEncoding = encoding.getValueEncodingMap(4);\n    for (int f1 = 0; f1 <= 1; f1++) {\n        for (int f2 = 0; f2 <= 1; f2++) {\n            for (int f3 = 0; f3 <= 1; f3++) {\n                com.cloudera.oryx.app.rdf.predict.CategoricalPrediction prediction = ((com.cloudera.oryx.app.rdf.predict.CategoricalPrediction) (forest.predict(new com.cloudera.oryx.app.rdf.example.Example(null, null, com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(f1), com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(f2), com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(f3)))));\n                boolean expectedPositive = ((f1 == 1) && (f2 == 1)) && (f3 == 1);\n                org.junit.Assert.assertEquals(targetEncoding.get(java.lang.Boolean.toString(expectedPositive)).intValue(), prediction.getMostProbableCategoryEncoding());\n            }\n        }\n    }\n}",
        "ClassName": "RDFCategoricalHyperParamTuningIT",
        "Commit": "194fdb5b1d3a50dad75e5b8b395340e2ff151b8b",
        "CyclomaticComplexity": 3,
        "Date": "Tue, 6 Jan 2015 15:08:55 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 12,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRDF",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 52,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.clearspring.analytics.util.Preconditions.checkArgument(n >= 1);\n    this.n = n;\n}",
                "ClassName": "RandomCategoricalRDFDataGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.List<java.lang.String> givenFeatureNames = config.getStringList(\"oryx.input-schema.feature-names\");\n    if (givenFeatureNames.isEmpty()) {\n        int numFeatures = config.getInt(\"oryx.input-schema.num-features\");\n        com.google.common.base.Preconditions.checkArgument(numFeatures > 0);\n        java.util.List<java.lang.String> generatedFeatureNames = new java.util.ArrayList<>(numFeatures);\n        for (int i = 0; i < numFeatures; i++) {\n            generatedFeatureNames.add(java.lang.Integer.toString(i));\n        }\n        featureNames = generatedFeatureNames;\n    } else {\n        featureNames = com.google.common.collect.ImmutableList.copyOf(givenFeatureNames);\n    }\n    int numFeatures = featureNames.size();\n    com.google.common.base.Preconditions.checkArgument(new java.util.HashSet<>(featureNames).size() == numFeatures, \"Feature names must be unique: %s\", featureNames);\n    idFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.id-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(idFeatures));\n    java.util.Collection<java.lang.String> ignoredFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.ignored-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(ignoredFeatures));\n    java.util.Collection<java.lang.String> activeFeatureSet = new java.util.HashSet<>(featureNames);\n    activeFeatureSet.removeAll(idFeatures);\n    activeFeatureSet.removeAll(ignoredFeatures);\n    activeFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    java.util.List<java.lang.String> givenNumericFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.numeric-features\");\n    java.util.List<java.lang.String> givenCategoricalFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.categorical-features\");\n    if (givenNumericFeatures == null) {\n        com.google.common.base.Preconditions.checkNotNull(givenCategoricalFeatures);\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(givenCategoricalFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(categoricalFeatures));\n        activeFeatureSet.removeAll(categoricalFeatures);\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    } else {\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(givenNumericFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(numericFeatures));\n        activeFeatureSet.removeAll(numericFeatures);\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    }\n    targetFeature = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalString(config, \"oryx.input-schema.target-feature\");\n    com.google.common.base.Preconditions.checkArgument((targetFeature == null) || activeFeatures.contains(targetFeature));\n    targetFeatureIndex = (targetFeature == null) ? -1 : featureNames.indexOf(targetFeature);\n    allToPredictorMap = com.google.common.collect.HashBiMap.create();\n    for (int featureIndex = 0, predictorIndex = 0; featureIndex < featureNames.size(); featureIndex++) {\n        if (isActive(featureIndex) && (!isTarget(featureIndex))) {\n            allToPredictorMap.put(featureIndex, predictorIndex);\n            predictorIndex++;\n        }\n    }\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 5,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 48,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(features != null);\n    this.features = features;\n    this.target = target;\n    com.google.common.hash.Hasher hasher = com.cloudera.oryx.app.rdf.example.Example.HASH.newHasher();\n    for (com.cloudera.oryx.app.rdf.example.Feature feature : features) {\n        if (feature != null) {\n            hasher.putInt(feature.hashCode());\n        }\n    }\n    if (target != null) {\n        hasher.putInt(target.hashCode());\n    }\n    cachedHashCode = hasher.hashCode();\n}",
                "ClassName": "Example",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (tempDir == null) {\n        tempDir = java.nio.file.Files.createTempDirectory(\"OryxTest\").toAbsolutePath();\n        com.cloudera.oryx.common.OryxTest.log.info(\"Test temp dir is {}\", tempDir);\n        tempDir.toFile().deleteOnExit();\n    }\n    return tempDir;\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getTempDir",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 2,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.nio.file.Path finalPath = (java.nio.file.Files.exists(path, java.nio.file.LinkOption.NOFOLLOW_LINKS)) ? path.toRealPath(java.nio.file.LinkOption.NOFOLLOW_LINKS) : path;\n    overlay.put(key, (\"\\\"\" + finalPath.toUri()) + \"\\\"\");\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "set",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.info(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    java.lang.String topicBroker = (\"\\\"localhost:\" + localKafkaBrokerPort) + '\"';\n    java.lang.String topicLockMaster = (\"\\\"localhost:\" + localZKPort) + '\"';\n    overlay.put(\"oryx.input-topic.broker\", topicBroker);\n    overlay.put(\"oryx.input-topic.lock.master\", topicLockMaster);\n    overlay.put(\"oryx.update-topic.broker\", topicBroker);\n    overlay.put(\"oryx.update-topic.lock.master\", topicLockMaster);\n    java.lang.String masterLocalAllCores = \"\\\"local[*]\\\"\";\n    overlay.put(\"oryx.batch.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.speed.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.batch.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.speed.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int zkPort = getZKPort();\n    int bufferMS = com.cloudera.oryx.lambda.AbstractBatchIT.WAIT_BUFFER_IN_WRITES * intervalMsec;\n    com.cloudera.oryx.kafka.util.ProduceData produce = new com.cloudera.oryx.kafka.util.ProduceData(datumGenerator, zkPort, getKafkaBrokerPort(), com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC, howMany, intervalMsec);\n    final java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> keyMessages = new java.util.ArrayList<>();\n    java.lang.Thread.sleep(bufferMS);\n    try (com.cloudera.oryx.common.collection.CloseableIterator<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = new com.cloudera.oryx.kafka.util.ConsumeData(com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, zkPort).iterator();com.cloudera.oryx.lambda.BatchLayer<?, ?, ?> batchLayer = new com.cloudera.oryx.lambda.BatchLayer(config)) {\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Starting consumer thread\");\n        new java.lang.Thread(new com.cloudera.oryx.common.lang.LoggingRunnable() {\n            @java.lang.Override\n            public void doRun() {\n                while (data.hasNext()) {\n                    keyMessages.add(data.next());\n                } \n            }\n        }).start();\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Starting batch layer\");\n        batchLayer.start();\n        java.lang.Thread.sleep(bufferMS);\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Producing data\");\n        produce.start();\n        java.lang.Thread.sleep(bufferMS);\n    } finally {\n        produce.deleteTopic();\n    }\n    return keyMessages;\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 3,
                "MethodName": "startServerProduceConsumeTopics",
                "NumberOfAsynchronousWaits": 3,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 27,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 9
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(java.nio.file.Files.isDirectory(dir), \"%s is not a directory\", dir);\n    java.util.List<java.lang.String> globLevels;\n    if ((glob == null) || glob.isEmpty()) {\n        globLevels = java.util.Collections.singletonList(\"*\");\n    } else {\n        globLevels = java.util.Arrays.asList(glob.split(\"/\"));\n    }\n    com.google.common.base.Preconditions.checkState(!globLevels.isEmpty());\n    java.util.List<java.nio.file.Path> paths = new java.util.ArrayList<>();\n    paths.add(dir);\n    for (java.lang.String globLevel : globLevels) {\n        java.util.List<java.nio.file.Path> newPaths = new java.util.ArrayList<>();\n        for (java.nio.file.Path existingPath : paths) {\n            if (java.nio.file.Files.isDirectory(existingPath)) {\n                try (java.nio.file.DirectoryStream<java.nio.file.Path> stream = java.nio.file.Files.newDirectoryStream(existingPath, globLevel)) {\n                    for (java.nio.file.Path path : stream) {\n                        if (!path.getFileName().toString().startsWith(\".\")) {\n                            newPaths.add(path);\n                        }\n                    }\n                }\n            }\n        }\n        paths = newPaths;\n    }\n    java.util.Collections.sort(paths);\n    return paths;\n}",
                "ClassName": "IOUtils",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "listFiles",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 29,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int minExpectedIntervals = ((dataToWrite + (2 * com.cloudera.oryx.lambda.AbstractBatchIT.WAIT_BUFFER_IN_WRITES)) * writeIntervalMsec) / (1000 * genIntervalSec);\n    org.junit.Assert.assertTrue(((\"Expected \" + minExpectedIntervals) + \" intervals (or up to +4 more) but got \") + numIntervals, (numIntervals >= minExpectedIntervals) && (numIntervals <= (minExpectedIntervals + 4)));\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkIntervals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (java.io.InputStream in = com.cloudera.oryx.common.io.IOUtils.readMaybeCompressed(path)) {\n        return com.cloudera.oryx.common.pmml.PMMLUtils.read(in);\n    }\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "read",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (java.io.StringWriter out = new java.io.StringWriter()) {\n        org.jpmml.model.JAXBUtil.marshalPMML(pmml, new javax.xml.transform.stream.StreamResult(out));\n        return out.toString();\n    } catch (javax.xml.bind.JAXBException | java.io.IOException e) {\n        throw new java.lang.IllegalStateException(e);\n    }\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "toString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    for (java.util.Map.Entry<java.lang.String, ?> e : expected.entrySet()) {\n        java.lang.String key = e.getKey();\n        org.junit.Assert.assertEquals((\"Value for key \" + key) + \" did not match\", e.getValue().toString(), com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionValue(pmml, key));\n    }\n}",
                "ClassName": "AbstractAppMLlibIT",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 4,
                "MethodName": "checkExtensions",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings categoricalValueEncodings = com.cloudera.oryx.app.pmml.AppPMMLUtils.buildCategoricalValueEncodings(pmml.getDataDictionary(), schema);\n    java.util.List<org.dmg.pmml.Model> models = pmml.getModels();\n    com.google.common.base.Preconditions.checkArgument(models.size() == 1);\n    org.dmg.pmml.Model model = models.get(0);\n    com.google.common.base.Preconditions.checkArgument(schema.isClassification() == (model.getFunctionName() == org.dmg.pmml.MiningFunctionType.CLASSIFICATION));\n    com.cloudera.oryx.app.rdf.tree.DecisionTree[] trees;\n    double[] weights;\n    if (model instanceof org.dmg.pmml.MiningModel) {\n        org.dmg.pmml.MiningModel miningModel = ((org.dmg.pmml.MiningModel) (model));\n        org.dmg.pmml.Segmentation segmentation = miningModel.getSegmentation();\n        com.google.common.base.Preconditions.checkArgument((segmentation.getMultipleModelMethod() == org.dmg.pmml.MultipleModelMethodType.WEIGHTED_AVERAGE) || (segmentation.getMultipleModelMethod() == org.dmg.pmml.MultipleModelMethodType.WEIGHTED_MAJORITY_VOTE));\n        java.util.List<org.dmg.pmml.Segment> segments = segmentation.getSegments();\n        com.google.common.base.Preconditions.checkArgument(!segments.isEmpty());\n        trees = new com.cloudera.oryx.app.rdf.tree.DecisionTree[segments.size()];\n        weights = new double[trees.length];\n        for (int i = 0; i < trees.length; i++) {\n            org.dmg.pmml.Segment segment = segments.get(i);\n            com.google.common.base.Preconditions.checkArgument(segment.getPredicate() instanceof org.dmg.pmml.True);\n            weights[i] = segment.getWeight();\n            org.dmg.pmml.TreeModel treeModel = ((org.dmg.pmml.TreeModel) (segment.getModel()));\n            com.cloudera.oryx.app.rdf.tree.TreeNode root = com.cloudera.oryx.app.rdf.RDFPMMLUtils.translateFromPMML(treeModel.getNode(), categoricalValueEncodings, schema);\n            trees[i] = new com.cloudera.oryx.app.rdf.tree.DecisionTree(root);\n        }\n    } else {\n        com.cloudera.oryx.app.rdf.tree.TreeNode root = com.cloudera.oryx.app.rdf.RDFPMMLUtils.translateFromPMML(((org.dmg.pmml.TreeModel) (model)).getNode(), categoricalValueEncodings, schema);\n        trees = new com.cloudera.oryx.app.rdf.tree.DecisionTree[]{ new com.cloudera.oryx.app.rdf.tree.DecisionTree(root) };\n        weights = new double[]{ 1.0 };\n    }\n    java.util.List<java.lang.String> featureNames = schema.getFeatureNames();\n    java.util.List<org.dmg.pmml.MiningField> miningFields = model.getMiningSchema().getMiningFields();\n    com.google.common.base.Preconditions.checkArgument(featureNames.size() == miningFields.size());\n    double[] featureImportances = new double[featureNames.size()];\n    for (int i = 0; i < miningFields.size(); i++) {\n        org.dmg.pmml.MiningField field = miningFields.get(i);\n        java.lang.String fieldName = field.getName().getValue();\n        com.google.common.base.Preconditions.checkArgument(fieldName.equals(featureNames.get(i)));\n        java.lang.Double importance = field.getImportance();\n        if (importance != null) {\n            int featureNumber = featureNames.indexOf(fieldName);\n            featureImportances[featureNumber] = importance;\n        }\n    }\n    return new com.cloudera.oryx.common.collection.Pair<>(new com.cloudera.oryx.app.rdf.tree.DecisionForest(trees, weights, featureImportances), categoricalValueEncodings);\n}",
                "ClassName": "RDFPMMLUtils",
                "CyclomaticComplexity": 4,
                "DepthOfInheritance": 0,
                "MethodName": "read",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 45,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return first;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return doGetMap(index);\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getValueEncodingMap",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.rdf.predict.WeightedPrediction.voteOnFeature(com.google.common.collect.Lists.transform(java.util.Arrays.asList(trees), new com.cloudera.oryx.app.rdf.tree.DecisionForest.TreeToPredictionFunction(test)), weights);\n}",
                "ClassName": "DecisionForest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "predict",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value == 0.0F ? com.cloudera.oryx.app.rdf.example.NumericFeature.ZERO : new com.cloudera.oryx.app.rdf.example.NumericFeature(value);\n}",
                "ClassName": "NumericFeature",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "forValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return maxCategory;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getMostProbableCategoryEncoding",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1420556935",
        "TotalCyclomaticComplexity": 22,
        "TotalNumberOfAsynchronousWaits": 3,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 2,
        "TotalNumberOfLines": 257,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 9
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.speed.model-manager-class\", com.cloudera.oryx.lambda.speed.MockSpeedModelManager.class.getName());\n    overlayConfig.put(\"oryx.speed.streaming.generation-interval-sec\", 3);\n    overlayConfig.put(\"oryx.speed.streaming.block-interval-sec\", 1);\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> updates = startServerProduceConsumeTopics(config, 1000, 10);\n    int inputToUpdate = 0;\n    int receivedUpdates = 0;\n    int models = 0;\n    for (com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> update : updates) {\n        java.lang.String key = update.getFirst();\n        java.lang.String message = update.getSecond();\n        if (message.contains(\",\")) {\n            org.junit.Assert.assertEquals(\"UP\", update.getFirst());\n            inputToUpdate++;\n        } else {\n            boolean shouldBeModel = (java.lang.Integer.parseInt(message) % 10) == 0;\n            org.junit.Assert.assertEquals(shouldBeModel ? \"MODEL\" : \"UP\", key);\n            if (shouldBeModel) {\n                models++;\n            } else {\n                receivedUpdates++;\n            }\n        }\n    }\n    com.cloudera.oryx.lambda.speed.SpeedLayerIT.log.info(\"Received {} models, {} inputs converted to updates, and {} other updates\", models, inputToUpdate, receivedUpdates);\n    org.junit.Assert.assertEquals(1, models);\n    org.junit.Assert.assertEquals(9, receivedUpdates);\n    org.junit.Assert.assertEquals(1000, inputToUpdate);\n}",
        "ClassName": "SpeedLayerIT",
        "Commit": "f37e9150cca8f2f7b41e370587005ad14b6f9d91",
        "CyclomaticComplexity": 3,
        "Date": "Fri, 9 Jan 2015 23:47:59 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testSpeedLayer",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 5,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 32,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.info(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    java.lang.String topicBroker = (\"\\\"localhost:\" + localKafkaBrokerPort) + '\"';\n    java.lang.String topicLockMaster = (\"\\\"localhost:\" + localZKPort) + '\"';\n    overlay.put(\"oryx.input-topic.broker\", topicBroker);\n    overlay.put(\"oryx.input-topic.lock.master\", topicLockMaster);\n    overlay.put(\"oryx.update-topic.broker\", topicBroker);\n    overlay.put(\"oryx.update-topic.lock.master\", topicLockMaster);\n    java.lang.String masterLocalAllCores = \"\\\"local[*]\\\"\";\n    overlay.put(\"oryx.batch.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.speed.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.batch.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.speed.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return startServerProduceConsumeTopics(config, new com.cloudera.oryx.kafka.util.DefaultCSVDatumGenerator(), new com.cloudera.oryx.lambda.speed.MockModelGenerator(), howMany, howManyUpdate);\n}",
                "ClassName": "AbstractSpeedIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServerProduceConsumeTopics",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return first;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1420847279",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 45,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    int zkPort = com.cloudera.oryx.common.io.IOUtils.chooseFreePort();\n    int kafkaBrokerPort = com.cloudera.oryx.common.io.IOUtils.chooseFreePort();\n    try (com.cloudera.oryx.zk.LocalZKServer localZKServer = new com.cloudera.oryx.zk.LocalZKServer(zkPort);com.cloudera.oryx.kafka.util.LocalKafkaBroker localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(kafkaBrokerPort, zkPort)) {\n        localZKServer.start();\n        localKafkaBroker.start();\n        com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", zkPort, com.cloudera.oryx.kafka.util.ProduceConsumeIT.TOPIC);\n        com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", zkPort, com.cloudera.oryx.kafka.util.ProduceConsumeIT.TOPIC);\n        com.cloudera.oryx.kafka.util.ProduceData produce = new com.cloudera.oryx.kafka.util.ProduceData(new com.cloudera.oryx.kafka.util.DefaultCSVDatumGenerator(), zkPort, localKafkaBroker.getPort(), com.cloudera.oryx.kafka.util.ProduceConsumeIT.TOPIC, com.cloudera.oryx.kafka.util.ProduceConsumeIT.NUM_DATA, 50);\n        final java.util.Collection<java.lang.Integer> keys = new java.util.HashSet<>();\n        try (com.cloudera.oryx.common.collection.CloseableIterator<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = new com.cloudera.oryx.kafka.util.ConsumeData(com.cloudera.oryx.kafka.util.ProduceConsumeIT.TOPIC, zkPort).iterator()) {\n            com.cloudera.oryx.kafka.util.ProduceConsumeIT.log.info(\"Starting consumer thread\");\n            com.cloudera.oryx.common.lang.WaitToScheduleRunnable readData = new com.cloudera.oryx.common.lang.WaitToScheduleRunnable(new com.cloudera.oryx.common.lang.LoggingRunnable() {\n                @java.lang.Override\n                public void doRun() {\n                    while (data.hasNext()) {\n                        keys.add(java.lang.Integer.valueOf(data.next().getFirst()));\n                    } \n                }\n            });\n            new java.lang.Thread(readData).start();\n            readData.awaitScheduling();\n            com.cloudera.oryx.kafka.util.ProduceConsumeIT.log.info(\"Producing data\");\n            produce.start();\n            java.lang.Thread.sleep(1000);\n        } finally {\n            com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", zkPort, com.cloudera.oryx.kafka.util.ProduceConsumeIT.TOPIC);\n        }\n        org.junit.Assert.assertEquals(com.cloudera.oryx.kafka.util.ProduceConsumeIT.NUM_DATA, keys.size());\n        for (int i = 0; i < com.cloudera.oryx.kafka.util.ProduceConsumeIT.NUM_DATA; i++) {\n            org.junit.Assert.assertTrue(keys.contains(i));\n        }\n    }\n}",
        "ClassName": "ProduceConsumeIT",
        "Commit": "f37e9150cca8f2f7b41e370587005ad14b6f9d91",
        "CyclomaticComplexity": 2,
        "Date": "Fri, 9 Jan 2015 23:47:59 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 8,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testProduceConsume",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 1,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 34,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 5,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this.port = port;\n}",
                "ClassName": "LocalZKServer",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    this.port = port;\n    this.zkPort = zkPort;\n}",
                "ClassName": "LocalKafkaBroker",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkNotNull(datumGenerator);\n    com.google.common.base.Preconditions.checkArgument(zkPort > 0);\n    com.google.common.base.Preconditions.checkArgument(kafkaPort > 0);\n    com.google.common.base.Preconditions.checkNotNull(topic);\n    com.google.common.base.Preconditions.checkArgument(howMany > 0);\n    com.google.common.base.Preconditions.checkArgument(intervalMsec >= 0);\n    this.datumGenerator = datumGenerator;\n    this.zkPort = zkPort;\n    this.kafkaPort = kafkaPort;\n    this.topic = topic;\n    this.howMany = howMany;\n    this.intervalMsec = intervalMsec;\n}",
                "ClassName": "ProduceData",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 14,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n}",
                "ClassName": "DefaultCSVDatumGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    this.topic = topic;\n    this.zkPort = zkPort;\n}",
                "ClassName": "ConsumeData",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    this.underlying = underlying;\n    this.scheduleLatch = new java.util.concurrent.CountDownLatch(1);\n}",
                "ClassName": "WaitToScheduleRunnable",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 4
            },
            {
                "Body": "{\n}",
                "ClassName": "1",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (java.net.ServerSocket socket = new java.net.ServerSocket(0, 0)) {\n        return socket.getLocalPort();\n    }\n}",
                "ClassName": "IOUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "chooseFreePort",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.zk.LocalZKServer.log.info(\"Starting Zookeeper on port {}\", port);\n    dataDir = java.nio.file.Files.createTempDirectory(com.cloudera.oryx.zk.LocalZKServer.class.getSimpleName());\n    dataDir.toFile().deleteOnExit();\n    java.util.Properties properties = new java.util.Properties();\n    properties.setProperty(\"dataDir\", dataDir.toAbsolutePath().toString());\n    properties.setProperty(\"clientPort\", java.lang.Integer.toString(port));\n    com.cloudera.oryx.zk.LocalZKServer.log.info(\"ZK config: {}\", properties);\n    org.apache.zookeeper.server.quorum.QuorumPeerConfig quorumConfig = new org.apache.zookeeper.server.quorum.QuorumPeerConfig();\n    try {\n        quorumConfig.parseProperties(properties);\n    } catch (org.apache.zookeeper.server.quorum.QuorumPeerConfig e) {\n        throw new java.lang.IllegalArgumentException(e);\n    }\n    purgeManager = new org.apache.zookeeper.server.DatadirCleanupManager(quorumConfig.getDataDir(), quorumConfig.getDataLogDir(), quorumConfig.getSnapRetainCount(), quorumConfig.getPurgeInterval());\n    purgeManager.start();\n    org.apache.zookeeper.server.ServerConfig serverConfig = new org.apache.zookeeper.server.ServerConfig();\n    serverConfig.readFrom(quorumConfig);\n    zkServer = new org.apache.zookeeper.server.ZooKeeperServer();\n    zkServer.setTickTime(serverConfig.getTickTime());\n    zkServer.setMinSessionTimeout(serverConfig.getMinSessionTimeout());\n    zkServer.setMaxSessionTimeout(serverConfig.getMaxSessionTimeout());\n    transactionLog = new org.apache.zookeeper.server.persistence.FileTxnSnapLog(new java.io.File(serverConfig.getDataLogDir().toString()), new java.io.File(serverConfig.getDataDir().toString()));\n    zkServer.setTxnLogFactory(transactionLog);\n    connectionFactory = org.apache.zookeeper.server.ServerCnxnFactory.createFactory();\n    connectionFactory.configure(serverConfig.getClientPortAddress(), serverConfig.getMaxClientCnxns());\n    connectionFactory.startup(zkServer);\n}",
                "ClassName": "LocalZKServer",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "start",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 8,
                "NumberOfLines": 28,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.kafka.util.LocalKafkaBroker.log.info(\"Starting Kafka broker on port {}\", port);\n    logsDir = java.nio.file.Files.createTempDirectory(com.cloudera.oryx.kafka.util.LocalKafkaBroker.class.getSimpleName());\n    logsDir.toFile().deleteOnExit();\n    java.util.Properties properties = new java.util.Properties();\n    properties.setProperty(\"broker.id\", java.lang.Integer.toString(com.cloudera.oryx.kafka.util.LocalKafkaBroker.TEST_BROKER_ID));\n    properties.setProperty(\"log.dirs\", logsDir.toAbsolutePath().toString());\n    properties.setProperty(\"port\", java.lang.Integer.toString(port));\n    properties.setProperty(\"zookeeper.connect\", \"localhost:\" + zkPort);\n    kafkaServer = new kafka.server.KafkaServerStartable(new kafka.server.KafkaConfig(properties));\n    kafkaServer.startup();\n}",
                "ClassName": "LocalKafkaBroker",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "start",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 2,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.I0Itec.zkclient.ZkClient zkClient = com.cloudera.oryx.kafka.util.KafkaUtils.buildClient(host, port);\n    if (kafka.admin.AdminUtils.topicExists(zkClient, topic)) {\n        com.cloudera.oryx.kafka.util.KafkaUtils.log.info(\"Deleting topic {}\", topic);\n        try {\n            kafka.admin.AdminUtils.deleteTopic(zkClient, topic);\n            com.cloudera.oryx.kafka.util.KafkaUtils.log.info(\"Deleted Zookeeper topic {}\", topic);\n        } catch (org.I0Itec.zkclient.exception.ZkNodeExistsException nee) {\n            com.cloudera.oryx.kafka.util.KafkaUtils.log.info(\"Delete was already scheduled for Zookeeper topic {}\", topic);\n        } finally {\n            zkClient.close();\n        }\n    } else {\n        com.cloudera.oryx.kafka.util.KafkaUtils.log.info(\"No need to delete topic {} as it does not exist\", topic);\n    }\n}",
                "ClassName": "KafkaUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "deleteTopic",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 16,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.I0Itec.zkclient.ZkClient zkClient = com.cloudera.oryx.kafka.util.KafkaUtils.buildClient(host, port);\n    if (kafka.admin.AdminUtils.topicExists(zkClient, topic)) {\n        com.cloudera.oryx.kafka.util.KafkaUtils.log.info(\"No need to create topic {} as it already exists\", topic);\n    } else {\n        com.cloudera.oryx.kafka.util.KafkaUtils.log.info(\"Creating topic {}\", topic);\n        try {\n            kafka.admin.AdminUtils.createTopic(zkClient, topic, 1, 1, new java.util.Properties());\n            com.cloudera.oryx.kafka.util.KafkaUtils.log.info(\"Created Zookeeper topic {}\", topic);\n        } catch (kafka.common.TopicExistsException tee) {\n            com.cloudera.oryx.kafka.util.KafkaUtils.log.info(\"Zookeeper topic {} already exists\", topic);\n        } finally {\n            zkClient.close();\n        }\n    }\n}",
                "ClassName": "KafkaUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "maybeCreateTopic",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 16,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return port;\n}",
                "ClassName": "LocalKafkaBroker",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getPort",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Properties consumerProps = new java.util.Properties();\n    consumerProps.setProperty(\"group.id\", \"OryxGroup-ConsumeData\");\n    consumerProps.setProperty(\"zookeeper.connect\", \"localhost:\" + zkPort);\n    kafka.consumer.ConsumerConfig consumerConfig = new kafka.consumer.ConsumerConfig(consumerProps);\n    kafka.javaapi.consumer.ConsumerConnector consumer = kafka.consumer.Consumer.createJavaConsumerConnector(consumerConfig);\n    return new com.cloudera.oryx.kafka.util.ConsumeDataIterator(topic, consumer);\n}",
                "ClassName": "ConsumeData",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "iterator",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n}",
                "ClassName": "LoggingRunnable",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return first;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    scheduleLatch.await();\n}",
                "ClassName": "WaitToScheduleRunnable",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "awaitScheduling",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 2
            },
            {
                "Body": "{\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", zkPort, topic);\n    org.apache.commons.math3.random.RandomGenerator random = com.cloudera.oryx.common.random.RandomManager.getRandom();\n    java.util.Properties producerProps = new java.util.Properties();\n    producerProps.setProperty(\"metadata.broker.list\", \"localhost:\" + kafkaPort);\n    producerProps.setProperty(\"serializer.class\", \"kafka.serializer.StringEncoder\");\n    kafka.javaapi.producer.Producer<java.lang.String, java.lang.String> producer = new kafka.javaapi.producer.Producer(new kafka.producer.ProducerConfig(producerProps));\n    try {\n        for (int i = 0; i < howMany; i++) {\n            com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> datum = datumGenerator.generate(i, random);\n            kafka.producer.KeyedMessage<java.lang.String, java.lang.String> keyedMessage = new kafka.producer.KeyedMessage(topic, datum.getFirst(), datum.getSecond());\n            producer.send(keyedMessage);\n            com.cloudera.oryx.kafka.util.ProduceData.log.debug(\"Sent datum {} = {}\", keyedMessage.key(), keyedMessage.message());\n            if (intervalMsec > 0) {\n                java.lang.Thread.sleep(intervalMsec);\n            }\n        }\n    } finally {\n        producer.close();\n    }\n}",
                "ClassName": "ProduceData",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "start",
                "NumberOfAsynchronousWaits": 1,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 21,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 2
            }
        ],
        "Timestamp": "1420847279",
        "TotalCyclomaticComplexity": 4,
        "TotalNumberOfAsynchronousWaits": 1,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 10,
        "TotalNumberOfLines": 150,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 8
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.speed.model-manager-class\", com.cloudera.oryx.app.speed.als.ALSSpeedModelManager.class.getName());\n    overlayConfig.put(\"oryx.speed.streaming.generation-interval-sec\", 5);\n    overlayConfig.put(\"oryx.speed.streaming.block-interval-sec\", 1);\n    overlayConfig.put(\"oryx.als.hyperparams.features\", 2);\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> updates = startServerProduceConsumeTopics(config, new com.cloudera.oryx.app.speed.als.MockALSInputGenerator(), new com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator(), 9, 10);\n    if (com.cloudera.oryx.app.speed.als.ALSSpeedIT.log.isDebugEnabled()) {\n        for (com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> update : updates) {\n            com.cloudera.oryx.app.speed.als.ALSSpeedIT.log.debug(\"{}\", update);\n        }\n    }\n    org.junit.Assert.assertEquals(19, updates.size());\n    org.junit.Assert.assertEquals(\"MODEL\", updates.get(0).getFirst());\n    org.junit.Assert.assertEquals(2, java.lang.Integer.parseInt(com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionValue(com.cloudera.oryx.common.pmml.PMMLUtils.fromString(updates.get(0).getSecond()), \"features\")));\n    for (int i = 1; i <= 9; i++) {\n        org.junit.Assert.assertEquals(\"UP\", updates.get(i).getFirst());\n        java.util.List<?> update = com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.readValue(updates.get(i).getSecond(), java.util.List.class);\n        boolean isX = \"X\".equals(update.get(0).toString());\n        java.lang.String id = update.get(1).toString();\n        float[] expected = (isX ? com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator.X : com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator.Y).get(id);\n        com.cloudera.oryx.common.OryxTest.assertArrayEquals(expected, com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.convertValue(update.get(2), float[].class));\n        @java.lang.SuppressWarnings(\"unchecked\")\n        java.util.Collection<java.lang.String> knownUsersItems = ((java.util.Collection<java.lang.String>) (update.get(3)));\n        java.util.Collection<java.lang.String> expectedKnownUsersItems = (isX ? com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator.A : com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator.At).get(id);\n        org.junit.Assert.assertTrue(knownUsersItems.containsAll(expectedKnownUsersItems));\n        org.junit.Assert.assertTrue(expectedKnownUsersItems.containsAll(knownUsersItems));\n    }\n    java.util.Map<java.lang.String, float[]> X = com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator.buildMatrix(100, new double[][]{ new double[]{ -0.2085992442067743, 0.2523213360207475 }, new double[]{ -0.2247280310573082, -0.1929485017146139 }, new double[]{ -0.1559213545536042, 0.3977631145260019 }, new double[]{ -0.3006521945941331, -0.1223970296839849 }, new double[]{ -0.0920529503873587, -0.3747183657047325 } });\n    java.util.Map<java.lang.String, float[]> Y = com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator.buildMatrix(105, new double[][]{ new double[]{ -0.196632880060491, 0.0957410625834965 }, new double[]{ -0.2384041642283309, -0.5085072425781164 }, new double[]{ -0.343609754906773, 0.2466687004987837 }, new double[]{ -0.0602045721873638, 0.2931111530627041 } });\n    for (int i = 10; i <= 18; i++) {\n        org.junit.Assert.assertEquals(\"UP\", updates.get(i).getFirst());\n        java.util.List<?> update = com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.readValue(updates.get(i).getSecond(), java.util.List.class);\n        boolean isX = \"X\".equals(update.get(0).toString());\n        java.lang.String id = update.get(1).toString();\n        float[] expected = (isX ? X : Y).get(id);\n        org.junit.Assert.assertArrayEquals(expected, com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.convertValue(update.get(2), float[].class), 1.0E-5F);\n        java.lang.String otherID = java.lang.Integer.toString(java.lang.Integer.parseInt(id) - 99);\n        @java.lang.SuppressWarnings(\"unchecked\")\n        java.util.Collection<java.lang.String> knownUsersItems = ((java.util.Collection<java.lang.String>) (update.get(3)));\n        org.junit.Assert.assertEquals(1, knownUsersItems.size());\n        org.junit.Assert.assertEquals(otherID, knownUsersItems.iterator().next());\n    }\n}",
        "ClassName": "ALSSpeedIT",
        "Commit": "f1f3938b461ea318a99769c990229c514666f8a9",
        "CyclomaticComplexity": 4,
        "Date": "Wed, 14 Jan 2015 23:19:41 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testALSSpeed",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 10,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 46,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "MockALSInputGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n}",
                "ClassName": "MockALSModelUpdateGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    java.lang.String topicBroker = (\"\\\"localhost:\" + localKafkaBrokerPort) + '\"';\n    java.lang.String topicLockMaster = (\"\\\"localhost:\" + localZKPort) + '\"';\n    overlay.put(\"oryx.input-topic.broker\", topicBroker);\n    overlay.put(\"oryx.input-topic.lock.master\", topicLockMaster);\n    overlay.put(\"oryx.update-topic.broker\", topicBroker);\n    overlay.put(\"oryx.update-topic.lock.master\", topicLockMaster);\n    java.lang.String masterLocalAllCores = \"\\\"local[*]\\\"\";\n    overlay.put(\"oryx.batch.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.speed.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.batch.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.speed.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int zkPort = getZKPort();\n    int kafkaPort = getKafkaBrokerPort();\n    com.cloudera.oryx.kafka.util.ProduceData inputProducer = new com.cloudera.oryx.kafka.util.ProduceData(inputGenerator, zkPort, kafkaPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC, howManyInput, 10);\n    com.cloudera.oryx.kafka.util.ProduceData updateProducer = new com.cloudera.oryx.kafka.util.ProduceData(updateGenerator, zkPort, kafkaPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, howManyUpdate, 10);\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> keyMessages;\n    try (com.cloudera.oryx.common.collection.CloseableIterator<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = new com.cloudera.oryx.kafka.util.ConsumeData(com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, zkPort).iterator();com.cloudera.oryx.lambda.speed.SpeedLayer<?, ?, ?> speedLayer = new com.cloudera.oryx.lambda.speed.SpeedLayer(config)) {\n        com.cloudera.oryx.lambda.speed.AbstractSpeedIT.log.info(\"Starting speed layer\");\n        speedLayer.start();\n        com.cloudera.oryx.lambda.speed.AbstractSpeedIT.log.info(\"Starting consumer thread\");\n        com.cloudera.oryx.kafka.util.ConsumeTopicRunnable consumeUpdate = new com.cloudera.oryx.kafka.util.ConsumeTopicRunnable(data);\n        new java.lang.Thread(consumeUpdate).start();\n        java.lang.Thread.sleep(3000);\n        com.cloudera.oryx.lambda.speed.AbstractSpeedIT.log.info(\"Producing updates\");\n        updateProducer.start();\n        com.cloudera.oryx.lambda.speed.AbstractSpeedIT.log.info(\"Producing input\");\n        inputProducer.start();\n        long genIntervalSec = config.getInt(\"oryx.speed.streaming.generation-interval-sec\");\n        java.lang.Thread.sleep(genIntervalSec * 1000);\n        keyMessages = consumeUpdate.getKeyMessages();\n    } finally {\n        inputProducer.deleteTopic();\n        updateProducer.deleteTopic();\n    }\n    return keyMessages;\n}",
                "ClassName": "AbstractSpeedIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServerProduceConsumeTopics",
                "NumberOfAsynchronousWaits": 2,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 26,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 7
            },
            {
                "Body": "{\n    return first;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return org.jpmml.model.JAXBUtil.unmarshalPMML(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(pmmlString)));\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "fromString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertArrayEquals(expecteds, actuals, com.cloudera.oryx.common.OryxTest.FLOAT_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertArrayEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, float[]> matrix = new java.util.HashMap<>(rows.length);\n    int index = startIndex;\n    for (double[] row : rows) {\n        matrix.put(java.lang.Integer.toString(index), com.cloudera.oryx.common.math.VectorMath.toFloats(row));\n        index++;\n    }\n    return java.util.Collections.unmodifiableMap(matrix);\n}",
                "ClassName": "MockALSModelUpdateGenerator",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "buildMatrix",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1421277581",
        "TotalCyclomaticComplexity": 2,
        "TotalNumberOfAsynchronousWaits": 2,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 87,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 7
    },
    {
        "Body": "{\n    java.util.Set<java.lang.Integer> ports = new java.util.HashSet<>();\n    for (int i = 0; i < 10; i++) {\n        ports.add(com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    }\n    org.junit.Assert.assertEquals(10, ports.size());\n}",
        "ClassName": "IOUtilsTest",
        "Commit": "c530d925c30a406a19475d435c15d1fdd9fb9643",
        "CyclomaticComplexity": 1,
        "Date": "Mon, 9 Feb 2015 17:23:52 -0500",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDistinctFreePorts",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 5,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    try (java.net.ServerSocket socket = new java.net.ServerSocket(0, 0)) {\n        return socket.getLocalPort();\n    }\n}",
                "ClassName": "IOUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "chooseFreePort",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1423520632",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 5,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.speed.model-manager-class\", com.cloudera.oryx.app.speed.rdf.RDFSpeedModelManager.class.getName());\n    overlayConfig.put(\"oryx.speed.streaming.generation-interval-sec\", 5);\n    overlayConfig.put(\"oryx.speed.streaming.block-interval-sec\", 1);\n    overlayConfig.put(\"oryx.input-schema.feature-names\", \"[\\\"color\\\",\\\"fruit\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.numeric-features\", \"[]\");\n    overlayConfig.put(\"oryx.input-schema.target-feature\", \"fruit\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> updates = startServerProduceConsumeTopics(config, new com.cloudera.oryx.app.speed.rdf.MockRDFClassificationInputGenerator(), new com.cloudera.oryx.app.speed.rdf.MockRDFClassificationModelGenerator(), com.cloudera.oryx.app.speed.rdf.RDFSpeedIT.NUM_INPUT, 1);\n    if (com.cloudera.oryx.app.speed.rdf.RDFSpeedIT.log.isDebugEnabled()) {\n        for (com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> update : updates) {\n            com.cloudera.oryx.app.speed.rdf.RDFSpeedIT.log.debug(\"{}\", update);\n        }\n    }\n    int numUpdates = updates.size();\n    org.junit.Assert.assertTrue((numUpdates >= 3) && ((numUpdates % 2) != 0));\n    org.junit.Assert.assertEquals(\"MODEL\", updates.get(0).getFirst());\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.fromString(updates.get(0).getSecond());\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings encodings = com.cloudera.oryx.app.pmml.AppPMMLUtils.buildCategoricalValueEncodings(pmml.getDataDictionary());\n    com.cloudera.oryx.app.speed.rdf.RDFSpeedIT.log.info(\"{}\", encodings);\n    java.util.Map<java.lang.String, java.lang.Integer> fruitEncoding = encodings.getValueEncodingMap(0);\n    java.lang.String red = java.lang.Integer.toString(fruitEncoding.get(\"red\"));\n    java.lang.String yellow = java.lang.Integer.toString(fruitEncoding.get(\"yellow\"));\n    for (int i = 1; i < numUpdates; i++) {\n        com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> update = updates.get(i);\n        org.junit.Assert.assertEquals(\"UP\", update.getFirst());\n        java.util.List<?> fields = com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.readValue(update.getSecond(), java.util.List.class);\n        int treeID = ((java.lang.Integer) (fields.get(0)));\n        java.lang.String nodeID = fields.get(1).toString();\n        @java.lang.SuppressWarnings(\"unchecked\")\n        java.util.Map<java.lang.String, java.lang.Integer> countMap = ((java.util.Map<java.lang.String, java.lang.Integer>) (fields.get(2)));\n        org.junit.Assert.assertEquals(0, treeID);\n        org.junit.Assert.assertTrue(\"r-\".equals(nodeID) || \"r+\".equals(nodeID));\n        int yellowCount = (countMap.containsKey(yellow)) ? countMap.get(yellow) : 0;\n        int redCount = (countMap.containsKey(red)) ? countMap.get(red) : 0;\n        int count = yellowCount + redCount;\n        org.junit.Assert.assertTrue(count > 0);\n        org.apache.commons.math3.distribution.BinomialDistribution dist = new org.apache.commons.math3.distribution.BinomialDistribution(count, 0.9);\n        if (\"r+\".equals(nodeID)) {\n            com.cloudera.oryx.app.speed.rdf.RDFSpeedIT.checkProbability(yellowCount, count, dist);\n        } else {\n            com.cloudera.oryx.app.speed.rdf.RDFSpeedIT.checkProbability(redCount, count, dist);\n        }\n    }\n}",
        "ClassName": "RDFSpeedIT",
        "Commit": "aedeaf59cb865c44f12db297a852e0ee43d6d317",
        "CyclomaticComplexity": 4,
        "Date": "Thu, 26 Feb 2015 15:40:40 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRDFSpeedClassification",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 6,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 47,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "MockRDFClassificationInputGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n}",
                "ClassName": "MockRDFClassificationModelGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    java.lang.String topicBroker = (\"\\\"localhost:\" + localKafkaBrokerPort) + '\"';\n    java.lang.String topicLockMaster = (\"\\\"localhost:\" + localZKPort) + '\"';\n    overlay.put(\"oryx.input-topic.broker\", topicBroker);\n    overlay.put(\"oryx.input-topic.lock.master\", topicLockMaster);\n    overlay.put(\"oryx.update-topic.broker\", topicBroker);\n    overlay.put(\"oryx.update-topic.lock.master\", topicLockMaster);\n    java.lang.String masterLocalAllCores = \"\\\"local[*]\\\"\";\n    overlay.put(\"oryx.batch.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.speed.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.batch.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.speed.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int zkPort = getZKPort();\n    int kafkaPort = getKafkaBrokerPort();\n    com.cloudera.oryx.kafka.util.ProduceData inputProducer = new com.cloudera.oryx.kafka.util.ProduceData(inputGenerator, zkPort, kafkaPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC, howManyInput, 10);\n    com.cloudera.oryx.kafka.util.ProduceData updateProducer = new com.cloudera.oryx.kafka.util.ProduceData(updateGenerator, zkPort, kafkaPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, howManyUpdate, 10);\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> keyMessages;\n    try (com.cloudera.oryx.common.collection.CloseableIterator<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = new com.cloudera.oryx.kafka.util.ConsumeData(com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, zkPort).iterator();com.cloudera.oryx.lambda.speed.SpeedLayer<?, ?, ?> speedLayer = new com.cloudera.oryx.lambda.speed.SpeedLayer(config)) {\n        com.cloudera.oryx.lambda.speed.AbstractSpeedIT.log.info(\"Starting speed layer\");\n        speedLayer.start();\n        com.cloudera.oryx.lambda.speed.AbstractSpeedIT.log.info(\"Starting consumer thread\");\n        com.cloudera.oryx.kafka.util.ConsumeTopicRunnable consumeUpdate = new com.cloudera.oryx.kafka.util.ConsumeTopicRunnable(data);\n        new java.lang.Thread(consumeUpdate).start();\n        java.lang.Thread.sleep(3000);\n        com.cloudera.oryx.lambda.speed.AbstractSpeedIT.log.info(\"Producing updates\");\n        updateProducer.start();\n        long genIntervalSec = config.getInt(\"oryx.speed.streaming.generation-interval-sec\");\n        java.lang.Thread.sleep(genIntervalSec * 1000);\n        com.cloudera.oryx.lambda.speed.AbstractSpeedIT.log.info(\"Producing input\");\n        inputProducer.start();\n        java.lang.Thread.sleep(genIntervalSec * 1000);\n        keyMessages = consumeUpdate.getKeyMessages();\n    } finally {\n        inputProducer.deleteTopic();\n        updateProducer.deleteTopic();\n    }\n    return keyMessages;\n}",
                "ClassName": "AbstractSpeedIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServerProduceConsumeTopics",
                "NumberOfAsynchronousWaits": 3,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 27,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 9
            },
            {
                "Body": "{\n    return first;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return org.jpmml.model.JAXBUtil.unmarshalPMML(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(pmmlString)));\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "fromString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return doGetMap(index);\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getValueEncodingMap",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    double expected = 0.9 * count;\n    double probAsExtreme = (majorityCount <= expected) ? dist.cumulativeProbability(majorityCount) : 1.0 - dist.cumulativeProbability(majorityCount);\n    org.junit.Assert.assertTrue(((((majorityCount + \" should be about \") + expected) + \" (~90% of \") + count) + \")\", probAsExtreme >= 0.001);\n}",
                "ClassName": "RDFSpeedIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 4,
                "MethodName": "checkProbability",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1424965240",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 3,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 84,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 9
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/recommendToMany/U0/U2\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(2, recs, false);\n    org.junit.Assert.assertEquals(\"I1\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(0.3434463501376608, recs.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "RecommendToManyTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRecommendToMany",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expectedSize, values.size());\n    for (int i = 0; i < values.size(); i++) {\n        com.cloudera.oryx.app.serving.IDValue value = values.get(i);\n        double thisScore = value.getValue();\n        org.junit.Assert.assertFalse(java.lang.Double.isNaN(thisScore));\n        org.junit.Assert.assertFalse(java.lang.Double.isInfinite(thisScore));\n        if (i > 0) {\n            double lastScore = values.get(i - 1).getValue();\n            if (reverse) {\n                org.junit.Assert.assertTrue(lastScore <= thisScore);\n            } else {\n                org.junit.Assert.assertTrue(lastScore >= thisScore);\n            }\n        }\n    }\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 2,
                "MethodName": "testTopByValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 17,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return id;\n}",
                "ClassName": "IDEntity",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value;\n}",
                "ClassName": "IDValue",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 23,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> normal = target(\"/recommendToMany/U4\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(3, normal.size());\n    org.junit.Assert.assertEquals(\"I2\", normal.get(0).getID());\n    org.junit.Assert.assertEquals(0.141347957620267, normal.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> withConsider = target(\"/recommendToMany/U4\").queryParam(\"considerKnownItems\", \"true\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(9, withConsider.size());\n    org.junit.Assert.assertEquals(\"I7\", withConsider.get(0).getID());\n    org.junit.Assert.assertEquals(2.00474569593095, withConsider.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "RecommendToManyTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testConsiderKnownItems",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 6,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 10,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return id;\n}",
                "ClassName": "IDEntity",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value;\n}",
                "ClassName": "IDValue",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 6,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testOffset(\"/recommendToMany/U0/U6\", 5, 0, 1);\n    testOffset(\"/recommendToMany/U0/U6\", 3, 0, 1);\n    testOffset(\"/recommendToMany/U6\", 1, 1, 1);\n    testOffset(\"/recommendToMany/U6\", 3, 3, 0);\n}",
        "ClassName": "RecommendToManyTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testOffset",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).queryParam(\"offset\", java.lang.Integer.toString(offset)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testOffset",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testHowMany(\"/recommend/U5\", 10, 2);\n    testHowMany(\"/recommend/U5\", 2, 2);\n    testHowMany(\"/recommend/U5\", 1, 1);\n}",
        "ClassName": "RecommendTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testHowMany",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testHowMany",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/classificationDistribution/A,-5,\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.rdf.AbstractRDFServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(\"X\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(((1.0 / 6.0) + (2 * (100.0 / 1400.0))) / 3, recs.get(0).getValue(), com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n    org.junit.Assert.assertEquals(\"Y\", recs.get(1).getID());\n    org.junit.Assert.assertEquals(((2.0 / 6.0) + (2 * (400.0 / 1400.0))) / 3, recs.get(1).getValue(), com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n    org.junit.Assert.assertEquals(\"Z\", recs.get(2).getID());\n    org.junit.Assert.assertEquals(((3.0 / 6.0) + (2 * (900.0 / 1400.0))) / 3, recs.get(2).getValue(), com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
        "ClassName": "ClassificationDistributionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDistribution2",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 6,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 9,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return id;\n}",
                "ClassName": "IDEntity",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value;\n}",
                "ClassName": "IDValue",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 6,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testHowMany(\"/similarity/I0/I2/I4\", 10, 6);\n    testHowMany(\"/similarity/I0/I2/I4\", 9, 6);\n    testHowMany(\"/similarity/I0/I2/I4\", 5, 5);\n}",
        "ClassName": "SimilarityTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testHowMany",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testHowMany",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"similarity/I0/I4/I6\").queryParam(\"rescorerParams\", \"foo\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(4, recs, false);\n    org.junit.Assert.assertEquals(\"I1\", recs.get(1).getID());\n    org.junit.Assert.assertEquals(2.0 * 0.5571406877613947, recs.get(2).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.DOUBLE_EPSILON);\n}",
        "ClassName": "SimilarityTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRescorer",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expectedSize, values.size());\n    for (int i = 0; i < values.size(); i++) {\n        com.cloudera.oryx.app.serving.IDValue value = values.get(i);\n        double thisScore = value.getValue();\n        org.junit.Assert.assertFalse(java.lang.Double.isNaN(thisScore));\n        org.junit.Assert.assertFalse(java.lang.Double.isInfinite(thisScore));\n        if (i > 0) {\n            double lastScore = values.get(i - 1).getValue();\n            if (reverse) {\n                org.junit.Assert.assertTrue(lastScore <= thisScore);\n            } else {\n                org.junit.Assert.assertTrue(lastScore >= thisScore);\n            }\n        }\n    }\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 2,
                "MethodName": "testTopByValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 17,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return id;\n}",
                "ClassName": "IDEntity",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value;\n}",
                "ClassName": "IDValue",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 23,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/because/U0/I0\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(3, recs, false);\n    org.junit.Assert.assertEquals(\"I0\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(1.0, recs.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.DOUBLE_EPSILON);\n}",
        "ClassName": "BecauseTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBecause",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expectedSize, values.size());\n    for (int i = 0; i < values.size(); i++) {\n        com.cloudera.oryx.app.serving.IDValue value = values.get(i);\n        double thisScore = value.getValue();\n        org.junit.Assert.assertFalse(java.lang.Double.isNaN(thisScore));\n        org.junit.Assert.assertFalse(java.lang.Double.isInfinite(thisScore));\n        if (i > 0) {\n            double lastScore = values.get(i - 1).getValue();\n            if (reverse) {\n                org.junit.Assert.assertTrue(lastScore <= thisScore);\n            } else {\n                org.junit.Assert.assertTrue(lastScore >= thisScore);\n            }\n        }\n    }\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 2,
                "MethodName": "testTopByValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 17,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return id;\n}",
                "ClassName": "IDEntity",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value;\n}",
                "ClassName": "IDValue",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 23,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testOffset(\"/recommendToAnonymous/I1\", 2, 1, 2);\n    testOffset(\"/recommendToAnonymous/I1\", 3, 7, 1);\n    testOffset(\"/recommendToAnonymous/I1\", 1, 1, 1);\n    testOffset(\"/recommendToAnonymous/I1\", 3, 8, 0);\n}",
        "ClassName": "RecommendToAnonymousTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testOffset",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).queryParam(\"offset\", java.lang.Integer.toString(offset)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testOffset",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testHowMany(\"/recommendToMany/U2/U5\", 10, 2);\n    testHowMany(\"/recommendToMany/U5\", 2, 2);\n    testHowMany(\"/recommendToMany/U2\", 1, 1);\n}",
        "ClassName": "RecommendToManyTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testHowMany",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testHowMany",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDCount> top = target(\"/mostActiveUsers\").queryParam(\"rescorerParams\", \"foo\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_COUNT_TYPE);\n    org.junit.Assert.assertEquals(3, top.size());\n    org.junit.Assert.assertEquals(7, top.get(0).getValue());\n    org.junit.Assert.assertEquals(5, top.get(1).getValue());\n}",
        "ClassName": "MostActiveUsersTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRescorer",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return count;\n}",
                "ClassName": "IDCount",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.dmg.pmml.PMML model = com.cloudera.oryx.app.pmml.AppPMMLUtilsTest.buildDummyModel();\n    org.junit.Assert.assertNull(com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionContent(model, \"foo\"));\n    com.cloudera.oryx.app.pmml.AppPMMLUtils.addExtensionContent(model, \"foo1\", java.util.Arrays.asList(\"bar\", \"baz\"));\n    com.cloudera.oryx.app.pmml.AppPMMLUtils.addExtensionContent(model, \"foo2\", java.util.Collections.emptyList());\n    com.cloudera.oryx.app.pmml.AppPMMLUtils.addExtensionContent(model, \"foo3\", java.util.Arrays.asList(\" c\\\" d \\\"e \", \" c\\\" d \\\"e \"));\n    org.dmg.pmml.PMML reserializedModel = com.cloudera.oryx.common.pmml.PMMLUtils.fromString(com.cloudera.oryx.common.pmml.PMMLUtils.toString(model));\n    org.junit.Assert.assertEquals(java.util.Arrays.asList(\"bar\", \"baz\"), com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionContent(reserializedModel, \"foo1\"));\n    org.junit.Assert.assertNull(com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionContent(reserializedModel, \"foo2\"));\n    org.junit.Assert.assertEquals(java.util.Arrays.asList(\" c\\\" d \\\"e \", \" c\\\" d \\\"e \"), com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionContent(reserializedModel, \"foo3\"));\n}",
        "ClassName": "AppPMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testExtensionContent",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 11,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.dmg.pmml.Node node = new org.dmg.pmml.Node();\n    node.setRecordCount(123.0);\n    org.dmg.pmml.TreeModel treeModel = new org.dmg.pmml.TreeModel(org.dmg.pmml.MiningFunctionType.CLASSIFICATION, null, node);\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.buildSkeletonPMML();\n    pmml.getModels().add(treeModel);\n    return pmml;\n}",
                "ClassName": "AppPMMLUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildDummyModel",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    for (org.dmg.pmml.Extension extension : pmml.getExtensions()) {\n        if (name.equals(extension.getName())) {\n            java.util.List<?> content = extension.getContent();\n            com.google.common.base.Preconditions.checkArgument(content.size() <= 1);\n            if (content.isEmpty()) {\n                return java.util.Collections.emptyList();\n            }\n            return java.util.Arrays.asList(com.cloudera.oryx.common.text.TextUtils.parsePMMLDelimited(content.get(0).toString()));\n        }\n    }\n    return null;\n}",
                "ClassName": "AppPMMLUtils",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "getExtensionContent",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 13,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (content.isEmpty()) {\n        return;\n    }\n    java.lang.String joined = com.cloudera.oryx.common.text.TextUtils.joinPMMLDelimited(content);\n    pmml.getExtensions().add(new org.dmg.pmml.Extension().withName(key).withContent(joined));\n}",
                "ClassName": "AppPMMLUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "addExtensionContent",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return org.jpmml.model.JAXBUtil.unmarshalPMML(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(pmmlString)));\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "fromString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (java.io.StringWriter out = new java.io.StringWriter()) {\n        org.jpmml.model.JAXBUtil.marshalPMML(pmml, new javax.xml.transform.stream.StreamResult(out));\n        return out.toString();\n    } catch (javax.xml.bind.JAXBException | java.io.IOException e) {\n        throw new java.lang.IllegalStateException(e);\n    }\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "toString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 4,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 39,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testHowMany(\"/mostSurprising/U4\", 10, 6);\n    testHowMany(\"/mostSurprising/U4\", 9, 6);\n    testHowMany(\"/mostSurprising/U4\", 5, 5);\n}",
        "ClassName": "MostSurprisingTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testHowMany",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testHowMany",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDCount> top = target(\"/mostActiveUsers\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_COUNT_TYPE);\n    org.junit.Assert.assertEquals(7, top.size());\n    for (int i = 0; i < top.size(); i++) {\n        int thisCount = top.get(i).getValue();\n        org.junit.Assert.assertTrue(thisCount >= 1);\n        if (i > 0) {\n            org.junit.Assert.assertTrue(top.get(i - 1).getValue() >= thisCount);\n        }\n    }\n    org.junit.Assert.assertEquals(7, top.get(0).getValue());\n    org.junit.Assert.assertEquals(6, top.get(1).getValue());\n}",
        "ClassName": "MostActiveUsersTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 2,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testMostPopular",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 5,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 13,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return count;\n}",
                "ClassName": "IDCount",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"similarity/I0/I4/I6\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(6, recs, false);\n    org.junit.Assert.assertEquals(\"I1\", recs.get(1).getID());\n    org.junit.Assert.assertEquals(0.5571406877613947, recs.get(2).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.DOUBLE_EPSILON);\n}",
        "ClassName": "SimilarityTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testSimilarItems",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expectedSize, values.size());\n    for (int i = 0; i < values.size(); i++) {\n        com.cloudera.oryx.app.serving.IDValue value = values.get(i);\n        double thisScore = value.getValue();\n        org.junit.Assert.assertFalse(java.lang.Double.isNaN(thisScore));\n        org.junit.Assert.assertFalse(java.lang.Double.isInfinite(thisScore));\n        if (i > 0) {\n            double lastScore = values.get(i - 1).getValue();\n            if (reverse) {\n                org.junit.Assert.assertTrue(lastScore <= thisScore);\n            } else {\n                org.junit.Assert.assertTrue(lastScore >= thisScore);\n            }\n        }\n    }\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 2,
                "MethodName": "testTopByValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 17,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return id;\n}",
                "ClassName": "IDEntity",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value;\n}",
                "ClassName": "IDValue",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 23,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testHowMany(\"/because/U5/I4\", 10, 7);\n    testHowMany(\"/because/U5/I4\", 9, 7);\n    testHowMany(\"/because/U5/I4\", 5, 5);\n}",
        "ClassName": "BecauseTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testHowMany",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testHowMany",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> normal = target(\"/recommend/U4\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(3, normal.size());\n    org.junit.Assert.assertEquals(\"I2\", normal.get(0).getID());\n    org.junit.Assert.assertEquals(0.141347957620267, normal.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> withConsider = target(\"/recommend/U4\").queryParam(\"considerKnownItems\", \"true\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(9, withConsider.size());\n    org.junit.Assert.assertEquals(\"I7\", withConsider.get(0).getID());\n    org.junit.Assert.assertEquals(2.00474569593095, withConsider.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "RecommendTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testConsiderKnownItems",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 6,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 10,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return id;\n}",
                "ClassName": "IDEntity",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value;\n}",
                "ClassName": "IDValue",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 6,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/recommendToMany/U0/U2\").queryParam(\"rescorerParams\", \"foo\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(2, recs, false);\n    org.junit.Assert.assertEquals(\"I1\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(2.0 * 0.3434463501376608, recs.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "RecommendToManyTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRescorer",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expectedSize, values.size());\n    for (int i = 0; i < values.size(); i++) {\n        com.cloudera.oryx.app.serving.IDValue value = values.get(i);\n        double thisScore = value.getValue();\n        org.junit.Assert.assertFalse(java.lang.Double.isNaN(thisScore));\n        org.junit.Assert.assertFalse(java.lang.Double.isInfinite(thisScore));\n        if (i > 0) {\n            double lastScore = values.get(i - 1).getValue();\n            if (reverse) {\n                org.junit.Assert.assertTrue(lastScore <= thisScore);\n            } else {\n                org.junit.Assert.assertTrue(lastScore >= thisScore);\n            }\n        }\n    }\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 2,
                "MethodName": "testTopByValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 17,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return id;\n}",
                "ClassName": "IDEntity",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value;\n}",
                "ClassName": "IDValue",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 23,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(\"ab \\\"a b\\\" \\\"with \\\\\\\"quotes\\\\\\\" \\\"\", com.cloudera.oryx.common.text.TextUtils.joinPMMLDelimited(java.util.Arrays.asList(\"ab\", \"a b\", \"with \\\"quotes\\\" \")));\n    org.junit.Assert.assertEquals(\"1 22 3\", com.cloudera.oryx.common.text.TextUtils.joinPMMLDelimited(java.util.Arrays.asList(\"1\", \"22\", \"3\")));\n    org.junit.Assert.assertEquals(\"\\\" c\\\\\\\" d \\\\\\\"e \\\" \\\" c\\\\\\\" d \\\\\\\"e \\\"\", com.cloudera.oryx.common.text.TextUtils.joinPMMLDelimited(java.util.Arrays.asList(\" c\\\" d \\\"e \", \" c\\\" d \\\"e \")));\n}",
        "ClassName": "TextUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testJoinPMMLDelimited",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.lang.String rawResult = com.cloudera.oryx.common.text.TextUtils.doJoinDelimited(elements, com.cloudera.oryx.common.text.TextUtils.formatForDelimiter(' '));\n    return com.cloudera.oryx.common.text.TextUtils.TWO_DOUBLE_QUOTE.matcher(rawResult).replaceAll(\"\\\\\\\"\");\n}",
                "ClassName": "TextUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "joinPMMLDelimited",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testOffset(\"/similarity/I0/I2/I6\", 2, 1, 2);\n    testOffset(\"/similarity/I0/I2/I6\", 3, 1, 3);\n    testOffset(\"/similarity/I0/I2/I6\", 1, 1, 1);\n    testOffset(\"/similarity/I0/I2/I6\", 3, 3, 3);\n}",
        "ClassName": "SimilarityTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testOffset",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).queryParam(\"offset\", java.lang.Integer.toString(offset)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testOffset",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/recommend/U0\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(6, recs, false);\n    org.junit.Assert.assertEquals(\"I1\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(0.465396924146558, recs.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "RecommendTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRecommend",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expectedSize, values.size());\n    for (int i = 0; i < values.size(); i++) {\n        com.cloudera.oryx.app.serving.IDValue value = values.get(i);\n        double thisScore = value.getValue();\n        org.junit.Assert.assertFalse(java.lang.Double.isNaN(thisScore));\n        org.junit.Assert.assertFalse(java.lang.Double.isInfinite(thisScore));\n        if (i > 0) {\n            double lastScore = values.get(i - 1).getValue();\n            if (reverse) {\n                org.junit.Assert.assertTrue(lastScore <= thisScore);\n            } else {\n                org.junit.Assert.assertTrue(lastScore >= thisScore);\n            }\n        }\n    }\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 2,
                "MethodName": "testTopByValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 17,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return id;\n}",
                "ClassName": "IDEntity",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value;\n}",
                "ClassName": "IDValue",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 23,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testOffset(\"/mostSurprising/U4\", 10, 0, 6);\n    testOffset(\"/mostSurprising/U4\", 9, 3, 3);\n    testOffset(\"/mostSurprising/U4\", 5, 6, 0);\n}",
        "ClassName": "MostSurprisingTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testOffset",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).queryParam(\"offset\", java.lang.Integer.toString(offset)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testOffset",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/classificationDistribution/B,0,\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.rdf.AbstractRDFServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(\"X\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(((10.0 / 90.0) + (2 * (1000.0 / 111000.0))) / 3, recs.get(0).getValue(), com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n    org.junit.Assert.assertEquals(\"Y\", recs.get(1).getID());\n    org.junit.Assert.assertEquals(((30.0 / 90.0) + (2 * (10000.0 / 111000.0))) / 3, recs.get(1).getValue(), com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n    org.junit.Assert.assertEquals(\"Z\", recs.get(2).getID());\n    org.junit.Assert.assertEquals(((50.0 / 90.0) + (2 * (100000.0 / 111000.0))) / 3, recs.get(2).getValue(), com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
        "ClassName": "ClassificationDistributionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDistribution",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 6,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 9,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return id;\n}",
                "ClassName": "IDEntity",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value;\n}",
                "ClassName": "IDValue",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 6,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/mostSurprising/U0\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(3, recs, true);\n    org.junit.Assert.assertEquals(\"I0\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(0.38761317555864894, recs.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.DOUBLE_EPSILON);\n}",
        "ClassName": "MostSurprisingTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testMostSurprising",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expectedSize, values.size());\n    for (int i = 0; i < values.size(); i++) {\n        com.cloudera.oryx.app.serving.IDValue value = values.get(i);\n        double thisScore = value.getValue();\n        org.junit.Assert.assertFalse(java.lang.Double.isNaN(thisScore));\n        org.junit.Assert.assertFalse(java.lang.Double.isInfinite(thisScore));\n        if (i > 0) {\n            double lastScore = values.get(i - 1).getValue();\n            if (reverse) {\n                org.junit.Assert.assertTrue(lastScore <= thisScore);\n            } else {\n                org.junit.Assert.assertTrue(lastScore >= thisScore);\n            }\n        }\n    }\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 2,
                "MethodName": "testTopByValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 17,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return id;\n}",
                "ClassName": "IDEntity",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value;\n}",
                "ClassName": "IDValue",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 23,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/recommendToAnonymous/I4=1.0/I5=2.0\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(7, recs, false);\n    org.junit.Assert.assertEquals(\"I7\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(0.41001138390689273, recs.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "RecommendToAnonymousTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRecommendToAnonymous",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expectedSize, values.size());\n    for (int i = 0; i < values.size(); i++) {\n        com.cloudera.oryx.app.serving.IDValue value = values.get(i);\n        double thisScore = value.getValue();\n        org.junit.Assert.assertFalse(java.lang.Double.isNaN(thisScore));\n        org.junit.Assert.assertFalse(java.lang.Double.isInfinite(thisScore));\n        if (i > 0) {\n            double lastScore = values.get(i - 1).getValue();\n            if (reverse) {\n                org.junit.Assert.assertTrue(lastScore <= thisScore);\n            } else {\n                org.junit.Assert.assertTrue(lastScore >= thisScore);\n            }\n        }\n    }\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 2,
                "MethodName": "testTopByValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 17,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return id;\n}",
                "ClassName": "IDEntity",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value;\n}",
                "ClassName": "IDValue",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 23,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDCount> top = target(\"/mostPopularItems\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_COUNT_TYPE);\n    org.junit.Assert.assertEquals(9, top.size());\n    for (int i = 0; i < top.size(); i++) {\n        int thisCount = top.get(i).getValue();\n        org.junit.Assert.assertTrue(thisCount >= 1);\n        if (i > 0) {\n            org.junit.Assert.assertTrue(top.get(i - 1).getValue() >= thisCount);\n        }\n    }\n    org.junit.Assert.assertEquals(6, top.get(0).getValue());\n    org.junit.Assert.assertEquals(6, top.get(1).getValue());\n}",
        "ClassName": "MostPopularItemsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 2,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testMostPopular",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 5,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 13,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return count;\n}",
                "ClassName": "IDCount",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> recs = target(\"/recommendToAnonymous/I4=1.0/I5=2.0\").queryParam(\"rescorerParams\", \"foo\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testTopByValue(3, recs, false);\n    org.junit.Assert.assertEquals(\"I7\", recs.get(0).getID());\n    org.junit.Assert.assertEquals(2.0 * 0.41001138390689273, recs.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "RecommendToAnonymousTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRescorer",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expectedSize, values.size());\n    for (int i = 0; i < values.size(); i++) {\n        com.cloudera.oryx.app.serving.IDValue value = values.get(i);\n        double thisScore = value.getValue();\n        org.junit.Assert.assertFalse(java.lang.Double.isNaN(thisScore));\n        org.junit.Assert.assertFalse(java.lang.Double.isInfinite(thisScore));\n        if (i > 0) {\n            double lastScore = values.get(i - 1).getValue();\n            if (reverse) {\n                org.junit.Assert.assertTrue(lastScore <= thisScore);\n            } else {\n                org.junit.Assert.assertTrue(lastScore >= thisScore);\n            }\n        }\n    }\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 2,
                "MethodName": "testTopByValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 17,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return id;\n}",
                "ClassName": "IDEntity",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value;\n}",
                "ClassName": "IDValue",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 23,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDCount> top = target(\"/mostPopularItems\").queryParam(\"rescorerParams\", \"foo\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_COUNT_TYPE);\n    org.junit.Assert.assertEquals(4, top.size());\n    org.junit.Assert.assertEquals(6, top.get(0).getValue());\n    org.junit.Assert.assertEquals(5, top.get(1).getValue());\n}",
        "ClassName": "MostPopularItemsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRescorer",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return count;\n}",
                "ClassName": "IDCount",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testHowMany(\"/recommendToAnonymous/I1\", 10, 8);\n    testHowMany(\"/recommendToAnonymous/I1\", 2, 2);\n    testHowMany(\"/recommendToAnonymous/I1\", 1, 1);\n}",
        "ClassName": "RecommendToAnonymousTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testHowMany",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testHowMany",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testOffset(\"/because/U6/I6\", 2, 1, 2);\n    testOffset(\"/because/U6/I6\", 3, 1, 3);\n    testOffset(\"/because/U6/I6\", 1, 1, 1);\n    testOffset(\"/because/U6/I6\", 3, 3, 3);\n}",
        "ClassName": "BecauseTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testOffset",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).queryParam(\"offset\", java.lang.Integer.toString(offset)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testOffset",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.serving.IDValue> normal = target(\"/recommend/U4\").queryParam(\"rescorerParams\", \"foo\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(1, normal.size());\n    org.junit.Assert.assertEquals(\"I3\", normal.get(0).getID());\n    org.junit.Assert.assertEquals(2.0 * (-0.2599307053020734), normal.get(0).getValue(), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "RecommendTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRescorer",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return id;\n}",
                "ClassName": "IDEntity",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value;\n}",
                "ClassName": "IDValue",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 6,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testOffset(\"/recommend/U6\", 2, 1, 2);\n    testOffset(\"/recommend/U6\", 3, 1, 2);\n    testOffset(\"/recommend/U6\", 1, 1, 1);\n    testOffset(\"/recommend/U6\", 3, 3, 0);\n}",
        "ClassName": "RecommendTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 1,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testOffset",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).queryParam(\"offset\", java.lang.Integer.toString(offset)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testOffset",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Collection<java.lang.Integer> contains = java.util.Arrays.asList(1, 3, 5);\n    com.cloudera.oryx.common.collection.NotContainsPredicate<java.lang.Integer> predicate = new com.cloudera.oryx.common.collection.NotContainsPredicate<>(contains);\n    org.junit.Assert.assertTrue(predicate.test(2));\n    org.junit.Assert.assertFalse(predicate.test(5));\n}",
        "ClassName": "NotContainsPredicateTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testPredicate",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkNotNull(values);\n    this.values = values;\n}",
                "ClassName": "NotContainsPredicate",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return !values.contains(value);\n}",
                "ClassName": "NotContainsPredicate",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "test",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 7,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.input-schema.num-features\", 2);\n    overlayConfig.put(\"oryx.input-schema.numeric-features\", \"[]\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    com.cloudera.oryx.app.schema.InputSchema schema = new com.cloudera.oryx.app.schema.InputSchema(config);\n    org.junit.Assert.assertEquals(2, schema.getNumFeatures());\n    org.junit.Assert.assertEquals(2, schema.getNumPredictors());\n    org.junit.Assert.assertTrue(schema.getFeatureNames().containsAll(java.util.Arrays.asList(\"0\", \"1\")));\n    for (int i = 0; i < 2; i++) {\n        org.junit.Assert.assertFalse(schema.isID(i));\n        org.junit.Assert.assertFalse(schema.isID(schema.getFeatureNames().get(i)));\n    }\n    for (int i = 0; i < 2; i++) {\n        org.junit.Assert.assertTrue(schema.isActive(i));\n        org.junit.Assert.assertTrue(schema.isActive(schema.getFeatureNames().get(i)));\n    }\n    for (int i = 0; i < 2; i++) {\n        org.junit.Assert.assertFalse(schema.isNumeric(i));\n        org.junit.Assert.assertFalse(schema.isNumeric(schema.getFeatureNames().get(i)));\n    }\n    for (int i = 0; i < 2; i++) {\n        org.junit.Assert.assertTrue(schema.isCategorical(i));\n        org.junit.Assert.assertTrue(schema.isCategorical(schema.getFeatureNames().get(i)));\n    }\n    for (int i = 0; i < 2; i++) {\n        org.junit.Assert.assertFalse(schema.isTarget(i));\n        org.junit.Assert.assertFalse(schema.isTarget(schema.getFeatureNames().get(i)));\n    }\n    org.junit.Assert.assertFalse(schema.hasTarget());\n    try {\n        schema.getTargetFeature();\n        org.junit.Assert.fail();\n    } catch (java.lang.IllegalStateException ise) {\n    }\n    try {\n        schema.getTargetFeatureIndex();\n        org.junit.Assert.fail();\n    } catch (java.lang.IllegalStateException ise) {\n    }\n}",
        "ClassName": "InputSchemaTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 5,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBasicConfig",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 16,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 41,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<java.lang.String> givenFeatureNames = config.getStringList(\"oryx.input-schema.feature-names\");\n    if (givenFeatureNames.isEmpty()) {\n        int numFeatures = config.getInt(\"oryx.input-schema.num-features\");\n        com.google.common.base.Preconditions.checkArgument(numFeatures > 0, \"Neither feature-names nor num-features is set\");\n        java.util.List<java.lang.String> generatedFeatureNames = new java.util.ArrayList<>(numFeatures);\n        for (int i = 0; i < numFeatures; i++) {\n            generatedFeatureNames.add(java.lang.Integer.toString(i));\n        }\n        featureNames = generatedFeatureNames;\n    } else {\n        featureNames = com.google.common.collect.ImmutableList.copyOf(givenFeatureNames);\n    }\n    int numFeatures = featureNames.size();\n    com.google.common.base.Preconditions.checkArgument(new java.util.HashSet<>(featureNames).size() == numFeatures, \"Feature names must be unique: %s\", featureNames);\n    idFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.id-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(idFeatures));\n    java.util.Collection<java.lang.String> ignoredFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.ignored-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(ignoredFeatures));\n    java.util.Collection<java.lang.String> activeFeatureSet = new java.util.HashSet<>(featureNames);\n    activeFeatureSet.removeAll(idFeatures);\n    activeFeatureSet.removeAll(ignoredFeatures);\n    activeFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    java.util.List<java.lang.String> givenNumericFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.numeric-features\");\n    java.util.List<java.lang.String> givenCategoricalFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.categorical-features\");\n    if (givenNumericFeatures == null) {\n        com.google.common.base.Preconditions.checkNotNull(givenCategoricalFeatures, \"Neither numeric-features nor categorical-features was set\");\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(givenCategoricalFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(categoricalFeatures));\n        activeFeatureSet.removeAll(categoricalFeatures);\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    } else {\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(givenNumericFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(numericFeatures));\n        activeFeatureSet.removeAll(numericFeatures);\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    }\n    targetFeature = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalString(config, \"oryx.input-schema.target-feature\");\n    if (targetFeature != null) {\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.contains(targetFeature), \"Target feature is not known, an ID, or ignored: %s\", targetFeature);\n    }\n    targetFeatureIndex = (targetFeature == null) ? -1 : featureNames.indexOf(targetFeature);\n    allToPredictorMap = com.google.common.collect.HashBiMap.create();\n    for (int featureIndex = 0, predictorIndex = 0; featureIndex < featureNames.size(); featureIndex++) {\n        if (isActive(featureIndex) && (!isTarget(featureIndex))) {\n            allToPredictorMap.put(featureIndex, predictorIndex);\n            predictorIndex++;\n        }\n    }\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 50,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return featureNames.size();\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getNumFeatures",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return activeFeatures.size() - (hasTarget() ? 1 : 0);\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getNumPredictors",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return featureNames;\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFeatureNames",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return isID(featureNames.get(featureIndex));\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return idFeatures.contains(featureName);\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return isActive(featureNames.get(featureIndex));\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isActive",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return activeFeatures.contains(featureName);\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isActive",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return isNumeric(featureNames.get(featureIndex));\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isNumeric",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return numericFeatures.contains(featureName);\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isNumeric",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return isCategorical(featureNames.get(featureIndex));\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isCategorical",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return categoricalFeatures.contains(featureName);\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isCategorical",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return targetFeatureIndex == featureIndex;\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isTarget",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return featureName.equals(targetFeature);\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isTarget",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return targetFeature != null;\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "hasTarget",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkState(targetFeature != null);\n    return targetFeature;\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getTargetFeature",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkState(targetFeatureIndex >= 0);\n    return targetFeatureIndex;\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getTargetFeatureIndex",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 7,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 112,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.serving.application-resources\", \"\\\"com.cloudera.oryx.app.serving,com.cloudera.oryx.app.serving.kmeans\\\"\");\n    overlayConfig.put(\"oryx.serving.model-manager-class\", com.cloudera.oryx.app.serving.kmeans.model.KMeansServingModelManager.class.getName());\n    overlayConfig.put(\"oryx.input-schema.feature-names\", \"[\\\"x\\\",\\\"y\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[]\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    startServer(config);\n    startUpdateTopics(new com.cloudera.oryx.app.speed.kmeans.MockKMeansModelGenerator(), 10);\n    java.lang.Thread.sleep(1000);\n    com.cloudera.oryx.app.serving.kmeans.model.KMeansServingModelManager manager = ((com.cloudera.oryx.app.serving.kmeans.model.KMeansServingModelManager) (getServingLayer().getContext().getServletContext().getAttribute(com.cloudera.oryx.app.serving.AbstractOryxResource.MODEL_MANAGER_KEY)));\n    org.junit.Assert.assertNotNull(\"Manager must initialize in web context\", manager);\n    com.cloudera.oryx.app.serving.kmeans.model.KMeansServingModel model = manager.getModel();\n    com.cloudera.oryx.app.serving.kmeans.model.KMeansServingModelManagerIT.log.debug(\"{}\", model);\n    org.junit.Assert.assertEquals(3, model.getNumClusters());\n    com.cloudera.oryx.app.serving.kmeans.model.KMeansServingModelManagerIT.assertCluster(model.getCluster(0), 0, new double[]{ 9.0, 9.0 }, 9);\n    com.cloudera.oryx.app.serving.kmeans.model.KMeansServingModelManagerIT.assertCluster(model.getCluster(1), 1, new double[]{ 7.0, 7.0 }, 7);\n    com.cloudera.oryx.app.serving.kmeans.model.KMeansServingModelManagerIT.assertCluster(model.getCluster(2), 2, new double[]{ 8.0, 8.0 }, 8);\n}",
        "ClassName": "KMeansServingModelManagerIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testKMeansServingModel",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 1,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 20,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 2,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "MockKMeansModelGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    overlay.put(\"oryx.serving.api.port\", httpPort);\n    overlay.put(\"oryx.serving.api.secure-port\", httpsPort);\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, super.getConfig());\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    servingLayer = new com.cloudera.oryx.lambda.serving.ServingLayer(config);\n    com.cloudera.oryx.lambda.serving.AbstractServingIT.log.info(\"Starting serving layer\");\n    servingLayer.start();\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServer",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int zkPort = getZKPort();\n    int kafkaPort = getKafkaBrokerPort();\n    updateProducer = new com.cloudera.oryx.kafka.util.ProduceData(updateGenerator, zkPort, kafkaPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, howManyUpdate, 0);\n    com.cloudera.oryx.lambda.serving.AbstractServingIT.log.info(\"Producing updates\");\n    updateProducer.start();\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startUpdateTopics",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return context;\n}",
                "ClassName": "ServingLayer",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getContext",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return servingLayer;\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getServingLayer",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return model;\n}",
                "ClassName": "KMeansServingModelManager",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getModel",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return clusters.size();\n}",
                "ClassName": "KMeansServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getNumClusters",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expectedID, info.getID());\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(expectedCenter, info.getCenter());\n    org.junit.Assert.assertEquals(expectedCount, info.getCount());\n}",
                "ClassName": "KMeansServingModelManagerIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 4,
                "MethodName": "assertCluster",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return clusters.get(id);\n}",
                "ClassName": "KMeansServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getCluster",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 61,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertTrue(com.cloudera.oryx.common.lang.ClassUtils.loadInstanceOf(java.util.HashSet.class) instanceof java.util.HashSet);\n}",
        "ClassName": "ClassUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testLoadInstanceOf",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return com.cloudera.oryx.common.lang.ClassUtils.loadInstanceOf(clazz.getName(), clazz);\n}",
                "ClassName": "ClassUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "loadInstanceOf",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.apache.commons.math3.random.RandomGenerator generator = com.cloudera.oryx.common.random.RandomManager.getRandom();\n    org.junit.Assert.assertEquals(1553355631, generator.nextInt());\n    assertNotEquals(1553355631, generator.nextInt());\n}",
        "ClassName": "RandomManagerTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 2,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 13,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRandomState",
        "MinimumCyclomaticComplexity": 2,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 13,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    if (com.cloudera.oryx.common.random.RandomManager.useTestSeed) {\n        return new org.apache.commons.math3.random.Well19937c(com.cloudera.oryx.common.random.RandomManager.TEST_SEED);\n    }\n    org.apache.commons.math3.random.RandomGenerator random = new org.apache.commons.math3.random.Well19937c();\n    java.util.Collection<org.apache.commons.math3.random.RandomGenerator> instances = com.cloudera.oryx.common.random.RandomManager.INSTANCES.get();\n    if (instances != null) {\n        synchronized(instances) {\n            instances.add(random);\n        }\n    }\n    return random;\n}",
                "ClassName": "RandomManager",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "getRandom",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 13,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 2,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 13,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.Integer, java.lang.String>> pairs = java.util.Arrays.asList(new com.cloudera.oryx.common.collection.Pair<>(3, \"foo\"), new com.cloudera.oryx.common.collection.Pair<>(4, \"bing\"), new com.cloudera.oryx.common.collection.Pair<>(1, \"baz\"), new com.cloudera.oryx.common.collection.Pair<>(2, \"whizz\"));\n    java.util.Collections.sort(pairs, com.cloudera.oryx.common.collection.PairComparators.<java.lang.Integer>byFirst());\n    org.junit.Assert.assertEquals(1, pairs.get(0).getFirst().intValue());\n    org.junit.Assert.assertEquals(2, pairs.get(1).getFirst().intValue());\n    org.junit.Assert.assertEquals(\"baz\", pairs.get(0).getSecond());\n    org.junit.Assert.assertEquals(\"whizz\", pairs.get(1).getSecond());\n}",
        "ClassName": "PairComparatorsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testByFirst",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this.first = first;\n    this.second = second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new java.util.Comparator<com.cloudera.oryx.common.collection.Pair<K, ?>>() {\n        @java.lang.Override\n        public int compare(com.cloudera.oryx.common.collection.Pair<K, ?> p1, com.cloudera.oryx.common.collection.Pair<K, ?> p2) {\n            return p1.getFirst().compareTo(p2.getFirst());\n        }\n    };\n}",
                "ClassName": "PairComparators",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "byFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return first;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 18,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.app.rdf.RDFPMMLUtilsTest.buildDummyClassificationModel();\n    com.cloudera.oryx.common.collection.Pair<com.cloudera.oryx.app.rdf.tree.DecisionForest, com.cloudera.oryx.app.schema.CategoricalValueEncodings> forestAndEncodings = com.cloudera.oryx.app.rdf.RDFPMMLUtils.read(pmml);\n    com.cloudera.oryx.app.rdf.tree.DecisionForest forest = forestAndEncodings.getFirst();\n    org.junit.Assert.assertEquals(1, forest.getTrees().length);\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(new double[]{ 1.0 }, forest.getWeights());\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(new double[]{ 0.5, 0.0 }, forest.getFeatureImportances());\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings encodings = forestAndEncodings.getSecond();\n    org.junit.Assert.assertEquals(2, encodings.getValueCount(0));\n    org.junit.Assert.assertEquals(2, encodings.getValueCount(1));\n}",
        "ClassName": "RDFPMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testReadClassification",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 11,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return com.cloudera.oryx.app.rdf.RDFPMMLUtilsTest.buildDummyClassificationModel(1);\n}",
                "ClassName": "RDFPMMLUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildDummyClassificationModel",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.dmg.pmml.DataDictionary dictionary = pmml.getDataDictionary();\n    java.util.List<java.lang.String> featureNames = com.cloudera.oryx.app.pmml.AppPMMLUtils.getFeatureNames(dictionary);\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings categoricalValueEncodings = com.cloudera.oryx.app.pmml.AppPMMLUtils.buildCategoricalValueEncodings(dictionary);\n    java.util.List<org.dmg.pmml.Model> models = pmml.getModels();\n    org.dmg.pmml.Model model = models.get(0);\n    org.dmg.pmml.MiningSchema miningSchema = model.getMiningSchema();\n    int targetIndex = com.cloudera.oryx.app.pmml.AppPMMLUtils.findTargetIndex(miningSchema);\n    com.cloudera.oryx.app.rdf.tree.DecisionTree[] trees;\n    double[] weights;\n    if (model instanceof org.dmg.pmml.MiningModel) {\n        org.dmg.pmml.MiningModel miningModel = ((org.dmg.pmml.MiningModel) (model));\n        org.dmg.pmml.Segmentation segmentation = miningModel.getSegmentation();\n        com.google.common.base.Preconditions.checkArgument((segmentation.getMultipleModelMethod() == org.dmg.pmml.MultipleModelMethodType.WEIGHTED_AVERAGE) || (segmentation.getMultipleModelMethod() == org.dmg.pmml.MultipleModelMethodType.WEIGHTED_MAJORITY_VOTE));\n        java.util.List<org.dmg.pmml.Segment> segments = segmentation.getSegments();\n        com.google.common.base.Preconditions.checkArgument(!segments.isEmpty());\n        trees = new com.cloudera.oryx.app.rdf.tree.DecisionTree[segments.size()];\n        weights = new double[trees.length];\n        for (int i = 0; i < trees.length; i++) {\n            org.dmg.pmml.Segment segment = segments.get(i);\n            com.google.common.base.Preconditions.checkArgument(segment.getPredicate() instanceof org.dmg.pmml.True);\n            weights[i] = segment.getWeight();\n            org.dmg.pmml.TreeModel treeModel = ((org.dmg.pmml.TreeModel) (segment.getModel()));\n            com.cloudera.oryx.app.rdf.tree.TreeNode root = com.cloudera.oryx.app.rdf.RDFPMMLUtils.translateFromPMML(treeModel.getNode(), categoricalValueEncodings, featureNames, targetIndex);\n            trees[i] = new com.cloudera.oryx.app.rdf.tree.DecisionTree(root);\n        }\n    } else {\n        com.cloudera.oryx.app.rdf.tree.TreeNode root = com.cloudera.oryx.app.rdf.RDFPMMLUtils.translateFromPMML(((org.dmg.pmml.TreeModel) (model)).getNode(), categoricalValueEncodings, featureNames, targetIndex);\n        trees = new com.cloudera.oryx.app.rdf.tree.DecisionTree[]{ new com.cloudera.oryx.app.rdf.tree.DecisionTree(root) };\n        weights = new double[]{ 1.0 };\n    }\n    java.util.List<org.dmg.pmml.MiningField> miningFields = miningSchema.getMiningFields();\n    double[] featureImportances = new double[featureNames.size()];\n    for (int i = 0; i < miningFields.size(); i++) {\n        org.dmg.pmml.MiningField field = miningFields.get(i);\n        java.lang.Double importance = field.getImportance();\n        if (importance != null) {\n            featureImportances[i] = importance;\n        }\n    }\n    return new com.cloudera.oryx.common.collection.Pair<>(new com.cloudera.oryx.app.rdf.tree.DecisionForest(trees, weights, featureImportances), categoricalValueEncodings);\n}",
                "ClassName": "RDFPMMLUtils",
                "CyclomaticComplexity": 4,
                "DepthOfInheritance": 0,
                "MethodName": "read",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 42,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return first;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return trees;\n}",
                "ClassName": "DecisionForest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getTrees",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertArrayEquals(expecteds, actuals, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertArrayEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return weights;\n}",
                "ClassName": "DecisionForest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getWeights",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return featureImportances;\n}",
                "ClassName": "DecisionForest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFeatureImportances",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return doGetMap(index).size();\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getValueCount",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 4,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 66,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertTrue(com.cloudera.oryx.common.lang.ClassUtils.classExists(\"java.lang.String\"));\n    org.junit.Assert.assertTrue(com.cloudera.oryx.common.lang.ClassUtils.classExists(\"com.cloudera.oryx.common.lang.ClassUtils\"));\n    org.junit.Assert.assertFalse(com.cloudera.oryx.common.lang.ClassUtils.classExists(\"java.Foo\"));\n}",
        "ClassName": "ClassUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 8,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testExists",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 8,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    try {\n        java.lang.Class.forName(implClassName);\n        return true;\n    } catch (java.lang.ClassNotFoundException ignored) {\n        return false;\n    }\n}",
                "ClassName": "ClassUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "classExists",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 8,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.kmeans.ClusterInfo> clusters = com.cloudera.oryx.app.mllib.kmeans.KMeansEvalIT.getClusters();\n    com.cloudera.oryx.app.mllib.kmeans.SilhouetteCoefficient silhouetteCoefficient = new com.cloudera.oryx.app.mllib.kmeans.SilhouetteCoefficient(clusters);\n    double eval = silhouetteCoefficient.evaluate(com.cloudera.oryx.app.mllib.kmeans.KMeansEvalIT.getRddOfVectors());\n    com.cloudera.oryx.app.mllib.kmeans.KMeansEvalIT.log.info(\"Silhouette Coefficient for {} clusters: {}\", clusters.size(), eval);\n    com.cloudera.oryx.common.OryxTest.assertEquals(0.48484126984126985, eval);\n}",
        "ClassName": "KMeansEvalIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testSilhouetteCoefficientForClustering",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(clusters);\n}",
                "ClassName": "SilhouetteCoefficient",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.kmeans.KMeansPMMLUtils.read(com.cloudera.oryx.app.kmeans.KMeansPMMLUtilsTest.buildDummyClusteringModel());\n}",
                "ClassName": "KMeansEvalIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getClusters",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.apache.spark.api.java.JavaRDD<org.apache.spark.mllib.linalg.Vector> sampleData = com.cloudera.oryx.app.mllib.kmeans.SilhouetteCoefficient.fetchSampleData(evalData);\n    return silhouetteCoefficient(fetchClusteredPoints(sampleData).collectAsMap());\n}",
                "ClassName": "SilhouetteCoefficient",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "evaluate",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.List<double[]> points = java.util.Arrays.asList(new double[][]{ new double[]{ 1.0, 0.0 }, new double[]{ 2.0, -2.0 }, new double[]{ 2.0, 0.0 }, new double[]{ -2.0, 0.0 }, new double[]{ -0.5, -1.0 }, new double[]{ -0.5, 1.0 } });\n    return com.cloudera.oryx.lambda.AbstractSparkIT.getJavaSparkContext().parallelize(points).map(new com.cloudera.oryx.app.mllib.kmeans.KMeansEvalIT.ToVectorFn());\n}",
                "ClassName": "KMeansEvalIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getRddOfVectors",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 17,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String s = com.cloudera.oryx.app.rdf.tree.DecisionTreeTest.buildTestTree().toString();\n    org.junit.Assert.assertTrue(s.startsWith(\"(#0 >= 1.0)\"));\n    org.junit.Assert.assertTrue(s.contains(\"(#0 >= -1.0)\"));\n}",
        "ClassName": "DecisionTreeTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 2,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 17,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testToString",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 8,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.lang.StringBuilder result = new java.lang.StringBuilder();\n    if (root != null) {\n        java.util.Deque<com.cloudera.oryx.common.collection.Pair<com.cloudera.oryx.app.rdf.tree.TreeNode, com.cloudera.oryx.app.rdf.tree.TreePath>> toPrint = new java.util.LinkedList<>();\n        toPrint.push(new com.cloudera.oryx.common.collection.Pair<>(root, com.cloudera.oryx.app.rdf.tree.TreePath.EMPTY));\n        while (!toPrint.isEmpty()) {\n            com.cloudera.oryx.common.collection.Pair<com.cloudera.oryx.app.rdf.tree.TreeNode, com.cloudera.oryx.app.rdf.tree.TreePath> entry = toPrint.pop();\n            com.cloudera.oryx.app.rdf.tree.TreeNode node = entry.getFirst();\n            com.cloudera.oryx.app.rdf.tree.TreePath path = entry.getSecond();\n            int pathLength = path.length();\n            for (int i = 0; i < pathLength; i++) {\n                if (i == (pathLength - 1)) {\n                    result.append(\" +-\");\n                } else {\n                    result.append(path.isLeftAt(i) ? \" | \" : \"   \");\n                }\n            }\n            result.append(node).append('\\n');\n            if ((node != null) && (!node.isTerminal())) {\n                com.cloudera.oryx.app.rdf.tree.DecisionNode decisionNode = ((com.cloudera.oryx.app.rdf.tree.DecisionNode) (node));\n                toPrint.push(new com.cloudera.oryx.common.collection.Pair<>(decisionNode.getRight(), path.extendRight()));\n                toPrint.push(new com.cloudera.oryx.common.collection.Pair<>(decisionNode.getLeft(), path.extendLeft()));\n            }\n        } \n    }\n    return result.toString();\n}",
                "ClassName": "DecisionTree",
                "CyclomaticComplexity": 5,
                "DepthOfInheritance": 0,
                "MethodName": "toString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 27,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.app.rdf.tree.TerminalNode rnn = new com.cloudera.oryx.app.rdf.tree.TerminalNode(\"r--\", new com.cloudera.oryx.app.rdf.predict.NumericPrediction(0.0, 1));\n    com.cloudera.oryx.app.rdf.tree.TerminalNode rnp = new com.cloudera.oryx.app.rdf.tree.TerminalNode(\"r-+\", new com.cloudera.oryx.app.rdf.predict.NumericPrediction(1.0, 1));\n    com.cloudera.oryx.app.rdf.tree.DecisionNode rn = new com.cloudera.oryx.app.rdf.tree.DecisionNode(\"r-\", new com.cloudera.oryx.app.rdf.decision.NumericDecision(0, -1.0, false), rnn, rnp);\n    com.cloudera.oryx.app.rdf.tree.TerminalNode rp = new com.cloudera.oryx.app.rdf.tree.TerminalNode(\"r+\", new com.cloudera.oryx.app.rdf.predict.NumericPrediction(2.0, 1));\n    com.cloudera.oryx.app.rdf.tree.DecisionNode root = new com.cloudera.oryx.app.rdf.tree.DecisionNode(\"r\", new com.cloudera.oryx.app.rdf.decision.NumericDecision(0, 1.0, false), rn, rp);\n    return new com.cloudera.oryx.app.rdf.tree.DecisionTree(root);\n}",
                "ClassName": "DecisionTreeTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildTestTree",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 5,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 35,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.apache.commons.math3.linear.RealMatrix a = new org.apache.commons.math3.linear.Array2DRowRealMatrix(new double[][]{ new double[]{ 1.3, -2.0, 3.0 }, new double[]{ 2.0, 0.0, 5.0 }, new double[]{ 0.0, -1.5, 5.5 } });\n    com.cloudera.oryx.common.math.Solver solver = new com.cloudera.oryx.common.math.LinearSystemSolver().getSolver(a);\n    org.junit.Assert.assertNotNull(solver);\n    double[] y = solver.solveDToD(new double[]{ 1.0, 2.0, 6.5 });\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(new double[]{ -1.9560439560439564, 0.002197802197802894, 1.1824175824175824 }, y);\n}",
        "ClassName": "LinearSystemSolverTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testSolveDToD",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "LinearSystemSolver",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (M == null) {\n        return null;\n    }\n    org.apache.commons.math3.linear.RRQRDecomposition decomposition = new org.apache.commons.math3.linear.RRQRDecomposition(M, com.cloudera.oryx.common.math.LinearSystemSolver.SINGULARITY_THRESHOLD);\n    org.apache.commons.math3.linear.DecompositionSolver solver = decomposition.getSolver();\n    if (solver.isNonSingular()) {\n        return new com.cloudera.oryx.common.math.Solver(solver);\n    }\n    int apparentRank = decomposition.getRank(0.01);\n    com.cloudera.oryx.common.math.LinearSystemSolver.log.warn(\"{} x {} matrix is near-singular (threshold {}). Add more data or decrease the \" + \"value of als.hyperparams.features, to <= about {}\", M.getRowDimension(), M.getColumnDimension(), com.cloudera.oryx.common.math.LinearSystemSolver.SINGULARITY_THRESHOLD, apparentRank);\n    throw new com.cloudera.oryx.common.math.SingularMatrixSolverException(apparentRank, \"Apparent rank: \" + apparentRank);\n}",
                "ClassName": "LinearSystemSolver",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "getSolver",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 13,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return solver.solve(new org.apache.commons.math3.linear.ArrayRealVector(b, false)).toArray();\n}",
                "ClassName": "Solver",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "solveDToD",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertArrayEquals(expecteds, actuals, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertArrayEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 2,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 21,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.common.OryxTest.assertEquals(14.0, new com.cloudera.oryx.app.kmeans.SquaredDistanceFn().distance(new double[]{ 1.0, 2.0, 3.0 }, new double[]{ 0.0, 4.0, 6.0 }));\n    com.cloudera.oryx.common.OryxTest.assertEquals(2.0, new com.cloudera.oryx.app.kmeans.SquaredDistanceFn().distance(new double[]{ 0.0, 1.0 }, new double[]{ -1.0, 0.0 }));\n    com.cloudera.oryx.common.OryxTest.assertEquals(0.0, new com.cloudera.oryx.app.kmeans.SquaredDistanceFn().distance(new double[]{ 1.0 }, new double[]{ 1.0 }));\n}",
        "ClassName": "SquaredDistanceFnTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDistance",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "SquaredDistanceFn",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int length = t1.length;\n    com.google.common.base.Preconditions.checkArgument(length == t2.length);\n    double sumSq = 0.0;\n    for (int i = 0; i < length; i++) {\n        double diff = t1[i] - t2[i];\n        sumSq += diff * diff;\n    }\n    return sumSq;\n}",
                "ClassName": "SquaredDistanceFn",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "distance",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 10,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 15,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    javax.ws.rs.core.Response response = target(\"/add/\" + com.cloudera.oryx.app.serving.kmeans.AddTest.ADD_DATA.split(\"\\n\")[0]).request().post(javax.ws.rs.client.Entity.text(\"\"));\n    org.junit.Assert.assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = com.cloudera.oryx.lambda.serving.MockTopicProducer.getData();\n    org.junit.Assert.assertEquals(1, data.size());\n    org.junit.Assert.assertArrayEquals(com.cloudera.oryx.app.serving.kmeans.AddTest.EXPECTED_TOPIC[0], data.get(0).getSecond().split(\",\"));\n}",
        "ClassName": "AddTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testURIAdd",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return com.cloudera.oryx.lambda.serving.MockTopicProducer.DATA;\n}",
                "ClassName": "MockTopicProducer",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getData",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 6,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.serving.als.IngestTest.checkResponse(target(\"/ingest\").request().post(javax.ws.rs.client.Entity.text(com.cloudera.oryx.app.serving.als.IngestTest.INGEST_DATA)));\n}",
        "ClassName": "IngestTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 12,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testSimpleIngest",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 12,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = com.cloudera.oryx.lambda.serving.MockTopicProducer.getData();\n    for (int i = 0; i < data.size(); i++) {\n        com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> actual = data.get(i);\n        org.junit.Assert.assertNull(actual.getFirst());\n        java.lang.String[] tokens = actual.getSecond().split(\",\");\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][0], tokens[0]);\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][1], tokens[1]);\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][2], tokens[2]);\n    }\n}",
                "ClassName": "IngestTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 3,
                "MethodName": "checkResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 12,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.dmg.pmml.MiningSchema miningSchema = com.cloudera.oryx.app.pmml.AppPMMLUtils.buildMiningSchema(com.cloudera.oryx.app.pmml.AppPMMLUtilsTest.buildTestSchema());\n    java.util.List<java.lang.String> featureNames = com.cloudera.oryx.app.pmml.AppPMMLUtils.getFeatureNames(miningSchema);\n    org.junit.Assert.assertEquals(java.util.Arrays.asList(\"foo\", \"bar\", \"baz\", \"bing\"), featureNames);\n}",
        "ClassName": "AppPMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 6,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testListFeaturesMS",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return com.cloudera.oryx.app.pmml.AppPMMLUtils.buildMiningSchema(schema, null);\n}",
                "ClassName": "AppPMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "buildMiningSchema",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.input-schema.feature-names\", \"[\\\"foo\\\",\\\"bar\\\",\\\"baz\\\",\\\"bing\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.id-features\", \"[\\\"baz\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.ignored-features\", \"[\\\"foo\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[\\\"bar\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.target-feature\", \"\\\"bar\\\"\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    return new com.cloudera.oryx.app.schema.InputSchema(config);\n}",
                "ClassName": "AppPMMLUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildTestSchema",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 10,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.List<java.lang.String> names = new java.util.ArrayList<>();\n    for (org.dmg.pmml.MiningField field : miningSchema.getMiningFields()) {\n        names.add(field.getName().getValue());\n    }\n    return names;\n}",
                "ClassName": "AppPMMLUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "getFeatureNames",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 20,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String response = target(\"/recommendToMany/U0/U2\").request().get(java.lang.String.class);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testCSVTopByScore(2, response);\n}",
        "ClassName": "RecommendToManyTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRecommendToManyCSV",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testCSVTop(expectedSize, response, false, false);\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testCSVTopByScore",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    javax.ws.rs.core.Response response = target(\"/pref/U1/I1\").request().post(javax.ws.rs.client.Entity.entity(com.cloudera.oryx.app.serving.als.PreferenceTest.PREFERENCE_DATA, com.cloudera.oryx.app.serving.CSVMessageBodyWriter.TEXT_CSV_TYPE));\n    com.cloudera.oryx.app.serving.als.PreferenceTest.checkResponse(response, \"U1\", \"I1\", \"2.5\");\n}",
        "ClassName": "PreferenceTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 11,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testPostCSV",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 11,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = com.cloudera.oryx.lambda.serving.MockTopicProducer.getData();\n    org.junit.Assert.assertEquals(1, data.size());\n    org.junit.Assert.assertNull(data.get(0).getFirst());\n    java.lang.String[] tokens = data.get(0).getSecond().split(\",\");\n    org.junit.Assert.assertEquals(expectedUser, tokens[0]);\n    org.junit.Assert.assertEquals(expectedItem, tokens[1]);\n    org.junit.Assert.assertEquals(expectedValue, tokens[2]);\n    java.lang.Long.parseLong(tokens[3]);\n}",
                "ClassName": "PreferenceTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 11,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 11,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.rdf.predict.CategoricalPrediction> predictions = java.util.Arrays.asList(new com.cloudera.oryx.app.rdf.predict.CategoricalPrediction(new int[]{ 0, 1, 2 }), new com.cloudera.oryx.app.rdf.predict.CategoricalPrediction(new int[]{ 6, 2, 0 }), new com.cloudera.oryx.app.rdf.predict.CategoricalPrediction(new int[]{ 0, 2, 0 }));\n    double[] weights = new double[]{ 1.0, 1.0, 1.0 };\n    com.cloudera.oryx.app.rdf.predict.CategoricalPrediction vote = ((com.cloudera.oryx.app.rdf.predict.CategoricalPrediction) (com.cloudera.oryx.app.rdf.predict.WeightedPrediction.voteOnFeature(predictions, weights)));\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.example.FeatureType.CATEGORICAL, vote.getFeatureType());\n    org.junit.Assert.assertEquals(1, vote.getMostProbableCategoryEncoding());\n}",
        "ClassName": "WeightedPredictionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 6,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testCategoricalVote",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(com.cloudera.oryx.app.rdf.predict.CategoricalPrediction.sum(categoryCounts));\n    this.categoryCounts = categoryCounts;\n    recompute();\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(!predictions.isEmpty(), \"No predictions\");\n    com.google.common.base.Preconditions.checkArgument(predictions.size() == weights.length, \"%s predictions but %s weights?\", predictions.size(), weights.length);\n    switch (predictions.get(0).getFeatureType()) {\n        case NUMERIC :\n            @java.lang.SuppressWarnings(\"unchecked\")\n            java.util.List<com.cloudera.oryx.app.rdf.predict.NumericPrediction> numericVotes = ((java.util.List<com.cloudera.oryx.app.rdf.predict.NumericPrediction>) (predictions));\n            return com.cloudera.oryx.app.rdf.predict.WeightedPrediction.voteOnNumericFeature(numericVotes, weights);\n        case CATEGORICAL :\n            @java.lang.SuppressWarnings(\"unchecked\")\n            java.util.List<com.cloudera.oryx.app.rdf.predict.CategoricalPrediction> categoricalVotes = ((java.util.List<com.cloudera.oryx.app.rdf.predict.CategoricalPrediction>) (predictions));\n            return com.cloudera.oryx.app.rdf.predict.WeightedPrediction.voteOnCategoricalFeature(categoricalVotes, weights);\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}",
                "ClassName": "WeightedPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "voteOnFeature",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 16,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.rdf.example.FeatureType.CATEGORICAL;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getFeatureType",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return maxCategory;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getMostProbableCategoryEncoding",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 27,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTestContinuous(com.cloudera.oryx.ml.param.HyperParams.around(-3.0, 0.1), 1, -3.0);\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTestContinuous(com.cloudera.oryx.ml.param.HyperParams.around(-3.0, 0.1), 2, -3.05, -2.95);\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTestContinuous(com.cloudera.oryx.ml.param.HyperParams.around(-3.0, 0.1), 3, -3.1, -3.0, -2.9);\n}",
        "ClassName": "HyperParamsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testAroundContinuous",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<java.lang.Double> values = range.getTrialValues(howMany);\n    double[] valueArray = new double[values.size()];\n    for (int i = 0; i < valueArray.length; i++) {\n        valueArray[i] = values.get(i);\n    }\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(expected, valueArray);\n}",
                "ClassName": "HyperParamsTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 2,
                "MethodName": "doTestContinuous",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new com.cloudera.oryx.ml.param.ContinuousAround(value, step);\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "around",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 11,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    javax.ws.rs.core.Response response = target(\"/pref/U2/I2\").request().post(javax.ws.rs.client.Entity.text(\"aBc!\"));\n    org.junit.Assert.assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());\n}",
        "ClassName": "PreferenceTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testPostWithBadItemValue",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.als.AbstractRescorerProvider.loadRescorerProviders(\"noSuchClass\");\n}",
        "ClassName": "AbstractRescorerProviderTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 3,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 14,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNoClass",
        "MinimumCyclomaticComplexity": 3,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 14,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    if ((classNamesString == null) || classNamesString.isEmpty()) {\n        return null;\n    }\n    java.lang.String[] classNames = classNamesString.split(\",\");\n    if (classNames.length == 1) {\n        return com.cloudera.oryx.app.als.AbstractRescorerProvider.loadInstanceOf(classNames[0]);\n    }\n    java.util.List<com.cloudera.oryx.app.als.RescorerProvider> providers = new java.util.ArrayList<>(classNames.length);\n    for (java.lang.String className : classNames) {\n        providers.add(com.cloudera.oryx.app.als.AbstractRescorerProvider.loadInstanceOf(className));\n    }\n    return new com.cloudera.oryx.app.als.MultiRescorerProvider(providers);\n}",
                "ClassName": "AbstractRescorerProvider",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "loadRescorerProviders",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 14,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 14,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.common.OryxTest.assertEquals(5.0, com.cloudera.oryx.app.mllib.kmeans.SilhouetteCoefficient.calcSilhouetteCoefficient(-0.8, 0.2));\n    com.cloudera.oryx.common.OryxTest.assertEquals(-1.25, com.cloudera.oryx.app.mllib.kmeans.SilhouetteCoefficient.calcSilhouetteCoefficient(0.8, -0.2));\n    com.cloudera.oryx.common.OryxTest.assertEquals(0.0, com.cloudera.oryx.app.mllib.kmeans.SilhouetteCoefficient.calcSilhouetteCoefficient(1.5, 1.5));\n    com.cloudera.oryx.common.OryxTest.assertEquals(1.0, com.cloudera.oryx.app.mllib.kmeans.SilhouetteCoefficient.calcSilhouetteCoefficient(1.5, java.lang.Double.POSITIVE_INFINITY));\n    com.cloudera.oryx.common.OryxTest.assertEquals(-1.0, com.cloudera.oryx.app.mllib.kmeans.SilhouetteCoefficient.calcSilhouetteCoefficient(java.lang.Double.POSITIVE_INFINITY, 1.5));\n}",
        "ClassName": "KMeansEvalIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 6,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testComputeSilhouetteCoefficient",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (d1 < d2) {\n        return 1.0 - (d1 / d2);\n    }\n    if (d1 > d2) {\n        return (d2 / d1) - 1.0;\n    }\n    return 0.0;\n}",
                "ClassName": "SilhouetteCoefficient",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 1,
                "MethodName": "calcSilhouetteCoefficient",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 2,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 12,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"a\", \"1\", \"foo\" }, com.cloudera.oryx.app.common.fn.MLFunctions.PARSE_FN.call(\"a,1,foo\"));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"a\", \"1\", \"foo\", \"\" }, com.cloudera.oryx.app.common.fn.MLFunctions.PARSE_FN.call(\"a,1,foo,\"));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"2.3\" }, com.cloudera.oryx.app.common.fn.MLFunctions.PARSE_FN.call(\"2.3\"));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"\" }, com.cloudera.oryx.app.common.fn.MLFunctions.PARSE_FN.call(\"\"));\n}",
        "ClassName": "MLFunctionsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testParseCSV",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    int[] counts = new int[]{ 0, 1, 3, 0, 4, 0 };\n    com.cloudera.oryx.app.rdf.predict.CategoricalPrediction prediction = new com.cloudera.oryx.app.rdf.predict.CategoricalPrediction(counts);\n    prediction.update(0, 3);\n    prediction.update(1, 9);\n    org.junit.Assert.assertArrayEquals(new int[]{ 3, 10, 3, 0, 4, 0 }, prediction.getCategoryCounts());\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(new double[]{ 0.15, 0.5, 0.15, 0.0, 0.2, 0.0 }, prediction.getCategoryProbabilities());\n}",
        "ClassName": "CategoricalPredictionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testUpdate2",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(com.cloudera.oryx.app.rdf.predict.CategoricalPrediction.sum(categoryCounts));\n    this.categoryCounts = categoryCounts;\n    recompute();\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    categoryCounts[encoding] += count;\n    setCount(getCount() + count);\n    recompute();\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "update",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return categoryCounts;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getCategoryCounts",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertArrayEquals(expecteds, actuals, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertArrayEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return categoryProbabilities;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getCategoryProbabilities",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 19,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.dmg.pmml.PMML model = com.cloudera.oryx.app.pmml.AppPMMLUtilsTest.buildDummyModel();\n    org.junit.Assert.assertNull(com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionValue(model, \"foo\"));\n    com.cloudera.oryx.app.pmml.AppPMMLUtils.addExtension(model, \"foo\", \"bar\");\n    org.dmg.pmml.PMML reserializedModel = com.cloudera.oryx.common.pmml.PMMLUtils.fromString(com.cloudera.oryx.common.pmml.PMMLUtils.toString(model));\n    org.junit.Assert.assertEquals(\"bar\", com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionValue(reserializedModel, \"foo\"));\n}",
        "ClassName": "AppPMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 6,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testExtensionValue",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.dmg.pmml.Node node = new org.dmg.pmml.Node();\n    node.setRecordCount(123.0);\n    org.dmg.pmml.TreeModel treeModel = new org.dmg.pmml.TreeModel(org.dmg.pmml.MiningFunctionType.CLASSIFICATION, null, node);\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.buildSkeletonPMML();\n    pmml.getModels().add(treeModel);\n    return pmml;\n}",
                "ClassName": "AppPMMLUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildDummyModel",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    for (org.dmg.pmml.Extension extension : pmml.getExtensions()) {\n        if (name.equals(extension.getName())) {\n            return extension.getValue();\n        }\n    }\n    return null;\n}",
                "ClassName": "AppPMMLUtils",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "getExtensionValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    pmml.getExtensions().add(new org.dmg.pmml.Extension().withName(key).withValue(value.toString()));\n}",
                "ClassName": "AppPMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "addExtension",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return org.jpmml.model.JAXBUtil.unmarshalPMML(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(pmmlString)));\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "fromString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (java.io.StringWriter out = new java.io.StringWriter()) {\n        org.jpmml.model.JAXBUtil.marshalPMML(pmml, new javax.xml.transform.stream.StreamResult(out));\n        return out.toString();\n    } catch (javax.xml.bind.JAXBException | java.io.IOException e) {\n        throw new java.lang.IllegalStateException(e);\n    }\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "toString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 2,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 30,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String response = target(\"/recommendToAnonymous/I4=1.0/I5=2.0\").request().get(java.lang.String.class);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testCSVTopByScore(7, response);\n}",
        "ClassName": "RecommendToAnonymousTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRecommendToAnonymousCSV",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testCSVTop(expectedSize, response, false, false);\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testCSVTopByScore",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    javax.ws.rs.core.Response response = target(\"/pref/U1/I2\").request().delete();\n    com.cloudera.oryx.app.serving.als.PreferenceTest.checkResponse(response, \"U1\", \"I2\", \"\");\n}",
        "ClassName": "PreferenceTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 11,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDelete",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 11,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = com.cloudera.oryx.lambda.serving.MockTopicProducer.getData();\n    org.junit.Assert.assertEquals(1, data.size());\n    org.junit.Assert.assertNull(data.get(0).getFirst());\n    java.lang.String[] tokens = data.get(0).getSecond().split(\",\");\n    org.junit.Assert.assertEquals(expectedUser, tokens[0]);\n    org.junit.Assert.assertEquals(expectedItem, tokens[1]);\n    org.junit.Assert.assertEquals(expectedValue, tokens[2]);\n    java.lang.Long.parseLong(tokens[3]);\n}",
                "ClassName": "PreferenceTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 11,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 11,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    doTestCompressedResponse(\"gzip\", java.util.zip.GZIPInputStream.class);\n}",
        "ClassName": "CompressedResponseTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 9,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testGzipResponse",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 9,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    byte[] bytes = target(\"/item/allIDs\").request().acceptEncoding(encoding).get(byte[].class);\n    java.lang.String content;\n    try (java.io.Reader reader = new java.io.InputStreamReader(com.cloudera.oryx.common.lang.ClassUtils.loadInstanceOf(decompressingStreamClass.getName(), decompressingStreamClass, new java.lang.Class<?>[]{ java.io.InputStream.class }, new java.lang.Object[]{ new java.io.ByteArrayInputStream(bytes) }), java.nio.charset.StandardCharsets.UTF_8)) {\n        content = com.google.common.io.CharStreams.toString(reader);\n    }\n    java.lang.String expected = target(\"/item/allIDs\").request().get(java.lang.String.class);\n    org.junit.Assert.assertEquals(expected, content);\n}",
                "ClassName": "CompressedResponseTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "doTestCompressedResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 9,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String response = target(\"/because/U0/I0\").request().get(java.lang.String.class);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testCSVTopByScore(3, response);\n}",
        "ClassName": "BecauseTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBecauseCSV",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testCSVTop(expectedSize, response, false, false);\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testCSVTopByScore",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    new com.cloudera.oryx.common.lang.LoggingRunnable() {\n        @java.lang.Override\n        public void doRun() throws java.io.IOException {\n            throw com.cloudera.oryx.common.lang.LoggingTest.buildIOE();\n        }\n    }.run();\n}",
        "ClassName": "LoggingTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testLoggingRunnableException",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "1",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try {\n        doRun();\n    } catch (java.lang.Exception e) {\n        com.cloudera.oryx.common.lang.LoggingRunnable.log.warn(\"Unexpected error in {}\", this, e);\n        throw new java.lang.IllegalStateException(e);\n    } catch (java.lang.Throwable t) {\n        com.cloudera.oryx.common.lang.LoggingRunnable.log.warn(\"Unexpected error in {}\", this, t);\n        throw t;\n    }\n}",
                "ClassName": "LoggingRunnable",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "run",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 11,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n}",
                "ClassName": "LoggingRunnable",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.io.IOException ioe = new java.io.IOException(\"It's safe to ignore this exception\");\n    ioe.setStackTrace(new java.lang.StackTraceElement[0]);\n    return ioe;\n}",
                "ClassName": "LoggingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildIOE",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 20,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String serialized = com.cloudera.oryx.common.settings.ConfigUtils.serialize(com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    org.junit.Assert.assertTrue(serialized.contains(\"update-class\"));\n    com.typesafe.config.Config deserialized = com.cloudera.oryx.common.settings.ConfigUtils.deserialize(serialized);\n    org.junit.Assert.assertEquals(com.cloudera.oryx.common.settings.ConfigUtils.getDefault().getString(\"oryx.serving.api.port\"), deserialized.getString(\"oryx.serving.api.port\"));\n}",
        "ClassName": "ConfigUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testSerialize",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return config.root().withOnlyKey(\"oryx\").render(com.typesafe.config.ConfigRenderOptions.concise());\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "serialize",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.typesafe.config.ConfigFactory.parseString(serialized).resolve().withFallback(com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "deserialize",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 9,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String response = target(\"/mostSurprising/U0\").request().get(java.lang.String.class);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testCSVLeastByScore(3, response);\n}",
        "ClassName": "MostSurprisingTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testMostSurprisingCSV",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testCSVTop(expectedSize, response, false, true);\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testCSVLeastByScore",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    java.nio.file.Path dataDir = tempDir.resolve(\"data\");\n    java.nio.file.Path modelDir = tempDir.resolve(\"model\");\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.batch.update-class\", com.cloudera.oryx.app.mllib.als.ALSUpdate.class.getName());\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.data-dir\", dataDir);\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.model-dir\", modelDir);\n    overlayConfig.put(\"oryx.batch.streaming.generation-interval-sec\", com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.GEN_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.batch.streaming.block-interval-sec\", com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.BLOCK_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.als.hyperparams.features\", (\"[1,\" + com.cloudera.oryx.app.mllib.als.ALSHyperParamTuningIT.TEST_FEATURES) + \"]\");\n    overlayConfig.put(\"oryx.ml.eval.candidates\", 2);\n    overlayConfig.put(\"oryx.ml.eval.parallelism\", 2);\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    startServerProduceConsumeTopics(config, new com.cloudera.oryx.app.mllib.als.FeaturesALSDataGenerator(com.cloudera.oryx.app.mllib.als.ALSHyperParamTuningIT.TEST_ELEMENTS, com.cloudera.oryx.app.mllib.als.ALSHyperParamTuningIT.TEST_ELEMENTS, com.cloudera.oryx.app.mllib.als.ALSHyperParamTuningIT.TEST_FEATURES), com.cloudera.oryx.app.mllib.als.ALSHyperParamTuningIT.DATA_TO_WRITE, com.cloudera.oryx.app.mllib.als.ALSHyperParamTuningIT.WRITE_INTERVAL_MSEC);\n    java.util.List<java.nio.file.Path> modelInstanceDirs = com.cloudera.oryx.common.io.IOUtils.listFiles(modelDir, \"*\");\n    com.cloudera.oryx.lambda.AbstractBatchIT.checkIntervals(modelInstanceDirs.size(), com.cloudera.oryx.app.mllib.als.ALSHyperParamTuningIT.DATA_TO_WRITE, com.cloudera.oryx.app.mllib.als.ALSHyperParamTuningIT.WRITE_INTERVAL_MSEC, com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.GEN_INTERVAL_SEC);\n    java.nio.file.Path latestModelDir = modelInstanceDirs.get(modelInstanceDirs.size() - 1);\n    java.nio.file.Path modelFile = latestModelDir.resolve(com.cloudera.oryx.ml.MLUpdate.MODEL_FILE_NAME);\n    org.junit.Assert.assertTrue(\"No such model file: \" + modelFile, java.nio.file.Files.exists(modelFile));\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.read(modelFile);\n    org.junit.Assert.assertEquals(8, pmml.getExtensions().size());\n    org.junit.Assert.assertNotNull(com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionValue(pmml, \"X\"));\n    org.junit.Assert.assertNotNull(com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionValue(pmml, \"Y\"));\n    java.util.Map<java.lang.String, java.lang.Object> expected = new java.util.HashMap<>();\n    expected.put(\"features\", com.cloudera.oryx.app.mllib.als.ALSHyperParamTuningIT.TEST_FEATURES);\n    expected.put(\"lambda\", 0.001);\n    expected.put(\"implicit\", true);\n    expected.put(\"alpha\", 1.0);\n    com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.checkExtensions(pmml, expected);\n}",
        "ClassName": "ALSHyperParamTuningIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 10,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testHyperParameterTuning",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 32,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this.numUsers = numUsers;\n    this.numProducts = numProducts;\n    this.features = features;\n}",
                "ClassName": "FeaturesALSDataGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (tempDir == null) {\n        tempDir = java.nio.file.Files.createTempDirectory(\"OryxTest\").toAbsolutePath();\n        com.cloudera.oryx.common.OryxTest.log.info(\"Test temp dir is {}\", tempDir);\n        tempDir.toFile().deleteOnExit();\n    }\n    return tempDir;\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getTempDir",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 2,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.nio.file.Path finalPath = (java.nio.file.Files.exists(path, java.nio.file.LinkOption.NOFOLLOW_LINKS)) ? path.toRealPath(java.nio.file.LinkOption.NOFOLLOW_LINKS) : path;\n    overlay.put(key, (\"\\\"\" + finalPath.toUri()) + \"\\\"\");\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "set",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    java.lang.String topicBroker = (\"\\\"localhost:\" + localKafkaBrokerPort) + '\"';\n    java.lang.String topicLockMaster = (\"\\\"localhost:\" + localZKPort) + '\"';\n    overlay.put(\"oryx.input-topic.broker\", topicBroker);\n    overlay.put(\"oryx.input-topic.lock.master\", topicLockMaster);\n    overlay.put(\"oryx.update-topic.broker\", topicBroker);\n    overlay.put(\"oryx.update-topic.lock.master\", topicLockMaster);\n    java.lang.String masterLocalAllCores = \"\\\"local[*]\\\"\";\n    overlay.put(\"oryx.batch.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.speed.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.batch.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.speed.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int zkPort = getZKPort();\n    com.cloudera.oryx.kafka.util.ProduceData produce = new com.cloudera.oryx.kafka.util.ProduceData(datumGenerator, zkPort, getKafkaBrokerPort(), com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC, howMany, intervalMsec);\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> keyMessages;\n    try (com.cloudera.oryx.common.collection.CloseableIterator<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = new com.cloudera.oryx.kafka.util.ConsumeData(com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, zkPort).iterator();com.cloudera.oryx.lambda.BatchLayer<?, ?, ?> batchLayer = new com.cloudera.oryx.lambda.BatchLayer(config)) {\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Starting batch layer\");\n        batchLayer.start();\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Starting consumer thread\");\n        com.cloudera.oryx.kafka.util.ConsumeTopicRunnable consumeInput = new com.cloudera.oryx.kafka.util.ConsumeTopicRunnable(data);\n        new java.lang.Thread(consumeInput).start();\n        java.lang.Thread.sleep(3000);\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Producing data\");\n        produce.start();\n        long genIntervalSec = config.getInt(\"oryx.batch.streaming.generation-interval-sec\");\n        java.lang.Thread.sleep(genIntervalSec * 1000);\n        keyMessages = consumeInput.getKeyMessages();\n    } finally {\n        produce.deleteTopic();\n    }\n    return keyMessages;\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServerProduceConsumeTopics",
                "NumberOfAsynchronousWaits": 2,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 21,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 7
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(java.nio.file.Files.isDirectory(dir), \"%s is not a directory\", dir);\n    java.util.List<java.lang.String> globLevels;\n    if ((glob == null) || glob.isEmpty()) {\n        globLevels = java.util.Collections.singletonList(\"*\");\n    } else {\n        globLevels = java.util.Arrays.asList(glob.split(\"/\"));\n    }\n    com.google.common.base.Preconditions.checkState(!globLevels.isEmpty());\n    java.util.List<java.nio.file.Path> paths = new java.util.ArrayList<>();\n    paths.add(dir);\n    for (java.lang.String globLevel : globLevels) {\n        java.util.List<java.nio.file.Path> newPaths = new java.util.ArrayList<>();\n        for (java.nio.file.Path existingPath : paths) {\n            if (java.nio.file.Files.isDirectory(existingPath)) {\n                try (java.nio.file.DirectoryStream<java.nio.file.Path> stream = java.nio.file.Files.newDirectoryStream(existingPath, globLevel)) {\n                    for (java.nio.file.Path path : stream) {\n                        if (!path.getFileName().toString().startsWith(\".\")) {\n                            newPaths.add(path);\n                        }\n                    }\n                }\n            }\n        }\n        paths = newPaths;\n    }\n    java.util.Collections.sort(paths);\n    return paths;\n}",
                "ClassName": "IOUtils",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "listFiles",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 29,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int minExpectedIntervals = (dataToWrite * writeIntervalMsec) / (1000 * genIntervalSec);\n    org.junit.Assert.assertTrue(((\"Expected \" + minExpectedIntervals) + \" intervals (or up to +4 more) but got \") + numIntervals, (numIntervals >= minExpectedIntervals) && (numIntervals <= (minExpectedIntervals + 4)));\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkIntervals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (java.io.InputStream in = com.cloudera.oryx.common.io.IOUtils.readMaybeCompressed(path)) {\n        return com.cloudera.oryx.common.pmml.PMMLUtils.read(in);\n    }\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "read",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    for (org.dmg.pmml.Extension extension : pmml.getExtensions()) {\n        if (name.equals(extension.getName())) {\n            return extension.getValue();\n        }\n    }\n    return null;\n}",
                "ClassName": "AppPMMLUtils",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "getExtensionValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    for (java.util.Map.Entry<java.lang.String, ?> e : expected.entrySet()) {\n        java.lang.String key = e.getKey();\n        org.junit.Assert.assertEquals((\"Value for key \" + key) + \" did not match\", e.getValue().toString(), com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionValue(pmml, key));\n    }\n}",
                "ClassName": "AbstractAppMLlibIT",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 4,
                "MethodName": "checkExtensions",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 11,
        "TotalNumberOfAsynchronousWaits": 2,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 2,
        "TotalNumberOfLines": 126,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 7
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.serving.als.model.ALSServingModel model = new com.cloudera.oryx.app.serving.als.model.ALSServingModel(2, true, null);\n    com.cloudera.oryx.app.serving.als.model.ALSServingModelTest.populateKnownItems(model);\n    com.cloudera.oryx.common.OryxTest.assertContainsSame(java.util.Arrays.asList(\"I0\", \"I1\"), model.getKnownItems(\"U0\"));\n    com.cloudera.oryx.common.OryxTest.assertContainsSame(java.util.Arrays.asList(\"I0\", \"I1\", \"I2\"), model.getKnownItems(\"U1\"));\n    com.cloudera.oryx.common.OryxTest.assertContainsSame(java.util.Arrays.asList(\"I8\", \"I9\"), model.getKnownItems(\"U9\"));\n    java.util.Map<java.lang.String, java.lang.Integer> userCounts = model.getUserCounts();\n    org.junit.Assert.assertEquals(2, userCounts.get(\"U0\").intValue());\n    org.junit.Assert.assertEquals(3, userCounts.get(\"U1\").intValue());\n    org.junit.Assert.assertEquals(2, userCounts.get(\"U9\").intValue());\n    java.util.Map<java.lang.String, java.lang.Integer> itemCounts = model.getItemCounts();\n    org.junit.Assert.assertEquals(2, itemCounts.get(\"I0\").intValue());\n    org.junit.Assert.assertEquals(3, itemCounts.get(\"I1\").intValue());\n    org.junit.Assert.assertEquals(2, itemCounts.get(\"I9\").intValue());\n}",
        "ClassName": "ALSServingModelTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 12,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 4,
        "MethodName": "testKnownItems",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 6,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 15,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(features > 0);\n    X = net.openhft.koloboke.collect.map.hash.HashObjObjMaps.newMutableMap();\n    Y = ((net.openhft.koloboke.collect.map.ObjObjMap<java.lang.String, float[]>[]) (java.lang.reflect.Array.newInstance(net.openhft.koloboke.collect.map.ObjObjMap.class, com.cloudera.oryx.app.serving.als.model.ALSServingModel.PARTITIONS)));\n    for (int i = 0; i < Y.length; i++) {\n        Y[i] = net.openhft.koloboke.collect.map.hash.HashObjObjMaps.newMutableMap();\n    }\n    recentNewUsers = new java.util.HashSet<>();\n    recentNewItems = ((java.util.Collection<java.lang.String>[]) (java.lang.reflect.Array.newInstance(java.util.HashSet.class, com.cloudera.oryx.app.serving.als.model.ALSServingModel.PARTITIONS)));\n    for (int i = 0; i < recentNewItems.length; i++) {\n        recentNewItems[i] = new java.util.HashSet<>();\n    }\n    knownItems = net.openhft.koloboke.collect.map.hash.HashObjObjMaps.newMutableMap();\n    xLock = new java.util.concurrent.locks.ReentrantReadWriteLock();\n    yLocks = new java.util.concurrent.locks.ReentrantReadWriteLock[Y.length];\n    for (int i = 0; i < yLocks.length; i++) {\n        yLocks[i] = new java.util.concurrent.locks.ReentrantReadWriteLock();\n    }\n    this.features = features;\n    this.implicit = implicit;\n    this.rescorerProvider = rescorerProvider;\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 22,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 18
            },
            {
                "Body": "{\n    for (int i = 0; i < 10; i++) {\n        java.lang.String userID = \"U\" + i;\n        for (int j = 0; j < 10; j++) {\n            if (java.lang.Math.abs(i - j) <= 1) {\n                java.lang.String itemID = \"I\" + j;\n                model.addKnownItems(userID, java.util.Collections.singleton(itemID));\n            }\n        }\n    }\n}",
                "ClassName": "ALSServingModelTest",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 2,
                "MethodName": "populateKnownItems",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 11,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (expected == null) {\n        org.junit.Assert.assertNull(actual);\n    } else {\n        org.junit.Assert.assertNotNull(actual);\n        org.junit.Assert.assertEquals(expected.size(), actual.size());\n        org.junit.Assert.assertTrue(expected.containsAll(actual) && actual.containsAll(expected));\n    }\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "assertContainsSame",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return doGetKnownItems(user);\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getKnownItems",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    net.openhft.koloboke.collect.map.ObjIntMap<java.lang.String> counts = net.openhft.koloboke.collect.map.hash.HashObjIntMaps.newUpdatableMap();\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(xLock.readLock())) {\n        for (java.util.Map.Entry<java.lang.String, net.openhft.koloboke.collect.set.ObjSet<java.lang.String>> entry : knownItems.entrySet()) {\n            java.lang.String userID = entry.getKey();\n            java.util.Collection<?> ids = entry.getValue();\n            int numItems;\n            synchronized(ids) {\n                numItems = ids.size();\n            }\n            counts.addValue(userID, numItems);\n        }\n    }\n    return counts;\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "getUserCounts",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 4
            },
            {
                "Body": "{\n    net.openhft.koloboke.collect.map.ObjIntMap<java.lang.String> counts = net.openhft.koloboke.collect.map.hash.HashObjIntMaps.newUpdatableMap();\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(xLock.readLock())) {\n        for (java.util.Collection<java.lang.String> ids : knownItems.values()) {\n            synchronized(ids) {\n                for (java.lang.String id : ids) {\n                    counts.addValue(id, 1);\n                }\n            }\n        }\n    }\n    return counts;\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "getItemCounts",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 13,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 4
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 10,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 73,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 26
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.serving.rdf.PredictTest.checkResponse(getFormPostResponse(com.cloudera.oryx.app.serving.rdf.PredictTest.PREDICT_DATA, \"/predict\", null, null));\n}",
        "ClassName": "PredictTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 9,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testFormPredict",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.cloudera.oryx.lambda.serving.AbstractServingTest.checkResponse(response, Response.Status.OK, com.cloudera.oryx.app.serving.rdf.PredictTest.EXPECTED_TOPIC);\n}",
                "ClassName": "PredictTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    byte[] bytes;\n    if (compressingClass == null) {\n        bytes = data.getBytes(java.nio.charset.StandardCharsets.UTF_8);\n    } else {\n        bytes = com.cloudera.oryx.lambda.serving.AbstractServingTest.compress(data, compressingClass);\n    }\n    javax.ws.rs.core.MediaType type = (encoding == null) ? javax.ws.rs.core.MediaType.TEXT_PLAIN_TYPE : new javax.ws.rs.core.MediaType(\"application\", encoding);\n    java.io.InputStream in = new java.io.ByteArrayInputStream(bytes);\n    org.glassfish.jersey.media.multipart.file.StreamDataBodyPart filePart = new org.glassfish.jersey.media.multipart.file.StreamDataBodyPart(\"data\", in, \"data\", type);\n    try (org.glassfish.jersey.media.multipart.MultiPart multiPart = new org.glassfish.jersey.media.multipart.MultiPart(javax.ws.rs.core.MediaType.MULTIPART_FORM_DATA_TYPE)) {\n        multiPart.getBodyParts().add(filePart);\n        return target(endpoint).request().post(javax.ws.rs.client.Entity.entity(multiPart, MediaType.MULTIPART_FORM_DATA_TYPE));\n    }\n}",
                "ClassName": "AbstractServingTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getFormPostResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 18,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(5.35, com.cloudera.oryx.common.math.VectorMath.dot(com.cloudera.oryx.common.math.VectorMathTest.VEC1, com.cloudera.oryx.common.math.VectorMathTest.VEC2), com.cloudera.oryx.common.OryxTest.FLOAT_EPSILON);\n}",
        "ClassName": "VectorMathTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 8,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDotFF",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 8,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    int length = x.length;\n    double dot = 0.0;\n    for (int i = 0; i < length; i++) {\n        dot += ((double) (x[i])) * ((double) (y[i]));\n    }\n    return dot;\n}",
                "ClassName": "VectorMath",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "dot",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 8,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.predict.NumericPrediction prediction = new com.cloudera.oryx.app.rdf.predict.NumericPrediction(1.5, 1);\n    org.junit.Assert.assertEquals(1073217536, prediction.hashCode());\n    prediction.update(2.0, 2);\n    org.junit.Assert.assertEquals(1789394944, prediction.hashCode());\n}",
        "ClassName": "NumericPredictionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testHashCode",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(initialCount);\n    this.prediction = prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.lang.LangUtils.hashDouble(prediction);\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "hashCode",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int count = getCount();\n    int newTotalCount = count + newCount;\n    double newToTotal = ((double) (newCount)) / newTotalCount;\n    setCount(newTotalCount);\n    prediction += newToTotal * (newPrediction - prediction);\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "update",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 14,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String prediction = target(\"/assign/10,-1.0\").request().get(java.lang.String.class);\n    org.junit.Assert.assertEquals(1, java.lang.Integer.parseInt(prediction));\n}",
        "ClassName": "AssignTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testAssign2",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.serving.als.model.ALSServingModel model = new com.cloudera.oryx.app.serving.als.model.ALSServingModel(2, true, null);\n    org.junit.Assert.assertEquals(2, model.getFeatures());\n    org.junit.Assert.assertTrue(model.isImplicit());\n    org.junit.Assert.assertNull(model.getRescorerProvider());\n    model.setUserVector(\"U1\", new float[]{ 1.5F, -2.5F });\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(new float[]{ 1.5F, -2.5F }, model.getUserVector(\"U1\"));\n    model.setItemVector(\"I0\", new float[]{ 0.5F, 0.0F });\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(new float[]{ 0.5F, 0.0F }, model.getItemVector(\"I0\"));\n    com.cloudera.oryx.common.OryxTest.assertContainsSame(java.util.Arrays.asList(\"U1\"), model.getAllUserIDs());\n    com.cloudera.oryx.common.OryxTest.assertContainsSame(java.util.Arrays.asList(\"I0\"), model.getAllItemIDs());\n}",
        "ClassName": "ALSServingModelTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 4,
        "MethodName": "testUserItemVector",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 12,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(features > 0);\n    X = net.openhft.koloboke.collect.map.hash.HashObjObjMaps.newMutableMap();\n    Y = ((net.openhft.koloboke.collect.map.ObjObjMap<java.lang.String, float[]>[]) (java.lang.reflect.Array.newInstance(net.openhft.koloboke.collect.map.ObjObjMap.class, com.cloudera.oryx.app.serving.als.model.ALSServingModel.PARTITIONS)));\n    for (int i = 0; i < Y.length; i++) {\n        Y[i] = net.openhft.koloboke.collect.map.hash.HashObjObjMaps.newMutableMap();\n    }\n    recentNewUsers = new java.util.HashSet<>();\n    recentNewItems = ((java.util.Collection<java.lang.String>[]) (java.lang.reflect.Array.newInstance(java.util.HashSet.class, com.cloudera.oryx.app.serving.als.model.ALSServingModel.PARTITIONS)));\n    for (int i = 0; i < recentNewItems.length; i++) {\n        recentNewItems[i] = new java.util.HashSet<>();\n    }\n    knownItems = net.openhft.koloboke.collect.map.hash.HashObjObjMaps.newMutableMap();\n    xLock = new java.util.concurrent.locks.ReentrantReadWriteLock();\n    yLocks = new java.util.concurrent.locks.ReentrantReadWriteLock[Y.length];\n    for (int i = 0; i < yLocks.length; i++) {\n        yLocks[i] = new java.util.concurrent.locks.ReentrantReadWriteLock();\n    }\n    this.features = features;\n    this.implicit = implicit;\n    this.rescorerProvider = rescorerProvider;\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 22,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 18
            },
            {
                "Body": "{\n    return features;\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFeatures",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return implicit;\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isImplicit",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return rescorerProvider;\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getRescorerProvider",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkNotNull(vector);\n    com.google.common.base.Preconditions.checkArgument(vector.length == features);\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(xLock.writeLock())) {\n        if (X.put(user, vector) == null) {\n            recentNewUsers.add(user);\n        }\n    }\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "setUserVector",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 4
            },
            {
                "Body": "{\n    org.junit.Assert.assertArrayEquals(expecteds, actuals, com.cloudera.oryx.common.OryxTest.FLOAT_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertArrayEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(xLock.readLock())) {\n        return X.get(user);\n    }\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getUserVector",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 4
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkNotNull(vector);\n    com.google.common.base.Preconditions.checkArgument(vector.length == features);\n    int partition = com.cloudera.oryx.app.serving.als.model.ALSServingModel.partition(item);\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(yLocks[partition].writeLock())) {\n        if (Y[partition].put(item, vector) == null) {\n            recentNewItems[partition].add(item);\n        }\n    }\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "setItemVector",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 10,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 6
            },
            {
                "Body": "{\n    int partition = com.cloudera.oryx.app.serving.als.model.ALSServingModel.partition(item);\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(yLocks[partition].readLock())) {\n        return Y[partition].get(item);\n    }\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getItemVector",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 6
            },
            {
                "Body": "{\n    if (expected == null) {\n        org.junit.Assert.assertNull(actual);\n    } else {\n        org.junit.Assert.assertNotNull(actual);\n        org.junit.Assert.assertEquals(expected.size(), actual.size());\n        org.junit.Assert.assertTrue(expected.containsAll(actual) && actual.containsAll(expected));\n    }\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "assertContainsSame",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Collection<java.lang.String> usersList;\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(xLock.readLock())) {\n        usersList = new java.util.ArrayList(X.keySet());\n    }\n    return usersList;\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getAllUserIDs",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 4
            },
            {
                "Body": "{\n    java.util.Collection<java.lang.String> itemsList = new java.util.ArrayList<>();\n    for (int partition = 0; partition < Y.length; partition++) {\n        try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(yLocks[partition].readLock())) {\n            itemsList.addAll(Y[partition].keySet());\n        }\n    }\n    return itemsList;\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "getAllItemIDs",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 6
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 7,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 89,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 48
    },
    {
        "Body": "{\n    java.lang.String redacted = com.cloudera.oryx.common.settings.ConfigUtils.redact(\"  password=foo \\nPassword=foo\\nPASSWORD = foo\\n\" + \" the-password= foo \\nThe-Password =foo\");\n    org.junit.Assert.assertFalse(redacted.contains(\"foo\"));\n    org.junit.Assert.assertTrue(redacted.contains(\"*****\"));\n    org.junit.Assert.assertTrue(redacted.contains(\"password=\"));\n    org.junit.Assert.assertTrue(redacted.contains(\"Password=\"));\n    org.junit.Assert.assertTrue(redacted.contains(\"PASSWORD = \"));\n    org.junit.Assert.assertTrue(redacted.contains(\"the-password= \"));\n    org.junit.Assert.assertTrue(redacted.contains(\"The-Password =\"));\n}",
        "ClassName": "ConfigUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRedact",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 7,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 10,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.REDACT_PATTERN.matcher(s).replaceAll(\"$1*****\");\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "redact",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = com.cloudera.oryx.lambda.serving.ServingLayerTest.buildOverlay();\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    com.cloudera.oryx.lambda.serving.ServingLayerTest.doTestServingLayer(config);\n}",
        "ClassName": "ServingLayerTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 8,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testServingLayer",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    overlay.put(\"oryx.serving.api.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.serving.api.secure-port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.serving.application-resources\", \"com.cloudera.oryx.lambda.serving\");\n    overlay.put(\"oryx.serving.model-manager-class\", com.cloudera.oryx.lambda.serving.MockServingModelManager.class.getName());\n    overlay.put(\"oryx.serving.no-init-topics\", true);\n    return overlay;\n}",
                "ClassName": "ServingLayerTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildOverlay",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (com.cloudera.oryx.lambda.serving.ServingLayer servingLayer = new com.cloudera.oryx.lambda.serving.ServingLayer(config)) {\n        servingLayer.start();\n        org.apache.catalina.Context context = servingLayer.getContext();\n        org.junit.Assert.assertNotNull(context.findErrorPage(500));\n        org.junit.Assert.assertEquals(0, context.getApplicationLifecycleListeners().length);\n        org.junit.Assert.assertNotNull(context.findParameter(com.cloudera.oryx.common.settings.ConfigUtils.class.getName() + \".serialized\"));\n        org.junit.Assert.assertNotNull(context.getName());\n        org.junit.Assert.assertTrue(java.lang.Double.parseDouble(context.getWebappVersion()) >= 3.1);\n    }\n}",
                "ClassName": "ServingLayerTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "doTestServingLayer",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 11,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 32,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    byte[] compressed = com.cloudera.oryx.lambda.serving.AbstractServingTest.compress(com.cloudera.oryx.app.serving.als.IngestTest.INGEST_DATA, java.util.zip.DeflaterOutputStream.class);\n    javax.ws.rs.client.Entity<byte[]> entity = javax.ws.rs.client.Entity.entity(compressed, com.cloudera.oryx.app.serving.als.IngestTest.compressedVariant(MediaType.TEXT_PLAIN_TYPE, \"deflate\"));\n    com.cloudera.oryx.app.serving.als.IngestTest.checkResponse(target(\"/ingest\").request().post(entity));\n}",
        "ClassName": "IngestTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 10,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDeflateIngest",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.io.ByteArrayOutputStream bytes = new java.io.ByteArrayOutputStream();\n    try (java.io.OutputStream compressingStream = com.cloudera.oryx.common.lang.ClassUtils.loadInstanceOf(compressingClass.getName(), compressingClass, new java.lang.Class<?>[]{ java.io.OutputStream.class }, new java.lang.Object[]{ bytes })) {\n        if (compressingStream instanceof java.util.zip.ZipOutputStream) {\n            ((java.util.zip.ZipOutputStream) (compressingStream)).putNextEntry(new java.util.zip.ZipEntry(\"data\"));\n        }\n        compressingStream.write(data.getBytes(java.nio.charset.StandardCharsets.UTF_8));\n        if (compressingStream instanceof java.util.zip.ZipOutputStream) {\n            ((java.util.zip.ZipOutputStream) (compressingStream)).closeEntry();\n        }\n        compressingStream.flush();\n    } catch (java.io.IOException e) {\n        throw new java.lang.IllegalStateException(e);\n    }\n    return bytes.toByteArray();\n}",
                "ClassName": "AbstractServingTest",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 1,
                "MethodName": "compress",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 16,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return javax.ws.rs.core.Variant.mediaTypes(contentType).encodings(contentEncoding).build().get(0);\n}",
                "ClassName": "IngestTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "compressedVariant",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = com.cloudera.oryx.lambda.serving.MockTopicProducer.getData();\n    for (int i = 0; i < data.size(); i++) {\n        com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> actual = data.get(i);\n        org.junit.Assert.assertNull(actual.getFirst());\n        java.lang.String[] tokens = actual.getSecond().split(\",\");\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][0], tokens[0]);\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][1], tokens[1]);\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][2], tokens[2]);\n    }\n}",
                "ClassName": "IngestTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 3,
                "MethodName": "checkResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 31,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.apache.commons.math3.linear.RealMatrix nonSingular = new org.apache.commons.math3.linear.Array2DRowRealMatrix(new double[][]{ new double[]{ 1.3, -2.0, 3.0 }, new double[]{ 2.0, 0.0, 5.0 }, new double[]{ 0.0, -1.5, 5.5 } });\n    org.junit.Assert.assertTrue(new com.cloudera.oryx.common.math.LinearSystemSolver().isNonSingular(nonSingular));\n    org.apache.commons.math3.linear.RealMatrix singular = new org.apache.commons.math3.linear.Array2DRowRealMatrix(new double[][]{ new double[]{ 1.3, -2.0, 3.0 }, new double[]{ 2.6, -4.0, 6.0 }, new double[]{ 0.0, -1.5, 5.5 } });\n    org.junit.Assert.assertFalse(new com.cloudera.oryx.common.math.LinearSystemSolver().isNonSingular(singular));\n}",
        "ClassName": "LinearSystemSolverTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testIsNonSingular",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "LinearSystemSolver",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.apache.commons.math3.linear.QRDecomposition decomposition = new org.apache.commons.math3.linear.RRQRDecomposition(M, com.cloudera.oryx.common.math.LinearSystemSolver.SINGULARITY_THRESHOLD);\n    org.apache.commons.math3.linear.DecompositionSolver solver = decomposition.getSolver();\n    return solver.isNonSingular();\n}",
                "ClassName": "LinearSystemSolver",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isNonSingular",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 7,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings encodings = com.cloudera.oryx.app.schema.CategoricalValueEncodingsTest.makeTestValues();\n    java.util.Map<java.lang.Integer, java.lang.String> valueEncoding = encodings.getEncodingValueMap(2);\n    org.junit.Assert.assertEquals(\"3\", valueEncoding.get(0));\n    org.junit.Assert.assertEquals(\"2\", valueEncoding.get(1));\n    org.junit.Assert.assertEquals(\"1\", valueEncoding.get(2));\n    org.junit.Assert.assertEquals(\"0\", valueEncoding.get(3));\n}",
        "ClassName": "CategoricalValueEncodingsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testValue",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.Map<java.lang.Integer, java.util.Collection<java.lang.String>> distinctValues = new java.util.HashMap<>();\n    distinctValues.put(0, java.util.Arrays.asList(\"foo\", \"bar\", \"baz\"));\n    distinctValues.put(2, java.util.Arrays.asList(\"3\", \"2\", \"1\", \"0\"));\n    distinctValues.put(3, java.util.Arrays.asList(\"one\"));\n    return new com.cloudera.oryx.app.schema.CategoricalValueEncodings(distinctValues);\n}",
                "ClassName": "CategoricalValueEncodingsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "makeTestValues",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return doGetMap(index).inverse();\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getEncodingValueMap",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 10,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<java.lang.Double> items = target(\"/similarityToItem/I0/I1/I2\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.lambda.serving.AbstractServingTest.LIST_DOUBLE_TYPE);\n    org.junit.Assert.assertEquals(2, items.size());\n    org.junit.Assert.assertEquals(0.9042602737279073, items.get(0), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n    org.junit.Assert.assertEquals(-0.26486863115406456, items.get(1), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "SimilarityToItemTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testSimilarityToItem",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.input-schema.feature-names\", \"[\\\"foo\\\",\\\"bar\\\",\\\"baz\\\",\\\"bing\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.ignored-features\", \"[\\\"foo\\\",\\\"baz\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.target-feature\", \"\\\"bar\\\"\");\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[]\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    com.cloudera.oryx.app.schema.InputSchema schema = new com.cloudera.oryx.app.schema.InputSchema(config);\n    org.junit.Assert.assertEquals(0, schema.featureToPredictorIndex(3));\n    org.junit.Assert.assertEquals(3, schema.predictorToFeatureIndex(0));\n}",
        "ClassName": "InputSchemaTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 14,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testActiveFeatureIndexMapping2",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 11,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<java.lang.String> givenFeatureNames = config.getStringList(\"oryx.input-schema.feature-names\");\n    if (givenFeatureNames.isEmpty()) {\n        int numFeatures = config.getInt(\"oryx.input-schema.num-features\");\n        com.google.common.base.Preconditions.checkArgument(numFeatures > 0, \"Neither feature-names nor num-features is set\");\n        java.util.List<java.lang.String> generatedFeatureNames = new java.util.ArrayList<>(numFeatures);\n        for (int i = 0; i < numFeatures; i++) {\n            generatedFeatureNames.add(java.lang.Integer.toString(i));\n        }\n        featureNames = generatedFeatureNames;\n    } else {\n        featureNames = com.google.common.collect.ImmutableList.copyOf(givenFeatureNames);\n    }\n    int numFeatures = featureNames.size();\n    com.google.common.base.Preconditions.checkArgument(new java.util.HashSet<>(featureNames).size() == numFeatures, \"Feature names must be unique: %s\", featureNames);\n    idFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.id-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(idFeatures));\n    java.util.Collection<java.lang.String> ignoredFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.ignored-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(ignoredFeatures));\n    java.util.Collection<java.lang.String> activeFeatureSet = new java.util.HashSet<>(featureNames);\n    activeFeatureSet.removeAll(idFeatures);\n    activeFeatureSet.removeAll(ignoredFeatures);\n    activeFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    java.util.List<java.lang.String> givenNumericFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.numeric-features\");\n    java.util.List<java.lang.String> givenCategoricalFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.categorical-features\");\n    if (givenNumericFeatures == null) {\n        com.google.common.base.Preconditions.checkNotNull(givenCategoricalFeatures, \"Neither numeric-features nor categorical-features was set\");\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(givenCategoricalFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(categoricalFeatures));\n        activeFeatureSet.removeAll(categoricalFeatures);\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    } else {\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(givenNumericFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(numericFeatures));\n        activeFeatureSet.removeAll(numericFeatures);\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    }\n    targetFeature = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalString(config, \"oryx.input-schema.target-feature\");\n    if (targetFeature != null) {\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.contains(targetFeature), \"Target feature is not known, an ID, or ignored: %s\", targetFeature);\n    }\n    targetFeatureIndex = (targetFeature == null) ? -1 : featureNames.indexOf(targetFeature);\n    allToPredictorMap = com.google.common.collect.HashBiMap.create();\n    for (int featureIndex = 0, predictorIndex = 0; featureIndex < featureNames.size(); featureIndex++) {\n        if (isActive(featureIndex) && (!isTarget(featureIndex))) {\n            allToPredictorMap.put(featureIndex, predictorIndex);\n            predictorIndex++;\n        }\n    }\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 50,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.Integer predictorIndex = allToPredictorMap.get(featureIndex);\n    com.google.common.base.Preconditions.checkArgument(predictorIndex != null, \"No predictor for feature %s\", featureIndex);\n    return predictorIndex;\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "featureToPredictorIndex",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.Integer featureIndex = allToPredictorMap.inverse().get(predictorIndex);\n    com.google.common.base.Preconditions.checkArgument(featureIndex != null, \"No feature for predictor %s\", predictorIndex);\n    return featureIndex;\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "predictorToFeatureIndex",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 7,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 72,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.serving.als.IngestTest.checkResponse(getFormPostResponse(com.cloudera.oryx.app.serving.als.IngestTest.INGEST_DATA, \"/ingest\", java.util.zip.GZIPOutputStream.class, \"gzip\"));\n}",
        "ClassName": "IngestTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 13,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testGzippedFormIngest",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 12,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = com.cloudera.oryx.lambda.serving.MockTopicProducer.getData();\n    for (int i = 0; i < data.size(); i++) {\n        com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> actual = data.get(i);\n        org.junit.Assert.assertNull(actual.getFirst());\n        java.lang.String[] tokens = actual.getSecond().split(\",\");\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][0], tokens[0]);\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][1], tokens[1]);\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][2], tokens[2]);\n    }\n}",
                "ClassName": "IngestTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 3,
                "MethodName": "checkResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    byte[] bytes;\n    if (compressingClass == null) {\n        bytes = data.getBytes(java.nio.charset.StandardCharsets.UTF_8);\n    } else {\n        bytes = com.cloudera.oryx.lambda.serving.AbstractServingTest.compress(data, compressingClass);\n    }\n    javax.ws.rs.core.MediaType type = (encoding == null) ? javax.ws.rs.core.MediaType.TEXT_PLAIN_TYPE : new javax.ws.rs.core.MediaType(\"application\", encoding);\n    java.io.InputStream in = new java.io.ByteArrayInputStream(bytes);\n    org.glassfish.jersey.media.multipart.file.StreamDataBodyPart filePart = new org.glassfish.jersey.media.multipart.file.StreamDataBodyPart(\"data\", in, \"data\", type);\n    try (org.glassfish.jersey.media.multipart.MultiPart multiPart = new org.glassfish.jersey.media.multipart.MultiPart(javax.ws.rs.core.MediaType.MULTIPART_FORM_DATA_TYPE)) {\n        multiPart.getBodyParts().add(filePart);\n        return target(endpoint).request().post(javax.ws.rs.client.Entity.entity(multiPart, MediaType.MULTIPART_FORM_DATA_TYPE));\n    }\n}",
                "ClassName": "AbstractServingTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getFormPostResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 2,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 27,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertNull(com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(com.cloudera.oryx.common.settings.ConfigUtils.getDefault(), \"nonexistent\"));\n}",
        "ClassName": "ConfigUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testOptionalStringList",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return config.hasPath(key) ? config.getStringList(key) : null;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getOptionalStringList",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 6,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String prediction = target(\"/distanceToNearest/1,0\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(java.lang.String.class);\n    org.junit.Assert.assertEquals(0.0, java.lang.Double.parseDouble(prediction), com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
        "ClassName": "DistanceToNearestTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDistance",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.around(-3, 1), 1, java.util.Collections.singletonList(-3));\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.around(-3, 1), 2, java.util.Arrays.asList(-3, -2));\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.around(-3, 1), 3, java.util.Arrays.asList(-4, -3, -2));\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.around(-3, 10), 2, java.util.Arrays.asList(-8, 2));\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.around(-3, 10), 3, java.util.Arrays.asList(-13, -3, 7));\n}",
        "ClassName": "HyperParamsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testAroundDiscrete",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, hyperParams.getTrialValues(howMany));\n}",
                "ClassName": "HyperParamsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "doTest",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new com.cloudera.oryx.ml.param.DiscreteAround(value, step);\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "around",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 6,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.serving.kmeans.AddTest.checkResponse(getFormPostResponse(com.cloudera.oryx.app.serving.kmeans.AddTest.ADD_DATA, \"/add\", null, null));\n}",
        "ClassName": "AddTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 9,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testFormAdd",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.cloudera.oryx.lambda.serving.AbstractServingTest.checkResponse(response, Response.Status.NO_CONTENT, com.cloudera.oryx.app.serving.kmeans.AddTest.EXPECTED_TOPIC);\n}",
                "ClassName": "AddTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    byte[] bytes;\n    if (compressingClass == null) {\n        bytes = data.getBytes(java.nio.charset.StandardCharsets.UTF_8);\n    } else {\n        bytes = com.cloudera.oryx.lambda.serving.AbstractServingTest.compress(data, compressingClass);\n    }\n    javax.ws.rs.core.MediaType type = (encoding == null) ? javax.ws.rs.core.MediaType.TEXT_PLAIN_TYPE : new javax.ws.rs.core.MediaType(\"application\", encoding);\n    java.io.InputStream in = new java.io.ByteArrayInputStream(bytes);\n    org.glassfish.jersey.media.multipart.file.StreamDataBodyPart filePart = new org.glassfish.jersey.media.multipart.file.StreamDataBodyPart(\"data\", in, \"data\", type);\n    try (org.glassfish.jersey.media.multipart.MultiPart multiPart = new org.glassfish.jersey.media.multipart.MultiPart(javax.ws.rs.core.MediaType.MULTIPART_FORM_DATA_TYPE)) {\n        multiPart.getBodyParts().add(filePart);\n        return target(endpoint).request().post(javax.ws.rs.client.Entity.entity(multiPart, MediaType.MULTIPART_FORM_DATA_TYPE));\n    }\n}",
                "ClassName": "AbstractServingTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getFormPostResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 18,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.example.NumericFeature f = com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(1.5);\n    org.junit.Assert.assertEquals(\"1.5\", f.toString());\n}",
        "ClassName": "NumericFeatureTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testToString",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return value == 0.0F ? com.cloudera.oryx.app.rdf.example.NumericFeature.ZERO : new com.cloudera.oryx.app.rdf.example.NumericFeature(value);\n}",
                "ClassName": "NumericFeature",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "forValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return java.lang.Double.toString(value);\n}",
                "ClassName": "NumericFeature",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "toString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 6,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String response = target(\"/similarity/I0/I4/I6\").request().get(java.lang.String.class);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testCSVTopByScore(6, response);\n}",
        "ClassName": "SimilarityTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testSimilarityCSV",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testCSVTop(expectedSize, response, false, false);\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testCSVTopByScore",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String s = com.cloudera.oryx.app.rdf.tree.DecisionForestTest.buildTestForest().toString();\n    org.junit.Assert.assertTrue(s.startsWith(\"(#0 >= 1.0)\"));\n    org.junit.Assert.assertTrue(s.contains(\"(#0 >= -1.0)\"));\n}",
        "ClassName": "DecisionForestTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testToString",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.lang.StringBuilder result = new java.lang.StringBuilder();\n    for (com.cloudera.oryx.app.rdf.tree.DecisionTree tree : trees) {\n        result.append(tree).append('\\n');\n    }\n    return result.toString();\n}",
                "ClassName": "DecisionForest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "toString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new com.cloudera.oryx.app.rdf.tree.DecisionForest(new com.cloudera.oryx.app.rdf.tree.DecisionTree[]{ com.cloudera.oryx.app.rdf.tree.DecisionTreeTest.buildTestTree(), com.cloudera.oryx.app.rdf.tree.DecisionTreeTest.buildTestTree() }, new double[]{ 1.0, 2.0 }, null);\n}",
                "ClassName": "DecisionForestTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildTestForest",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 10,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(5.35, com.cloudera.oryx.common.math.VectorMath.dot(com.cloudera.oryx.common.math.VectorMathTest.VEC1D, com.cloudera.oryx.common.math.VectorMathTest.VEC2), com.cloudera.oryx.common.OryxTest.FLOAT_EPSILON);\n}",
        "ClassName": "VectorMathTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 8,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDotDF",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 8,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    int length = x.length;\n    double dot = 0.0;\n    for (int i = 0; i < length; i++) {\n        dot += x[i] * ((double) (y[i]));\n    }\n    return dot;\n}",
                "ClassName": "VectorMath",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "dot",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 8,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.Double item = target(\"/estimateForAnonymous/I3/foo\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(java.lang.Double.class);\n    org.junit.Assert.assertEquals(0.0, item, com.cloudera.oryx.lambda.serving.AbstractServingTest.DOUBLE_EPSILON);\n}",
        "ClassName": "EstimateForAnonymousTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testEstimateForAnonymousWithAllUnknown",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.Integer, java.util.Collection<java.lang.String>> distinctValues = new java.util.HashMap<>();\n    distinctValues.put(1, java.util.Arrays.asList(\"one\", \"two\", \"three\", \"four\", \"five\"));\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings categoricalValueEncodings = new com.cloudera.oryx.app.schema.CategoricalValueEncodings(distinctValues);\n    org.dmg.pmml.DataDictionary dictionary = com.cloudera.oryx.app.pmml.AppPMMLUtils.buildDataDictionary(com.cloudera.oryx.app.pmml.AppPMMLUtilsTest.buildTestSchema(), categoricalValueEncodings);\n    java.util.List<java.lang.String> featureNames = com.cloudera.oryx.app.pmml.AppPMMLUtils.getFeatureNames(dictionary);\n    org.junit.Assert.assertEquals(java.util.Arrays.asList(\"foo\", \"bar\", \"baz\", \"bing\"), featureNames);\n}",
        "ClassName": "AppPMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 13,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testListFeaturesDD",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 6,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    encodingsForIndex = new java.util.HashMap(distinctValues.size());\n    for (java.util.Map.Entry<java.lang.Integer, ? extends java.util.Collection<java.lang.String>> e : distinctValues.entrySet()) {\n        encodingsForIndex.put(e.getKey(), com.cloudera.oryx.app.schema.CategoricalValueEncodings.mapDistinctValues(e.getValue()));\n    }\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.List<java.lang.String> featureNames = schema.getFeatureNames();\n    java.util.List<org.dmg.pmml.DataField> dataFields = new java.util.ArrayList<>();\n    for (int featureIndex = 0; featureIndex < featureNames.size(); featureIndex++) {\n        java.lang.String featureName = featureNames.get(featureIndex);\n        org.dmg.pmml.OpType opType;\n        org.dmg.pmml.DataType dataType;\n        if (schema.isNumeric(featureName)) {\n            opType = org.dmg.pmml.OpType.CONTINUOUS;\n            dataType = org.dmg.pmml.DataType.DOUBLE;\n        } else\n            if (schema.isCategorical(featureName)) {\n                opType = org.dmg.pmml.OpType.CATEGORICAL;\n                dataType = org.dmg.pmml.DataType.STRING;\n            } else {\n                opType = null;\n                dataType = null;\n            }\n\n        org.dmg.pmml.DataField field = new org.dmg.pmml.DataField(org.dmg.pmml.FieldName.create(featureName), opType, dataType);\n        if (schema.isCategorical(featureName)) {\n            java.util.Collection<java.lang.String> valuesOrderedByEncoding = new java.util.TreeMap<>(categoricalValueEncodings.getEncodingValueMap(featureIndex)).values();\n            for (java.lang.String value : valuesOrderedByEncoding) {\n                field.getValues().add(new org.dmg.pmml.Value(value));\n            }\n        }\n        dataFields.add(field);\n    }\n    org.dmg.pmml.DataDictionary dictionary = new org.dmg.pmml.DataDictionary(dataFields);\n    dictionary.setNumberOfFields(dataFields.size());\n    return dictionary;\n}",
                "ClassName": "AppPMMLUtils",
                "CyclomaticComplexity": 5,
                "DepthOfInheritance": 0,
                "MethodName": "buildDataDictionary",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 32,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.input-schema.feature-names\", \"[\\\"foo\\\",\\\"bar\\\",\\\"baz\\\",\\\"bing\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.id-features\", \"[\\\"baz\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.ignored-features\", \"[\\\"foo\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[\\\"bar\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.target-feature\", \"\\\"bar\\\"\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    return new com.cloudera.oryx.app.schema.InputSchema(config);\n}",
                "ClassName": "AppPMMLUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildTestSchema",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 10,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.List<java.lang.String> names = new java.util.ArrayList<>();\n    for (org.dmg.pmml.MiningField field : miningSchema.getMiningFields()) {\n        names.add(field.getName().getValue());\n    }\n    return names;\n}",
                "ClassName": "AppPMMLUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "getFeatureNames",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 7,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 55,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.serving.rdf.TrainTest.checkResponse(getFormPostResponse(com.cloudera.oryx.app.serving.rdf.TrainTest.TRAIN_DATA, \"/train\", null, null));\n}",
        "ClassName": "TrainTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 9,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testFormTrain",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.cloudera.oryx.lambda.serving.AbstractServingTest.checkResponse(response, Response.Status.NO_CONTENT, com.cloudera.oryx.app.serving.rdf.TrainTest.EXPECTED_TOPIC);\n}",
                "ClassName": "TrainTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    byte[] bytes;\n    if (compressingClass == null) {\n        bytes = data.getBytes(java.nio.charset.StandardCharsets.UTF_8);\n    } else {\n        bytes = com.cloudera.oryx.lambda.serving.AbstractServingTest.compress(data, compressingClass);\n    }\n    javax.ws.rs.core.MediaType type = (encoding == null) ? javax.ws.rs.core.MediaType.TEXT_PLAIN_TYPE : new javax.ws.rs.core.MediaType(\"application\", encoding);\n    java.io.InputStream in = new java.io.ByteArrayInputStream(bytes);\n    org.glassfish.jersey.media.multipart.file.StreamDataBodyPart filePart = new org.glassfish.jersey.media.multipart.file.StreamDataBodyPart(\"data\", in, \"data\", type);\n    try (org.glassfish.jersey.media.multipart.MultiPart multiPart = new org.glassfish.jersey.media.multipart.MultiPart(javax.ws.rs.core.MediaType.MULTIPART_FORM_DATA_TYPE)) {\n        multiPart.getBodyParts().add(filePart);\n        return target(endpoint).request().post(javax.ws.rs.client.Entity.entity(multiPart, MediaType.MULTIPART_FORM_DATA_TYPE));\n    }\n}",
                "ClassName": "AbstractServingTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getFormPostResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 18,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.dmg.pmml.PMML model = com.cloudera.oryx.common.pmml.PMMLUtilsTest.buildDummyModel();\n    org.dmg.pmml.PMML model2 = com.cloudera.oryx.common.pmml.PMMLUtils.fromString(com.cloudera.oryx.common.pmml.PMMLUtils.toString(model));\n    org.junit.Assert.assertEquals(model.getHeader().getApplication().getName(), model2.getHeader().getApplication().getName());\n    org.junit.Assert.assertEquals(model.getModels().get(0).getFunctionName(), model2.getModels().get(0).getFunctionName());\n}",
        "ClassName": "PMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 6,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testFromString",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.dmg.pmml.Node node = new org.dmg.pmml.Node();\n    node.setRecordCount(123.0);\n    org.dmg.pmml.TreeModel treeModel = new org.dmg.pmml.TreeModel(org.dmg.pmml.MiningFunctionType.CLASSIFICATION, null, node);\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.buildSkeletonPMML();\n    pmml.getModels().add(treeModel);\n    return pmml;\n}",
                "ClassName": "PMMLUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildDummyModel",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return org.jpmml.model.JAXBUtil.unmarshalPMML(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(pmmlString)));\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "fromString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (java.io.StringWriter out = new java.io.StringWriter()) {\n        org.jpmml.model.JAXBUtil.marshalPMML(pmml, new javax.xml.transform.stream.StreamResult(out));\n        return out.toString();\n    } catch (javax.xml.bind.JAXBException | java.io.IOException e) {\n        throw new java.lang.IllegalStateException(e);\n    }\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "toString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 19,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.example.CategoricalFeature f = com.cloudera.oryx.app.rdf.example.CategoricalFeature.forEncoding(1);\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.example.FeatureType.CATEGORICAL, f.getFeatureType());\n    org.junit.Assert.assertEquals(1, f.getEncoding());\n    org.junit.Assert.assertEquals(f, com.cloudera.oryx.app.rdf.example.CategoricalFeature.forEncoding(1));\n    org.junit.Assert.assertSame(f, com.cloudera.oryx.app.rdf.example.CategoricalFeature.forEncoding(1));\n}",
        "ClassName": "CategoricalFeatureTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testFeature",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(encoding >= 0);\n    java.lang.Integer encodingKey = encoding;\n    com.cloudera.oryx.app.rdf.example.CategoricalFeature feature = com.cloudera.oryx.app.rdf.example.CategoricalFeature.FEATURE_CACHE.get(encodingKey);\n    if (feature == null) {\n        feature = new com.cloudera.oryx.app.rdf.example.CategoricalFeature(encoding);\n        com.cloudera.oryx.app.rdf.example.CategoricalFeature.FEATURE_CACHE.put(encodingKey, feature);\n    }\n    return feature;\n}",
                "ClassName": "CategoricalFeature",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "forEncoding",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 10,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.rdf.example.FeatureType.CATEGORICAL;\n}",
                "ClassName": "CategoricalFeature",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFeatureType",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return encoding;\n}",
                "ClassName": "CategoricalFeature",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getEncoding",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 16,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.als.RescorerProvider multi = new com.cloudera.oryx.app.als.MultiRescorerProvider(new com.cloudera.oryx.app.als.SimpleModRescorerProvider(2), new com.cloudera.oryx.app.als.SimpleModRescorerProvider(3));\n    com.cloudera.oryx.app.als.Rescorer provider = multi.getRecommendRescorer(java.util.Collections.singletonList(\"ABCDE\"), null);\n    org.junit.Assert.assertNull(provider);\n    com.cloudera.oryx.app.als.Rescorer provider2 = multi.getRecommendRescorer(java.util.Collections.singletonList(\"AB\"), null);\n    org.junit.Assert.assertNotNull(provider2);\n    org.junit.Assert.assertFalse(provider2 instanceof com.cloudera.oryx.app.als.MultiRescorer);\n    org.junit.Assert.assertTrue(provider2.isFiltered(\"ABC\"));\n    org.junit.Assert.assertFalse(provider2.isFiltered(\"AB\"));\n    com.cloudera.oryx.app.als.Rescorer provider3 = multi.getRecommendRescorer(java.util.Collections.singletonList(\"ABCDEF\"), null);\n    org.junit.Assert.assertNotNull(provider3);\n    org.junit.Assert.assertTrue(provider3 instanceof com.cloudera.oryx.app.als.MultiRescorer);\n    org.junit.Assert.assertTrue(provider3.isFiltered(\"ABC\"));\n    org.junit.Assert.assertTrue(provider3.isFiltered(\"AB\"));\n    org.junit.Assert.assertFalse(provider3.isFiltered(\"ABCDEFABCDEF\"));\n}",
        "ClassName": "MultiRescorerProviderTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testMultiRecommendRescorer",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 10,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 16,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    if (providers.length < 1) {\n        throw new java.lang.IllegalArgumentException(\"providers is empty\");\n    }\n    this.providers = providers;\n}",
                "ClassName": "MultiRescorerProvider",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    this.modulus = modulus;\n}",
                "ClassName": "SimpleModRescorerProvider",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 9,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    java.nio.file.Path dataDir = tempDir.resolve(\"data\");\n    java.nio.file.Path modelDir = tempDir.resolve(\"model\");\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.batch.update-class\", com.cloudera.oryx.app.mllib.kmeans.KMeansUpdate.class.getName());\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.data-dir\", dataDir);\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.model-dir\", modelDir);\n    overlayConfig.put(\"oryx.batch.streaming.generation-interval-sec\", com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.GEN_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.batch.streaming.block-interval-sec\", com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.BLOCK_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.kmeans.hyperparams.k\", com.cloudera.oryx.app.mllib.kmeans.AbstractKMeansIT.NUM_CLUSTERS);\n    overlayConfig.put(\"oryx.kmeans.iterations\", 5);\n    overlayConfig.put(\"oryx.input-schema.num-features\", com.cloudera.oryx.app.mllib.kmeans.AbstractKMeansIT.NUM_FEATURES);\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[]\");\n    overlayConfig.put(\"oryx.kmeans.evaluation-strategy\", com.cloudera.oryx.app.mllib.kmeans.AbstractKMeansIT.EVALUATION_STRATEGY);\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> updates = startServerProduceConsumeTopics(config, new com.cloudera.oryx.app.mllib.kmeans.RandomKMeansDataGenerator(com.cloudera.oryx.app.mllib.kmeans.AbstractKMeansIT.NUM_FEATURES), com.cloudera.oryx.app.mllib.kmeans.KMeansUpdateIT.DATA_TO_WRITE, com.cloudera.oryx.app.mllib.kmeans.KMeansUpdateIT.WRITE_INTERVAL_MSEC);\n    java.util.List<java.nio.file.Path> modelInstanceDirs = com.cloudera.oryx.common.io.IOUtils.listFiles(modelDir, \"*\");\n    int generations = modelInstanceDirs.size();\n    com.cloudera.oryx.lambda.AbstractBatchIT.checkIntervals(generations, com.cloudera.oryx.app.mllib.kmeans.KMeansUpdateIT.DATA_TO_WRITE, com.cloudera.oryx.app.mllib.kmeans.KMeansUpdateIT.WRITE_INTERVAL_MSEC, com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.GEN_INTERVAL_SEC);\n    for (java.nio.file.Path modelInstanceDir : modelInstanceDirs) {\n        java.nio.file.Path modelFile = modelInstanceDir.resolve(com.cloudera.oryx.ml.MLUpdate.MODEL_FILE_NAME);\n        org.junit.Assert.assertTrue(\"Model file should exist: \" + modelFile, java.nio.file.Files.exists(modelFile));\n        org.junit.Assert.assertTrue(\"Model file should not be empty: \" + modelFile, java.nio.file.Files.size(modelFile) > 0);\n        com.cloudera.oryx.common.pmml.PMMLUtils.read(modelFile);\n    }\n    com.cloudera.oryx.app.schema.InputSchema schema = new com.cloudera.oryx.app.schema.InputSchema(config);\n    for (com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> km : updates) {\n        java.lang.String type = km.getFirst();\n        java.lang.String value = km.getSecond();\n        org.junit.Assert.assertEquals(\"MODEL\", type);\n        org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.fromString(value);\n        com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.checkHeader(pmml.getHeader());\n        com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.checkDataDictionary(schema, pmml.getDataDictionary());\n        org.dmg.pmml.Model rootModel = pmml.getModels().get(0);\n        org.dmg.pmml.ClusteringModel clusteringModel = ((org.dmg.pmml.ClusteringModel) (rootModel));\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.mllib.kmeans.AbstractKMeansIT.NUM_CLUSTERS, clusteringModel.getNumberOfClusters().intValue());\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.mllib.kmeans.AbstractKMeansIT.NUM_CLUSTERS, clusteringModel.getClusters().size());\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.mllib.kmeans.AbstractKMeansIT.NUM_FEATURES, clusteringModel.getClusteringFields().size());\n        org.junit.Assert.assertEquals(ComparisonMeasure.Kind.DISTANCE, clusteringModel.getComparisonMeasure().getKind());\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.mllib.kmeans.AbstractKMeansIT.NUM_FEATURES, clusteringModel.getClusters().get(0).getArray().getN().intValue());\n        for (org.dmg.pmml.Cluster cluster : clusteringModel.getClusters()) {\n            org.junit.Assert.assertTrue(cluster.getSize() > 0);\n        }\n    }\n}",
        "ClassName": "KMeansUpdateIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 3,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 12,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testKMeans",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 9,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 47,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this.numberOfDimensions = numberOfDimensions;\n}",
                "ClassName": "RandomKMeansDataGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.List<java.lang.String> givenFeatureNames = config.getStringList(\"oryx.input-schema.feature-names\");\n    if (givenFeatureNames.isEmpty()) {\n        int numFeatures = config.getInt(\"oryx.input-schema.num-features\");\n        com.google.common.base.Preconditions.checkArgument(numFeatures > 0, \"Neither feature-names nor num-features is set\");\n        java.util.List<java.lang.String> generatedFeatureNames = new java.util.ArrayList<>(numFeatures);\n        for (int i = 0; i < numFeatures; i++) {\n            generatedFeatureNames.add(java.lang.Integer.toString(i));\n        }\n        featureNames = generatedFeatureNames;\n    } else {\n        featureNames = com.google.common.collect.ImmutableList.copyOf(givenFeatureNames);\n    }\n    int numFeatures = featureNames.size();\n    com.google.common.base.Preconditions.checkArgument(new java.util.HashSet<>(featureNames).size() == numFeatures, \"Feature names must be unique: %s\", featureNames);\n    idFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.id-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(idFeatures));\n    java.util.Collection<java.lang.String> ignoredFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.ignored-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(ignoredFeatures));\n    java.util.Collection<java.lang.String> activeFeatureSet = new java.util.HashSet<>(featureNames);\n    activeFeatureSet.removeAll(idFeatures);\n    activeFeatureSet.removeAll(ignoredFeatures);\n    activeFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    java.util.List<java.lang.String> givenNumericFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.numeric-features\");\n    java.util.List<java.lang.String> givenCategoricalFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.categorical-features\");\n    if (givenNumericFeatures == null) {\n        com.google.common.base.Preconditions.checkNotNull(givenCategoricalFeatures, \"Neither numeric-features nor categorical-features was set\");\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(givenCategoricalFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(categoricalFeatures));\n        activeFeatureSet.removeAll(categoricalFeatures);\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    } else {\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(givenNumericFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(numericFeatures));\n        activeFeatureSet.removeAll(numericFeatures);\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    }\n    targetFeature = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalString(config, \"oryx.input-schema.target-feature\");\n    if (targetFeature != null) {\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.contains(targetFeature), \"Target feature is not known, an ID, or ignored: %s\", targetFeature);\n    }\n    targetFeatureIndex = (targetFeature == null) ? -1 : featureNames.indexOf(targetFeature);\n    allToPredictorMap = com.google.common.collect.HashBiMap.create();\n    for (int featureIndex = 0, predictorIndex = 0; featureIndex < featureNames.size(); featureIndex++) {\n        if (isActive(featureIndex) && (!isTarget(featureIndex))) {\n            allToPredictorMap.put(featureIndex, predictorIndex);\n            predictorIndex++;\n        }\n    }\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 50,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (tempDir == null) {\n        tempDir = java.nio.file.Files.createTempDirectory(\"OryxTest\").toAbsolutePath();\n        com.cloudera.oryx.common.OryxTest.log.info(\"Test temp dir is {}\", tempDir);\n        tempDir.toFile().deleteOnExit();\n    }\n    return tempDir;\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getTempDir",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 2,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.nio.file.Path finalPath = (java.nio.file.Files.exists(path, java.nio.file.LinkOption.NOFOLLOW_LINKS)) ? path.toRealPath(java.nio.file.LinkOption.NOFOLLOW_LINKS) : path;\n    overlay.put(key, (\"\\\"\" + finalPath.toUri()) + \"\\\"\");\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "set",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    java.lang.String topicBroker = (\"\\\"localhost:\" + localKafkaBrokerPort) + '\"';\n    java.lang.String topicLockMaster = (\"\\\"localhost:\" + localZKPort) + '\"';\n    overlay.put(\"oryx.input-topic.broker\", topicBroker);\n    overlay.put(\"oryx.input-topic.lock.master\", topicLockMaster);\n    overlay.put(\"oryx.update-topic.broker\", topicBroker);\n    overlay.put(\"oryx.update-topic.lock.master\", topicLockMaster);\n    java.lang.String masterLocalAllCores = \"\\\"local[*]\\\"\";\n    overlay.put(\"oryx.batch.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.speed.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.batch.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.speed.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int zkPort = getZKPort();\n    com.cloudera.oryx.kafka.util.ProduceData produce = new com.cloudera.oryx.kafka.util.ProduceData(datumGenerator, zkPort, getKafkaBrokerPort(), com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC, howMany, intervalMsec);\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> keyMessages;\n    try (com.cloudera.oryx.common.collection.CloseableIterator<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = new com.cloudera.oryx.kafka.util.ConsumeData(com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, zkPort).iterator();com.cloudera.oryx.lambda.BatchLayer<?, ?, ?> batchLayer = new com.cloudera.oryx.lambda.BatchLayer(config)) {\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Starting batch layer\");\n        batchLayer.start();\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Starting consumer thread\");\n        com.cloudera.oryx.kafka.util.ConsumeTopicRunnable consumeInput = new com.cloudera.oryx.kafka.util.ConsumeTopicRunnable(data);\n        new java.lang.Thread(consumeInput).start();\n        java.lang.Thread.sleep(3000);\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Producing data\");\n        produce.start();\n        long genIntervalSec = config.getInt(\"oryx.batch.streaming.generation-interval-sec\");\n        java.lang.Thread.sleep(genIntervalSec * 1000);\n        keyMessages = consumeInput.getKeyMessages();\n    } finally {\n        produce.deleteTopic();\n    }\n    return keyMessages;\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServerProduceConsumeTopics",
                "NumberOfAsynchronousWaits": 2,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 21,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 7
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(java.nio.file.Files.isDirectory(dir), \"%s is not a directory\", dir);\n    java.util.List<java.lang.String> globLevels;\n    if ((glob == null) || glob.isEmpty()) {\n        globLevels = java.util.Collections.singletonList(\"*\");\n    } else {\n        globLevels = java.util.Arrays.asList(glob.split(\"/\"));\n    }\n    com.google.common.base.Preconditions.checkState(!globLevels.isEmpty());\n    java.util.List<java.nio.file.Path> paths = new java.util.ArrayList<>();\n    paths.add(dir);\n    for (java.lang.String globLevel : globLevels) {\n        java.util.List<java.nio.file.Path> newPaths = new java.util.ArrayList<>();\n        for (java.nio.file.Path existingPath : paths) {\n            if (java.nio.file.Files.isDirectory(existingPath)) {\n                try (java.nio.file.DirectoryStream<java.nio.file.Path> stream = java.nio.file.Files.newDirectoryStream(existingPath, globLevel)) {\n                    for (java.nio.file.Path path : stream) {\n                        if (!path.getFileName().toString().startsWith(\".\")) {\n                            newPaths.add(path);\n                        }\n                    }\n                }\n            }\n        }\n        paths = newPaths;\n    }\n    java.util.Collections.sort(paths);\n    return paths;\n}",
                "ClassName": "IOUtils",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "listFiles",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 29,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int minExpectedIntervals = (dataToWrite * writeIntervalMsec) / (1000 * genIntervalSec);\n    org.junit.Assert.assertTrue(((\"Expected \" + minExpectedIntervals) + \" intervals (or up to +4 more) but got \") + numIntervals, (numIntervals >= minExpectedIntervals) && (numIntervals <= (minExpectedIntervals + 4)));\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkIntervals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (java.io.InputStream in = com.cloudera.oryx.common.io.IOUtils.readMaybeCompressed(path)) {\n        return com.cloudera.oryx.common.pmml.PMMLUtils.read(in);\n    }\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "read",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return first;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return org.jpmml.model.JAXBUtil.unmarshalPMML(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(pmmlString)));\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "fromString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 14,
        "TotalNumberOfAsynchronousWaits": 2,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 2,
        "TotalNumberOfLines": 169,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 7
    },
    {
        "Body": "{\n    int[] counts = new int[]{ 0, 1, 3, 0, 4, 0 };\n    com.cloudera.oryx.app.rdf.predict.CategoricalPrediction prediction = new com.cloudera.oryx.app.rdf.predict.CategoricalPrediction(counts);\n    assertNotEquals(prediction, new com.cloudera.oryx.app.rdf.predict.CategoricalPrediction(new int[]{ 1, 2, 4, 5, 6, 7 }));\n}",
        "ClassName": "CategoricalPredictionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testEquals",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 5,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(com.cloudera.oryx.app.rdf.predict.CategoricalPrediction.sum(categoryCounts));\n    this.categoryCounts = categoryCounts;\n    recompute();\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 5,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings encodings = com.cloudera.oryx.app.schema.CategoricalValueEncodingsTest.makeTestValues();\n    java.util.Map<java.lang.String, java.lang.Integer> valueEncoding = encodings.getValueEncodingMap(0);\n    org.junit.Assert.assertEquals(0, valueEncoding.get(\"foo\").intValue());\n    org.junit.Assert.assertEquals(1, valueEncoding.get(\"bar\").intValue());\n    org.junit.Assert.assertEquals(2, valueEncoding.get(\"baz\").intValue());\n}",
        "ClassName": "CategoricalValueEncodingsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testEncoding",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.Map<java.lang.Integer, java.util.Collection<java.lang.String>> distinctValues = new java.util.HashMap<>();\n    distinctValues.put(0, java.util.Arrays.asList(\"foo\", \"bar\", \"baz\"));\n    distinctValues.put(2, java.util.Arrays.asList(\"3\", \"2\", \"1\", \"0\"));\n    distinctValues.put(3, java.util.Arrays.asList(\"one\"));\n    return new com.cloudera.oryx.app.schema.CategoricalValueEncodings(distinctValues);\n}",
                "ClassName": "CategoricalValueEncodingsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "makeTestValues",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return doGetMap(index);\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getValueEncodingMap",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 10,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(new double[]{ -1.0, 2.01, 3.5 }, com.cloudera.oryx.common.math.VectorMath.parseVector(new java.lang.String[]{ \"-1.0\", \"2.01\", \"3.5\" }));\n}",
        "ClassName": "VectorMathTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testParseVector",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertArrayEquals(expecteds, actuals, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertArrayEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    double[] doubles = new double[values.length];\n    for (int i = 0; i < values.length; i++) {\n        doubles[i] = java.lang.Double.parseDouble(values[i]);\n    }\n    return doubles;\n}",
                "ClassName": "VectorMath",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "parseVector",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 10,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String prediction = target(\"/predict\").request().post(javax.ws.rs.client.Entity.text(\"A,-5,\\nB,0,\")).readEntity(java.lang.String.class);\n    double expectedValue1 = (1.0 + (2.0 * 100.0)) / 3.0;\n    double expectedValue2 = (10.0 + (2 * 1000.0)) / 3;\n    org.junit.Assert.assertEquals(((expectedValue1 + \"\\n\") + expectedValue2) + \"\\n\", prediction);\n}",
        "ClassName": "PredictTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testPredictPost",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(\"\", com.cloudera.oryx.app.rdf.tree.TreePath.EMPTY.toString());\n    org.junit.Assert.assertEquals(\"010\", com.cloudera.oryx.app.rdf.tree.TreePathTest.LRL.toString());\n    org.junit.Assert.assertEquals(\"011\", com.cloudera.oryx.app.rdf.tree.TreePathTest.LRR.toString());\n}",
        "ClassName": "TreePathTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testToString",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 7,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.lang.StringBuilder result = new java.lang.StringBuilder(pathLength);\n    for (int i = 0; i < pathLength; i++) {\n        result.append(isLeftAt(i) ? '0' : '1');\n    }\n    return result.toString();\n}",
                "ClassName": "TreePath",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "toString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 7,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.serving.kmeans.AddTest.checkResponse(target(\"/add\").request().post(javax.ws.rs.client.Entity.text(com.cloudera.oryx.app.serving.kmeans.AddTest.ADD_DATA)));\n}",
        "ClassName": "AddTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testSimpleAdd",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.cloudera.oryx.lambda.serving.AbstractServingTest.checkResponse(response, Response.Status.NO_CONTENT, com.cloudera.oryx.app.serving.kmeans.AddTest.EXPECTED_TOPIC);\n}",
                "ClassName": "AddTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.example.NumericFeature f = com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(1.5);\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.example.FeatureType.NUMERIC, f.getFeatureType());\n    com.cloudera.oryx.common.OryxTest.assertEquals(1.5, f.getValue());\n    org.junit.Assert.assertEquals(f, com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(1.5));\n    assertNotEquals(f, com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(java.lang.Double.NaN));\n}",
        "ClassName": "NumericFeatureTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testFeature",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return value == 0.0F ? com.cloudera.oryx.app.rdf.example.NumericFeature.ZERO : new com.cloudera.oryx.app.rdf.example.NumericFeature(value);\n}",
                "ClassName": "NumericFeature",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "forValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.rdf.example.FeatureType.NUMERIC;\n}",
                "ClassName": "NumericFeature",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFeatureType",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value;\n}",
                "ClassName": "NumericFeature",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 12,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    java.nio.file.Path dataDir = tempDir.resolve(\"data\");\n    java.nio.file.Path modelDir = tempDir.resolve(\"model\");\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.batch.update-class\", com.cloudera.oryx.app.mllib.kmeans.KMeansUpdate.class.getName());\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.data-dir\", dataDir);\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.model-dir\", modelDir);\n    overlayConfig.put(\"oryx.batch.streaming.generation-interval-sec\", com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.GEN_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.batch.streaming.block-interval-sec\", com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.BLOCK_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.kmeans.hyperparams.k\", \"[2,100]\");\n    overlayConfig.put(\"oryx.kmeans.iterations\", 20);\n    overlayConfig.put(\"oryx.kmeans.runs\", 20);\n    overlayConfig.put(\"oryx.input-schema.num-features\", com.cloudera.oryx.app.mllib.kmeans.AbstractKMeansIT.NUM_FEATURES);\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[]\");\n    overlayConfig.put(\"oryx.ml.eval.candidates\", 3);\n    overlayConfig.put(\"oryx.ml.eval.parallelism\", 2);\n    overlayConfig.put(\"oryx.kmeans.evaluation-strategy\", com.cloudera.oryx.app.mllib.kmeans.AbstractKMeansIT.EVALUATION_STRATEGY);\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    startServerProduceConsumeTopics(config, new com.cloudera.oryx.app.mllib.kmeans.RandomKMeansDataGenerator(com.cloudera.oryx.app.mllib.kmeans.AbstractKMeansIT.NUM_FEATURES), com.cloudera.oryx.app.mllib.kmeans.KMeansHyperParamTuningIT.DATA_TO_WRITE, com.cloudera.oryx.app.mllib.kmeans.KMeansHyperParamTuningIT.WRITE_INTERVAL_MSEC);\n    java.util.List<java.nio.file.Path> modelInstanceDirs = com.cloudera.oryx.common.io.IOUtils.listFiles(modelDir, \"*\");\n    com.cloudera.oryx.lambda.AbstractBatchIT.checkIntervals(modelInstanceDirs.size(), com.cloudera.oryx.app.mllib.kmeans.KMeansHyperParamTuningIT.DATA_TO_WRITE, com.cloudera.oryx.app.mllib.kmeans.KMeansHyperParamTuningIT.WRITE_INTERVAL_MSEC, com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.GEN_INTERVAL_SEC);\n    java.nio.file.Path latestModelDir = modelInstanceDirs.get(modelInstanceDirs.size() - 1);\n    java.nio.file.Path modelFile = latestModelDir.resolve(com.cloudera.oryx.ml.MLUpdate.MODEL_FILE_NAME);\n    org.junit.Assert.assertTrue(\"No such model file: \" + modelFile, java.nio.file.Files.exists(modelFile));\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.read(modelFile);\n    org.dmg.pmml.Model rootModel = pmml.getModels().get(0);\n    org.dmg.pmml.ClusteringModel clusteringModel = ((org.dmg.pmml.ClusteringModel) (rootModel));\n    org.junit.Assert.assertEquals(100, clusteringModel.getNumberOfClusters().intValue());\n}",
        "ClassName": "KMeansHyperParamTuningIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 11,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testKMeans",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 31,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this.numberOfDimensions = numberOfDimensions;\n}",
                "ClassName": "RandomKMeansDataGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (tempDir == null) {\n        tempDir = java.nio.file.Files.createTempDirectory(\"OryxTest\").toAbsolutePath();\n        com.cloudera.oryx.common.OryxTest.log.info(\"Test temp dir is {}\", tempDir);\n        tempDir.toFile().deleteOnExit();\n    }\n    return tempDir;\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getTempDir",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 2,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.nio.file.Path finalPath = (java.nio.file.Files.exists(path, java.nio.file.LinkOption.NOFOLLOW_LINKS)) ? path.toRealPath(java.nio.file.LinkOption.NOFOLLOW_LINKS) : path;\n    overlay.put(key, (\"\\\"\" + finalPath.toUri()) + \"\\\"\");\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "set",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    java.lang.String topicBroker = (\"\\\"localhost:\" + localKafkaBrokerPort) + '\"';\n    java.lang.String topicLockMaster = (\"\\\"localhost:\" + localZKPort) + '\"';\n    overlay.put(\"oryx.input-topic.broker\", topicBroker);\n    overlay.put(\"oryx.input-topic.lock.master\", topicLockMaster);\n    overlay.put(\"oryx.update-topic.broker\", topicBroker);\n    overlay.put(\"oryx.update-topic.lock.master\", topicLockMaster);\n    java.lang.String masterLocalAllCores = \"\\\"local[*]\\\"\";\n    overlay.put(\"oryx.batch.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.speed.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.batch.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.speed.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int zkPort = getZKPort();\n    com.cloudera.oryx.kafka.util.ProduceData produce = new com.cloudera.oryx.kafka.util.ProduceData(datumGenerator, zkPort, getKafkaBrokerPort(), com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC, howMany, intervalMsec);\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> keyMessages;\n    try (com.cloudera.oryx.common.collection.CloseableIterator<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = new com.cloudera.oryx.kafka.util.ConsumeData(com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, zkPort).iterator();com.cloudera.oryx.lambda.BatchLayer<?, ?, ?> batchLayer = new com.cloudera.oryx.lambda.BatchLayer(config)) {\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Starting batch layer\");\n        batchLayer.start();\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Starting consumer thread\");\n        com.cloudera.oryx.kafka.util.ConsumeTopicRunnable consumeInput = new com.cloudera.oryx.kafka.util.ConsumeTopicRunnable(data);\n        new java.lang.Thread(consumeInput).start();\n        java.lang.Thread.sleep(3000);\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Producing data\");\n        produce.start();\n        long genIntervalSec = config.getInt(\"oryx.batch.streaming.generation-interval-sec\");\n        java.lang.Thread.sleep(genIntervalSec * 1000);\n        keyMessages = consumeInput.getKeyMessages();\n    } finally {\n        produce.deleteTopic();\n    }\n    return keyMessages;\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServerProduceConsumeTopics",
                "NumberOfAsynchronousWaits": 2,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 21,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 7
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(java.nio.file.Files.isDirectory(dir), \"%s is not a directory\", dir);\n    java.util.List<java.lang.String> globLevels;\n    if ((glob == null) || glob.isEmpty()) {\n        globLevels = java.util.Collections.singletonList(\"*\");\n    } else {\n        globLevels = java.util.Arrays.asList(glob.split(\"/\"));\n    }\n    com.google.common.base.Preconditions.checkState(!globLevels.isEmpty());\n    java.util.List<java.nio.file.Path> paths = new java.util.ArrayList<>();\n    paths.add(dir);\n    for (java.lang.String globLevel : globLevels) {\n        java.util.List<java.nio.file.Path> newPaths = new java.util.ArrayList<>();\n        for (java.nio.file.Path existingPath : paths) {\n            if (java.nio.file.Files.isDirectory(existingPath)) {\n                try (java.nio.file.DirectoryStream<java.nio.file.Path> stream = java.nio.file.Files.newDirectoryStream(existingPath, globLevel)) {\n                    for (java.nio.file.Path path : stream) {\n                        if (!path.getFileName().toString().startsWith(\".\")) {\n                            newPaths.add(path);\n                        }\n                    }\n                }\n            }\n        }\n        paths = newPaths;\n    }\n    java.util.Collections.sort(paths);\n    return paths;\n}",
                "ClassName": "IOUtils",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "listFiles",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 29,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int minExpectedIntervals = (dataToWrite * writeIntervalMsec) / (1000 * genIntervalSec);\n    org.junit.Assert.assertTrue(((\"Expected \" + minExpectedIntervals) + \" intervals (or up to +4 more) but got \") + numIntervals, (numIntervals >= minExpectedIntervals) && (numIntervals <= (minExpectedIntervals + 4)));\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkIntervals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (java.io.InputStream in = com.cloudera.oryx.common.io.IOUtils.readMaybeCompressed(path)) {\n        return com.cloudera.oryx.common.pmml.PMMLUtils.read(in);\n    }\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "read",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 8,
        "TotalNumberOfAsynchronousWaits": 2,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 2,
        "TotalNumberOfLines": 110,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 7
    },
    {
        "Body": "{\n    java.util.concurrent.atomic.AtomicLong count = new java.util.concurrent.atomic.AtomicLong();\n    org.apache.commons.math3.stat.descriptive.moment.Mean meanReqTimeMS = new org.apache.commons.math3.stat.descriptive.moment.Mean();\n    long start = java.lang.System.currentTimeMillis();\n    new com.cloudera.oryx.app.serving.als.LoadIT.LoadCallable(\"0\", meanReqTimeMS, count, start).call();\n    int totalRequests = com.cloudera.oryx.app.serving.als.LoadIT.WORKERS * com.cloudera.oryx.app.serving.als.LoadIT.REQS_PER_WORKER;\n    com.cloudera.oryx.app.serving.als.LoadIT.log(totalRequests, meanReqTimeMS, start);\n    int cores = java.lang.Runtime.getRuntime().availableProcessors();\n    int allowedMS = 150 + (640 / cores);\n    org.junit.Assert.assertTrue((((\"Expected < \" + allowedMS) + \"ms / req with \") + cores) + \" cores\", meanReqTimeMS.getResult() < allowedMS);\n}",
        "ClassName": "LoadIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 9,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 1,
        "MethodName": "testRecommendLoad",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 7,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 11,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 5,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this.meanReqTimeMS = meanReqTimeMS;\n    this.count = count;\n    this.start = start;\n    random = com.cloudera.oryx.common.random.RandomManager.getRandom();\n    random.setSeed(id.hashCode() ^ java.lang.System.nanoTime());\n}",
                "ClassName": "LoadCallable",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 3
            },
            {
                "Body": "{\n    try {\n        doCall();\n        return null;\n    } catch (java.lang.Exception e) {\n        com.cloudera.oryx.common.lang.LoggingVoidCallable.log.warn(\"Unexpected error in {}\", this, e);\n        throw new java.lang.IllegalStateException(e);\n    } catch (java.lang.Throwable t) {\n        com.cloudera.oryx.common.lang.LoggingVoidCallable.log.warn(\"Unexpected error in {}\", this, t);\n        throw t;\n    }\n}",
                "ClassName": "LoggingVoidCallable",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "call",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    long used = com.cloudera.oryx.common.lang.JVMUtils.getUsedMemory() / 1000000;\n    long requestsPerSecond = java.lang.Math.round((1000.0 * currentCount) / (java.lang.System.currentTimeMillis() - start));\n    long msPerRequest;\n    synchronized(meanReqTimeMS) {\n        msPerRequest = java.lang.Math.round(meanReqTimeMS.getResult());\n    }\n    com.cloudera.oryx.app.serving.als.LoadIT.log.info(\"{} complete\\t{} req/s\\t~{} ms/req\\t{}MB heap\", currentCount, requestsPerSecond, msPerRequest, used);\n}",
                "ClassName": "LoadIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "log",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 28,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 3
    },
    {
        "Body": "{\n    java.util.List<java.lang.String> users = target(\"/user/allIDs\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.lambda.serving.AbstractServingTest.LIST_STRING_TYPE);\n    org.junit.Assert.assertEquals(7, users.size());\n    for (int user = 0; user < 7; user++) {\n        org.junit.Assert.assertTrue(users.contains(\"U\" + user));\n    }\n}",
        "ClassName": "AllUserIDsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 1,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testAllItemIDs",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    javax.ws.rs.core.Response response = target(\"/ready\").request().head();\n    org.junit.Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n}",
        "ClassName": "ReadyTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testHead",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.als.RescorerProvider provider = com.cloudera.oryx.app.als.AbstractRescorerProvider.loadRescorerProviders(\"com.cloudera.oryx.app.als.NullProvider2\");\n    org.junit.Assert.assertTrue(provider instanceof com.cloudera.oryx.app.als.NullProvider2);\n    com.cloudera.oryx.app.als.RescorerProvider multiProvider = com.cloudera.oryx.app.als.AbstractRescorerProvider.loadRescorerProviders(\"com.cloudera.oryx.app.als.NullProvider1,com.cloudera.oryx.app.als.NullProvider2\");\n    org.junit.Assert.assertTrue(multiProvider instanceof com.cloudera.oryx.app.als.MultiRescorerProvider);\n}",
        "ClassName": "AbstractRescorerProviderTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 3,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 14,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testLoad",
        "MinimumCyclomaticComplexity": 3,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 14,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    if ((classNamesString == null) || classNamesString.isEmpty()) {\n        return null;\n    }\n    java.lang.String[] classNames = classNamesString.split(\",\");\n    if (classNames.length == 1) {\n        return com.cloudera.oryx.app.als.AbstractRescorerProvider.loadInstanceOf(classNames[0]);\n    }\n    java.util.List<com.cloudera.oryx.app.als.RescorerProvider> providers = new java.util.ArrayList<>(classNames.length);\n    for (java.lang.String className : classNames) {\n        providers.add(com.cloudera.oryx.app.als.AbstractRescorerProvider.loadInstanceOf(className));\n    }\n    return new com.cloudera.oryx.app.als.MultiRescorerProvider(providers);\n}",
                "ClassName": "AbstractRescorerProvider",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "loadRescorerProviders",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 14,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 14,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(\"-1.0 2.01 3.5\", com.cloudera.oryx.common.text.TextUtils.joinPMMLDelimitedNumbers(java.util.Arrays.asList(-1.0, 2.01, 3.5)));\n}",
        "ClassName": "TextUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testJoinPMMLDelimitedNumbers",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.apache.commons.csv.CSVFormat format = com.cloudera.oryx.common.text.TextUtils.formatForDelimiter(' ').withQuoteMode(QuoteMode.NONE);\n    return com.cloudera.oryx.common.text.TextUtils.doJoinDelimited(elements, format);\n}",
                "ClassName": "TextUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "joinPMMLDelimitedNumbers",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.BitSet activeCategories = new java.util.BitSet(10);\n    activeCategories.set(2);\n    activeCategories.set(5);\n    com.cloudera.oryx.app.rdf.decision.Decision decision = new com.cloudera.oryx.app.rdf.decision.CategoricalDecision(0, activeCategories, true);\n    for (int i = 0; i < 10; i++) {\n        org.junit.Assert.assertEquals(activeCategories.get(i), decision.isPositive(new com.cloudera.oryx.app.rdf.example.Example(null, com.cloudera.oryx.app.rdf.example.CategoricalFeature.forEncoding(i))));\n    }\n    org.junit.Assert.assertTrue(decision.isPositive(new com.cloudera.oryx.app.rdf.example.Example(null, new com.cloudera.oryx.app.rdf.example.Feature[]{ null })));\n}",
        "ClassName": "CategoricalDecisionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 1,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 10,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDecision",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 5,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 10,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(featureNumber);\n    this.activeCategoryEncodings = activeCategoryEncodings;\n    this.defaultDecision = defaultDecision;\n}",
                "ClassName": "CategoricalDecision",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(features != null);\n    this.features = features;\n    this.target = target;\n    com.google.common.hash.Hasher hasher = com.cloudera.oryx.app.rdf.example.Example.HASH.newHasher();\n    for (com.cloudera.oryx.app.rdf.example.Feature feature : features) {\n        if (feature != null) {\n            hasher.putInt(feature.hashCode());\n        }\n    }\n    if (target != null) {\n        hasher.putInt(target.hashCode());\n    }\n    cachedHashCode = hasher.hashCode();\n}",
                "ClassName": "Example",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(encoding >= 0);\n    java.lang.Integer encodingKey = encoding;\n    com.cloudera.oryx.app.rdf.example.CategoricalFeature feature = com.cloudera.oryx.app.rdf.example.CategoricalFeature.FEATURE_CACHE.get(encodingKey);\n    if (feature == null) {\n        feature = new com.cloudera.oryx.app.rdf.example.CategoricalFeature(encoding);\n        com.cloudera.oryx.app.rdf.example.CategoricalFeature.FEATURE_CACHE.put(encodingKey, feature);\n    }\n    return feature;\n}",
                "ClassName": "CategoricalFeature",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "forEncoding",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 10,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 4,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 30,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.nio.file.Path testDir = createTestDirs();\n    java.util.List<java.nio.file.Path> files = com.cloudera.oryx.common.io.IOUtils.listFiles(testDir, \"\");\n    org.junit.Assert.assertEquals(2, files.size());\n    org.junit.Assert.assertTrue(files.contains(testDir.resolve(\"subFile1\")));\n    org.junit.Assert.assertFalse(files.contains(testDir.resolve(\".hidden\")));\n    org.junit.Assert.assertTrue(files.contains(testDir.resolve(\"subDir1\")));\n}",
        "ClassName": "IOUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 3,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 23,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testListFiles2",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 17,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(tempDir));\n    java.nio.file.Path subFile1 = tempDir.resolve(\"subFile1\");\n    java.nio.file.Files.write(subFile1, com.cloudera.oryx.common.io.IOUtilsTest.SOME_BYTES);\n    java.nio.file.Path hidden = tempDir.resolve(\".hidden\");\n    java.nio.file.Files.write(hidden, com.cloudera.oryx.common.io.IOUtilsTest.NO_BYTES);\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(subFile1));\n    java.nio.file.Path subDir1 = tempDir.resolve(\"subDir1\");\n    java.nio.file.Files.createDirectory(subDir1);\n    java.nio.file.Path subFile2 = subDir1.resolve(\"subFile2\");\n    java.nio.file.Files.write(subFile2, com.cloudera.oryx.common.io.IOUtilsTest.SOME_BYTES);\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(subFile2));\n    java.nio.file.Path subDir2 = subDir1.resolve(\"subDir2\");\n    java.nio.file.Files.createDirectory(subDir2);\n    return tempDir;\n}",
                "ClassName": "IOUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "createTestDirs",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 17,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(java.nio.file.Files.isDirectory(dir), \"%s is not a directory\", dir);\n    java.util.List<java.lang.String> globLevels;\n    if ((glob == null) || glob.isEmpty()) {\n        globLevels = java.util.Collections.singletonList(\"*\");\n    } else {\n        globLevels = java.util.Arrays.asList(glob.split(\"/\"));\n    }\n    com.google.common.base.Preconditions.checkState(!globLevels.isEmpty());\n    java.util.List<java.nio.file.Path> paths = new java.util.ArrayList<>();\n    paths.add(dir);\n    for (java.lang.String globLevel : globLevels) {\n        java.util.List<java.nio.file.Path> newPaths = new java.util.ArrayList<>();\n        for (java.nio.file.Path existingPath : paths) {\n            if (java.nio.file.Files.isDirectory(existingPath)) {\n                try (java.nio.file.DirectoryStream<java.nio.file.Path> stream = java.nio.file.Files.newDirectoryStream(existingPath, globLevel)) {\n                    for (java.nio.file.Path path : stream) {\n                        if (!path.getFileName().toString().startsWith(\".\")) {\n                            newPaths.add(path);\n                        }\n                    }\n                }\n            }\n        }\n        paths = newPaths;\n    }\n    java.util.Collections.sort(paths);\n    return paths;\n}",
                "ClassName": "IOUtils",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "listFiles",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 29,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 6,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 46,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    startServer(buildUserPasswordConfig());\n    java.net.Authenticator.setDefault(new java.net.Authenticator() {\n        @java.lang.Override\n        protected java.net.PasswordAuthentication getPasswordAuthentication() {\n            return new java.net.PasswordAuthentication(\"oryx\", \"pass\".toCharArray());\n        }\n    });\n    try {\n        java.lang.String response = com.google.common.io.Resources.toString(new java.net.URL((\"http://localhost:\" + getHTTPPort()) + \"/helloWorld\"), java.nio.charset.StandardCharsets.UTF_8);\n        org.junit.Assert.assertEquals(\"Hello, World\", response);\n    } finally {\n        java.net.Authenticator.setDefault(null);\n    }\n}",
        "ClassName": "SecureAPIConfigIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testUserPassword",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 15,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "2",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    servingLayer = new com.cloudera.oryx.lambda.serving.ServingLayer(config);\n    com.cloudera.oryx.lambda.serving.AbstractServingIT.log.info(\"Starting serving layer\");\n    servingLayer.start();\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServer",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    overlay.put(\"oryx.serving.api.user-name\", \"oryx\");\n    overlay.put(\"oryx.serving.api.password\", \"pass\");\n    overlay.put(\"oryx.serving.application-resources\", com.cloudera.oryx.lambda.serving.HelloWorld.class.getPackage().getName());\n    overlay.put(\"oryx.serving.no-init-topics\", true);\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, getConfig());\n}",
                "ClassName": "SecureAPIConfigIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 4,
                "MethodName": "buildUserPasswordConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return httpPort;\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getHTTPPort",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 18,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(\"1,2,3\", com.cloudera.oryx.common.text.TextUtils.joinDelimited(java.util.Arrays.asList(\"1\", \"2\", \"3\"), ','));\n    org.junit.Assert.assertEquals(\"\\\"a,b\\\"\", com.cloudera.oryx.common.text.TextUtils.joinDelimited(java.util.Arrays.asList(\"a,b\"), ','));\n    org.junit.Assert.assertEquals(\"\\\"\\\"\\\"a\\\"\\\"\\\"\", com.cloudera.oryx.common.text.TextUtils.joinDelimited(java.util.Arrays.asList(\"\\\"a\\\"\"), ','));\n    org.junit.Assert.assertEquals(\"1 2 3\", com.cloudera.oryx.common.text.TextUtils.joinDelimited(java.util.Arrays.asList(\"1\", \"2\", \"3\"), ' '));\n    org.junit.Assert.assertEquals(\"\\\"1 \\\" \\\"2 \\\" 3\", com.cloudera.oryx.common.text.TextUtils.joinDelimited(java.util.Arrays.asList(\"1 \", \"2 \", \"3\"), ' '));\n    org.junit.Assert.assertEquals(\"\\\"\\\"\\\"a\\\"\\\"\\\"\", com.cloudera.oryx.common.text.TextUtils.joinDelimited(java.util.Arrays.asList(\"\\\"a\\\"\"), ' '));\n    org.junit.Assert.assertEquals(\"\\\"\\\"\\\"\\\" \\\"\\\"\\\"\\\"\\\"\\\"\", com.cloudera.oryx.common.text.TextUtils.joinDelimited(java.util.Arrays.asList(\"\\\"\", \"\\\"\\\"\"), ' '));\n    org.junit.Assert.assertEquals(\"\", com.cloudera.oryx.common.text.TextUtils.joinDelimited(java.util.Collections.emptyList(), '\\t'));\n}",
        "ClassName": "TextUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testJoinDelimited",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 8,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 10,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return com.cloudera.oryx.common.text.TextUtils.doJoinDelimited(elements, com.cloudera.oryx.common.text.TextUtils.formatForDelimiter(delimiter));\n}",
                "ClassName": "TextUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "joinDelimited",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.typesafe.config.Config config = buildHTTPSConfig();\n    startServer(config);\n    javax.net.ssl.SSLContext sslContext = javax.net.ssl.SSLContext.getInstance(\"SSL\");\n    sslContext.init(null, new javax.net.ssl.TrustManager[]{ com.cloudera.oryx.lambda.serving.SecureAPIConfigIT.ACCEPT_ALL_TM }, null);\n    javax.net.ssl.SSLSocketFactory originalFactory = javax.net.ssl.HttpsURLConnection.getDefaultSSLSocketFactory();\n    javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());\n    try {\n        java.lang.String response = com.google.common.io.Resources.toString(new java.net.URL((\"https://localhost:\" + getHTTPSPort()) + \"/helloWorld\"), java.nio.charset.StandardCharsets.UTF_8);\n        org.junit.Assert.assertEquals(\"Hello, World\", response);\n    } finally {\n        javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(originalFactory);\n        java.nio.file.Files.delete(java.nio.file.Paths.get(config.getString(\"oryx.serving.api.keystore-file\")));\n    }\n}",
        "ClassName": "SecureAPIConfigIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testHTTPS",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 15,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.nio.file.Path keystoreFile = com.cloudera.oryx.lambda.serving.SecureAPIConfigIT.buildKeystoreFile();\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    overlay.put(\"oryx.serving.api.keystore-file\", (\"\\\"\" + keystoreFile) + \"\\\"\");\n    overlay.put(\"oryx.serving.api.keystore-password\", \"oryxpass\");\n    overlay.put(\"oryx.serving.application-resources\", com.cloudera.oryx.lambda.serving.HelloWorld.class.getPackage().getName());\n    overlay.put(\"oryx.serving.no-init-topics\", true);\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, getConfig());\n}",
                "ClassName": "SecureAPIConfigIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 4,
                "MethodName": "buildHTTPSConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    servingLayer = new com.cloudera.oryx.lambda.serving.ServingLayer(config);\n    com.cloudera.oryx.lambda.serving.AbstractServingIT.log.info(\"Starting serving layer\");\n    servingLayer.start();\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServer",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return httpsPort;\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getHTTPSPort",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 17,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.app.rdf.RDFPMMLUtilsTest.buildDummyRegressionModel();\n    com.cloudera.oryx.common.collection.Pair<com.cloudera.oryx.app.rdf.tree.DecisionForest, com.cloudera.oryx.app.schema.CategoricalValueEncodings> forestAndEncodings = com.cloudera.oryx.app.rdf.RDFPMMLUtils.read(pmml);\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings encodings = forestAndEncodings.getSecond();\n    org.junit.Assert.assertTrue(encodings.getCategoryCounts().isEmpty());\n}",
        "ClassName": "RDFPMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 24,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testReadRegression",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.buildSkeletonPMML();\n    java.util.List<org.dmg.pmml.DataField> dataFields = new java.util.ArrayList<>();\n    dataFields.add(new org.dmg.pmml.DataField(org.dmg.pmml.FieldName.create(\"foo\"), org.dmg.pmml.OpType.CONTINUOUS, org.dmg.pmml.DataType.DOUBLE));\n    dataFields.add(new org.dmg.pmml.DataField(org.dmg.pmml.FieldName.create(\"bar\"), org.dmg.pmml.OpType.CONTINUOUS, org.dmg.pmml.DataType.DOUBLE));\n    org.dmg.pmml.DataDictionary dataDictionary = new org.dmg.pmml.DataDictionary(dataFields);\n    dataDictionary.setNumberOfFields(dataFields.size());\n    pmml.setDataDictionary(dataDictionary);\n    java.util.List<org.dmg.pmml.MiningField> miningFields = new java.util.ArrayList<>();\n    org.dmg.pmml.MiningField predictorMF = new org.dmg.pmml.MiningField(org.dmg.pmml.FieldName.create(\"foo\"));\n    predictorMF.setOpType(OpType.CONTINUOUS);\n    predictorMF.setUsageType(FieldUsageType.ACTIVE);\n    predictorMF.setImportance(0.5);\n    miningFields.add(predictorMF);\n    org.dmg.pmml.MiningField targetMF = new org.dmg.pmml.MiningField(org.dmg.pmml.FieldName.create(\"bar\"));\n    targetMF.setOpType(OpType.CONTINUOUS);\n    targetMF.setUsageType(FieldUsageType.PREDICTED);\n    miningFields.add(targetMF);\n    org.dmg.pmml.MiningSchema miningSchema = new org.dmg.pmml.MiningSchema(miningFields);\n    org.dmg.pmml.Node rootNode = new org.dmg.pmml.Node();\n    rootNode.setId(\"r\");\n    double dummyCount = 2.0;\n    rootNode.setRecordCount(dummyCount);\n    rootNode.setPredicate(new org.dmg.pmml.True());\n    double halfCount = dummyCount / 2;\n    org.dmg.pmml.Node left = new org.dmg.pmml.Node();\n    left.setId(\"r-\");\n    left.setRecordCount(halfCount);\n    left.setPredicate(new org.dmg.pmml.True());\n    left.setScore(\"-2.0\");\n    org.dmg.pmml.Node right = new org.dmg.pmml.Node();\n    right.setId(\"r+\");\n    right.setRecordCount(halfCount);\n    org.dmg.pmml.SimplePredicate predicate = new org.dmg.pmml.SimplePredicate(org.dmg.pmml.FieldName.create(\"foo\"), SimplePredicate.Operator.GREATER_THAN);\n    predicate.setValue(\"3.14\");\n    right.setPredicate(predicate);\n    right.setScore(\"2.0\");\n    rootNode.getNodes().add(right);\n    rootNode.getNodes().add(left);\n    org.dmg.pmml.TreeModel treeModel = new org.dmg.pmml.TreeModel(org.dmg.pmml.MiningFunctionType.REGRESSION, miningSchema, rootNode);\n    treeModel.setSplitCharacteristic(TreeModel.SplitCharacteristic.BINARY_SPLIT);\n    treeModel.setMissingValueStrategy(MissingValueStrategyType.DEFAULT_CHILD);\n    treeModel.setMiningSchema(miningSchema);\n    pmml.getModels().add(treeModel);\n    return pmml;\n}",
                "ClassName": "RDFPMMLUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildDummyRegressionModel",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 46,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.dmg.pmml.DataDictionary dictionary = pmml.getDataDictionary();\n    java.util.List<java.lang.String> featureNames = com.cloudera.oryx.app.pmml.AppPMMLUtils.getFeatureNames(dictionary);\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings categoricalValueEncodings = com.cloudera.oryx.app.pmml.AppPMMLUtils.buildCategoricalValueEncodings(dictionary);\n    java.util.List<org.dmg.pmml.Model> models = pmml.getModels();\n    org.dmg.pmml.Model model = models.get(0);\n    org.dmg.pmml.MiningSchema miningSchema = model.getMiningSchema();\n    int targetIndex = com.cloudera.oryx.app.pmml.AppPMMLUtils.findTargetIndex(miningSchema);\n    com.cloudera.oryx.app.rdf.tree.DecisionTree[] trees;\n    double[] weights;\n    if (model instanceof org.dmg.pmml.MiningModel) {\n        org.dmg.pmml.MiningModel miningModel = ((org.dmg.pmml.MiningModel) (model));\n        org.dmg.pmml.Segmentation segmentation = miningModel.getSegmentation();\n        com.google.common.base.Preconditions.checkArgument((segmentation.getMultipleModelMethod() == org.dmg.pmml.MultipleModelMethodType.WEIGHTED_AVERAGE) || (segmentation.getMultipleModelMethod() == org.dmg.pmml.MultipleModelMethodType.WEIGHTED_MAJORITY_VOTE));\n        java.util.List<org.dmg.pmml.Segment> segments = segmentation.getSegments();\n        com.google.common.base.Preconditions.checkArgument(!segments.isEmpty());\n        trees = new com.cloudera.oryx.app.rdf.tree.DecisionTree[segments.size()];\n        weights = new double[trees.length];\n        for (int i = 0; i < trees.length; i++) {\n            org.dmg.pmml.Segment segment = segments.get(i);\n            com.google.common.base.Preconditions.checkArgument(segment.getPredicate() instanceof org.dmg.pmml.True);\n            weights[i] = segment.getWeight();\n            org.dmg.pmml.TreeModel treeModel = ((org.dmg.pmml.TreeModel) (segment.getModel()));\n            com.cloudera.oryx.app.rdf.tree.TreeNode root = com.cloudera.oryx.app.rdf.RDFPMMLUtils.translateFromPMML(treeModel.getNode(), categoricalValueEncodings, featureNames, targetIndex);\n            trees[i] = new com.cloudera.oryx.app.rdf.tree.DecisionTree(root);\n        }\n    } else {\n        com.cloudera.oryx.app.rdf.tree.TreeNode root = com.cloudera.oryx.app.rdf.RDFPMMLUtils.translateFromPMML(((org.dmg.pmml.TreeModel) (model)).getNode(), categoricalValueEncodings, featureNames, targetIndex);\n        trees = new com.cloudera.oryx.app.rdf.tree.DecisionTree[]{ new com.cloudera.oryx.app.rdf.tree.DecisionTree(root) };\n        weights = new double[]{ 1.0 };\n    }\n    java.util.List<org.dmg.pmml.MiningField> miningFields = miningSchema.getMiningFields();\n    double[] featureImportances = new double[featureNames.size()];\n    for (int i = 0; i < miningFields.size(); i++) {\n        org.dmg.pmml.MiningField field = miningFields.get(i);\n        java.lang.Double importance = field.getImportance();\n        if (importance != null) {\n            featureImportances[i] = importance;\n        }\n    }\n    return new com.cloudera.oryx.common.collection.Pair<>(new com.cloudera.oryx.app.rdf.tree.DecisionForest(trees, weights, featureImportances), categoricalValueEncodings);\n}",
                "ClassName": "RDFPMMLUtils",
                "CyclomaticComplexity": 4,
                "DepthOfInheritance": 0,
                "MethodName": "read",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 42,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.Integer, java.lang.Integer> counts = new java.util.HashMap(encodingsForIndex.size());\n    for (java.util.Map.Entry<java.lang.Integer, com.google.common.collect.BiMap<java.lang.String, java.lang.Integer>> entry : encodingsForIndex.entrySet()) {\n        counts.put(entry.getKey(), entry.getValue().size());\n    }\n    return counts;\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "getCategoryCounts",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 5,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 98,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.serving.model-manager-class\", com.cloudera.oryx.lambda.serving.MockServingModelManager.class.getName());\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    java.lang.String serializedConfig = com.cloudera.oryx.common.settings.ConfigUtils.serialize(config);\n    org.springframework.mock.web.MockServletContext mockContext = new org.springframework.mock.web.MockServletContext();\n    mockContext.addInitParameter(com.cloudera.oryx.common.settings.ConfigUtils.class.getName() + \".serialized\", serializedConfig);\n    startMessaging();\n    com.cloudera.oryx.lambda.serving.ModelManagerListener<?, ?, ?> listener = new com.cloudera.oryx.lambda.serving.ModelManagerListener<>();\n    listener.init(mockContext);\n    try {\n        listener.contextInitialized(new javax.servlet.ServletContextEvent(mockContext));\n    } finally {\n        listener.contextDestroyed(new javax.servlet.ServletContextEvent(mockContext));\n    }\n}",
        "ClassName": "ModelManagerListenerIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 12,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testListener",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 16,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "ModelManagerListener",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    java.lang.String topicBroker = (\"\\\"localhost:\" + localKafkaBrokerPort) + '\"';\n    java.lang.String topicLockMaster = (\"\\\"localhost:\" + localZKPort) + '\"';\n    overlay.put(\"oryx.input-topic.broker\", topicBroker);\n    overlay.put(\"oryx.input-topic.lock.master\", topicLockMaster);\n    overlay.put(\"oryx.update-topic.broker\", topicBroker);\n    overlay.put(\"oryx.update-topic.lock.master\", topicLockMaster);\n    java.lang.String masterLocalAllCores = \"\\\"local[*]\\\"\";\n    overlay.put(\"oryx.batch.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.speed.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.batch.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.speed.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return config.root().withOnlyKey(\"oryx\").render(com.typesafe.config.ConfigRenderOptions.concise());\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "serialize",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.serving.ModelManagerListener.log.info(\"ModelManagerListener initializing\");\n    javax.servlet.ServletContext context = sce.getServletContext();\n    init(context);\n    inputProducer = new com.cloudera.oryx.lambda.serving.TopicProducerImpl<>(inputTopicBroker, inputTopic);\n    context.setAttribute(com.cloudera.oryx.lambda.serving.ModelManagerListener.INPUT_PRODUCER_KEY, inputProducer);\n    java.util.Properties consumerProps = new java.util.Properties();\n    consumerProps.setProperty(\"group.id\", \"OryxGroup-ServingLayer-\" + java.lang.System.currentTimeMillis());\n    consumerProps.setProperty(\"zookeeper.connect\", updateTopicLockMaster);\n    consumerProps.setProperty(\"auto.offset.reset\", \"smallest\");\n    kafka.consumer.ConsumerConfig consumerConfig = new kafka.consumer.ConsumerConfig(consumerProps);\n    consumer = kafka.consumer.Consumer.createJavaConsumerConnector(consumerConfig);\n    kafka.consumer.KafkaStream<java.lang.String, U> stream = consumer.createMessageStreams(java.util.Collections.singletonMap(updateTopic, 1), new kafka.serializer.StringDecoder(null), loadDecoderInstance()).get(updateTopic).get(0);\n    final java.util.Iterator<com.cloudera.oryx.lambda.KeyMessage<java.lang.String, U>> transformed = com.google.common.collect.Iterators.transform(stream.iterator(), new com.google.common.base.Function<kafka.message.MessageAndMetadata<java.lang.String, U>, com.cloudera.oryx.lambda.KeyMessage<java.lang.String, U>>() {\n        @java.lang.Override\n        public com.cloudera.oryx.lambda.KeyMessage<java.lang.String, U> apply(kafka.message.MessageAndMetadata<java.lang.String, U> input) {\n            return new com.cloudera.oryx.lambda.KeyMessageImpl(input.key(), input.message());\n        }\n    });\n    modelManager = loadManagerInstance();\n    new java.lang.Thread(new com.cloudera.oryx.common.lang.LoggingRunnable() {\n        @java.lang.Override\n        public void doRun() throws java.io.IOException {\n            modelManager.consume(transformed);\n        }\n    }).start();\n    context.setAttribute(com.cloudera.oryx.lambda.serving.ModelManagerListener.MANAGER_KEY, modelManager);\n}",
                "ClassName": "ModelManagerListener",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "contextInitialized",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 28,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 3
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.serving.ModelManagerListener.log.info(\"ModelManagerListener destroying\");\n    sce.getServletContext().removeAttribute(com.cloudera.oryx.lambda.serving.ModelManagerListener.MANAGER_KEY);\n    if (modelManager != null) {\n        com.cloudera.oryx.lambda.serving.ModelManagerListener.log.info(\"Shutting down model manager\");\n        modelManager.close();\n        modelManager = null;\n    }\n    if (inputProducer != null) {\n        com.cloudera.oryx.lambda.serving.ModelManagerListener.log.info(\"Shutting down input producer\");\n        inputProducer.close();\n        inputProducer = null;\n    }\n    if (consumer != null) {\n        com.cloudera.oryx.lambda.serving.ModelManagerListener.log.info(\"Shutting down consumer\");\n        consumer.shutdown();\n        consumer = null;\n    }\n}",
                "ClassName": "ModelManagerListener",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "contextDestroyed",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 19,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 4,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 88,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 3
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.als.RescorerProvider noop = new com.cloudera.oryx.app.als.NullProvider1();\n    org.junit.Assert.assertNull(noop.getMostActiveUsersRescorer(null));\n    org.junit.Assert.assertNull(noop.getMostPopularItemsRescorer(null));\n    org.junit.Assert.assertNull(noop.getMostSimilarItemsRescorer(null));\n    org.junit.Assert.assertNull(noop.getRecommendRescorer(null, null));\n    org.junit.Assert.assertNull(noop.getRecommendToAnonymousRescorer(null, null));\n}",
        "ClassName": "AbstractRescorerProviderTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 2,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDefault",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 5,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "NullProvider1",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 2,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.common.collection.NotContainsPredicate<java.lang.String> a = new com.cloudera.oryx.common.collection.NotContainsPredicate<>(java.util.Arrays.asList(\"foo\"));\n    com.cloudera.oryx.common.collection.NotContainsPredicate<java.lang.String> b = new com.cloudera.oryx.common.collection.NotContainsPredicate<>(java.util.Arrays.asList(\"bar\", \"baz\"));\n    com.cloudera.oryx.common.collection.AndPredicate<java.lang.String> and = new com.cloudera.oryx.common.collection.AndPredicate(a, b);\n    org.junit.Assert.assertFalse(and.test(\"foo\"));\n    org.junit.Assert.assertFalse(and.test(\"bar\"));\n    org.junit.Assert.assertFalse(and.test(\"baz\"));\n    org.junit.Assert.assertTrue(and.test(\"bing\"));\n}",
        "ClassName": "AndPredicateTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testAnd",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 9,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkNotNull(values);\n    this.values = values;\n}",
                "ClassName": "NotContainsPredicate",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return a.test(value) && b.test(value);\n}",
                "ClassName": "AndPredicate",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "test",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 7,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.Integer, float[]> a = new java.util.HashMap<>();\n    a.put(-1, new float[]{ 1.3F, -2.0F, 3.0F });\n    a.put(1, new float[]{ 2.0F, 0.0F, 5.0F });\n    a.put(3, new float[]{ 0.0F, -1.5F, 5.5F });\n    org.apache.commons.math3.linear.RealMatrix ata = com.cloudera.oryx.common.math.VectorMath.transposeTimesSelf(a.values());\n    org.apache.commons.math3.linear.RealMatrix expected = new org.apache.commons.math3.linear.Array2DRowRealMatrix(new double[][]{ new double[]{ 5.69, -2.6, 13.9 }, new double[]{ -2.6, 6.25, -14.25 }, new double[]{ 13.9, -14.25, 64.25 } });\n    for (int row = 0; row < 3; row++) {\n        for (int col = 0; col < 3; col++) {\n            org.junit.Assert.assertEquals(expected.getEntry(row, col), ata.getEntry(row, col), com.cloudera.oryx.common.OryxTest.FLOAT_EPSILON);\n        }\n    }\n}",
        "ClassName": "VectorMathTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 2,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 5,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 20,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testTransposeTimesSelf",
        "MinimumCyclomaticComplexity": 5,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 20,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 13,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    if ((M == null) || M.isEmpty()) {\n        return null;\n    }\n    int features = 0;\n    org.apache.commons.math3.linear.RealMatrix result = null;\n    for (float[] vector : M) {\n        if (result == null) {\n            features = vector.length;\n            result = new org.apache.commons.math3.linear.Array2DRowRealMatrix(features, features);\n        }\n        for (int row = 0; row < features; row++) {\n            float rowValue = vector[row];\n            for (int col = 0; col < features; col++) {\n                result.addToEntry(row, col, rowValue * vector[col]);\n            }\n        }\n    }\n    return result;\n}",
                "ClassName": "VectorMath",
                "CyclomaticComplexity": 5,
                "DepthOfInheritance": 0,
                "MethodName": "transposeTimesSelf",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 20,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 5,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 20,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    java.nio.file.Path modelDir = tempDir.resolve(\"model\");\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.batch.update-class\", com.cloudera.oryx.app.mllib.als.ALSUpdate.class.getName());\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.data-dir\", tempDir.resolve(\"data\"));\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.model-dir\", modelDir);\n    overlayConfig.put(\"oryx.batch.streaming.generation-interval-sec\", 10);\n    overlayConfig.put(\"oryx.batch.streaming.block-interval-sec\", 1);\n    overlayConfig.put(\"oryx.ml.eval.test-fraction\", 0);\n    overlayConfig.put(\"oryx.als.implicit\", false);\n    overlayConfig.put(\"oryx.als.hyperparams.lambda\", 1.0E-4);\n    overlayConfig.put(\"oryx.als.hyperparams.features\", 2);\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    com.cloudera.oryx.app.mllib.als.ModelContentDataGenerator generator = new com.cloudera.oryx.app.mllib.als.ModelContentDataGenerator();\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> updates = startServerProduceConsumeTopics(config, generator, generator.getSentData().size(), 20);\n    java.util.Collection<java.lang.String> modelUsers = null;\n    java.util.Collection<java.lang.String> modelItems = null;\n    java.util.Map<java.lang.String, java.util.Collection<java.lang.String>> knownUsersItems = new java.util.HashMap<>();\n    for (com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> km : updates) {\n        java.lang.String type = km.getFirst();\n        java.lang.String value = km.getSecond();\n        com.cloudera.oryx.app.mllib.als.ALSModelContentIT.log.debug(\"{} = {}\", type, value);\n        if (\"UP\".equals(type)) {\n            java.util.List<?> update = com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.readValue(value, java.util.List.class);\n            if (\"X\".equals(update.get(0).toString())) {\n                java.lang.String userID = update.get(1).toString();\n                @java.lang.SuppressWarnings(\"unchecked\")\n                java.util.Collection<java.lang.String> userKnownItems = ((java.util.Collection<java.lang.String>) (update.get(3)));\n                knownUsersItems.put(userID, new java.util.ArrayList<>(userKnownItems));\n            }\n        } else {\n            org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.fromString(value);\n            modelUsers = com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionContent(pmml, \"XIDs\");\n            modelItems = com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionContent(pmml, \"YIDs\");\n        }\n    }\n    com.cloudera.oryx.common.OryxTest.assertContainsSame(java.util.Arrays.asList(\"A0\", \"B1\", \"C2\"), modelUsers);\n    com.cloudera.oryx.common.OryxTest.assertContainsSame(java.util.Arrays.asList(\"A0\", \"B1\", \"C2\", \"D3\"), modelItems);\n    com.cloudera.oryx.common.OryxTest.assertContainsSame(java.util.Arrays.asList(\"A0\", \"B1\", \"C2\", \"D3\"), knownUsersItems.get(\"A0\"));\n    com.cloudera.oryx.common.OryxTest.assertContainsSame(java.util.Arrays.asList(\"C2\", \"D3\"), knownUsersItems.get(\"B1\"));\n    com.cloudera.oryx.common.OryxTest.assertContainsSame(java.util.Arrays.asList(\"D3\"), knownUsersItems.get(\"C2\"));\n}",
        "ClassName": "ALSModelContentIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 3,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 9,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testModelContent",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 44,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    long startTime = java.lang.System.currentTimeMillis();\n    data = new java.util.ArrayList<>();\n    for (int user = 0; user < com.cloudera.oryx.app.mllib.als.ModelContentDataGenerator.NUM_USERS_ITEMS; user++) {\n        java.lang.String userString = com.cloudera.oryx.app.als.ALSUtilsTest.idToStringID(user);\n        for (int item = user; item < com.cloudera.oryx.app.mllib.als.ModelContentDataGenerator.NUM_USERS_ITEMS; item++) {\n            java.lang.String itemString = com.cloudera.oryx.app.als.ALSUtilsTest.idToStringID(item);\n            data.add((((userString + \",\") + itemString) + \",1,\") + (startTime++));\n        }\n    }\n    for (int userItem = 0; userItem < com.cloudera.oryx.app.mllib.als.ModelContentDataGenerator.NUM_USERS_ITEMS; userItem++) {\n        java.lang.String userItemString = com.cloudera.oryx.app.als.ALSUtilsTest.idToStringID(userItem);\n        data.add((((userItemString + \",\") + userItemString) + \",,\") + (startTime++));\n    }\n    data.add(\"A0,A0,1,\" + startTime);\n}",
                "ClassName": "ModelContentDataGenerator",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 16,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (tempDir == null) {\n        tempDir = java.nio.file.Files.createTempDirectory(\"OryxTest\").toAbsolutePath();\n        com.cloudera.oryx.common.OryxTest.log.info(\"Test temp dir is {}\", tempDir);\n        tempDir.toFile().deleteOnExit();\n    }\n    return tempDir;\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getTempDir",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 2,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.nio.file.Path finalPath = (java.nio.file.Files.exists(path, java.nio.file.LinkOption.NOFOLLOW_LINKS)) ? path.toRealPath(java.nio.file.LinkOption.NOFOLLOW_LINKS) : path;\n    overlay.put(key, (\"\\\"\" + finalPath.toUri()) + \"\\\"\");\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "set",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    java.lang.String topicBroker = (\"\\\"localhost:\" + localKafkaBrokerPort) + '\"';\n    java.lang.String topicLockMaster = (\"\\\"localhost:\" + localZKPort) + '\"';\n    overlay.put(\"oryx.input-topic.broker\", topicBroker);\n    overlay.put(\"oryx.input-topic.lock.master\", topicLockMaster);\n    overlay.put(\"oryx.update-topic.broker\", topicBroker);\n    overlay.put(\"oryx.update-topic.lock.master\", topicLockMaster);\n    java.lang.String masterLocalAllCores = \"\\\"local[*]\\\"\";\n    overlay.put(\"oryx.batch.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.speed.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.batch.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.speed.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int zkPort = getZKPort();\n    com.cloudera.oryx.kafka.util.ProduceData produce = new com.cloudera.oryx.kafka.util.ProduceData(datumGenerator, zkPort, getKafkaBrokerPort(), com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC, howMany, intervalMsec);\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> keyMessages;\n    try (com.cloudera.oryx.common.collection.CloseableIterator<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = new com.cloudera.oryx.kafka.util.ConsumeData(com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, zkPort).iterator();com.cloudera.oryx.lambda.BatchLayer<?, ?, ?> batchLayer = new com.cloudera.oryx.lambda.BatchLayer(config)) {\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Starting batch layer\");\n        batchLayer.start();\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Starting consumer thread\");\n        com.cloudera.oryx.kafka.util.ConsumeTopicRunnable consumeInput = new com.cloudera.oryx.kafka.util.ConsumeTopicRunnable(data);\n        new java.lang.Thread(consumeInput).start();\n        java.lang.Thread.sleep(3000);\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Producing data\");\n        produce.start();\n        long genIntervalSec = config.getInt(\"oryx.batch.streaming.generation-interval-sec\");\n        java.lang.Thread.sleep(genIntervalSec * 1000);\n        keyMessages = consumeInput.getKeyMessages();\n    } finally {\n        produce.deleteTopic();\n    }\n    return keyMessages;\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServerProduceConsumeTopics",
                "NumberOfAsynchronousWaits": 2,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 21,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 7
            },
            {
                "Body": "{\n    return data;\n}",
                "ClassName": "ModelContentDataGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSentData",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return first;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return org.jpmml.model.JAXBUtil.unmarshalPMML(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(pmmlString)));\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "fromString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    for (org.dmg.pmml.Extension extension : pmml.getExtensions()) {\n        if (name.equals(extension.getName())) {\n            java.util.List<?> content = extension.getContent();\n            com.google.common.base.Preconditions.checkArgument(content.size() <= 1);\n            if (content.isEmpty()) {\n                return java.util.Collections.emptyList();\n            }\n            return java.util.Arrays.asList(com.cloudera.oryx.common.text.TextUtils.parsePMMLDelimited(content.get(0).toString()));\n        }\n    }\n    return null;\n}",
                "ClassName": "AppPMMLUtils",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "getExtensionContent",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 13,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (expected == null) {\n        org.junit.Assert.assertNull(actual);\n    } else {\n        org.junit.Assert.assertNotNull(actual);\n        org.junit.Assert.assertEquals(expected.size(), actual.size());\n        org.junit.Assert.assertTrue(expected.containsAll(actual) && actual.containsAll(expected));\n    }\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "assertContainsSame",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 9,
        "TotalNumberOfAsynchronousWaits": 2,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 2,
        "TotalNumberOfLines": 119,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 7
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(new com.cloudera.oryx.common.collection.Pair<>(3.0, \"foo\").hashCode(), new com.cloudera.oryx.common.collection.Pair<>(3.0, \"foo\").hashCode());\n    org.junit.Assert.assertEquals(new com.cloudera.oryx.common.collection.Pair<>(null, null).hashCode(), new com.cloudera.oryx.common.collection.Pair<>(null, null).hashCode());\n}",
        "ClassName": "PairTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testHashCode",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this.first = first;\n    this.second = second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return java.util.Objects.hashCode(first) ^ java.util.Objects.hashCode(second);\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "hashCode",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 7,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.tree.DecisionTree tree = com.cloudera.oryx.app.rdf.tree.DecisionTreeTest.buildTestTree();\n    com.cloudera.oryx.app.rdf.tree.TerminalNode node = ((com.cloudera.oryx.app.rdf.tree.TerminalNode) (tree.findByID(\"r-+\")));\n    com.cloudera.oryx.common.OryxTest.assertEquals(1.0, ((com.cloudera.oryx.app.rdf.predict.NumericPrediction) (node.getPrediction())).getPrediction());\n}",
        "ClassName": "DecisionTreeTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testFindByID",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.cloudera.oryx.app.rdf.tree.TerminalNode rnn = new com.cloudera.oryx.app.rdf.tree.TerminalNode(\"r--\", new com.cloudera.oryx.app.rdf.predict.NumericPrediction(0.0, 1));\n    com.cloudera.oryx.app.rdf.tree.TerminalNode rnp = new com.cloudera.oryx.app.rdf.tree.TerminalNode(\"r-+\", new com.cloudera.oryx.app.rdf.predict.NumericPrediction(1.0, 1));\n    com.cloudera.oryx.app.rdf.tree.DecisionNode rn = new com.cloudera.oryx.app.rdf.tree.DecisionNode(\"r-\", new com.cloudera.oryx.app.rdf.decision.NumericDecision(0, -1.0, false), rnn, rnp);\n    com.cloudera.oryx.app.rdf.tree.TerminalNode rp = new com.cloudera.oryx.app.rdf.tree.TerminalNode(\"r+\", new com.cloudera.oryx.app.rdf.predict.NumericPrediction(2.0, 1));\n    com.cloudera.oryx.app.rdf.tree.DecisionNode root = new com.cloudera.oryx.app.rdf.tree.DecisionNode(\"r\", new com.cloudera.oryx.app.rdf.decision.NumericDecision(0, 1.0, false), rn, rp);\n    return new com.cloudera.oryx.app.rdf.tree.DecisionTree(root);\n}",
                "ClassName": "DecisionTreeTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildTestTree",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.app.rdf.tree.TreeNode node = root;\n    while (!id.equals(node.getID())) {\n        if (node.isTerminal()) {\n            throw new java.lang.IllegalArgumentException(\"No node with ID \" + id);\n        }\n        com.google.common.base.Preconditions.checkState(id.startsWith(node.getID()), \"Node ID %s is not a prefix of %s\", node.getID(), id);\n        com.cloudera.oryx.app.rdf.tree.DecisionNode decisionNode = ((com.cloudera.oryx.app.rdf.tree.DecisionNode) (node));\n        char decisionChar = id.charAt(node.getID().length());\n        com.google.common.base.Preconditions.checkState((decisionChar == '-') || (decisionChar == '+'));\n        if (decisionChar == '+') {\n            node = decisionNode.getRight();\n        } else {\n            node = decisionNode.getLeft();\n        }\n    } \n    return node;\n}",
                "ClassName": "DecisionTree",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "findByID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 18,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getPrediction",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return prediction;\n}",
                "ClassName": "TerminalNode",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getPrediction",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 35,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    javax.ws.rs.core.Response response = target(\"/train/\" + com.cloudera.oryx.app.serving.rdf.TrainTest.TRAIN_DATA.split(\"\\n\")[0]).request().post(javax.ws.rs.client.Entity.text(\"\"));\n    org.junit.Assert.assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = com.cloudera.oryx.lambda.serving.MockTopicProducer.getData();\n    org.junit.Assert.assertEquals(1, data.size());\n    org.junit.Assert.assertArrayEquals(com.cloudera.oryx.app.serving.rdf.TrainTest.EXPECTED_TOPIC[0], data.get(0).getSecond().split(\",\"));\n}",
        "ClassName": "TrainTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testURITrain",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return com.cloudera.oryx.lambda.serving.MockTopicProducer.DATA;\n}",
                "ClassName": "MockTopicProducer",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getData",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 6,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(3.0, com.cloudera.oryx.lambda.fn.Functions.last().call(7.0, 3.0));\n}",
        "ClassName": "FunctionsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 8,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testLast",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 8,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return new org.apache.spark.api.java.function.Function2<T, T, T>() {\n        @java.lang.Override\n        public T call(T current, T next) {\n            return next;\n        }\n    };\n}",
                "ClassName": "Functions",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "last",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 8,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.common.math.DoubleWeightedMean mean = new com.cloudera.oryx.common.math.DoubleWeightedMean();\n    mean.increment(0.2, 4.0);\n    mean.increment(-0.1, 2.0);\n    org.junit.Assert.assertEquals(2, mean.getN());\n    com.cloudera.oryx.common.OryxTest.assertEquals(0.1, mean.getResult());\n}",
        "ClassName": "DoubleWeightedMeanTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testWeighted",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this(0, 0.0, java.lang.Double.NaN);\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(weight >= 0.0);\n    if (count == 0) {\n        count = 1;\n        mean = datum;\n        totalWeight = weight;\n    } else {\n        count++;\n        totalWeight += weight;\n        mean += (weight / totalWeight) * (datum - mean);\n    }\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "increment",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return count;\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getN",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return mean;\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getResult",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 24,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.kmeans.ClusterInfo> clusters = com.cloudera.oryx.app.mllib.kmeans.KMeansEvalIT.getClusters();\n    com.cloudera.oryx.app.mllib.kmeans.DunnIndex dunnIndex = new com.cloudera.oryx.app.mllib.kmeans.DunnIndex(clusters);\n    double eval = dunnIndex.evaluate(com.cloudera.oryx.app.mllib.kmeans.KMeansEvalIT.getRddOfVectors());\n    com.cloudera.oryx.app.mllib.kmeans.KMeansEvalIT.log.info(\"Dunn Index for {} clusters: {}\", clusters.size(), eval);\n    com.cloudera.oryx.common.OryxTest.assertEquals(1.7142857142857142, eval);\n}",
        "ClassName": "KMeansEvalIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDunnIndexForClustering",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(clusters);\n}",
                "ClassName": "DunnIndex",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.kmeans.KMeansPMMLUtils.read(com.cloudera.oryx.app.kmeans.KMeansPMMLUtilsTest.buildDummyClusteringModel());\n}",
                "ClassName": "KMeansEvalIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getClusters",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return dunnIndex(fetchClusterSumDistanceAndCounts(evalData).collect());\n}",
                "ClassName": "DunnIndex",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "evaluate",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.List<double[]> points = java.util.Arrays.asList(new double[][]{ new double[]{ 1.0, 0.0 }, new double[]{ 2.0, -2.0 }, new double[]{ 2.0, 0.0 }, new double[]{ -2.0, 0.0 }, new double[]{ -0.5, -1.0 }, new double[]{ -0.5, 1.0 } });\n    return com.cloudera.oryx.lambda.AbstractSparkIT.getJavaSparkContext().parallelize(points).map(new com.cloudera.oryx.app.mllib.kmeans.KMeansEvalIT.ToVectorFn());\n}",
                "ClassName": "KMeansEvalIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getRddOfVectors",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 16,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testHowMany(\"/recommendToAnonymous/I1\", -1, 0);\n}",
        "ClassName": "RecommendToAnonymousTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBadHowMany",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testHowMany",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.predict.NumericPrediction prediction = new com.cloudera.oryx.app.rdf.predict.NumericPrediction(1.5, 1);\n    com.cloudera.oryx.app.rdf.example.Example example = new com.cloudera.oryx.app.rdf.example.Example(com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(2.5));\n    prediction.update(example);\n    com.cloudera.oryx.common.OryxTest.assertEquals(2.0, prediction.getPrediction());\n}",
        "ClassName": "NumericPredictionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testUpdate",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(initialCount);\n    this.prediction = prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(features != null);\n    this.features = features;\n    this.target = target;\n    com.google.common.hash.Hasher hasher = com.cloudera.oryx.app.rdf.example.Example.HASH.newHasher();\n    for (com.cloudera.oryx.app.rdf.example.Feature feature : features) {\n        if (feature != null) {\n            hasher.putInt(feature.hashCode());\n        }\n    }\n    if (target != null) {\n        hasher.putInt(target.hashCode());\n    }\n    cachedHashCode = hasher.hashCode();\n}",
                "ClassName": "Example",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value == 0.0F ? com.cloudera.oryx.app.rdf.example.NumericFeature.ZERO : new com.cloudera.oryx.app.rdf.example.NumericFeature(value);\n}",
                "ClassName": "NumericFeature",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "forValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.app.rdf.example.NumericFeature target = ((com.cloudera.oryx.app.rdf.example.NumericFeature) (train.getTarget()));\n    update(target.getValue(), 1);\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "update",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getPrediction",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 32,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<java.lang.String> items = target(\"/knownItems/X1\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.lambda.serving.AbstractServingTest.LIST_STRING_TYPE);\n    org.junit.Assert.assertEquals(0, items.size());\n}",
        "ClassName": "KnownItemsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testEmptyItems",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String response = target(\"/mostActiveUsers\").request().get(java.lang.String.class);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testCSVTopByCount(7, response);\n}",
        "ClassName": "MostActiveUsersTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testMostPopularCSV",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testCSVTop(expectedSize, response, true, false);\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testCSVTopByCount",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    int[] counts = new int[]{ 0, 1, 3, 0, 4, 0 };\n    com.cloudera.oryx.app.rdf.predict.CategoricalPrediction prediction = new com.cloudera.oryx.app.rdf.predict.CategoricalPrediction(counts);\n    org.junit.Assert.assertEquals(\":[0.0, 0.125, 0.375, 0.0, 0.5, 0.0]\", prediction.toString());\n}",
        "ClassName": "CategoricalPredictionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testToString",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(com.cloudera.oryx.app.rdf.predict.CategoricalPrediction.sum(categoryCounts));\n    this.categoryCounts = categoryCounts;\n    recompute();\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return ':' + java.util.Arrays.toString(categoryProbabilities);\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "toString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 8,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    new com.cloudera.oryx.common.lang.LoggingVoidCallable() {\n        @java.lang.Override\n        public void doCall() throws java.io.IOException {\n            throw com.cloudera.oryx.common.lang.LoggingTest.buildIOE();\n        }\n    }.call();\n}",
        "ClassName": "LoggingTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testLoggingVoidCallableException",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "4",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try {\n        doCall();\n        return null;\n    } catch (java.lang.Exception e) {\n        com.cloudera.oryx.common.lang.LoggingVoidCallable.log.warn(\"Unexpected error in {}\", this, e);\n        throw new java.lang.IllegalStateException(e);\n    } catch (java.lang.Throwable t) {\n        com.cloudera.oryx.common.lang.LoggingVoidCallable.log.warn(\"Unexpected error in {}\", this, t);\n        throw t;\n    }\n}",
                "ClassName": "LoggingVoidCallable",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "call",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n}",
                "ClassName": "LoggingVoidCallable",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.io.IOException ioe = new java.io.IOException(\"It's safe to ignore this exception\");\n    ioe.setStackTrace(new java.lang.StackTraceElement[0]);\n    return ioe;\n}",
                "ClassName": "LoggingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildIOE",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 21,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    double importance0 = target(\"/feature/importance/0\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(java.lang.Double.class);\n    org.junit.Assert.assertEquals(0.1, importance0, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n    double importance1 = target(\"/feature/importance/1\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(java.lang.Double.class);\n    org.junit.Assert.assertEquals(0.3, importance1, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
        "ClassName": "FeatureImportanceTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testImportance",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    int[] counts = new int[]{ 0, 1, 3, 0, 4, 0 };\n    com.cloudera.oryx.app.rdf.predict.CategoricalPrediction prediction = new com.cloudera.oryx.app.rdf.predict.CategoricalPrediction(counts);\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.example.FeatureType.CATEGORICAL, prediction.getFeatureType());\n    org.junit.Assert.assertEquals(4, prediction.getMostProbableCategoryEncoding());\n    org.junit.Assert.assertArrayEquals(counts, prediction.getCategoryCounts());\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(new double[]{ 0.0, 0.125, 0.375, 0.0, 0.5, 0.0 }, prediction.getCategoryProbabilities());\n}",
        "ClassName": "CategoricalPredictionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testConstruct",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(com.cloudera.oryx.app.rdf.predict.CategoricalPrediction.sum(categoryCounts));\n    this.categoryCounts = categoryCounts;\n    recompute();\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.rdf.example.FeatureType.CATEGORICAL;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getFeatureType",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return maxCategory;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getMostProbableCategoryEncoding",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return categoryCounts;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getCategoryCounts",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertArrayEquals(expecteds, actuals, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertArrayEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return categoryProbabilities;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getCategoryProbabilities",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 20,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.serving.application-resources\", \"\\\"com.cloudera.oryx.app.serving,com.cloudera.oryx.app.serving.als\\\"\");\n    overlayConfig.put(\"oryx.serving.model-manager-class\", com.cloudera.oryx.app.serving.als.model.ALSServingModelManager.class.getName());\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    startServer(config);\n    @java.lang.SuppressWarnings(\"unchecked\")\n    com.cloudera.oryx.lambda.TopicProducer<java.lang.String, java.lang.String> inputProducer = ((com.cloudera.oryx.lambda.TopicProducer<java.lang.String, java.lang.String>) (getServingLayer().getContext().getServletContext().getAttribute(com.cloudera.oryx.app.serving.AbstractOryxResource.INPUT_PRODUCER_KEY)));\n    java.lang.String[] inputs = new java.lang.String[]{ \"abc,123,1.5\", \"xyz,234,-0.5\", \"AB,10,0\" };\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> keyMessages;\n    try (com.cloudera.oryx.common.collection.CloseableIterator<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = new com.cloudera.oryx.kafka.util.ConsumeData(com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC, getZKPort()).iterator()) {\n        com.cloudera.oryx.app.serving.als.model.ALSServingInputProducerIT.log.info(\"Starting consumer thread\");\n        com.cloudera.oryx.kafka.util.ConsumeTopicRunnable consumeInput = new com.cloudera.oryx.kafka.util.ConsumeTopicRunnable(data);\n        new java.lang.Thread(consumeInput).start();\n        java.lang.Thread.sleep(3000);\n        for (java.lang.String input : inputs) {\n            inputProducer.send(\"\", input);\n        }\n        java.lang.Thread.sleep(1000);\n        keyMessages = consumeInput.getKeyMessages();\n    }\n    for (int i = 0; i < keyMessages.size(); i++) {\n        com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> keyMessage = keyMessages.get(i);\n        org.junit.Assert.assertEquals(\"\", keyMessage.getFirst());\n        org.junit.Assert.assertEquals(inputs[i], keyMessage.getSecond());\n    }\n    org.junit.Assert.assertEquals(inputs.length, keyMessages.size());\n}",
        "ClassName": "ALSServingInputProducerIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 2,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testALSInputProducer",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 2,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 29,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 7,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this.topic = topic;\n    this.zkPort = zkPort;\n}",
                "ClassName": "ConsumeData",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    this.data = data;\n    this.keyMessages = new java.util.ArrayList<>();\n}",
                "ClassName": "ConsumeTopicRunnable",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    overlay.put(\"oryx.serving.api.port\", httpPort);\n    overlay.put(\"oryx.serving.api.secure-port\", httpsPort);\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, super.getConfig());\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    servingLayer = new com.cloudera.oryx.lambda.serving.ServingLayer(config);\n    com.cloudera.oryx.lambda.serving.AbstractServingIT.log.info(\"Starting serving layer\");\n    servingLayer.start();\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServer",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return context;\n}",
                "ClassName": "ServingLayer",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getContext",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return servingLayer;\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getServingLayer",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Properties consumerProps = new java.util.Properties();\n    consumerProps.setProperty(\"group.id\", \"OryxGroup-ConsumeData\");\n    consumerProps.setProperty(\"zookeeper.connect\", \"localhost:\" + zkPort);\n    kafka.consumer.ConsumerConfig consumerConfig = new kafka.consumer.ConsumerConfig(consumerProps);\n    kafka.javaapi.consumer.ConsumerConnector consumer = kafka.consumer.Consumer.createJavaConsumerConnector(consumerConfig);\n    return new com.cloudera.oryx.kafka.util.ConsumeDataIterator(topic, consumer);\n}",
                "ClassName": "ConsumeData",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "iterator",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return localZKPort;\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "getZKPort",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return keyMessages;\n}",
                "ClassName": "ConsumeTopicRunnable",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getKeyMessages",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return first;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 66,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.typesafe.config.Config config = buildHTTPSConfig();\n    startServer(config);\n    try {\n        com.google.common.io.Resources.toString(new java.net.URL((\"https://localhost:\" + getHTTPSPort()) + \"/helloWorld\"), java.nio.charset.StandardCharsets.UTF_8);\n    } finally {\n        java.nio.file.Files.delete(java.nio.file.Paths.get(config.getString(\"oryx.serving.api.keystore-file\")));\n    }\n}",
        "ClassName": "SecureAPIConfigIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBadHTTPS",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 9,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.nio.file.Path keystoreFile = com.cloudera.oryx.lambda.serving.SecureAPIConfigIT.buildKeystoreFile();\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    overlay.put(\"oryx.serving.api.keystore-file\", (\"\\\"\" + keystoreFile) + \"\\\"\");\n    overlay.put(\"oryx.serving.api.keystore-password\", \"oryxpass\");\n    overlay.put(\"oryx.serving.application-resources\", com.cloudera.oryx.lambda.serving.HelloWorld.class.getPackage().getName());\n    overlay.put(\"oryx.serving.no-init-topics\", true);\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, getConfig());\n}",
                "ClassName": "SecureAPIConfigIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 4,
                "MethodName": "buildHTTPSConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    servingLayer = new com.cloudera.oryx.lambda.serving.ServingLayer(config);\n    com.cloudera.oryx.lambda.serving.AbstractServingIT.log.info(\"Starting serving layer\");\n    servingLayer.start();\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServer",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return httpsPort;\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getHTTPSPort",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 17,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<java.lang.String> items = target(\"/item/allIDs\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.lambda.serving.AbstractServingTest.LIST_STRING_TYPE);\n    org.junit.Assert.assertEquals(9, items.size());\n    for (int item = 0; item < 9; item++) {\n        org.junit.Assert.assertTrue(items.contains(\"I\" + item));\n    }\n}",
        "ClassName": "AllItemIDsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 1,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testAllItemIDs",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.serving.als.model.ALSServingModel model = new com.cloudera.oryx.app.serving.als.model.ALSServingModel(2, true, null);\n    com.cloudera.oryx.app.serving.als.model.ALSServingModelTest.populateKnownItems(model);\n    for (int i = 0; i < 10; i++) {\n        model.setUserVector(\"U\" + i, new float[]{ 0.0F, 0.0F });\n        model.setItemVector(\"I\" + i, new float[]{ 0.0F, 0.0F });\n    }\n    model.pruneKnownItems(java.util.Arrays.asList(\"U4\", \"U5\", \"U6\"), java.util.Arrays.asList(\"I4\", \"I5\", \"I6\"));\n    org.junit.Assert.assertTrue(model.getKnownItems(\"U3\").contains(\"I4\"));\n    org.junit.Assert.assertTrue(model.getKnownItems(\"U4\").contains(\"I4\"));\n    org.junit.Assert.assertTrue(model.getKnownItems(\"U6\").contains(\"I6\"));\n    org.junit.Assert.assertTrue(model.getKnownItems(\"U6\").contains(\"I7\"));\n    org.junit.Assert.assertTrue(model.getKnownItems(\"U2\").contains(\"I2\"));\n    model.pruneX(java.util.Collections.<java.lang.String>emptyList());\n    model.pruneY(java.util.Collections.<java.lang.String>emptyList());\n    model.pruneKnownItems(java.util.Arrays.asList(\"U4\", \"U5\", \"U6\"), java.util.Arrays.asList(\"I4\", \"I5\", \"I6\"));\n    org.junit.Assert.assertNull(model.getKnownItems(\"U3\"));\n    org.junit.Assert.assertTrue(model.getKnownItems(\"U4\").contains(\"I4\"));\n    org.junit.Assert.assertTrue(model.getKnownItems(\"U6\").contains(\"I6\"));\n    org.junit.Assert.assertFalse(model.getKnownItems(\"U6\").contains(\"I7\"));\n    org.junit.Assert.assertNull(model.getKnownItems(\"U2\"));\n}",
        "ClassName": "ALSServingModelTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 1,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 11,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 6,
        "MethodName": "testPruneKnown",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 10,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 22,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(features > 0);\n    X = net.openhft.koloboke.collect.map.hash.HashObjObjMaps.newMutableMap();\n    Y = ((net.openhft.koloboke.collect.map.ObjObjMap<java.lang.String, float[]>[]) (java.lang.reflect.Array.newInstance(net.openhft.koloboke.collect.map.ObjObjMap.class, com.cloudera.oryx.app.serving.als.model.ALSServingModel.PARTITIONS)));\n    for (int i = 0; i < Y.length; i++) {\n        Y[i] = net.openhft.koloboke.collect.map.hash.HashObjObjMaps.newMutableMap();\n    }\n    recentNewUsers = new java.util.HashSet<>();\n    recentNewItems = ((java.util.Collection<java.lang.String>[]) (java.lang.reflect.Array.newInstance(java.util.HashSet.class, com.cloudera.oryx.app.serving.als.model.ALSServingModel.PARTITIONS)));\n    for (int i = 0; i < recentNewItems.length; i++) {\n        recentNewItems[i] = new java.util.HashSet<>();\n    }\n    knownItems = net.openhft.koloboke.collect.map.hash.HashObjObjMaps.newMutableMap();\n    xLock = new java.util.concurrent.locks.ReentrantReadWriteLock();\n    yLocks = new java.util.concurrent.locks.ReentrantReadWriteLock[Y.length];\n    for (int i = 0; i < yLocks.length; i++) {\n        yLocks[i] = new java.util.concurrent.locks.ReentrantReadWriteLock();\n    }\n    this.features = features;\n    this.implicit = implicit;\n    this.rescorerProvider = rescorerProvider;\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 22,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 18
            },
            {
                "Body": "{\n    for (int i = 0; i < 10; i++) {\n        java.lang.String userID = \"U\" + i;\n        for (int j = 0; j < 10; j++) {\n            if (java.lang.Math.abs(i - j) <= 1) {\n                java.lang.String itemID = \"I\" + j;\n                model.addKnownItems(userID, java.util.Collections.singleton(itemID));\n            }\n        }\n    }\n}",
                "ClassName": "ALSServingModelTest",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 2,
                "MethodName": "populateKnownItems",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 11,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkNotNull(vector);\n    com.google.common.base.Preconditions.checkArgument(vector.length == features);\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(xLock.writeLock())) {\n        if (X.put(user, vector) == null) {\n            recentNewUsers.add(user);\n        }\n    }\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "setUserVector",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 4
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkNotNull(vector);\n    com.google.common.base.Preconditions.checkArgument(vector.length == features);\n    int partition = com.cloudera.oryx.app.serving.als.model.ALSServingModel.partition(item);\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(yLocks[partition].writeLock())) {\n        if (Y[partition].put(item, vector) == null) {\n            recentNewItems[partition].add(item);\n        }\n    }\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "setItemVector",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 10,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 6
            },
            {
                "Body": "{\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(xLock.writeLock())) {\n        knownItems.removeIf(new com.cloudera.oryx.common.collection.KeyOnlyBiPredicate(new com.cloudera.oryx.common.collection.AndPredicate(new com.cloudera.oryx.common.collection.NotContainsPredicate(users), new com.cloudera.oryx.common.collection.NotContainsPredicate(recentNewUsers))));\n    }\n    final java.util.Collection<java.lang.String> allRecentKnownItems = new java.util.HashSet<>();\n    for (int partition = 0; partition < Y.length; partition++) {\n        try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(yLocks[partition].writeLock())) {\n            allRecentKnownItems.addAll(recentNewItems[partition]);\n        }\n    }\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(xLock.readLock())) {\n        for (net.openhft.koloboke.collect.set.ObjSet<java.lang.String> knownItemsForUser : knownItems.values()) {\n            synchronized(knownItemsForUser) {\n                knownItemsForUser.removeIf(new net.openhft.koloboke.function.Predicate<java.lang.String>() {\n                    @java.lang.Override\n                    public boolean test(java.lang.String value) {\n                        return (!items.contains(value)) && (!allRecentKnownItems.contains(value));\n                    }\n                });\n            }\n        }\n    }\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "pruneKnownItems",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 23,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 14
            },
            {
                "Body": "{\n    return doGetKnownItems(user);\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getKnownItems",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(xLock.writeLock())) {\n        X.removeIf(new com.cloudera.oryx.common.collection.KeyOnlyBiPredicate(new com.cloudera.oryx.common.collection.AndPredicate(new com.cloudera.oryx.common.collection.NotContainsPredicate(users), new com.cloudera.oryx.common.collection.NotContainsPredicate(recentNewUsers))));\n        recentNewUsers.clear();\n    }\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "pruneX",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 4
            },
            {
                "Body": "{\n    for (int partition = 0; partition < Y.length; partition++) {\n        try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(yLocks[partition].writeLock())) {\n            Y[partition].removeIf(new com.cloudera.oryx.common.collection.KeyOnlyBiPredicate(new com.cloudera.oryx.common.collection.AndPredicate(new com.cloudera.oryx.common.collection.NotContainsPredicate(items), new com.cloudera.oryx.common.collection.NotContainsPredicate(recentNewItems[partition]))));\n            recentNewItems[partition].clear();\n        }\n    }\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "pruneY",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 6
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 11,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 92,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 52
    },
    {
        "Body": "{\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.getDefault();\n    org.junit.Assert.assertEquals(\"yarn-client\", config.getString(\"oryx.batch.streaming.master\"));\n}",
        "ClassName": "ConfigUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDefaultConfig",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.decision.NumericDecision decision = new com.cloudera.oryx.app.rdf.decision.NumericDecision(0, -1.5, false);\n    org.junit.Assert.assertEquals(0, decision.getFeatureNumber());\n    com.cloudera.oryx.common.OryxTest.assertEquals(-1.5, decision.getThreshold());\n    org.junit.Assert.assertFalse(decision.getDefaultDecision());\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.example.FeatureType.NUMERIC, decision.getType());\n}",
        "ClassName": "NumericDecisionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDecisionBasics",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(featureNumber);\n    this.threshold = threshold;\n    this.defaultDecision = defaultDecision;\n}",
                "ClassName": "NumericDecision",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return featureNumber;\n}",
                "ClassName": "Decision",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFeatureNumber",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return threshold;\n}",
                "ClassName": "NumericDecision",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getThreshold",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return defaultDecision;\n}",
                "ClassName": "NumericDecision",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getDefaultDecision",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.rdf.example.FeatureType.NUMERIC;\n}",
                "ClassName": "NumericDecision",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getType",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 20,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.kmeans.ClusterInfo info = new com.cloudera.oryx.app.kmeans.ClusterInfo(0, new double[]{ -1.0, 2.0 }, 2);\n    org.junit.Assert.assertEquals(0, info.getID());\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(new double[]{ -1.0, 2.0 }, info.getCenter());\n    org.junit.Assert.assertEquals(2, info.getCount());\n    org.junit.Assert.assertEquals(\"0 [-1.0, 2.0] 2\", info.toString());\n    info.update(new double[]{ -1.0, -1.0 }, 1);\n    org.junit.Assert.assertEquals(0, info.getID());\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(new double[]{ -1.0, 1.0 }, info.getCenter());\n    org.junit.Assert.assertEquals(3, info.getCount());\n    org.junit.Assert.assertEquals(\"0 [-1.0, 1.0] 3\", info.toString());\n    info.update(new double[]{ 0.0, 0.0 }, 3);\n    org.junit.Assert.assertEquals(0, info.getID());\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(new double[]{ -0.5, 0.5 }, info.getCenter());\n    org.junit.Assert.assertEquals(6, info.getCount());\n    org.junit.Assert.assertEquals(\"0 [-0.5, 0.5] 6\", info.toString());\n}",
        "ClassName": "ClusterInfoTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testUpdate",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 9,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 17,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(center.length > 0);\n    com.google.common.base.Preconditions.checkArgument(initialCount >= 1);\n    this.id = id;\n    this.center = center;\n    this.count = initialCount;\n}",
                "ClassName": "ClusterInfo",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return id;\n}",
                "ClassName": "ClusterInfo",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertArrayEquals(expecteds, actuals, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertArrayEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return center;\n}",
                "ClassName": "ClusterInfo",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getCenter",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return count;\n}",
                "ClassName": "ClusterInfo",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getCount",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return (((id + \" \") + java.util.Arrays.toString(center)) + \" \") + count;\n}",
                "ClassName": "ClusterInfo",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "toString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int length = center.length;\n    com.google.common.base.Preconditions.checkArgument(length == newPoint.length);\n    double[] newCenter = new double[length];\n    long newTotalCount = newCount + count;\n    double newToTotal = ((double) (newCount)) / newTotalCount;\n    for (int i = 0; i < length; i++) {\n        double centerI = center[i];\n        newCenter[i] = centerI + (newToTotal * (newPoint[i] - centerI));\n    }\n    center = newCenter;\n    count = newTotalCount;\n}",
                "ClassName": "ClusterInfo",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "update",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 13,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 35,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    javax.ws.rs.core.Response response = target(\"/ready\").request().get();\n    org.junit.Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n}",
        "ClassName": "ReadyTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testGet",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.input-schema.feature-names\", \"[\\\"foo\\\",\\\"bar\\\",\\\"baz\\\",\\\"bing\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.ignored-features\", \"[\\\"foo\\\",\\\"baz\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[]\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    com.cloudera.oryx.app.schema.InputSchema schema = new com.cloudera.oryx.app.schema.InputSchema(config);\n    org.junit.Assert.assertEquals(0, schema.featureToPredictorIndex(1));\n    org.junit.Assert.assertEquals(1, schema.featureToPredictorIndex(3));\n    org.junit.Assert.assertEquals(1, schema.predictorToFeatureIndex(0));\n    org.junit.Assert.assertEquals(3, schema.predictorToFeatureIndex(1));\n    try {\n        schema.featureToPredictorIndex(2);\n        org.junit.Assert.fail();\n    } catch (java.lang.IllegalArgumentException iae) {\n    }\n    try {\n        schema.predictorToFeatureIndex(2);\n        org.junit.Assert.fail();\n    } catch (java.lang.IllegalArgumentException iae) {\n    }\n}",
        "ClassName": "InputSchemaTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 14,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testActiveFeatureIndexMapping",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 6,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 22,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<java.lang.String> givenFeatureNames = config.getStringList(\"oryx.input-schema.feature-names\");\n    if (givenFeatureNames.isEmpty()) {\n        int numFeatures = config.getInt(\"oryx.input-schema.num-features\");\n        com.google.common.base.Preconditions.checkArgument(numFeatures > 0, \"Neither feature-names nor num-features is set\");\n        java.util.List<java.lang.String> generatedFeatureNames = new java.util.ArrayList<>(numFeatures);\n        for (int i = 0; i < numFeatures; i++) {\n            generatedFeatureNames.add(java.lang.Integer.toString(i));\n        }\n        featureNames = generatedFeatureNames;\n    } else {\n        featureNames = com.google.common.collect.ImmutableList.copyOf(givenFeatureNames);\n    }\n    int numFeatures = featureNames.size();\n    com.google.common.base.Preconditions.checkArgument(new java.util.HashSet<>(featureNames).size() == numFeatures, \"Feature names must be unique: %s\", featureNames);\n    idFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.id-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(idFeatures));\n    java.util.Collection<java.lang.String> ignoredFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.ignored-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(ignoredFeatures));\n    java.util.Collection<java.lang.String> activeFeatureSet = new java.util.HashSet<>(featureNames);\n    activeFeatureSet.removeAll(idFeatures);\n    activeFeatureSet.removeAll(ignoredFeatures);\n    activeFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    java.util.List<java.lang.String> givenNumericFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.numeric-features\");\n    java.util.List<java.lang.String> givenCategoricalFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.categorical-features\");\n    if (givenNumericFeatures == null) {\n        com.google.common.base.Preconditions.checkNotNull(givenCategoricalFeatures, \"Neither numeric-features nor categorical-features was set\");\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(givenCategoricalFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(categoricalFeatures));\n        activeFeatureSet.removeAll(categoricalFeatures);\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    } else {\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(givenNumericFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(numericFeatures));\n        activeFeatureSet.removeAll(numericFeatures);\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    }\n    targetFeature = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalString(config, \"oryx.input-schema.target-feature\");\n    if (targetFeature != null) {\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.contains(targetFeature), \"Target feature is not known, an ID, or ignored: %s\", targetFeature);\n    }\n    targetFeatureIndex = (targetFeature == null) ? -1 : featureNames.indexOf(targetFeature);\n    allToPredictorMap = com.google.common.collect.HashBiMap.create();\n    for (int featureIndex = 0, predictorIndex = 0; featureIndex < featureNames.size(); featureIndex++) {\n        if (isActive(featureIndex) && (!isTarget(featureIndex))) {\n            allToPredictorMap.put(featureIndex, predictorIndex);\n            predictorIndex++;\n        }\n    }\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 50,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.Integer predictorIndex = allToPredictorMap.get(featureIndex);\n    com.google.common.base.Preconditions.checkArgument(predictorIndex != null, \"No predictor for feature %s\", featureIndex);\n    return predictorIndex;\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "featureToPredictorIndex",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.Integer featureIndex = allToPredictorMap.inverse().get(predictorIndex);\n    com.google.common.base.Preconditions.checkArgument(featureIndex != null, \"No feature for predictor %s\", predictorIndex);\n    return featureIndex;\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "predictorToFeatureIndex",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 7,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 72,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<java.lang.Double> items = target(\"/similarityToItem/I1/I10\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.lambda.serving.AbstractServingTest.LIST_DOUBLE_TYPE);\n    org.junit.Assert.assertEquals(1, items.size());\n    org.junit.Assert.assertEquals(0.0, items.get(0), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "SimilarityToItemTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testZeroSimilarityToItem",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.common.math.DoubleWeightedMean mean = new com.cloudera.oryx.common.math.DoubleWeightedMean();\n    org.junit.Assert.assertEquals(0, mean.getN());\n    org.junit.Assert.assertTrue(java.lang.Double.isNaN(mean.getResult()));\n}",
        "ClassName": "DoubleWeightedMeanTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNone",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this(0, 0.0, java.lang.Double.NaN);\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return count;\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getN",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return mean;\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getResult",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 9,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    java.nio.file.Path dataDir = tempDir.resolve(\"data\");\n    java.nio.file.Path modelDir = tempDir.resolve(\"model\");\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.batch.update-class\", com.cloudera.oryx.app.mllib.als.ALSUpdate.class.getName());\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.data-dir\", dataDir);\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.model-dir\", modelDir);\n    overlayConfig.put(\"oryx.batch.streaming.generation-interval-sec\", com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.GEN_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.batch.streaming.block-interval-sec\", com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.BLOCK_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.als.implicit\", false);\n    overlayConfig.put(\"oryx.als.hyperparams.lambda\", com.cloudera.oryx.app.mllib.als.ALSUpdateIT.LAMBDA);\n    overlayConfig.put(\"oryx.als.hyperparams.features\", com.cloudera.oryx.app.mllib.als.ALSUpdateIT.FEATURES);\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> updates = startServerProduceConsumeTopics(config, new com.cloudera.oryx.app.mllib.als.RandomALSDataGenerator(com.cloudera.oryx.app.mllib.als.ALSUpdateIT.NUM_USERS_ITEMS, com.cloudera.oryx.app.mllib.als.ALSUpdateIT.NUM_USERS_ITEMS, 1, 5), com.cloudera.oryx.app.mllib.als.ALSUpdateIT.DATA_TO_WRITE, com.cloudera.oryx.app.mllib.als.ALSUpdateIT.WRITE_INTERVAL_MSEC);\n    java.util.List<java.nio.file.Path> modelInstanceDirs = com.cloudera.oryx.common.io.IOUtils.listFiles(modelDir, \"*\");\n    int generations = modelInstanceDirs.size();\n    com.cloudera.oryx.lambda.AbstractBatchIT.checkIntervals(generations, com.cloudera.oryx.app.mllib.als.ALSUpdateIT.DATA_TO_WRITE, com.cloudera.oryx.app.mllib.als.ALSUpdateIT.WRITE_INTERVAL_MSEC, com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.GEN_INTERVAL_SEC);\n    java.util.List<java.util.Collection<java.lang.String>> userIDs = new java.util.ArrayList<>();\n    userIDs.add(java.util.Collections.<java.lang.String>emptySet());\n    java.util.List<java.util.Collection<java.lang.String>> productIDs = new java.util.ArrayList<>();\n    productIDs.add(java.util.Collections.<java.lang.String>emptySet());\n    for (java.nio.file.Path modelInstanceDir : modelInstanceDirs) {\n        java.nio.file.Path modelFile = modelInstanceDir.resolve(com.cloudera.oryx.ml.MLUpdate.MODEL_FILE_NAME);\n        org.junit.Assert.assertTrue(\"Model file should exist: \" + modelFile, java.nio.file.Files.exists(modelFile));\n        org.junit.Assert.assertTrue(\"Model file should not be empty: \" + modelFile, java.nio.file.Files.size(modelFile) > 0);\n        com.cloudera.oryx.common.pmml.PMMLUtils.read(modelFile);\n        java.nio.file.Path xDir = modelInstanceDir.resolve(\"X\");\n        org.junit.Assert.assertTrue(java.nio.file.Files.exists(xDir));\n        userIDs.add(com.cloudera.oryx.app.mllib.als.ALSUpdateIT.checkFeatures(xDir, userIDs.get(userIDs.size() - 1)));\n        java.nio.file.Path yDir = modelInstanceDir.resolve(\"Y\");\n        org.junit.Assert.assertTrue(java.nio.file.Files.exists(yDir));\n        productIDs.add(com.cloudera.oryx.app.mllib.als.ALSUpdateIT.checkFeatures(yDir, productIDs.get(productIDs.size() - 1)));\n    }\n    userIDs.remove(0);\n    productIDs.remove(0);\n    java.util.Collection<java.lang.String> expectedUsers = null;\n    java.util.Collection<java.lang.String> expectedProducts = null;\n    java.util.Collection<java.lang.String> seenUsers = null;\n    java.util.Collection<java.lang.String> seenProducts = null;\n    java.util.Collection<java.lang.String> lastModelUsers = null;\n    java.util.Collection<java.lang.String> lastModelProducts = null;\n    int whichGeneration = -1;\n    for (com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> km : updates) {\n        java.lang.String type = km.getFirst();\n        java.lang.String value = km.getSecond();\n        com.cloudera.oryx.app.mllib.als.ALSUpdateIT.log.debug(\"{} = {}\", type, value);\n        boolean isModel = \"MODEL\".equals(type);\n        boolean isUpdate = \"UP\".equals(type);\n        org.junit.Assert.assertTrue(isModel || isUpdate);\n        if (isUpdate) {\n            org.junit.Assert.assertNotNull(seenUsers);\n            org.junit.Assert.assertNotNull(seenProducts);\n            java.util.List<?> update = com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.readValue(value, java.util.List.class);\n            java.lang.String whichMatrixField = update.get(0).toString();\n            boolean isUser = \"X\".equals(whichMatrixField);\n            boolean isProduct = \"Y\".equals(whichMatrixField);\n            java.lang.String id = update.get(1).toString();\n            org.junit.Assert.assertTrue(isUser || isProduct);\n            if (isUser) {\n                seenUsers.add(id);\n            } else {\n                seenProducts.add(id);\n            }\n            for (float f : com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.convertValue(update.get(2), float[].class)) {\n                org.junit.Assert.assertTrue((!java.lang.Float.isNaN(f)) && (!java.lang.Float.isInfinite(f)));\n            }\n            if (isUser) {\n                @java.lang.SuppressWarnings(\"unchecked\")\n                java.util.Collection<java.lang.String> knownUsersItems = ((java.util.Collection<java.lang.String>) (update.get(3)));\n                org.junit.Assert.assertFalse(knownUsersItems.isEmpty());\n                for (java.lang.String known : knownUsersItems) {\n                    int i = com.cloudera.oryx.app.als.ALSUtilsTest.stringIDtoID(known);\n                    org.junit.Assert.assertTrue((i >= 0) && (i < com.cloudera.oryx.app.mllib.als.ALSUpdateIT.NUM_USERS_ITEMS));\n                }\n            }\n        } else {\n            org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.fromString(value);\n            com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.checkHeader(pmml.getHeader());\n            org.junit.Assert.assertEquals(7, pmml.getExtensions().size());\n            java.util.Map<java.lang.String, java.lang.Object> expected = new java.util.HashMap<>();\n            expected.put(\"features\", com.cloudera.oryx.app.mllib.als.ALSUpdateIT.FEATURES);\n            expected.put(\"lambda\", com.cloudera.oryx.app.mllib.als.ALSUpdateIT.LAMBDA);\n            expected.put(\"implicit\", false);\n            com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.checkExtensions(pmml, expected);\n            com.cloudera.oryx.common.OryxTest.assertContainsSame(expectedUsers, seenUsers);\n            com.cloudera.oryx.common.OryxTest.assertContainsSame(expectedProducts, seenProducts);\n            com.cloudera.oryx.common.OryxTest.assertContainsSame(expectedUsers, lastModelUsers);\n            com.cloudera.oryx.common.OryxTest.assertContainsSame(expectedProducts, lastModelProducts);\n            whichGeneration++;\n            expectedUsers = userIDs.get(whichGeneration);\n            expectedProducts = productIDs.get(whichGeneration);\n            seenUsers = new java.util.HashSet<>();\n            seenProducts = new java.util.HashSet<>();\n            lastModelUsers = com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionContent(pmml, \"XIDs\");\n            lastModelProducts = com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionContent(pmml, \"YIDs\");\n        }\n    }\n}",
        "ClassName": "ALSUpdateIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 7,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 9,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testALS",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 12,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 100,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this.numUsers = numUsers;\n    this.numProducts = numProducts;\n    this.minRating = minRating;\n    this.maxRating = maxRating;\n}",
                "ClassName": "RandomALSDataGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (tempDir == null) {\n        tempDir = java.nio.file.Files.createTempDirectory(\"OryxTest\").toAbsolutePath();\n        com.cloudera.oryx.common.OryxTest.log.info(\"Test temp dir is {}\", tempDir);\n        tempDir.toFile().deleteOnExit();\n    }\n    return tempDir;\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getTempDir",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 2,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.nio.file.Path finalPath = (java.nio.file.Files.exists(path, java.nio.file.LinkOption.NOFOLLOW_LINKS)) ? path.toRealPath(java.nio.file.LinkOption.NOFOLLOW_LINKS) : path;\n    overlay.put(key, (\"\\\"\" + finalPath.toUri()) + \"\\\"\");\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "set",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    java.lang.String topicBroker = (\"\\\"localhost:\" + localKafkaBrokerPort) + '\"';\n    java.lang.String topicLockMaster = (\"\\\"localhost:\" + localZKPort) + '\"';\n    overlay.put(\"oryx.input-topic.broker\", topicBroker);\n    overlay.put(\"oryx.input-topic.lock.master\", topicLockMaster);\n    overlay.put(\"oryx.update-topic.broker\", topicBroker);\n    overlay.put(\"oryx.update-topic.lock.master\", topicLockMaster);\n    java.lang.String masterLocalAllCores = \"\\\"local[*]\\\"\";\n    overlay.put(\"oryx.batch.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.speed.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.batch.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.speed.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int zkPort = getZKPort();\n    com.cloudera.oryx.kafka.util.ProduceData produce = new com.cloudera.oryx.kafka.util.ProduceData(datumGenerator, zkPort, getKafkaBrokerPort(), com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC, howMany, intervalMsec);\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> keyMessages;\n    try (com.cloudera.oryx.common.collection.CloseableIterator<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = new com.cloudera.oryx.kafka.util.ConsumeData(com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, zkPort).iterator();com.cloudera.oryx.lambda.BatchLayer<?, ?, ?> batchLayer = new com.cloudera.oryx.lambda.BatchLayer(config)) {\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Starting batch layer\");\n        batchLayer.start();\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Starting consumer thread\");\n        com.cloudera.oryx.kafka.util.ConsumeTopicRunnable consumeInput = new com.cloudera.oryx.kafka.util.ConsumeTopicRunnable(data);\n        new java.lang.Thread(consumeInput).start();\n        java.lang.Thread.sleep(3000);\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Producing data\");\n        produce.start();\n        long genIntervalSec = config.getInt(\"oryx.batch.streaming.generation-interval-sec\");\n        java.lang.Thread.sleep(genIntervalSec * 1000);\n        keyMessages = consumeInput.getKeyMessages();\n    } finally {\n        produce.deleteTopic();\n    }\n    return keyMessages;\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServerProduceConsumeTopics",
                "NumberOfAsynchronousWaits": 2,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 21,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 7
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(java.nio.file.Files.isDirectory(dir), \"%s is not a directory\", dir);\n    java.util.List<java.lang.String> globLevels;\n    if ((glob == null) || glob.isEmpty()) {\n        globLevels = java.util.Collections.singletonList(\"*\");\n    } else {\n        globLevels = java.util.Arrays.asList(glob.split(\"/\"));\n    }\n    com.google.common.base.Preconditions.checkState(!globLevels.isEmpty());\n    java.util.List<java.nio.file.Path> paths = new java.util.ArrayList<>();\n    paths.add(dir);\n    for (java.lang.String globLevel : globLevels) {\n        java.util.List<java.nio.file.Path> newPaths = new java.util.ArrayList<>();\n        for (java.nio.file.Path existingPath : paths) {\n            if (java.nio.file.Files.isDirectory(existingPath)) {\n                try (java.nio.file.DirectoryStream<java.nio.file.Path> stream = java.nio.file.Files.newDirectoryStream(existingPath, globLevel)) {\n                    for (java.nio.file.Path path : stream) {\n                        if (!path.getFileName().toString().startsWith(\".\")) {\n                            newPaths.add(path);\n                        }\n                    }\n                }\n            }\n        }\n        paths = newPaths;\n    }\n    java.util.Collections.sort(paths);\n    return paths;\n}",
                "ClassName": "IOUtils",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "listFiles",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 29,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int minExpectedIntervals = (dataToWrite * writeIntervalMsec) / (1000 * genIntervalSec);\n    org.junit.Assert.assertTrue(((\"Expected \" + minExpectedIntervals) + \" intervals (or up to +4 more) but got \") + numIntervals, (numIntervals >= minExpectedIntervals) && (numIntervals <= (minExpectedIntervals + 4)));\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkIntervals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (java.io.InputStream in = com.cloudera.oryx.common.io.IOUtils.readMaybeCompressed(path)) {\n        return com.cloudera.oryx.common.pmml.PMMLUtils.read(in);\n    }\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "read",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Collection<java.lang.String> seenIDs = new java.util.HashSet<>();\n    for (java.nio.file.Path file : com.cloudera.oryx.common.io.IOUtils.listFiles(path, \"part-*\")) {\n        for (java.lang.String line : com.cloudera.oryx.common.io.IOUtils.readLines(file)) {\n            java.util.List<?> update = com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.readValue(line, java.util.List.class);\n            seenIDs.add(update.get(0).toString());\n            org.junit.Assert.assertEquals(com.cloudera.oryx.app.mllib.als.ALSUpdateIT.FEATURES, com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.convertValue(update.get(1), float[].class).length);\n        }\n    }\n    org.junit.Assert.assertFalse(seenIDs.isEmpty());\n    org.junit.Assert.assertTrue(seenIDs.containsAll(previousIDs));\n    return seenIDs;\n}",
                "ClassName": "ALSUpdateIT",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 6,
                "MethodName": "checkFeatures",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 13,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return first;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return java.lang.Integer.parseInt(stringID.substring(1));\n}",
                "ClassName": "ALSUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "stringIDtoID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return org.jpmml.model.JAXBUtil.unmarshalPMML(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(pmmlString)));\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "fromString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    for (java.util.Map.Entry<java.lang.String, ?> e : expected.entrySet()) {\n        java.lang.String key = e.getKey();\n        org.junit.Assert.assertEquals((\"Value for key \" + key) + \" did not match\", e.getValue().toString(), com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionValue(pmml, key));\n    }\n}",
                "ClassName": "AbstractAppMLlibIT",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 4,
                "MethodName": "checkExtensions",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (expected == null) {\n        org.junit.Assert.assertNull(actual);\n    } else {\n        org.junit.Assert.assertNotNull(actual);\n        org.junit.Assert.assertEquals(expected.size(), actual.size());\n        org.junit.Assert.assertTrue(expected.containsAll(actual) && actual.containsAll(expected));\n    }\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "assertContainsSame",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    for (org.dmg.pmml.Extension extension : pmml.getExtensions()) {\n        if (name.equals(extension.getName())) {\n            java.util.List<?> content = extension.getContent();\n            com.google.common.base.Preconditions.checkArgument(content.size() <= 1);\n            if (content.isEmpty()) {\n                return java.util.Collections.emptyList();\n            }\n            return java.util.Arrays.asList(com.cloudera.oryx.common.text.TextUtils.parsePMMLDelimited(content.get(0).toString()));\n        }\n    }\n    return null;\n}",
                "ClassName": "AppPMMLUtils",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "getExtensionContent",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 13,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 15,
        "TotalNumberOfAsynchronousWaits": 2,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 2,
        "TotalNumberOfLines": 166,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 7
    },
    {
        "Body": "{\n    target(\"/because\").request().get(java.lang.String.class);\n}",
        "ClassName": "BecauseTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNoArg",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.Object, java.lang.Object> map = new java.util.HashMap<>();\n    map.put(1, \"bar\");\n    map.put(\"foo\", 2);\n    org.junit.Assert.assertEquals(\"[\\\"A\\\",{\\\"1\\\":\\\"bar\\\",\\\"foo\\\":2},\\\"B\\\"]\", com.cloudera.oryx.common.text.TextUtils.joinJSON(java.util.Arrays.asList(\"A\", map, \"B\")));\n}",
        "ClassName": "TextUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testJSONMap",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 7,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    try {\n        return com.cloudera.oryx.common.text.TextUtils.MAPPER.writeValueAsString(elements);\n    } catch (com.fasterxml.jackson.core.JsonProcessingException e) {\n        throw new java.lang.IllegalArgumentException(e);\n    }\n}",
                "ClassName": "TextUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "joinJSON",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 7,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    doTestBatchLayer(2, 1);\n}",
        "ClassName": "BatchLayerIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 31,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBatchLayer",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 31,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    java.nio.file.Path dataDir = tempDir.resolve(\"data\");\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.batch.update-class\", com.cloudera.oryx.lambda.MockBatchUpdate.class.getName());\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.data-dir\", dataDir);\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.model-dir\", tempDir.resolve(\"model\"));\n    overlayConfig.put(\"oryx.batch.streaming.generation-interval-sec\", com.cloudera.oryx.lambda.BatchLayerIT.GEN_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.batch.streaming.block-interval-sec\", com.cloudera.oryx.lambda.BatchLayerIT.BLOCK_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.batch.storage.partitions\", partitions);\n    overlayConfig.put(\"oryx.batch.streaming.receiver-parallelism\", receivers);\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    java.util.List<com.cloudera.oryx.lambda.IntervalData<java.lang.String, java.lang.String>> intervalData = com.cloudera.oryx.lambda.MockBatchUpdate.getIntervalDataHolder();\n    intervalData.clear();\n    startMessaging();\n    startServerProduceConsumeTopics(config, com.cloudera.oryx.lambda.BatchLayerIT.DATA_TO_WRITE, com.cloudera.oryx.lambda.BatchLayerIT.WRITE_INTERVAL_MSEC);\n    int numIntervals = intervalData.size();\n    com.cloudera.oryx.lambda.BatchLayerIT.log.info(\"{} intervals: {}\", numIntervals, intervalData);\n    com.cloudera.oryx.lambda.AbstractBatchIT.checkOutputData(dataDir, com.cloudera.oryx.lambda.BatchLayerIT.DATA_TO_WRITE);\n    com.cloudera.oryx.lambda.AbstractBatchIT.checkIntervals(numIntervals, com.cloudera.oryx.lambda.BatchLayerIT.DATA_TO_WRITE, com.cloudera.oryx.lambda.BatchLayerIT.WRITE_INTERVAL_MSEC, com.cloudera.oryx.lambda.BatchLayerIT.GEN_INTERVAL_SEC);\n    com.cloudera.oryx.lambda.IntervalData<java.lang.String, java.lang.String> last = intervalData.get(0);\n    com.cloudera.oryx.lambda.BatchLayerIT.log.info(\"Interval 0: {}\", last);\n    for (int i = 1; i < numIntervals; i++) {\n        com.cloudera.oryx.lambda.IntervalData<java.lang.String, java.lang.String> current = intervalData.get(i);\n        com.cloudera.oryx.lambda.BatchLayerIT.log.info(\"Interval {}: {}\", i, current);\n        org.junit.Assert.assertTrue(current.getTimestamp() > last.getTimestamp());\n        org.junit.Assert.assertTrue(current.getPastData().size() >= last.getPastData().size());\n        org.junit.Assert.assertEquals(last.getPastData().size() + last.getCurrentData().size(), current.getPastData().size());\n        last = current;\n    }\n}",
                "ClassName": "BatchLayerIT",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 4,
                "MethodName": "doTestBatchLayer",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 31,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 31,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    target(\"/mostSurprising\").request().get(java.lang.String.class);\n}",
        "ClassName": "MostSurprisingTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNoArg",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String response = target(\"/mostPopularItems\").request().get(java.lang.String.class);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testCSVTopByCount(9, response);\n}",
        "ClassName": "MostPopularItemsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testMostPopularCSV",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testCSVTop(expectedSize, response, true, false);\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testCSVTopByCount",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    long startNS = java.lang.System.nanoTime();\n    int requests = 10000;\n    for (int i = 0; i < requests; i++) {\n        try {\n            target(\"/\").request().get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n        } catch (javax.ws.rs.NotFoundException nfe) {\n        }\n    }\n    long usecPerRequest = java.lang.Math.round((java.lang.System.nanoTime() - startNS) / (requests * 1000.0));\n    com.cloudera.oryx.app.serving.als.LoadIT.log.info(\"{} microseconds / request\", usecPerRequest);\n    org.junit.Assert.assertTrue(usecPerRequest < 3000);\n}",
        "ClassName": "LoadIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 1,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testContainerOverhead",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 13,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.apache.commons.math3.linear.RealMatrix a = new org.apache.commons.math3.linear.Array2DRowRealMatrix(new double[][]{ new double[]{ 1.3, -2.0, 3.0 }, new double[]{ 2.0, 0.0, 5.0 }, new double[]{ 0.0, -1.5, 5.5 } });\n    com.cloudera.oryx.common.math.Solver solver = new com.cloudera.oryx.common.math.LinearSystemSolver().getSolver(a);\n    org.junit.Assert.assertNotNull(solver);\n    double[] y = solver.solveFToD(new float[]{ 1.0F, 2.0F, 6.5F });\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(new double[]{ -1.9560439560439564, 0.002197802197802894, 1.1824175824175824 }, y);\n}",
        "ClassName": "LinearSystemSolverTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testSolveFToD",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "LinearSystemSolver",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (M == null) {\n        return null;\n    }\n    org.apache.commons.math3.linear.RRQRDecomposition decomposition = new org.apache.commons.math3.linear.RRQRDecomposition(M, com.cloudera.oryx.common.math.LinearSystemSolver.SINGULARITY_THRESHOLD);\n    org.apache.commons.math3.linear.DecompositionSolver solver = decomposition.getSolver();\n    if (solver.isNonSingular()) {\n        return new com.cloudera.oryx.common.math.Solver(solver);\n    }\n    int apparentRank = decomposition.getRank(0.01);\n    com.cloudera.oryx.common.math.LinearSystemSolver.log.warn(\"{} x {} matrix is near-singular (threshold {}). Add more data or decrease the \" + \"value of als.hyperparams.features, to <= about {}\", M.getRowDimension(), M.getColumnDimension(), com.cloudera.oryx.common.math.LinearSystemSolver.SINGULARITY_THRESHOLD, apparentRank);\n    throw new com.cloudera.oryx.common.math.SingularMatrixSolverException(apparentRank, \"Apparent rank: \" + apparentRank);\n}",
                "ClassName": "LinearSystemSolver",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "getSolver",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 13,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return solver.solve(new org.apache.commons.math3.linear.ArrayRealVector(com.cloudera.oryx.common.math.VectorMath.toDoubles(b), false)).toArray();\n}",
                "ClassName": "Solver",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "solveFToD",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertArrayEquals(expecteds, actuals, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertArrayEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 2,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 21,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String response = target(\"estimate/U0/I0/I1/I2\").request().get(java.lang.String.class);\n    testCSVScores(3, response);\n}",
        "ClassName": "EstimateTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 9,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testEstimateCSV",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 9,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.lang.String[] rows = response.split(\"\\n\");\n    org.junit.Assert.assertEquals(expectedSize, rows.length);\n    for (java.lang.String row : rows) {\n        double score = java.lang.Double.parseDouble(row);\n        org.junit.Assert.assertFalse(java.lang.Double.isNaN(score));\n        org.junit.Assert.assertFalse(java.lang.Double.isInfinite(score));\n    }\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 2,
                "MethodName": "testCSVScores",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 9,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertTrue(com.cloudera.oryx.common.lang.JVMUtils.getUsedMemory() >= (1L << 20));\n}",
        "ClassName": "JVMUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testUsedMemory",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.lang.Runtime runtime = java.lang.Runtime.getRuntime();\n    return runtime.totalMemory() - runtime.freeMemory();\n}",
                "ClassName": "JVMUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getUsedMemory",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String response = target(\"/user/allIDs\").request().get(java.lang.String.class);\n    org.junit.Assert.assertEquals(7, response.split(\"\\n\").length);\n}",
        "ClassName": "AllUserIDsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testAllUserIDsCSV",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    target(\"/estimateForAnonymous/foo\").request().get(java.lang.String.class);\n}",
        "ClassName": "EstimateForAnonymousTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testUnknownUser",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.buildSkeletonPMML();\n    org.junit.Assert.assertEquals(\"Oryx\", pmml.getHeader().getApplication().getName());\n    org.junit.Assert.assertNotNull(pmml.getHeader().getTimestamp());\n}",
        "ClassName": "PMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 3,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testSkeleton",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 3,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 7,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.lang.String formattedDate = new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZZ\", java.util.Locale.ENGLISH).format(new java.util.Date());\n    org.dmg.pmml.Header header = new org.dmg.pmml.Header();\n    header.setTimestamp(new org.dmg.pmml.Timestamp().withContent(formattedDate));\n    header.setApplication(new org.dmg.pmml.Application(\"Oryx\"));\n    return new org.dmg.pmml.PMML(\"4.2.1\", header, null);\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "buildSkeletonPMML",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 3,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 3,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 7,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.decision.Decision decision = new com.cloudera.oryx.app.rdf.decision.NumericDecision(0, -1.5, false);\n    com.cloudera.oryx.app.rdf.tree.TreeNode left = new com.cloudera.oryx.app.rdf.tree.TerminalNode(\"2\", null);\n    com.cloudera.oryx.app.rdf.tree.TreeNode right = new com.cloudera.oryx.app.rdf.tree.TerminalNode(\"3\", null);\n    com.cloudera.oryx.app.rdf.tree.DecisionNode node = new com.cloudera.oryx.app.rdf.tree.DecisionNode(\"1\", decision, left, right);\n    org.junit.Assert.assertFalse(node.isTerminal());\n    org.junit.Assert.assertSame(decision, node.getDecision());\n    org.junit.Assert.assertSame(left, node.getLeft());\n    org.junit.Assert.assertSame(right, node.getRight());\n}",
        "ClassName": "DecisionNodeTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNode",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 10,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(featureNumber);\n    this.threshold = threshold;\n    this.defaultDecision = defaultDecision;\n}",
                "ClassName": "NumericDecision",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    super(id);\n    this.prediction = prediction;\n}",
                "ClassName": "TerminalNode",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    super(id);\n    this.decision = decision;\n    this.left = left;\n    this.right = right;\n}",
                "ClassName": "DecisionNode",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return false;\n}",
                "ClassName": "DecisionNode",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "isTerminal",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return decision;\n}",
                "ClassName": "DecisionNode",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getDecision",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return left;\n}",
                "ClassName": "DecisionNode",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getLeft",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return right;\n}",
                "ClassName": "DecisionNode",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getRight",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 27,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"a\", \"1\", \"foo\" }, com.cloudera.oryx.app.common.fn.MLFunctions.PARSE_FN.call(\"[\\\"a\\\",\\\"1\\\",\\\"foo\\\"]\"));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"a\", \"1\", \"foo\", \"\" }, com.cloudera.oryx.app.common.fn.MLFunctions.PARSE_FN.call(\"[\\\"a\\\",\\\"1\\\",\\\"foo\\\",\\\"\\\"]\"));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"2.3\" }, com.cloudera.oryx.app.common.fn.MLFunctions.PARSE_FN.call(\"[\\\"2.3\\\"]\"));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{  }, com.cloudera.oryx.app.common.fn.MLFunctions.PARSE_FN.call(\"[]\"));\n}",
        "ClassName": "MLFunctionsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testParseJSON",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertArrayEquals(new double[]{ 1.2 }, com.cloudera.oryx.common.math.VectorMath.toDoubles(1.2F), com.cloudera.oryx.common.OryxTest.FLOAT_EPSILON);\n}",
        "ClassName": "VectorMathTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testToDoubles",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 7,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    double[] doubles = new double[floats.length];\n    for (int i = 0; i < doubles.length; i++) {\n        doubles[i] = floats[i];\n    }\n    return doubles;\n}",
                "ClassName": "VectorMath",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "toDoubles",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 7,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.tree.DecisionTree tree = com.cloudera.oryx.app.rdf.tree.DecisionTreeTest.buildTestTree();\n    com.cloudera.oryx.app.rdf.predict.NumericPrediction prediction = ((com.cloudera.oryx.app.rdf.predict.NumericPrediction) (tree.predict(new com.cloudera.oryx.app.rdf.example.Example(null, com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(0.5)))));\n    com.cloudera.oryx.common.OryxTest.assertEquals(1.0, prediction.getPrediction());\n}",
        "ClassName": "DecisionTreeTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 6,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testPredict",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(features != null);\n    this.features = features;\n    this.target = target;\n    com.google.common.hash.Hasher hasher = com.cloudera.oryx.app.rdf.example.Example.HASH.newHasher();\n    for (com.cloudera.oryx.app.rdf.example.Feature feature : features) {\n        if (feature != null) {\n            hasher.putInt(feature.hashCode());\n        }\n    }\n    if (target != null) {\n        hasher.putInt(target.hashCode());\n    }\n    cachedHashCode = hasher.hashCode();\n}",
                "ClassName": "Example",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.app.rdf.tree.TerminalNode rnn = new com.cloudera.oryx.app.rdf.tree.TerminalNode(\"r--\", new com.cloudera.oryx.app.rdf.predict.NumericPrediction(0.0, 1));\n    com.cloudera.oryx.app.rdf.tree.TerminalNode rnp = new com.cloudera.oryx.app.rdf.tree.TerminalNode(\"r-+\", new com.cloudera.oryx.app.rdf.predict.NumericPrediction(1.0, 1));\n    com.cloudera.oryx.app.rdf.tree.DecisionNode rn = new com.cloudera.oryx.app.rdf.tree.DecisionNode(\"r-\", new com.cloudera.oryx.app.rdf.decision.NumericDecision(0, -1.0, false), rnn, rnp);\n    com.cloudera.oryx.app.rdf.tree.TerminalNode rp = new com.cloudera.oryx.app.rdf.tree.TerminalNode(\"r+\", new com.cloudera.oryx.app.rdf.predict.NumericPrediction(2.0, 1));\n    com.cloudera.oryx.app.rdf.tree.DecisionNode root = new com.cloudera.oryx.app.rdf.tree.DecisionNode(\"r\", new com.cloudera.oryx.app.rdf.decision.NumericDecision(0, 1.0, false), rn, rp);\n    return new com.cloudera.oryx.app.rdf.tree.DecisionTree(root);\n}",
                "ClassName": "DecisionTreeTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildTestTree",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.app.rdf.tree.TerminalNode terminalNode = findTerminal(test);\n    return terminalNode.getPrediction();\n}",
                "ClassName": "DecisionTree",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "predict",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value == 0.0F ? com.cloudera.oryx.app.rdf.example.NumericFeature.ZERO : new com.cloudera.oryx.app.rdf.example.NumericFeature(value);\n}",
                "ClassName": "NumericFeature",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "forValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getPrediction",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 36,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.als.RescorerProvider multi = new com.cloudera.oryx.app.als.MultiRescorerProvider(new com.cloudera.oryx.app.als.SimpleModRescorerProvider(2), new com.cloudera.oryx.app.als.SimpleModRescorerProvider(3));\n    com.cloudera.oryx.app.als.Rescorer provider = multi.getRecommendToAnonymousRescorer(java.util.Collections.singletonList(\"ABCDE\"), null);\n    org.junit.Assert.assertNull(provider);\n    com.cloudera.oryx.app.als.Rescorer provider2 = multi.getRecommendToAnonymousRescorer(java.util.Collections.singletonList(\"AB\"), null);\n    org.junit.Assert.assertNotNull(provider2);\n    org.junit.Assert.assertFalse(provider2 instanceof com.cloudera.oryx.app.als.MultiRescorer);\n    org.junit.Assert.assertTrue(provider2.isFiltered(\"ABC\"));\n    org.junit.Assert.assertFalse(provider2.isFiltered(\"AB\"));\n    com.cloudera.oryx.app.als.Rescorer provider3 = multi.getRecommendToAnonymousRescorer(java.util.Collections.singletonList(\"ABCDEF\"), null);\n    org.junit.Assert.assertNotNull(provider3);\n    org.junit.Assert.assertTrue(provider3 instanceof com.cloudera.oryx.app.als.MultiRescorer);\n    org.junit.Assert.assertTrue(provider3.isFiltered(\"ABC\"));\n    org.junit.Assert.assertTrue(provider3.isFiltered(\"AB\"));\n    org.junit.Assert.assertFalse(provider3.isFiltered(\"ABCDEF\"));\n}",
        "ClassName": "MultiRescorerProviderTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testMultiRecommendToAnonymousRescorer",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 10,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 16,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    if (providers.length < 1) {\n        throw new java.lang.IllegalArgumentException(\"providers is empty\");\n    }\n    this.providers = providers;\n}",
                "ClassName": "MultiRescorerProvider",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    this.modulus = modulus;\n}",
                "ClassName": "SimpleModRescorerProvider",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 9,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.app.kmeans.KMeansPMMLUtilsTest.buildDummyClusteringModel();\n    java.util.List<com.cloudera.oryx.app.kmeans.ClusterInfo> clusterInfoList = com.cloudera.oryx.app.kmeans.KMeansPMMLUtils.read(pmml);\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.kmeans.KMeansPMMLUtilsTest.NUM_CLUSTERS, clusterInfoList.size());\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.kmeans.KMeansPMMLUtilsTest.NUM_DIMENSIONS, clusterInfoList.get(0).getCenter().length);\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.kmeans.KMeansPMMLUtilsTest.CLUSTER_SIZE, clusterInfoList.get(1).getCount());\n}",
        "ClassName": "KMeansPMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 12,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testPMMLToClusters",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.buildSkeletonPMML();\n    java.util.List<org.dmg.pmml.DataField> dataFields = new java.util.ArrayList<>();\n    dataFields.add(new org.dmg.pmml.DataField(org.dmg.pmml.FieldName.create(\"x\"), org.dmg.pmml.OpType.CONTINUOUS, org.dmg.pmml.DataType.DOUBLE));\n    dataFields.add(new org.dmg.pmml.DataField(org.dmg.pmml.FieldName.create(\"y\"), org.dmg.pmml.OpType.CONTINUOUS, org.dmg.pmml.DataType.DOUBLE));\n    org.dmg.pmml.DataDictionary dataDictionary = new org.dmg.pmml.DataDictionary(dataFields);\n    dataDictionary.setNumberOfFields(dataFields.size());\n    pmml.setDataDictionary(dataDictionary);\n    java.util.List<org.dmg.pmml.MiningField> miningFields = new java.util.ArrayList<>();\n    org.dmg.pmml.MiningField xMF = new org.dmg.pmml.MiningField(org.dmg.pmml.FieldName.create(\"x\"));\n    xMF.setOpType(OpType.CONTINUOUS);\n    xMF.setUsageType(FieldUsageType.ACTIVE);\n    miningFields.add(xMF);\n    org.dmg.pmml.MiningField yMF = new org.dmg.pmml.MiningField(org.dmg.pmml.FieldName.create(\"y\"));\n    yMF.setOpType(OpType.CONTINUOUS);\n    yMF.setUsageType(FieldUsageType.ACTIVE);\n    miningFields.add(yMF);\n    org.dmg.pmml.MiningSchema miningSchema = new org.dmg.pmml.MiningSchema(miningFields);\n    java.util.List<org.dmg.pmml.ClusteringField> clusteringFields = new java.util.ArrayList<>();\n    clusteringFields.add(new org.dmg.pmml.ClusteringField(org.dmg.pmml.FieldName.create(\"x\")).withCenterField(ClusteringField.CenterField.TRUE));\n    clusteringFields.add(new org.dmg.pmml.ClusteringField(org.dmg.pmml.FieldName.create(\"y\")).withCenterField(ClusteringField.CenterField.TRUE));\n    java.util.List<org.dmg.pmml.Cluster> clusters = new java.util.ArrayList<>();\n    clusters.add(new org.dmg.pmml.Cluster().withId(\"0\").withSize(1).withArray(com.cloudera.oryx.app.pmml.AppPMMLUtils.toArray(1.0, 0.0)));\n    clusters.add(new org.dmg.pmml.Cluster().withId(\"1\").withSize(2).withArray(com.cloudera.oryx.app.pmml.AppPMMLUtils.toArray(2.0, -1.0)));\n    clusters.add(new org.dmg.pmml.Cluster().withId(\"2\").withSize(3).withArray(com.cloudera.oryx.app.pmml.AppPMMLUtils.toArray(-1.0, 0.0)));\n    pmml.getModels().add(new org.dmg.pmml.ClusteringModel(org.dmg.pmml.MiningFunctionType.CLUSTERING, ClusteringModel.ModelClass.CENTER_BASED, clusters.size(), miningSchema, new org.dmg.pmml.ComparisonMeasure(ComparisonMeasure.Kind.DISTANCE).withMeasure(new org.dmg.pmml.SquaredEuclidean()), clusteringFields, clusters));\n    return pmml;\n}",
                "ClassName": "KMeansPMMLUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildDummyClusteringModel",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 28,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.List<org.dmg.pmml.Model> models = pmml.getModels();\n    org.dmg.pmml.Model model = models.get(0);\n    com.google.common.base.Preconditions.checkArgument(model instanceof org.dmg.pmml.ClusteringModel);\n    org.dmg.pmml.ClusteringModel clusteringModel = ((org.dmg.pmml.ClusteringModel) (model));\n    java.util.List<org.dmg.pmml.Cluster> clusters = clusteringModel.getClusters();\n    java.util.List<com.cloudera.oryx.app.kmeans.ClusterInfo> clusterInfoList = new java.util.ArrayList(clusters.size());\n    for (org.dmg.pmml.Cluster cluster : clusters) {\n        java.lang.String[] tokens = com.cloudera.oryx.common.text.TextUtils.parseDelimited(cluster.getArray().getValue(), ' ');\n        com.cloudera.oryx.app.kmeans.ClusterInfo clusterInfo = new com.cloudera.oryx.app.kmeans.ClusterInfo(java.lang.Integer.parseInt(cluster.getId()), com.cloudera.oryx.common.math.VectorMath.parseVector(tokens), cluster.getSize());\n        clusterInfoList.add(clusterInfo);\n    }\n    return clusterInfoList;\n}",
                "ClassName": "KMeansPMMLUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "read",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 14,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return center;\n}",
                "ClassName": "ClusterInfo",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getCenter",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return count;\n}",
                "ClassName": "ClusterInfo",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getCount",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 48,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.als.RescorerProvider multi = new com.cloudera.oryx.app.als.MultiRescorerProvider(new com.cloudera.oryx.app.als.SimpleModRescorerProvider(2), new com.cloudera.oryx.app.als.SimpleModRescorerProvider(3));\n    com.cloudera.oryx.app.als.Rescorer provider = multi.getMostPopularItemsRescorer(null);\n    org.junit.Assert.assertNotNull(provider);\n    org.junit.Assert.assertTrue(provider instanceof com.cloudera.oryx.app.als.MultiRescorer);\n    org.junit.Assert.assertTrue(provider.isFiltered(\"ABC\"));\n    org.junit.Assert.assertTrue(provider.isFiltered(\"AB\"));\n    org.junit.Assert.assertFalse(provider.isFiltered(\"ABCDEF\"));\n}",
        "ClassName": "MultiRescorerProviderTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testMultiMostPopularItemsRescorer",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 5,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 9,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    if (providers.length < 1) {\n        throw new java.lang.IllegalArgumentException(\"providers is empty\");\n    }\n    this.providers = providers;\n}",
                "ClassName": "MultiRescorerProvider",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    this.modulus = modulus;\n}",
                "ClassName": "SimpleModRescorerProvider",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 9,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String prediction = target(\"/predict/A,-5,\").request().get(java.lang.String.class);\n    double expectedValue = (1.0 + (2.0 * 100.0)) / 3.0;\n    org.junit.Assert.assertEquals(expectedValue, java.lang.Double.parseDouble(prediction), com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
        "ClassName": "PredictTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testPredict2",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.serving.application-resources\", \"\\\"com.cloudera.oryx.app.serving,com.cloudera.oryx.app.serving.rdf\\\"\");\n    overlayConfig.put(\"oryx.serving.model-manager-class\", com.cloudera.oryx.app.serving.rdf.model.RDFServingModelManager.class.getName());\n    overlayConfig.put(\"oryx.input-schema.feature-names\", \"[\\\"color\\\",\\\"fruit\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.numeric-features\", \"[]\");\n    overlayConfig.put(\"oryx.input-schema.target-feature\", \"fruit\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    startServer(config);\n    startUpdateTopics(new com.cloudera.oryx.app.speed.rdf.MockRDFClassificationModelGenerator(), 5);\n    java.lang.Thread.sleep(1000);\n    com.cloudera.oryx.app.serving.rdf.model.RDFServingModelManager manager = ((com.cloudera.oryx.app.serving.rdf.model.RDFServingModelManager) (getServingLayer().getContext().getServletContext().getAttribute(com.cloudera.oryx.app.serving.AbstractOryxResource.MODEL_MANAGER_KEY)));\n    org.junit.Assert.assertNotNull(\"Manager must initialize in web context\", manager);\n    com.cloudera.oryx.app.serving.rdf.model.RDFServingModel model = manager.getModel();\n    com.cloudera.oryx.app.serving.rdf.model.RDFServingModelManagerIT.log.debug(\"{}\", model);\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings encodings = model.getEncodings();\n    org.junit.Assert.assertEquals(2, encodings.getValueCount(0));\n    org.junit.Assert.assertEquals(2, encodings.getValueCount(1));\n    java.util.Map<java.lang.Integer, java.lang.String> encodingValuePredictor = encodings.getEncodingValueMap(0);\n    org.junit.Assert.assertEquals(\"yellow\", encodingValuePredictor.get(0));\n    org.junit.Assert.assertEquals(\"red\", encodingValuePredictor.get(1));\n    java.util.Map<java.lang.Integer, java.lang.String> encodingValueTarget = encodings.getEncodingValueMap(1);\n    org.junit.Assert.assertEquals(\"banana\", encodingValueTarget.get(0));\n    org.junit.Assert.assertEquals(\"apple\", encodingValueTarget.get(1));\n    com.cloudera.oryx.app.rdf.tree.DecisionForest forest = model.getForest();\n    com.cloudera.oryx.app.rdf.tree.DecisionTree[] trees = forest.getTrees();\n    org.junit.Assert.assertEquals(1, trees.length);\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(new double[]{ 1.0 }, forest.getWeights());\n    com.cloudera.oryx.app.schema.InputSchema inputSchema = model.getInputSchema();\n    org.junit.Assert.assertEquals(2, inputSchema.getNumFeatures());\n    com.cloudera.oryx.app.rdf.tree.DecisionTree tree = trees[0];\n    com.cloudera.oryx.app.rdf.tree.DecisionNode root = ((com.cloudera.oryx.app.rdf.tree.DecisionNode) (tree.findByID(\"r\")));\n    com.cloudera.oryx.app.rdf.tree.TerminalNode left = ((com.cloudera.oryx.app.rdf.tree.TerminalNode) (tree.findByID(\"r-\")));\n    com.cloudera.oryx.app.rdf.tree.TerminalNode right = ((com.cloudera.oryx.app.rdf.tree.TerminalNode) (tree.findByID(\"r+\")));\n    org.junit.Assert.assertSame(root.getLeft(), left);\n    org.junit.Assert.assertSame(root.getRight(), right);\n    org.junit.Assert.assertEquals(7, left.getCount());\n    org.junit.Assert.assertEquals(7, right.getCount());\n    com.cloudera.oryx.app.rdf.predict.CategoricalPrediction leftPrediction = ((com.cloudera.oryx.app.rdf.predict.CategoricalPrediction) (left.getPrediction()));\n    com.cloudera.oryx.app.rdf.predict.CategoricalPrediction rightPrediction = ((com.cloudera.oryx.app.rdf.predict.CategoricalPrediction) (right.getPrediction()));\n    org.junit.Assert.assertEquals(2, leftPrediction.getCategoryCounts()[0]);\n    org.junit.Assert.assertEquals(5, leftPrediction.getCategoryCounts()[1]);\n    org.junit.Assert.assertEquals(3, rightPrediction.getCategoryCounts()[0]);\n    org.junit.Assert.assertEquals(4, rightPrediction.getCategoryCounts()[1]);\n}",
        "ClassName": "RDFServingModelManagerIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRDFServingModel",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 17,
        "NumberOfAsynchronousWaits": 1,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 46,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 2,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "MockRDFClassificationModelGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    overlay.put(\"oryx.serving.api.port\", httpPort);\n    overlay.put(\"oryx.serving.api.secure-port\", httpsPort);\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, super.getConfig());\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    servingLayer = new com.cloudera.oryx.lambda.serving.ServingLayer(config);\n    com.cloudera.oryx.lambda.serving.AbstractServingIT.log.info(\"Starting serving layer\");\n    servingLayer.start();\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServer",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int zkPort = getZKPort();\n    int kafkaPort = getKafkaBrokerPort();\n    updateProducer = new com.cloudera.oryx.kafka.util.ProduceData(updateGenerator, zkPort, kafkaPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, howManyUpdate, 0);\n    com.cloudera.oryx.lambda.serving.AbstractServingIT.log.info(\"Producing updates\");\n    updateProducer.start();\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startUpdateTopics",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return context;\n}",
                "ClassName": "ServingLayer",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getContext",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return servingLayer;\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getServingLayer",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return model;\n}",
                "ClassName": "RDFServingModelManager",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getModel",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return encodings;\n}",
                "ClassName": "RDFServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getEncodings",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return doGetMap(index).size();\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getValueCount",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return doGetMap(index).inverse();\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getEncodingValueMap",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return forest;\n}",
                "ClassName": "RDFServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getForest",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return trees;\n}",
                "ClassName": "DecisionForest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getTrees",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertArrayEquals(expecteds, actuals, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertArrayEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return weights;\n}",
                "ClassName": "DecisionForest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getWeights",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return inputSchema;\n}",
                "ClassName": "RDFServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getInputSchema",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return featureNames.size();\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getNumFeatures",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.app.rdf.tree.TreeNode node = root;\n    while (!id.equals(node.getID())) {\n        if (node.isTerminal()) {\n            throw new java.lang.IllegalArgumentException(\"No node with ID \" + id);\n        }\n        com.google.common.base.Preconditions.checkState(id.startsWith(node.getID()), \"Node ID %s is not a prefix of %s\", node.getID(), id);\n        com.cloudera.oryx.app.rdf.tree.DecisionNode decisionNode = ((com.cloudera.oryx.app.rdf.tree.DecisionNode) (node));\n        char decisionChar = id.charAt(node.getID().length());\n        com.google.common.base.Preconditions.checkState((decisionChar == '-') || (decisionChar == '+'));\n        if (decisionChar == '+') {\n            node = decisionNode.getRight();\n        } else {\n            node = decisionNode.getLeft();\n        }\n    } \n    return node;\n}",
                "ClassName": "DecisionTree",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "findByID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 18,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return left;\n}",
                "ClassName": "DecisionNode",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getLeft",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return right;\n}",
                "ClassName": "DecisionNode",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getRight",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return prediction.getCount();\n}",
                "ClassName": "TerminalNode",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getCount",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return prediction;\n}",
                "ClassName": "TerminalNode",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getPrediction",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return categoryCounts;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getCategoryCounts",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 4,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 110,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.serving.als.model.ALSServingModel model = new com.cloudera.oryx.app.serving.als.model.ALSServingModel(2, true, null);\n    org.junit.Assert.assertEquals(\"ALSServingModel[features:2, implicit:true, X:(0 users), Y:(0 items)]\", model.toString());\n}",
        "ClassName": "ALSServingModelTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 2,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 14,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 9,
        "MethodName": "testToString",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 7,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(features > 0);\n    X = net.openhft.koloboke.collect.map.hash.HashObjObjMaps.newMutableMap();\n    Y = ((net.openhft.koloboke.collect.map.ObjObjMap<java.lang.String, float[]>[]) (java.lang.reflect.Array.newInstance(net.openhft.koloboke.collect.map.ObjObjMap.class, com.cloudera.oryx.app.serving.als.model.ALSServingModel.PARTITIONS)));\n    for (int i = 0; i < Y.length; i++) {\n        Y[i] = net.openhft.koloboke.collect.map.hash.HashObjObjMaps.newMutableMap();\n    }\n    recentNewUsers = new java.util.HashSet<>();\n    recentNewItems = ((java.util.Collection<java.lang.String>[]) (java.lang.reflect.Array.newInstance(java.util.HashSet.class, com.cloudera.oryx.app.serving.als.model.ALSServingModel.PARTITIONS)));\n    for (int i = 0; i < recentNewItems.length; i++) {\n        recentNewItems[i] = new java.util.HashSet<>();\n    }\n    knownItems = net.openhft.koloboke.collect.map.hash.HashObjObjMaps.newMutableMap();\n    xLock = new java.util.concurrent.locks.ReentrantReadWriteLock();\n    yLocks = new java.util.concurrent.locks.ReentrantReadWriteLock[Y.length];\n    for (int i = 0; i < yLocks.length; i++) {\n        yLocks[i] = new java.util.concurrent.locks.ReentrantReadWriteLock();\n    }\n    this.features = features;\n    this.implicit = implicit;\n    this.rescorerProvider = rescorerProvider;\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 22,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 18
            },
            {
                "Body": "{\n    int numItems = 0;\n    for (java.util.Map<?, ?> partition : Y) {\n        numItems += partition.size();\n    }\n    return (((((((\"ALSServingModel[features:\" + features) + \", implicit:\") + implicit) + \", X:(\") + X.size()) + \" users), Y:(\") + numItems) + \" items)]\";\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "toString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 4,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 29,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 18
    },
    {
        "Body": "{\n    testHowMany(\"/similarity/I0/I2/I4\", -1, 0);\n}",
        "ClassName": "SimilarityTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBadHowMany",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testHowMany",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.serving.als.model.ALSServingModel model = new com.cloudera.oryx.app.serving.als.model.ALSServingModel(2, true, null);\n    model.setUserVector(\"U0\", new float[]{ 1.0F, 1.0F });\n    model.pruneX(java.util.Collections.<java.lang.String>emptyList());\n    org.junit.Assert.assertNotNull(model.getUserVector(\"U0\"));\n    model.pruneX(java.util.Collections.<java.lang.String>emptyList());\n    org.junit.Assert.assertNull(model.getUserVector(\"U0\"));\n    model.setUserVector(\"U0\", new float[]{ 1.0F, 1.0F });\n    model.pruneX(java.util.Arrays.asList(\"U0\"));\n    org.junit.Assert.assertNotNull(model.getUserVector(\"U0\"));\n    model.pruneX(java.util.Arrays.asList(\"U0\"));\n    org.junit.Assert.assertNotNull(model.getUserVector(\"U0\"));\n    model.setItemVector(\"I0\", new float[]{ 1.0F, 1.0F });\n    model.pruneY(java.util.Collections.<java.lang.String>emptyList());\n    org.junit.Assert.assertNotNull(model.getItemVector(\"I0\"));\n    model.pruneY(java.util.Collections.<java.lang.String>emptyList());\n    org.junit.Assert.assertNull(model.getItemVector(\"I0\"));\n    model.setItemVector(\"I0\", new float[]{ 1.0F, 1.0F });\n    model.pruneY(java.util.Arrays.asList(\"I0\"));\n    org.junit.Assert.assertNotNull(model.getItemVector(\"I0\"));\n    model.pruneY(java.util.Arrays.asList(\"I0\"));\n    org.junit.Assert.assertNotNull(model.getItemVector(\"I0\"));\n}",
        "ClassName": "ALSServingModelTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 9,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 6,
        "MethodName": "testPruneXY",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 5,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 4,
        "NumberOfAsserts": 8,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 23,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(features > 0);\n    X = net.openhft.koloboke.collect.map.hash.HashObjObjMaps.newMutableMap();\n    Y = ((net.openhft.koloboke.collect.map.ObjObjMap<java.lang.String, float[]>[]) (java.lang.reflect.Array.newInstance(net.openhft.koloboke.collect.map.ObjObjMap.class, com.cloudera.oryx.app.serving.als.model.ALSServingModel.PARTITIONS)));\n    for (int i = 0; i < Y.length; i++) {\n        Y[i] = net.openhft.koloboke.collect.map.hash.HashObjObjMaps.newMutableMap();\n    }\n    recentNewUsers = new java.util.HashSet<>();\n    recentNewItems = ((java.util.Collection<java.lang.String>[]) (java.lang.reflect.Array.newInstance(java.util.HashSet.class, com.cloudera.oryx.app.serving.als.model.ALSServingModel.PARTITIONS)));\n    for (int i = 0; i < recentNewItems.length; i++) {\n        recentNewItems[i] = new java.util.HashSet<>();\n    }\n    knownItems = net.openhft.koloboke.collect.map.hash.HashObjObjMaps.newMutableMap();\n    xLock = new java.util.concurrent.locks.ReentrantReadWriteLock();\n    yLocks = new java.util.concurrent.locks.ReentrantReadWriteLock[Y.length];\n    for (int i = 0; i < yLocks.length; i++) {\n        yLocks[i] = new java.util.concurrent.locks.ReentrantReadWriteLock();\n    }\n    this.features = features;\n    this.implicit = implicit;\n    this.rescorerProvider = rescorerProvider;\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 22,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 18
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkNotNull(vector);\n    com.google.common.base.Preconditions.checkArgument(vector.length == features);\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(xLock.writeLock())) {\n        if (X.put(user, vector) == null) {\n            recentNewUsers.add(user);\n        }\n    }\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "setUserVector",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 4
            },
            {
                "Body": "{\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(xLock.writeLock())) {\n        X.removeIf(new com.cloudera.oryx.common.collection.KeyOnlyBiPredicate(new com.cloudera.oryx.common.collection.AndPredicate(new com.cloudera.oryx.common.collection.NotContainsPredicate(users), new com.cloudera.oryx.common.collection.NotContainsPredicate(recentNewUsers))));\n        recentNewUsers.clear();\n    }\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "pruneX",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 4
            },
            {
                "Body": "{\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(xLock.readLock())) {\n        return X.get(user);\n    }\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getUserVector",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 4
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkNotNull(vector);\n    com.google.common.base.Preconditions.checkArgument(vector.length == features);\n    int partition = com.cloudera.oryx.app.serving.als.model.ALSServingModel.partition(item);\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(yLocks[partition].writeLock())) {\n        if (Y[partition].put(item, vector) == null) {\n            recentNewItems[partition].add(item);\n        }\n    }\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "setItemVector",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 10,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 6
            },
            {
                "Body": "{\n    for (int partition = 0; partition < Y.length; partition++) {\n        try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(yLocks[partition].writeLock())) {\n            Y[partition].removeIf(new com.cloudera.oryx.common.collection.KeyOnlyBiPredicate(new com.cloudera.oryx.common.collection.AndPredicate(new com.cloudera.oryx.common.collection.NotContainsPredicate(items), new com.cloudera.oryx.common.collection.NotContainsPredicate(recentNewItems[partition]))));\n            recentNewItems[partition].clear();\n        }\n    }\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "pruneY",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 6
            },
            {
                "Body": "{\n    int partition = com.cloudera.oryx.app.serving.als.model.ALSServingModel.partition(item);\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(yLocks[partition].readLock())) {\n        return Y[partition].get(item);\n    }\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getItemVector",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 6
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 6,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 66,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 48
    },
    {
        "Body": "{\n    com.cloudera.oryx.lambda.ValueToWritableFunction<java.lang.Integer, java.lang.Long> function = new com.cloudera.oryx.lambda.ValueToWritableFunction(java.lang.Integer.class, java.lang.Long.class, org.apache.hadoop.io.IntWritable.class, org.apache.hadoop.io.LongWritable.class);\n    scala.Tuple2<java.lang.Integer, java.lang.Long> in = new scala.Tuple2(3, 4L);\n    scala.Tuple2<org.apache.hadoop.io.Writable, org.apache.hadoop.io.Writable> out = function.call(in);\n    org.junit.Assert.assertEquals(new org.apache.hadoop.io.IntWritable(3), out._1());\n    org.junit.Assert.assertEquals(new org.apache.hadoop.io.LongWritable(4L), out._2());\n}",
        "ClassName": "ValueToWritableFunctionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testFunction",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return new scala.Tuple2(keyConverter.toWritable(keyMessage._1()), messageConverter.toWritable(keyMessage._2()));\n}",
                "ClassName": "ValueToWritableFunction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "call",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.lambda.ValueWritableConverter<java.lang.String> converter = new com.cloudera.oryx.lambda.ValueWritableConverter(java.lang.String.class, org.apache.hadoop.io.Text.class);\n    org.junit.Assert.assertEquals(\"foo\", converter.fromWritable(new org.apache.hadoop.io.Text(\"foo\")));\n    org.junit.Assert.assertEquals(new org.apache.hadoop.io.Text(\"bar\"), converter.toWritable(\"bar\"));\n}",
        "ClassName": "ValueWritableConverterTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 11,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testTest",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 11,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    try {\n        if (value == null) {\n            return writableNoArgConstructor.newInstance();\n        } else {\n            return writableConstructor.newInstance(value);\n        }\n    } catch (java.lang.InstantiationException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException e) {\n        throw new java.lang.IllegalStateException(e);\n    }\n}",
                "ClassName": "ValueWritableConverter",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "toWritable",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 11,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 11,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.rdf.predict.CategoricalPrediction> predictions = java.util.Arrays.asList(new com.cloudera.oryx.app.rdf.predict.CategoricalPrediction(new int[]{ 0, 1, 2 }), new com.cloudera.oryx.app.rdf.predict.CategoricalPrediction(new int[]{ 6, 2, 0 }), new com.cloudera.oryx.app.rdf.predict.CategoricalPrediction(new int[]{ 0, 2, 0 }));\n    double[] weights = new double[]{ 1.0, 10.0, 1.0 };\n    com.cloudera.oryx.app.rdf.predict.CategoricalPrediction vote = ((com.cloudera.oryx.app.rdf.predict.CategoricalPrediction) (com.cloudera.oryx.app.rdf.predict.WeightedPrediction.voteOnFeature(predictions, weights)));\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.example.FeatureType.CATEGORICAL, vote.getFeatureType());\n    org.junit.Assert.assertEquals(0, vote.getMostProbableCategoryEncoding());\n}",
        "ClassName": "WeightedPredictionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 6,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testCategoricalVoteWeighted",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(com.cloudera.oryx.app.rdf.predict.CategoricalPrediction.sum(categoryCounts));\n    this.categoryCounts = categoryCounts;\n    recompute();\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(!predictions.isEmpty(), \"No predictions\");\n    com.google.common.base.Preconditions.checkArgument(predictions.size() == weights.length, \"%s predictions but %s weights?\", predictions.size(), weights.length);\n    switch (predictions.get(0).getFeatureType()) {\n        case NUMERIC :\n            @java.lang.SuppressWarnings(\"unchecked\")\n            java.util.List<com.cloudera.oryx.app.rdf.predict.NumericPrediction> numericVotes = ((java.util.List<com.cloudera.oryx.app.rdf.predict.NumericPrediction>) (predictions));\n            return com.cloudera.oryx.app.rdf.predict.WeightedPrediction.voteOnNumericFeature(numericVotes, weights);\n        case CATEGORICAL :\n            @java.lang.SuppressWarnings(\"unchecked\")\n            java.util.List<com.cloudera.oryx.app.rdf.predict.CategoricalPrediction> categoricalVotes = ((java.util.List<com.cloudera.oryx.app.rdf.predict.CategoricalPrediction>) (predictions));\n            return com.cloudera.oryx.app.rdf.predict.WeightedPrediction.voteOnCategoricalFeature(categoricalVotes, weights);\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}",
                "ClassName": "WeightedPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "voteOnFeature",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 16,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.rdf.example.FeatureType.CATEGORICAL;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getFeatureType",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return maxCategory;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getMostProbableCategoryEncoding",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 27,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(0.0, com.cloudera.oryx.common.math.VectorMath.norm(new float[]{ 0.0F }), com.cloudera.oryx.common.OryxTest.FLOAT_EPSILON);\n    org.junit.Assert.assertEquals(3.674234614174767, com.cloudera.oryx.common.math.VectorMath.norm(com.cloudera.oryx.common.math.VectorMathTest.VEC1), com.cloudera.oryx.common.OryxTest.FLOAT_EPSILON);\n    org.junit.Assert.assertEquals(10.72800074571213, com.cloudera.oryx.common.math.VectorMath.norm(com.cloudera.oryx.common.math.VectorMathTest.VEC2), com.cloudera.oryx.common.OryxTest.FLOAT_EPSILON);\n}",
        "ClassName": "VectorMathTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 8,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNorm",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 8,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    double total = 0.0;\n    for (float f : x) {\n        double d = ((double) (f));\n        total += d * d;\n    }\n    return java.lang.Math.sqrt(total);\n}",
                "ClassName": "VectorMath",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "norm",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 8,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTestContinuous(com.cloudera.oryx.ml.param.HyperParams.fixed(3.0), 1, 3.0);\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTestContinuous(com.cloudera.oryx.ml.param.HyperParams.fixed(3.0), 3, 3.0);\n}",
        "ClassName": "HyperParamsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testFixedContinuous",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<java.lang.Double> values = range.getTrialValues(howMany);\n    double[] valueArray = new double[values.size()];\n    for (int i = 0; i < valueArray.length; i++) {\n        valueArray[i] = values.get(i);\n    }\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(expected, valueArray);\n}",
                "ClassName": "HyperParamsTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 2,
                "MethodName": "doTestContinuous",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new com.cloudera.oryx.ml.param.ContinuousRange(fixedValue, fixedValue);\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "fixed",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 11,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<java.util.List<?>> combos = com.cloudera.oryx.ml.param.HyperParams.chooseHyperParameterCombos(java.util.Collections.<com.cloudera.oryx.ml.param.HyperParamValues<?>>emptyList(), 1, 0);\n    org.junit.Assert.assertEquals(1, combos.size());\n    org.junit.Assert.assertTrue(combos.get(0).isEmpty());\n}",
        "ClassName": "HyperParamsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 7,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 41,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNoCombos",
        "MinimumCyclomaticComplexity": 7,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 41,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(howMany > 0);\n    com.google.common.base.Preconditions.checkArgument(perParam >= 0);\n    int numParams = ranges.size();\n    if ((numParams == 0) || (perParam == 0)) {\n        return java.util.Collections.<java.util.List<?>>singletonList(java.util.Collections.emptyList());\n    }\n    com.google.common.base.Preconditions.checkArgument(java.lang.Math.pow(perParam, numParams) <= com.cloudera.oryx.ml.param.HyperParams.MAX_COMBOS);\n    int howManyCombos = 1;\n    java.util.List<java.util.List<?>> paramRanges = new java.util.ArrayList<>(numParams);\n    for (com.cloudera.oryx.ml.param.HyperParamValues<?> range : ranges) {\n        java.util.List<?> values = range.getTrialValues(perParam);\n        paramRanges.add(values);\n        howManyCombos *= values.size();\n    }\n    java.util.List<java.util.List<?>> allCombinations = new java.util.ArrayList<>(howManyCombos);\n    for (int combo = 0; combo < howManyCombos; combo++) {\n        java.util.List<java.lang.Object> combination = new java.util.ArrayList<>(numParams);\n        for (int param = 0; param < numParams; param++) {\n            int whichValueToTry = combo;\n            for (int i = 0; i < param; i++) {\n                whichValueToTry /= paramRanges.get(i).size();\n            }\n            whichValueToTry %= paramRanges.get(param).size();\n            combination.add(paramRanges.get(param).get(whichValueToTry));\n        }\n        allCombinations.add(combination);\n    }\n    if (howMany >= howManyCombos) {\n        java.util.Collections.shuffle(allCombinations);\n        return allCombinations;\n    }\n    org.apache.commons.math3.random.RandomDataGenerator rdg = new org.apache.commons.math3.random.RandomDataGenerator(com.cloudera.oryx.common.random.RandomManager.getRandom());\n    int[] indices = rdg.nextPermutation(howManyCombos, howMany);\n    java.util.List<java.util.List<?>> result = new java.util.ArrayList<>(indices.length);\n    for (int i = 0; i < indices.length; i++) {\n        result.add(allCombinations.get(i));\n    }\n    java.util.Collections.shuffle(result);\n    return result;\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 7,
                "DepthOfInheritance": 0,
                "MethodName": "chooseHyperParameterCombos",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 41,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 7,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 41,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.lambda.ValueWritableConverter<java.lang.Long> converter = new com.cloudera.oryx.lambda.ValueWritableConverter(java.lang.Long.class, org.apache.hadoop.io.LongWritable.class);\n    org.junit.Assert.assertEquals(-1L, converter.fromWritable(new org.apache.hadoop.io.LongWritable(-1L)).longValue());\n    org.junit.Assert.assertEquals(new org.apache.hadoop.io.LongWritable(1L), converter.toWritable(1L));\n}",
        "ClassName": "ValueWritableConverterTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 11,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testLong",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 11,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    try {\n        if (value == null) {\n            return writableNoArgConstructor.newInstance();\n        } else {\n            return writableConstructor.newInstance(value);\n        }\n    } catch (java.lang.InstantiationException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException e) {\n        throw new java.lang.IllegalStateException(e);\n    }\n}",
                "ClassName": "ValueWritableConverter",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "toWritable",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 11,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 11,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(\"[\\\"1\\\",\\\"2\\\",\\\"3\\\"]\", com.cloudera.oryx.common.text.TextUtils.joinJSON(java.util.Arrays.asList(\"1\", \"2\", \"3\")));\n    org.junit.Assert.assertEquals(\"[\\\"1 \\\",\\\"2 \\\",\\\"3\\\"]\", com.cloudera.oryx.common.text.TextUtils.joinJSON(java.util.Arrays.asList(\"1 \", \"2 \", \"3\")));\n    org.junit.Assert.assertEquals(\"[]\", com.cloudera.oryx.common.text.TextUtils.joinJSON(java.util.Collections.emptyList()));\n}",
        "ClassName": "TextUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testJoinJSON",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 7,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    try {\n        return com.cloudera.oryx.common.text.TextUtils.MAPPER.writeValueAsString(elements);\n    } catch (com.fasterxml.jackson.core.JsonProcessingException e) {\n        throw new java.lang.IllegalArgumentException(e);\n    }\n}",
                "ClassName": "TextUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "joinJSON",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 7,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.range(3, 4), 1, java.util.Collections.singletonList(3));\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.range(3, 5), 1, java.util.Collections.singletonList(4));\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.range(3, 5), 2, java.util.Arrays.asList(3, 5));\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.range(3, 5), 3, java.util.Arrays.asList(3, 4, 5));\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.range(3, 5), 4, java.util.Arrays.asList(3, 4, 5));\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.range(0, 1), 3, java.util.Arrays.asList(0, 1));\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.range(-1, 1), 5, java.util.Arrays.asList(-1, 0, 1));\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.range(0, 10), 3, java.util.Arrays.asList(0, 5, 10));\n}",
        "ClassName": "HyperParamsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDiscreteRange",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 10,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, hyperParams.getTrialValues(howMany));\n}",
                "ClassName": "HyperParamsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "doTest",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new com.cloudera.oryx.ml.param.DiscreteRange(min, max);\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "range",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 6,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<java.lang.String> items = target(\"/knownItems/U1\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.lambda.serving.AbstractServingTest.LIST_STRING_TYPE);\n    org.junit.Assert.assertEquals(5, items.size());\n    for (int i : new int[]{ 1, 4, 5, 7, 8 }) {\n        org.junit.Assert.assertTrue(items.contains(\"I\" + i));\n    }\n}",
        "ClassName": "KnownItemsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 1,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testKnownItems",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.Number n = com.cloudera.oryx.common.lang.ClassUtils.loadInstanceOf(java.lang.Integer.class.getName(), java.lang.Number.class, new java.lang.Class<?>[]{ int.class }, new java.lang.Object[]{ 3 });\n    org.junit.Assert.assertEquals(3, n.intValue());\n}",
        "ClassName": "ClassUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testInstantiateWithArgs",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return com.cloudera.oryx.common.lang.ClassUtils.doLoadInstanceOf(implClassName, superClass, constructorTypes, constructorArgs, com.cloudera.oryx.common.lang.ClassUtils.class.getClassLoader());\n}",
                "ClassName": "ClassUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "loadInstanceOf",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    scala.Tuple2<scala.Tuple2<java.lang.Integer, java.lang.Integer>, java.lang.Double> tuple = new com.cloudera.oryx.app.mllib.als.RatingToTupleDouble().call(new org.apache.spark.mllib.recommendation.Rating(1, 2, 3.0));\n    org.junit.Assert.assertEquals(1, tuple._1()._1().intValue());\n    org.junit.Assert.assertEquals(2, tuple._1()._2().intValue());\n    org.junit.Assert.assertEquals(3.0, tuple._2().doubleValue());\n}",
        "ClassName": "RatingToTupleDoubleTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 2,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testFunction",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "RatingToTupleDouble",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new scala.Tuple2(new scala.Tuple2(rating.user(), rating.product()), rating.rating());\n}",
                "ClassName": "RatingToTupleDouble",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "call",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 5,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.nio.file.Path cwd = java.nio.file.Paths.get(\".\");\n    java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>();\n    com.cloudera.oryx.common.settings.ConfigUtils.set(map, \"cwd\", cwd);\n    com.cloudera.oryx.common.settings.ConfigUtils.set(map, \"temp\", java.nio.file.Paths.get(\"/tmp\"));\n    org.junit.Assert.assertEquals((\"\\\"\" + cwd.toRealPath(java.nio.file.LinkOption.NOFOLLOW_LINKS).toUri()) + \"\\\"\", map.get(\"cwd\"));\n    org.junit.Assert.assertEquals(\"\\\"file:///tmp/\\\"\", map.get(\"temp\"));\n}",
        "ClassName": "ConfigUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testSetPath",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.nio.file.Path finalPath = (java.nio.file.Files.exists(path, java.nio.file.LinkOption.NOFOLLOW_LINKS)) ? path.toRealPath(java.nio.file.LinkOption.NOFOLLOW_LINKS) : path;\n    overlay.put(key, (\"\\\"\" + finalPath.toUri()) + \"\\\"\");\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "set",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertTrue(com.cloudera.oryx.app.common.fn.MLFunctions.<java.lang.String>notNaNValue().call(new scala.Tuple2(\"foo\", 0.0)));\n    org.junit.Assert.assertFalse(com.cloudera.oryx.app.common.fn.MLFunctions.<java.lang.String>notNaNValue().call(new scala.Tuple2(\"foo\", java.lang.Double.NaN)));\n}",
        "ClassName": "MLFunctionsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 8,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNotNaN",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 8,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return new org.apache.spark.api.java.function.Function<scala.Tuple2<K, java.lang.Double>, java.lang.Boolean>() {\n        @java.lang.Override\n        public java.lang.Boolean call(scala.Tuple2<K, java.lang.Double> kv) {\n            return !java.lang.Double.isNaN(kv._2());\n        }\n    };\n}",
                "ClassName": "MLFunctions",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "notNaNValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 8,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.serving.als.IngestTest.checkResponse(getFormPostResponse(com.cloudera.oryx.app.serving.als.IngestTest.INGEST_DATA, \"/ingest\", null, null));\n}",
        "ClassName": "IngestTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 13,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testFormIngest",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 12,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = com.cloudera.oryx.lambda.serving.MockTopicProducer.getData();\n    for (int i = 0; i < data.size(); i++) {\n        com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> actual = data.get(i);\n        org.junit.Assert.assertNull(actual.getFirst());\n        java.lang.String[] tokens = actual.getSecond().split(\",\");\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][0], tokens[0]);\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][1], tokens[1]);\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][2], tokens[2]);\n    }\n}",
                "ClassName": "IngestTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 3,
                "MethodName": "checkResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    byte[] bytes;\n    if (compressingClass == null) {\n        bytes = data.getBytes(java.nio.charset.StandardCharsets.UTF_8);\n    } else {\n        bytes = com.cloudera.oryx.lambda.serving.AbstractServingTest.compress(data, compressingClass);\n    }\n    javax.ws.rs.core.MediaType type = (encoding == null) ? javax.ws.rs.core.MediaType.TEXT_PLAIN_TYPE : new javax.ws.rs.core.MediaType(\"application\", encoding);\n    java.io.InputStream in = new java.io.ByteArrayInputStream(bytes);\n    org.glassfish.jersey.media.multipart.file.StreamDataBodyPart filePart = new org.glassfish.jersey.media.multipart.file.StreamDataBodyPart(\"data\", in, \"data\", type);\n    try (org.glassfish.jersey.media.multipart.MultiPart multiPart = new org.glassfish.jersey.media.multipart.MultiPart(javax.ws.rs.core.MediaType.MULTIPART_FORM_DATA_TYPE)) {\n        multiPart.getBodyParts().add(filePart);\n        return target(endpoint).request().post(javax.ws.rs.client.Entity.entity(multiPart, MediaType.MULTIPART_FORM_DATA_TYPE));\n    }\n}",
                "ClassName": "AbstractServingTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getFormPostResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 2,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 27,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.app.kmeans.KMeansPMMLUtilsTest.buildDummyClusteringModel();\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.input-schema.feature-names\", \"[\\\"x\\\",\\\"y\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.num-features\", 2);\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[]\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    com.cloudera.oryx.app.schema.InputSchema schema = new com.cloudera.oryx.app.schema.InputSchema(config);\n    com.cloudera.oryx.app.kmeans.KMeansPMMLUtils.validatePMMLVsSchema(pmml, schema);\n}",
        "ClassName": "KMeansPMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 20,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testClustering",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 10,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<java.lang.String> givenFeatureNames = config.getStringList(\"oryx.input-schema.feature-names\");\n    if (givenFeatureNames.isEmpty()) {\n        int numFeatures = config.getInt(\"oryx.input-schema.num-features\");\n        com.google.common.base.Preconditions.checkArgument(numFeatures > 0, \"Neither feature-names nor num-features is set\");\n        java.util.List<java.lang.String> generatedFeatureNames = new java.util.ArrayList<>(numFeatures);\n        for (int i = 0; i < numFeatures; i++) {\n            generatedFeatureNames.add(java.lang.Integer.toString(i));\n        }\n        featureNames = generatedFeatureNames;\n    } else {\n        featureNames = com.google.common.collect.ImmutableList.copyOf(givenFeatureNames);\n    }\n    int numFeatures = featureNames.size();\n    com.google.common.base.Preconditions.checkArgument(new java.util.HashSet<>(featureNames).size() == numFeatures, \"Feature names must be unique: %s\", featureNames);\n    idFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.id-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(idFeatures));\n    java.util.Collection<java.lang.String> ignoredFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.ignored-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(ignoredFeatures));\n    java.util.Collection<java.lang.String> activeFeatureSet = new java.util.HashSet<>(featureNames);\n    activeFeatureSet.removeAll(idFeatures);\n    activeFeatureSet.removeAll(ignoredFeatures);\n    activeFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    java.util.List<java.lang.String> givenNumericFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.numeric-features\");\n    java.util.List<java.lang.String> givenCategoricalFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.categorical-features\");\n    if (givenNumericFeatures == null) {\n        com.google.common.base.Preconditions.checkNotNull(givenCategoricalFeatures, \"Neither numeric-features nor categorical-features was set\");\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(givenCategoricalFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(categoricalFeatures));\n        activeFeatureSet.removeAll(categoricalFeatures);\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    } else {\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(givenNumericFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(numericFeatures));\n        activeFeatureSet.removeAll(numericFeatures);\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    }\n    targetFeature = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalString(config, \"oryx.input-schema.target-feature\");\n    if (targetFeature != null) {\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.contains(targetFeature), \"Target feature is not known, an ID, or ignored: %s\", targetFeature);\n    }\n    targetFeatureIndex = (targetFeature == null) ? -1 : featureNames.indexOf(targetFeature);\n    allToPredictorMap = com.google.common.collect.HashBiMap.create();\n    for (int featureIndex = 0, predictorIndex = 0; featureIndex < featureNames.size(); featureIndex++) {\n        if (isActive(featureIndex) && (!isTarget(featureIndex))) {\n            allToPredictorMap.put(featureIndex, predictorIndex);\n            predictorIndex++;\n        }\n    }\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 50,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.buildSkeletonPMML();\n    java.util.List<org.dmg.pmml.DataField> dataFields = new java.util.ArrayList<>();\n    dataFields.add(new org.dmg.pmml.DataField(org.dmg.pmml.FieldName.create(\"x\"), org.dmg.pmml.OpType.CONTINUOUS, org.dmg.pmml.DataType.DOUBLE));\n    dataFields.add(new org.dmg.pmml.DataField(org.dmg.pmml.FieldName.create(\"y\"), org.dmg.pmml.OpType.CONTINUOUS, org.dmg.pmml.DataType.DOUBLE));\n    org.dmg.pmml.DataDictionary dataDictionary = new org.dmg.pmml.DataDictionary(dataFields);\n    dataDictionary.setNumberOfFields(dataFields.size());\n    pmml.setDataDictionary(dataDictionary);\n    java.util.List<org.dmg.pmml.MiningField> miningFields = new java.util.ArrayList<>();\n    org.dmg.pmml.MiningField xMF = new org.dmg.pmml.MiningField(org.dmg.pmml.FieldName.create(\"x\"));\n    xMF.setOpType(OpType.CONTINUOUS);\n    xMF.setUsageType(FieldUsageType.ACTIVE);\n    miningFields.add(xMF);\n    org.dmg.pmml.MiningField yMF = new org.dmg.pmml.MiningField(org.dmg.pmml.FieldName.create(\"y\"));\n    yMF.setOpType(OpType.CONTINUOUS);\n    yMF.setUsageType(FieldUsageType.ACTIVE);\n    miningFields.add(yMF);\n    org.dmg.pmml.MiningSchema miningSchema = new org.dmg.pmml.MiningSchema(miningFields);\n    java.util.List<org.dmg.pmml.ClusteringField> clusteringFields = new java.util.ArrayList<>();\n    clusteringFields.add(new org.dmg.pmml.ClusteringField(org.dmg.pmml.FieldName.create(\"x\")).withCenterField(ClusteringField.CenterField.TRUE));\n    clusteringFields.add(new org.dmg.pmml.ClusteringField(org.dmg.pmml.FieldName.create(\"y\")).withCenterField(ClusteringField.CenterField.TRUE));\n    java.util.List<org.dmg.pmml.Cluster> clusters = new java.util.ArrayList<>();\n    clusters.add(new org.dmg.pmml.Cluster().withId(\"0\").withSize(1).withArray(com.cloudera.oryx.app.pmml.AppPMMLUtils.toArray(1.0, 0.0)));\n    clusters.add(new org.dmg.pmml.Cluster().withId(\"1\").withSize(2).withArray(com.cloudera.oryx.app.pmml.AppPMMLUtils.toArray(2.0, -1.0)));\n    clusters.add(new org.dmg.pmml.Cluster().withId(\"2\").withSize(3).withArray(com.cloudera.oryx.app.pmml.AppPMMLUtils.toArray(-1.0, 0.0)));\n    pmml.getModels().add(new org.dmg.pmml.ClusteringModel(org.dmg.pmml.MiningFunctionType.CLUSTERING, ClusteringModel.ModelClass.CENTER_BASED, clusters.size(), miningSchema, new org.dmg.pmml.ComparisonMeasure(ComparisonMeasure.Kind.DISTANCE).withMeasure(new org.dmg.pmml.SquaredEuclidean()), clusteringFields, clusters));\n    return pmml;\n}",
                "ClassName": "KMeansPMMLUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildDummyClusteringModel",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 28,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.List<org.dmg.pmml.Model> models = pmml.getModels();\n    com.google.common.base.Preconditions.checkArgument(models.size() == 1, \"Should have exactly one model, but had %s\", models.size());\n    org.dmg.pmml.Model model = models.get(0);\n    com.google.common.base.Preconditions.checkArgument(model instanceof org.dmg.pmml.ClusteringModel);\n    com.google.common.base.Preconditions.checkArgument(model.getFunctionName() == org.dmg.pmml.MiningFunctionType.CLUSTERING);\n    org.dmg.pmml.DataDictionary dictionary = pmml.getDataDictionary();\n    com.google.common.base.Preconditions.checkArgument(schema.getFeatureNames().equals(com.cloudera.oryx.app.pmml.AppPMMLUtils.getFeatureNames(dictionary)), \"Feature names in schema don't match names in PMML\");\n    org.dmg.pmml.MiningSchema miningSchema = model.getMiningSchema();\n    com.google.common.base.Preconditions.checkArgument(schema.getFeatureNames().equals(com.cloudera.oryx.app.pmml.AppPMMLUtils.getFeatureNames(miningSchema)));\n}",
                "ClassName": "KMeansPMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "validatePMMLVsSchema",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 11,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 7,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 101,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.kmeans.ClusterInfo> clusters = com.cloudera.oryx.app.mllib.kmeans.KMeansEvalIT.getClusters();\n    com.cloudera.oryx.app.mllib.kmeans.DaviesBouldinIndex daviesBouldinIndex = new com.cloudera.oryx.app.mllib.kmeans.DaviesBouldinIndex(clusters);\n    double eval = daviesBouldinIndex.evaluate(com.cloudera.oryx.app.mllib.kmeans.KMeansEvalIT.getRddOfVectors());\n    com.cloudera.oryx.app.mllib.kmeans.KMeansEvalIT.log.info(\"Davies Bouldin Index for {} clusters: {}\", clusters.size(), eval);\n    com.cloudera.oryx.common.OryxTest.assertEquals(0.638888888888889, eval);\n}",
        "ClassName": "KMeansEvalIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDaviesBouldinIndexForClustering",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(clusters);\n}",
                "ClassName": "DaviesBouldinIndex",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.kmeans.KMeansPMMLUtils.read(com.cloudera.oryx.app.kmeans.KMeansPMMLUtilsTest.buildDummyClusteringModel());\n}",
                "ClassName": "KMeansEvalIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getClusters",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return daviesBouldinIndex(fetchClusterSumDistanceAndCounts(evalData).collectAsMap());\n}",
                "ClassName": "DaviesBouldinIndex",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "evaluate",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.List<double[]> points = java.util.Arrays.asList(new double[][]{ new double[]{ 1.0, 0.0 }, new double[]{ 2.0, -2.0 }, new double[]{ 2.0, 0.0 }, new double[]{ -2.0, 0.0 }, new double[]{ -0.5, -1.0 }, new double[]{ -0.5, 1.0 } });\n    return com.cloudera.oryx.lambda.AbstractSparkIT.getJavaSparkContext().parallelize(points).map(new com.cloudera.oryx.app.mllib.kmeans.KMeansEvalIT.ToVectorFn());\n}",
                "ClassName": "KMeansEvalIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getRddOfVectors",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 16,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testHowMany(\"/recommendToMany/U5\", -1, 0);\n}",
        "ClassName": "RecommendToManyTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBadHowMany",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testHowMany",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String prediction = target(\"/predict/B,0,\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(java.lang.String.class);\n    double expectedValue = (10.0 + (2 * 1000.0)) / 3;\n    org.junit.Assert.assertEquals(expectedValue, java.lang.Double.parseDouble(prediction), com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
        "ClassName": "PredictTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testPredict",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String prediction = target(\"/assign/1,0\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(java.lang.String.class);\n    org.junit.Assert.assertEquals(0, java.lang.Integer.parseInt(prediction));\n}",
        "ClassName": "AssignTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testAssign",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    javax.ws.rs.core.Response response = target(\"/pref/U2/I2\").request().post(javax.ws.rs.client.Entity.text(\"\"));\n    com.cloudera.oryx.app.serving.als.PreferenceTest.checkResponse(response, \"U2\", \"I2\", \"1\");\n}",
        "ClassName": "PreferenceTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 11,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testPostWithEmptyItemValue",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 11,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = com.cloudera.oryx.lambda.serving.MockTopicProducer.getData();\n    org.junit.Assert.assertEquals(1, data.size());\n    org.junit.Assert.assertNull(data.get(0).getFirst());\n    java.lang.String[] tokens = data.get(0).getSecond().split(\",\");\n    org.junit.Assert.assertEquals(expectedUser, tokens[0]);\n    org.junit.Assert.assertEquals(expectedItem, tokens[1]);\n    org.junit.Assert.assertEquals(expectedValue, tokens[2]);\n    java.lang.Long.parseLong(tokens[3]);\n}",
                "ClassName": "PreferenceTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 11,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 11,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testOffset(\"/recommend/U6\", 3, -1, 0);\n}",
        "ClassName": "RecommendTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBadOffset",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).queryParam(\"offset\", java.lang.Integer.toString(offset)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testOffset",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Collection<com.cloudera.oryx.ml.param.HyperParamValues<?>> hyperParams = new java.util.ArrayList<>();\n    hyperParams.add(com.cloudera.oryx.ml.param.HyperParams.fixed(1.0));\n    hyperParams.add(com.cloudera.oryx.ml.param.HyperParams.range(2, 10));\n    hyperParams.add(com.cloudera.oryx.ml.param.HyperParams.around(5.0, 0.5));\n    java.util.List<java.util.List<?>> combos = com.cloudera.oryx.ml.param.HyperParams.chooseHyperParameterCombos(hyperParams, 50, 2);\n    org.junit.Assert.assertEquals(4, combos.size());\n    org.junit.Assert.assertTrue(combos.contains(java.util.Arrays.<java.lang.Number>asList(1.0, 2, 4.75)));\n    org.junit.Assert.assertTrue(combos.contains(java.util.Arrays.<java.lang.Number>asList(1.0, 10, 4.75)));\n    org.junit.Assert.assertTrue(combos.contains(java.util.Arrays.<java.lang.Number>asList(1.0, 2, 5.25)));\n    org.junit.Assert.assertTrue(combos.contains(java.util.Arrays.<java.lang.Number>asList(1.0, 10, 5.25)));\n}",
        "ClassName": "HyperParamsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 12,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testCombos",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 5,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 12,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return new com.cloudera.oryx.ml.param.ContinuousRange(fixedValue, fixedValue);\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "fixed",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new com.cloudera.oryx.ml.param.DiscreteRange(min, max);\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "range",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new com.cloudera.oryx.ml.param.ContinuousAround(value, step);\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "around",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(howMany > 0);\n    com.google.common.base.Preconditions.checkArgument(perParam >= 0);\n    int numParams = ranges.size();\n    if ((numParams == 0) || (perParam == 0)) {\n        return java.util.Collections.<java.util.List<?>>singletonList(java.util.Collections.emptyList());\n    }\n    com.google.common.base.Preconditions.checkArgument(java.lang.Math.pow(perParam, numParams) <= com.cloudera.oryx.ml.param.HyperParams.MAX_COMBOS);\n    int howManyCombos = 1;\n    java.util.List<java.util.List<?>> paramRanges = new java.util.ArrayList<>(numParams);\n    for (com.cloudera.oryx.ml.param.HyperParamValues<?> range : ranges) {\n        java.util.List<?> values = range.getTrialValues(perParam);\n        paramRanges.add(values);\n        howManyCombos *= values.size();\n    }\n    java.util.List<java.util.List<?>> allCombinations = new java.util.ArrayList<>(howManyCombos);\n    for (int combo = 0; combo < howManyCombos; combo++) {\n        java.util.List<java.lang.Object> combination = new java.util.ArrayList<>(numParams);\n        for (int param = 0; param < numParams; param++) {\n            int whichValueToTry = combo;\n            for (int i = 0; i < param; i++) {\n                whichValueToTry /= paramRanges.get(i).size();\n            }\n            whichValueToTry %= paramRanges.get(param).size();\n            combination.add(paramRanges.get(param).get(whichValueToTry));\n        }\n        allCombinations.add(combination);\n    }\n    if (howMany >= howManyCombos) {\n        java.util.Collections.shuffle(allCombinations);\n        return allCombinations;\n    }\n    org.apache.commons.math3.random.RandomDataGenerator rdg = new org.apache.commons.math3.random.RandomDataGenerator(com.cloudera.oryx.common.random.RandomManager.getRandom());\n    int[] indices = rdg.nextPermutation(howManyCombos, howMany);\n    java.util.List<java.util.List<?>> result = new java.util.ArrayList<>(indices.length);\n    for (int i = 0; i < indices.length; i++) {\n        result.add(allCombinations.get(i));\n    }\n    java.util.Collections.shuffle(result);\n    return result;\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 7,
                "DepthOfInheritance": 0,
                "MethodName": "chooseHyperParameterCombos",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 41,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 7,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 50,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.common.math.DoubleWeightedMean mean = new com.cloudera.oryx.common.math.DoubleWeightedMean();\n    for (int i = 1; i <= 5; i++) {\n        mean.increment(1.0 / (i + 1), i);\n    }\n    org.junit.Assert.assertEquals(5, mean.getN());\n    com.cloudera.oryx.common.OryxTest.assertEquals((((((1.0 / 2.0) + (2.0 / 3.0)) + (3.0 / 4.0)) + (4.0 / 5.0)) + (5.0 / 6.0)) / 15.0, mean.getResult());\n}",
        "ClassName": "DoubleWeightedMeanTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 1,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testComplex",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this(0, 0.0, java.lang.Double.NaN);\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(weight >= 0.0);\n    if (count == 0) {\n        count = 1;\n        mean = datum;\n        totalWeight = weight;\n    } else {\n        count++;\n        totalWeight += weight;\n        mean += (weight / totalWeight) * (datum - mean);\n    }\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "increment",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return count;\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getN",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return mean;\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getResult",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 24,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    new com.cloudera.oryx.app.schema.InputSchema(com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n}",
        "ClassName": "InputSchemaTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 3,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 26,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRejectDefault",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<java.lang.String> givenFeatureNames = config.getStringList(\"oryx.input-schema.feature-names\");\n    if (givenFeatureNames.isEmpty()) {\n        int numFeatures = config.getInt(\"oryx.input-schema.num-features\");\n        com.google.common.base.Preconditions.checkArgument(numFeatures > 0, \"Neither feature-names nor num-features is set\");\n        java.util.List<java.lang.String> generatedFeatureNames = new java.util.ArrayList<>(numFeatures);\n        for (int i = 0; i < numFeatures; i++) {\n            generatedFeatureNames.add(java.lang.Integer.toString(i));\n        }\n        featureNames = generatedFeatureNames;\n    } else {\n        featureNames = com.google.common.collect.ImmutableList.copyOf(givenFeatureNames);\n    }\n    int numFeatures = featureNames.size();\n    com.google.common.base.Preconditions.checkArgument(new java.util.HashSet<>(featureNames).size() == numFeatures, \"Feature names must be unique: %s\", featureNames);\n    idFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.id-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(idFeatures));\n    java.util.Collection<java.lang.String> ignoredFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.ignored-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(ignoredFeatures));\n    java.util.Collection<java.lang.String> activeFeatureSet = new java.util.HashSet<>(featureNames);\n    activeFeatureSet.removeAll(idFeatures);\n    activeFeatureSet.removeAll(ignoredFeatures);\n    activeFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    java.util.List<java.lang.String> givenNumericFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.numeric-features\");\n    java.util.List<java.lang.String> givenCategoricalFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.categorical-features\");\n    if (givenNumericFeatures == null) {\n        com.google.common.base.Preconditions.checkNotNull(givenCategoricalFeatures, \"Neither numeric-features nor categorical-features was set\");\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(givenCategoricalFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(categoricalFeatures));\n        activeFeatureSet.removeAll(categoricalFeatures);\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    } else {\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(givenNumericFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(numericFeatures));\n        activeFeatureSet.removeAll(numericFeatures);\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    }\n    targetFeature = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalString(config, \"oryx.input-schema.target-feature\");\n    if (targetFeature != null) {\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.contains(targetFeature), \"Target feature is not known, an ID, or ignored: %s\", targetFeature);\n    }\n    targetFeatureIndex = (targetFeature == null) ? -1 : featureNames.indexOf(targetFeature);\n    allToPredictorMap = com.google.common.collect.HashBiMap.create();\n    for (int featureIndex = 0, predictorIndex = 0; featureIndex < featureNames.size(); featureIndex++) {\n        if (isActive(featureIndex) && (!isTarget(featureIndex))) {\n            allToPredictorMap.put(featureIndex, predictorIndex);\n            predictorIndex++;\n        }\n    }\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 50,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 6,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 53,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertArrayEquals(new float[]{ 1.2F }, com.cloudera.oryx.common.math.VectorMath.toFloats(1.2), com.cloudera.oryx.common.OryxTest.FLOAT_EPSILON);\n}",
        "ClassName": "VectorMathTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testToFloats",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 7,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    float[] floats = new float[doubles.length];\n    for (int i = 0; i < floats.length; i++) {\n        floats[i] = ((float) (doubles[i]));\n    }\n    return floats;\n}",
                "ClassName": "VectorMath",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "toFloats",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 7,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.springframework.mock.web.MockHttpServletRequest mockRequest = new org.springframework.mock.web.MockHttpServletRequest();\n    mockRequest.setAttribute(RequestDispatcher.ERROR_STATUS_CODE, 500);\n    mockRequest.setAttribute(RequestDispatcher.ERROR_REQUEST_URI, \"http://foo/bar\");\n    mockRequest.setAttribute(RequestDispatcher.ERROR_MESSAGE, \"Something was wrong\");\n    mockRequest.setAttribute(RequestDispatcher.ERROR_EXCEPTION, new java.lang.IllegalStateException());\n    javax.ws.rs.core.Response response = new com.cloudera.oryx.lambda.serving.ErrorResource().error(mockRequest);\n    org.junit.Assert.assertEquals(500, response.getStatus());\n    java.lang.String responseBody = response.getEntity().toString();\n    org.junit.Assert.assertTrue(responseBody.contains(\"500\"));\n    org.junit.Assert.assertTrue(responseBody.contains(\"http://foo/bar\"));\n    org.junit.Assert.assertTrue(responseBody.contains(\"Something was wrong\"));\n    org.junit.Assert.assertTrue(responseBody.contains(\"IllegalStateException\"));\n}",
        "ClassName": "ErrorResourceTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 2,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testError",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 5,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 14,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "ErrorResource",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 2,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    java.nio.file.Path dataDir = tempDir.resolve(\"data\");\n    java.nio.file.Path modelDir = tempDir.resolve(\"model\");\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.batch.update-class\", com.cloudera.oryx.app.mllib.rdf.RDFUpdate.class.getName());\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.data-dir\", dataDir);\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.model-dir\", modelDir);\n    overlayConfig.put(\"oryx.batch.streaming.generation-interval-sec\", com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.GEN_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.batch.streaming.block-interval-sec\", com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.BLOCK_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.rdf.num-trees\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.NUM_TREES);\n    overlayConfig.put(\"oryx.rdf.hyperparams.max-depth\", (\"[1,\" + com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.MAX_DEPTH) + \"]\");\n    overlayConfig.put(\"oryx.rdf.hyperparams.max-split-candidates\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.MAX_SPLIT_CANDIDATES);\n    overlayConfig.put(\"oryx.rdf.hyperparams.impurity\", com.cloudera.oryx.app.mllib.rdf.RDFNumericHyperParamTuningIT.IMPURITY);\n    overlayConfig.put(\"oryx.input-schema.num-features\", 5);\n    overlayConfig.put(\"oryx.input-schema.numeric-features\", \"[\\\"4\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.id-features\", \"[\\\"0\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.target-feature\", \"\\\"4\\\"\");\n    overlayConfig.put(\"oryx.ml.eval.candidates\", 2);\n    overlayConfig.put(\"oryx.ml.eval.parallelism\", 2);\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    startServerProduceConsumeTopics(config, new com.cloudera.oryx.app.mllib.rdf.RandomNumericRDFDataGenerator(3), com.cloudera.oryx.app.mllib.rdf.RDFNumericHyperParamTuningIT.DATA_TO_WRITE, com.cloudera.oryx.app.mllib.rdf.RDFNumericHyperParamTuningIT.WRITE_INTERVAL_MSEC);\n    java.util.List<java.nio.file.Path> modelInstanceDirs = com.cloudera.oryx.common.io.IOUtils.listFiles(modelDir, \"*\");\n    com.cloudera.oryx.lambda.AbstractBatchIT.checkIntervals(modelInstanceDirs.size(), com.cloudera.oryx.app.mllib.rdf.RDFNumericHyperParamTuningIT.DATA_TO_WRITE, com.cloudera.oryx.app.mllib.rdf.RDFNumericHyperParamTuningIT.WRITE_INTERVAL_MSEC, com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.GEN_INTERVAL_SEC);\n    java.nio.file.Path latestModelDir = modelInstanceDirs.get(modelInstanceDirs.size() - 1);\n    java.nio.file.Path modelFile = latestModelDir.resolve(com.cloudera.oryx.ml.MLUpdate.MODEL_FILE_NAME);\n    org.junit.Assert.assertTrue(\"No such model file: \" + modelFile, java.nio.file.Files.exists(modelFile));\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.read(modelFile);\n    org.junit.Assert.assertEquals(3, pmml.getExtensions().size());\n    java.util.Map<java.lang.String, java.lang.Object> expected = new java.util.HashMap<>();\n    expected.put(\"maxSplitCandidates\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.MAX_SPLIT_CANDIDATES);\n    expected.put(\"maxDepth\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.MAX_DEPTH);\n    expected.put(\"impurity\", com.cloudera.oryx.app.mllib.rdf.RDFNumericHyperParamTuningIT.IMPURITY);\n    com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.checkExtensions(pmml, expected);\n    com.cloudera.oryx.common.collection.Pair<com.cloudera.oryx.app.rdf.tree.DecisionForest, com.cloudera.oryx.app.schema.CategoricalValueEncodings> forestEncoding = com.cloudera.oryx.app.rdf.RDFPMMLUtils.read(pmml);\n    com.cloudera.oryx.app.rdf.tree.DecisionForest forest = forestEncoding.getFirst();\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings encoding = forestEncoding.getSecond();\n    for (int f1 = 0; f1 <= 1; f1++) {\n        for (int f2 = 0; f2 <= 1; f2++) {\n            for (int f3 = 0; f3 <= 1; f3++) {\n                com.cloudera.oryx.app.rdf.predict.NumericPrediction prediction = ((com.cloudera.oryx.app.rdf.predict.NumericPrediction) (forest.predict(new com.cloudera.oryx.app.rdf.example.Example(null, null, com.cloudera.oryx.app.rdf.example.CategoricalFeature.forEncoding(encoding.getValueEncodingMap(1).get(f1 == 1 ? \"A\" : \"B\")), com.cloudera.oryx.app.rdf.example.CategoricalFeature.forEncoding(encoding.getValueEncodingMap(2).get(f2 == 1 ? \"A\" : \"B\")), com.cloudera.oryx.app.rdf.example.CategoricalFeature.forEncoding(encoding.getValueEncodingMap(3).get(f3 == 1 ? \"A\" : \"B\"))))));\n                int expectedCount = (f1 + f2) + f3;\n                if (expectedCount == 3) {\n                    org.junit.Assert.assertEquals(2, java.lang.Math.round(prediction.getPrediction()));\n                } else {\n                    org.junit.Assert.assertEquals(expectedCount, java.lang.Math.round(prediction.getPrediction()));\n                }\n            }\n        }\n    }\n}",
        "ClassName": "RDFNumericHyperParamTuningIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 4,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 10,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRDF",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 52,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(n >= 1);\n    this.n = n;\n}",
                "ClassName": "RandomNumericRDFDataGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(features != null);\n    this.features = features;\n    this.target = target;\n    com.google.common.hash.Hasher hasher = com.cloudera.oryx.app.rdf.example.Example.HASH.newHasher();\n    for (com.cloudera.oryx.app.rdf.example.Feature feature : features) {\n        if (feature != null) {\n            hasher.putInt(feature.hashCode());\n        }\n    }\n    if (target != null) {\n        hasher.putInt(target.hashCode());\n    }\n    cachedHashCode = hasher.hashCode();\n}",
                "ClassName": "Example",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (tempDir == null) {\n        tempDir = java.nio.file.Files.createTempDirectory(\"OryxTest\").toAbsolutePath();\n        com.cloudera.oryx.common.OryxTest.log.info(\"Test temp dir is {}\", tempDir);\n        tempDir.toFile().deleteOnExit();\n    }\n    return tempDir;\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getTempDir",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 2,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.nio.file.Path finalPath = (java.nio.file.Files.exists(path, java.nio.file.LinkOption.NOFOLLOW_LINKS)) ? path.toRealPath(java.nio.file.LinkOption.NOFOLLOW_LINKS) : path;\n    overlay.put(key, (\"\\\"\" + finalPath.toUri()) + \"\\\"\");\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "set",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    java.lang.String topicBroker = (\"\\\"localhost:\" + localKafkaBrokerPort) + '\"';\n    java.lang.String topicLockMaster = (\"\\\"localhost:\" + localZKPort) + '\"';\n    overlay.put(\"oryx.input-topic.broker\", topicBroker);\n    overlay.put(\"oryx.input-topic.lock.master\", topicLockMaster);\n    overlay.put(\"oryx.update-topic.broker\", topicBroker);\n    overlay.put(\"oryx.update-topic.lock.master\", topicLockMaster);\n    java.lang.String masterLocalAllCores = \"\\\"local[*]\\\"\";\n    overlay.put(\"oryx.batch.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.speed.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.batch.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.speed.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int zkPort = getZKPort();\n    com.cloudera.oryx.kafka.util.ProduceData produce = new com.cloudera.oryx.kafka.util.ProduceData(datumGenerator, zkPort, getKafkaBrokerPort(), com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC, howMany, intervalMsec);\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> keyMessages;\n    try (com.cloudera.oryx.common.collection.CloseableIterator<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = new com.cloudera.oryx.kafka.util.ConsumeData(com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, zkPort).iterator();com.cloudera.oryx.lambda.BatchLayer<?, ?, ?> batchLayer = new com.cloudera.oryx.lambda.BatchLayer(config)) {\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Starting batch layer\");\n        batchLayer.start();\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Starting consumer thread\");\n        com.cloudera.oryx.kafka.util.ConsumeTopicRunnable consumeInput = new com.cloudera.oryx.kafka.util.ConsumeTopicRunnable(data);\n        new java.lang.Thread(consumeInput).start();\n        java.lang.Thread.sleep(3000);\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Producing data\");\n        produce.start();\n        long genIntervalSec = config.getInt(\"oryx.batch.streaming.generation-interval-sec\");\n        java.lang.Thread.sleep(genIntervalSec * 1000);\n        keyMessages = consumeInput.getKeyMessages();\n    } finally {\n        produce.deleteTopic();\n    }\n    return keyMessages;\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServerProduceConsumeTopics",
                "NumberOfAsynchronousWaits": 2,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 21,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 7
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(java.nio.file.Files.isDirectory(dir), \"%s is not a directory\", dir);\n    java.util.List<java.lang.String> globLevels;\n    if ((glob == null) || glob.isEmpty()) {\n        globLevels = java.util.Collections.singletonList(\"*\");\n    } else {\n        globLevels = java.util.Arrays.asList(glob.split(\"/\"));\n    }\n    com.google.common.base.Preconditions.checkState(!globLevels.isEmpty());\n    java.util.List<java.nio.file.Path> paths = new java.util.ArrayList<>();\n    paths.add(dir);\n    for (java.lang.String globLevel : globLevels) {\n        java.util.List<java.nio.file.Path> newPaths = new java.util.ArrayList<>();\n        for (java.nio.file.Path existingPath : paths) {\n            if (java.nio.file.Files.isDirectory(existingPath)) {\n                try (java.nio.file.DirectoryStream<java.nio.file.Path> stream = java.nio.file.Files.newDirectoryStream(existingPath, globLevel)) {\n                    for (java.nio.file.Path path : stream) {\n                        if (!path.getFileName().toString().startsWith(\".\")) {\n                            newPaths.add(path);\n                        }\n                    }\n                }\n            }\n        }\n        paths = newPaths;\n    }\n    java.util.Collections.sort(paths);\n    return paths;\n}",
                "ClassName": "IOUtils",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "listFiles",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 29,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int minExpectedIntervals = (dataToWrite * writeIntervalMsec) / (1000 * genIntervalSec);\n    org.junit.Assert.assertTrue(((\"Expected \" + minExpectedIntervals) + \" intervals (or up to +4 more) but got \") + numIntervals, (numIntervals >= minExpectedIntervals) && (numIntervals <= (minExpectedIntervals + 4)));\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkIntervals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (java.io.InputStream in = com.cloudera.oryx.common.io.IOUtils.readMaybeCompressed(path)) {\n        return com.cloudera.oryx.common.pmml.PMMLUtils.read(in);\n    }\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "read",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    for (java.util.Map.Entry<java.lang.String, ?> e : expected.entrySet()) {\n        java.lang.String key = e.getKey();\n        org.junit.Assert.assertEquals((\"Value for key \" + key) + \" did not match\", e.getValue().toString(), com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionValue(pmml, key));\n    }\n}",
                "ClassName": "AbstractAppMLlibIT",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 4,
                "MethodName": "checkExtensions",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.dmg.pmml.DataDictionary dictionary = pmml.getDataDictionary();\n    java.util.List<java.lang.String> featureNames = com.cloudera.oryx.app.pmml.AppPMMLUtils.getFeatureNames(dictionary);\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings categoricalValueEncodings = com.cloudera.oryx.app.pmml.AppPMMLUtils.buildCategoricalValueEncodings(dictionary);\n    java.util.List<org.dmg.pmml.Model> models = pmml.getModels();\n    org.dmg.pmml.Model model = models.get(0);\n    org.dmg.pmml.MiningSchema miningSchema = model.getMiningSchema();\n    int targetIndex = com.cloudera.oryx.app.pmml.AppPMMLUtils.findTargetIndex(miningSchema);\n    com.cloudera.oryx.app.rdf.tree.DecisionTree[] trees;\n    double[] weights;\n    if (model instanceof org.dmg.pmml.MiningModel) {\n        org.dmg.pmml.MiningModel miningModel = ((org.dmg.pmml.MiningModel) (model));\n        org.dmg.pmml.Segmentation segmentation = miningModel.getSegmentation();\n        com.google.common.base.Preconditions.checkArgument((segmentation.getMultipleModelMethod() == org.dmg.pmml.MultipleModelMethodType.WEIGHTED_AVERAGE) || (segmentation.getMultipleModelMethod() == org.dmg.pmml.MultipleModelMethodType.WEIGHTED_MAJORITY_VOTE));\n        java.util.List<org.dmg.pmml.Segment> segments = segmentation.getSegments();\n        com.google.common.base.Preconditions.checkArgument(!segments.isEmpty());\n        trees = new com.cloudera.oryx.app.rdf.tree.DecisionTree[segments.size()];\n        weights = new double[trees.length];\n        for (int i = 0; i < trees.length; i++) {\n            org.dmg.pmml.Segment segment = segments.get(i);\n            com.google.common.base.Preconditions.checkArgument(segment.getPredicate() instanceof org.dmg.pmml.True);\n            weights[i] = segment.getWeight();\n            org.dmg.pmml.TreeModel treeModel = ((org.dmg.pmml.TreeModel) (segment.getModel()));\n            com.cloudera.oryx.app.rdf.tree.TreeNode root = com.cloudera.oryx.app.rdf.RDFPMMLUtils.translateFromPMML(treeModel.getNode(), categoricalValueEncodings, featureNames, targetIndex);\n            trees[i] = new com.cloudera.oryx.app.rdf.tree.DecisionTree(root);\n        }\n    } else {\n        com.cloudera.oryx.app.rdf.tree.TreeNode root = com.cloudera.oryx.app.rdf.RDFPMMLUtils.translateFromPMML(((org.dmg.pmml.TreeModel) (model)).getNode(), categoricalValueEncodings, featureNames, targetIndex);\n        trees = new com.cloudera.oryx.app.rdf.tree.DecisionTree[]{ new com.cloudera.oryx.app.rdf.tree.DecisionTree(root) };\n        weights = new double[]{ 1.0 };\n    }\n    java.util.List<org.dmg.pmml.MiningField> miningFields = miningSchema.getMiningFields();\n    double[] featureImportances = new double[featureNames.size()];\n    for (int i = 0; i < miningFields.size(); i++) {\n        org.dmg.pmml.MiningField field = miningFields.get(i);\n        java.lang.Double importance = field.getImportance();\n        if (importance != null) {\n            featureImportances[i] = importance;\n        }\n    }\n    return new com.cloudera.oryx.common.collection.Pair<>(new com.cloudera.oryx.app.rdf.tree.DecisionForest(trees, weights, featureImportances), categoricalValueEncodings);\n}",
                "ClassName": "RDFPMMLUtils",
                "CyclomaticComplexity": 4,
                "DepthOfInheritance": 0,
                "MethodName": "read",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 42,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return first;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.rdf.predict.WeightedPrediction.voteOnFeature(com.google.common.collect.Lists.transform(java.util.Arrays.asList(trees), new com.cloudera.oryx.app.rdf.tree.DecisionForest.TreeToPredictionFunction(test)), weights);\n}",
                "ClassName": "DecisionForest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "predict",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(encoding >= 0);\n    java.lang.Integer encodingKey = encoding;\n    com.cloudera.oryx.app.rdf.example.CategoricalFeature feature = com.cloudera.oryx.app.rdf.example.CategoricalFeature.FEATURE_CACHE.get(encodingKey);\n    if (feature == null) {\n        feature = new com.cloudera.oryx.app.rdf.example.CategoricalFeature(encoding);\n        com.cloudera.oryx.app.rdf.example.CategoricalFeature.FEATURE_CACHE.put(encodingKey, feature);\n    }\n    return feature;\n}",
                "ClassName": "CategoricalFeature",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "forEncoding",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 10,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return doGetMap(index);\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getValueEncodingMap",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getPrediction",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 17,
        "TotalNumberOfAsynchronousWaits": 2,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 2,
        "TotalNumberOfLines": 199,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 7
    },
    {
        "Body": "{\n    com.cloudera.oryx.lambda.WritableToValueFunction<java.lang.String, java.lang.String> function = new com.cloudera.oryx.lambda.WritableToValueFunction(java.lang.String.class, java.lang.String.class, org.apache.hadoop.io.Text.class, org.apache.hadoop.io.Text.class);\n    scala.Tuple2<org.apache.hadoop.io.Writable, org.apache.hadoop.io.Writable> in = new scala.Tuple2<org.apache.hadoop.io.Writable, org.apache.hadoop.io.Writable>(new org.apache.hadoop.io.Text(\"bizz\"), new org.apache.hadoop.io.Text(\"buzz\"));\n    scala.Tuple2<java.lang.String, java.lang.String> out = function.call(in);\n    org.junit.Assert.assertEquals(\"bizz\", out._1());\n    org.junit.Assert.assertEquals(\"buzz\", out._2());\n}",
        "ClassName": "WritableToValueFunctionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testFunction",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return new scala.Tuple2(keyConverter.fromWritable(keyMessage._1()), messageConverter.fromWritable(keyMessage._2()));\n}",
                "ClassName": "WritableToValueFunction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "call",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<java.lang.Double> items = target(\"estimate/U0/I0/I1/I2\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.lambda.serving.AbstractServingTest.LIST_DOUBLE_TYPE);\n    org.junit.Assert.assertEquals(3, items.size());\n    org.junit.Assert.assertEquals(0.387613186054306, items.get(0), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n    org.junit.Assert.assertEquals(0.465396924146558, items.get(1), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n    org.junit.Assert.assertEquals(-0.0801478014434228, items.get(2), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "EstimateTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testEstimate",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.predict.NumericPrediction prediction = new com.cloudera.oryx.app.rdf.predict.NumericPrediction(1.5, 1);\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.example.FeatureType.NUMERIC, prediction.getFeatureType());\n    com.cloudera.oryx.common.OryxTest.assertEquals(1.5, prediction.getPrediction());\n}",
        "ClassName": "NumericPredictionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testConstruct",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(initialCount);\n    this.prediction = prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.rdf.example.FeatureType.NUMERIC;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getFeatureType",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getPrediction",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 13,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertTrue(java.lang.Double.isNaN(com.cloudera.oryx.app.als.ALSUtils.implicitTargetQui(0.0, 1.0)));\n    org.junit.Assert.assertTrue(java.lang.Double.isNaN(com.cloudera.oryx.app.als.ALSUtils.implicitTargetQui(0.0, 0.0)));\n    org.junit.Assert.assertTrue(java.lang.Double.isNaN(com.cloudera.oryx.app.als.ALSUtils.implicitTargetQui(0.0, -1.0)));\n    org.junit.Assert.assertTrue(java.lang.Double.isNaN(com.cloudera.oryx.app.als.ALSUtils.implicitTargetQui(0.5, 1.0)));\n    org.junit.Assert.assertTrue(java.lang.Double.isNaN(com.cloudera.oryx.app.als.ALSUtils.implicitTargetQui(-0.5, 0.0)));\n    com.cloudera.oryx.common.OryxTest.assertEquals(0.75, com.cloudera.oryx.app.als.ALSUtils.implicitTargetQui(1.0, 0.5));\n    com.cloudera.oryx.common.OryxTest.assertEquals(0.25, com.cloudera.oryx.app.als.ALSUtils.implicitTargetQui(-1.0, 0.5));\n}",
        "ClassName": "ALSUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testImplicitQui",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 5,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 9,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    if ((value > 0.0F) && (currentValue < 1.0)) {\n        double diff = 1.0 - java.lang.Math.max(0.0, currentValue);\n        return currentValue + ((1.0 - (1.0 / (1.0 + value))) * diff);\n    }\n    if ((value < 0.0F) && (currentValue > 0.0)) {\n        double diff = -java.lang.Math.min(1.0, currentValue);\n        return currentValue + ((1.0 - (1.0 / (1.0 - value))) * diff);\n    }\n    return java.lang.Double.NaN;\n}",
                "ClassName": "ALSUtils",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "implicitTargetQui",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 11,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 2,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 14,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.als.RescorerProvider multi = new com.cloudera.oryx.app.als.MultiRescorerProvider(new com.cloudera.oryx.app.als.SimpleModRescorerProvider(2), new com.cloudera.oryx.app.als.SimpleModRescorerProvider(3));\n    com.cloudera.oryx.app.als.Rescorer provider = multi.getMostActiveUsersRescorer(null);\n    org.junit.Assert.assertNotNull(provider);\n    org.junit.Assert.assertTrue(provider instanceof com.cloudera.oryx.app.als.MultiRescorer);\n    org.junit.Assert.assertTrue(provider.isFiltered(\"ABC\"));\n    org.junit.Assert.assertTrue(provider.isFiltered(\"AB\"));\n    org.junit.Assert.assertFalse(provider.isFiltered(\"ABCDEF\"));\n}",
        "ClassName": "MultiRescorerProviderTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testMultiMostActiveUsersRescorer",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 5,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 9,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    if (providers.length < 1) {\n        throw new java.lang.IllegalArgumentException(\"providers is empty\");\n    }\n    this.providers = providers;\n}",
                "ClassName": "MultiRescorerProvider",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    this.modulus = modulus;\n}",
                "ClassName": "SimpleModRescorerProvider",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 9,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.nio.file.Path keystoreFile = com.cloudera.oryx.lambda.serving.SecureAPIConfigIT.buildKeystoreFile();\n    java.util.Map<java.lang.String, java.lang.Object> overlay = com.cloudera.oryx.lambda.serving.ServingLayerTest.buildOverlay();\n    overlay.put(\"oryx.serving.api.keystore-file\", (\"\\\"\" + keystoreFile) + \"\\\"\");\n    overlay.put(\"oryx.serving.api.keystore-password\", \"oryxpass\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    try {\n        com.cloudera.oryx.lambda.serving.ServingLayerTest.doTestServingLayer(config);\n    } finally {\n        java.nio.file.Files.delete(java.nio.file.Paths.get(config.getString(\"oryx.serving.api.keystore-file\")));\n    }\n}",
        "ClassName": "ServingLayerTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testServingLayerSecure",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 12,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.nio.file.Path keystoreFile = java.nio.file.Files.createTempFile(\"oryxtest\", \".jks\");\n    try (java.io.InputStream jksStream = com.cloudera.oryx.lambda.serving.SecureAPIConfigIT.class.getResourceAsStream(\"/oryxtest.jks\")) {\n        java.nio.file.Files.copy(jksStream, keystoreFile, java.nio.file.StandardCopyOption.REPLACE_EXISTING);\n    }\n    return keystoreFile;\n}",
                "ClassName": "SecureAPIConfigIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 4,
                "MethodName": "buildKeystoreFile",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    overlay.put(\"oryx.serving.api.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.serving.api.secure-port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.serving.application-resources\", \"com.cloudera.oryx.lambda.serving\");\n    overlay.put(\"oryx.serving.model-manager-class\", com.cloudera.oryx.lambda.serving.MockServingModelManager.class.getName());\n    overlay.put(\"oryx.serving.no-init-topics\", true);\n    return overlay;\n}",
                "ClassName": "ServingLayerTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildOverlay",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (com.cloudera.oryx.lambda.serving.ServingLayer servingLayer = new com.cloudera.oryx.lambda.serving.ServingLayer(config)) {\n        servingLayer.start();\n        org.apache.catalina.Context context = servingLayer.getContext();\n        org.junit.Assert.assertNotNull(context.findErrorPage(500));\n        org.junit.Assert.assertEquals(0, context.getApplicationLifecycleListeners().length);\n        org.junit.Assert.assertNotNull(context.findParameter(com.cloudera.oryx.common.settings.ConfigUtils.class.getName() + \".serialized\"));\n        org.junit.Assert.assertNotNull(context.getName());\n        org.junit.Assert.assertTrue(java.lang.Double.parseDouble(context.getWebappVersion()) >= 3.1);\n    }\n}",
                "ClassName": "ServingLayerTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "doTestServingLayer",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 11,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 39,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String prediction = target(\"/distanceToNearest/10,-1.0\").request().get(java.lang.String.class);\n    org.junit.Assert.assertEquals(64.0, java.lang.Double.parseDouble(prediction), com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
        "ClassName": "DistanceToNearestTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDistance2",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    java.nio.file.Path dataDir = tempDir.resolve(\"data\");\n    java.nio.file.Path modelDir = tempDir.resolve(\"model\");\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.batch.update-class\", com.cloudera.oryx.app.mllib.rdf.RDFUpdate.class.getName());\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.data-dir\", dataDir);\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.model-dir\", modelDir);\n    overlayConfig.put(\"oryx.batch.streaming.generation-interval-sec\", com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.GEN_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.batch.streaming.block-interval-sec\", com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.BLOCK_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.rdf.num-trees\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.NUM_TREES);\n    overlayConfig.put(\"oryx.rdf.hyperparams.max-depth\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.MAX_DEPTH);\n    overlayConfig.put(\"oryx.rdf.hyperparams.max-split-candidates\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.MAX_SPLIT_CANDIDATES);\n    overlayConfig.put(\"oryx.rdf.hyperparams.impurity\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.IMPURITY);\n    overlayConfig.put(\"oryx.input-schema.num-features\", 5);\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[\\\"4\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.id-features\", \"[\\\"0\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.target-feature\", \"\\\"4\\\"\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> updates = startServerProduceConsumeTopics(config, new com.cloudera.oryx.app.mllib.rdf.RandomCategoricalRDFDataGenerator(3), com.cloudera.oryx.app.mllib.rdf.RDFUpdateIT.DATA_TO_WRITE, com.cloudera.oryx.app.mllib.rdf.RDFUpdateIT.WRITE_INTERVAL_MSEC);\n    java.util.List<java.nio.file.Path> modelInstanceDirs = com.cloudera.oryx.common.io.IOUtils.listFiles(modelDir, \"*\");\n    int generations = modelInstanceDirs.size();\n    com.cloudera.oryx.lambda.AbstractBatchIT.checkIntervals(generations, com.cloudera.oryx.app.mllib.rdf.RDFUpdateIT.DATA_TO_WRITE, com.cloudera.oryx.app.mllib.rdf.RDFUpdateIT.WRITE_INTERVAL_MSEC, com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.GEN_INTERVAL_SEC);\n    for (java.nio.file.Path modelInstanceDir : modelInstanceDirs) {\n        java.nio.file.Path modelFile = modelInstanceDir.resolve(com.cloudera.oryx.ml.MLUpdate.MODEL_FILE_NAME);\n        org.junit.Assert.assertTrue(\"Model file should exist: \" + modelFile, java.nio.file.Files.exists(modelFile));\n        org.junit.Assert.assertTrue(\"Model file should not be empty: \" + modelFile, java.nio.file.Files.size(modelFile) > 0);\n        com.cloudera.oryx.common.pmml.PMMLUtils.read(modelFile);\n    }\n    com.cloudera.oryx.app.schema.InputSchema schema = new com.cloudera.oryx.app.schema.InputSchema(config);\n    for (com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> km : updates) {\n        java.lang.String type = km.getFirst();\n        java.lang.String value = km.getSecond();\n        org.junit.Assert.assertEquals(\"MODEL\", type);\n        org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.fromString(value);\n        com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.checkHeader(pmml.getHeader());\n        org.junit.Assert.assertEquals(3, pmml.getExtensions().size());\n        java.util.Map<java.lang.String, java.lang.Object> expected = new java.util.HashMap<>();\n        expected.put(\"maxDepth\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.MAX_DEPTH);\n        expected.put(\"maxSplitCandidates\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.MAX_SPLIT_CANDIDATES);\n        expected.put(\"impurity\", com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.IMPURITY);\n        com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.checkExtensions(pmml, expected);\n        com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.checkDataDictionary(schema, pmml.getDataDictionary());\n        org.dmg.pmml.Model rootModel = pmml.getModels().get(0);\n        if (rootModel instanceof org.dmg.pmml.TreeModel) {\n            org.junit.Assert.assertEquals(com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.NUM_TREES, 1);\n            org.dmg.pmml.TreeModel treeModel = ((org.dmg.pmml.TreeModel) (rootModel));\n            com.cloudera.oryx.app.mllib.rdf.RDFUpdateIT.checkTreeModel(treeModel);\n        } else\n            if (rootModel instanceof org.dmg.pmml.MiningModel) {\n                org.dmg.pmml.MiningModel miningModel = ((org.dmg.pmml.MiningModel) (rootModel));\n                org.dmg.pmml.Segmentation segmentation = miningModel.getSegmentation();\n                if (schema.isClassification()) {\n                    org.junit.Assert.assertEquals(MultipleModelMethodType.WEIGHTED_MAJORITY_VOTE, segmentation.getMultipleModelMethod());\n                } else {\n                    org.junit.Assert.assertEquals(MultipleModelMethodType.WEIGHTED_AVERAGE, segmentation.getMultipleModelMethod());\n                }\n                java.util.List<org.dmg.pmml.Segment> segments = segmentation.getSegments();\n                org.junit.Assert.assertEquals(com.cloudera.oryx.app.mllib.rdf.AbstractRDFIT.NUM_TREES, segments.size());\n                for (int i = 0; i < segments.size(); i++) {\n                    org.dmg.pmml.Segment segment = segments.get(i);\n                    org.junit.Assert.assertEquals(java.lang.Integer.toString(i), segment.getId());\n                    org.junit.Assert.assertTrue(segment.getPredicate() instanceof org.dmg.pmml.True);\n                    org.junit.Assert.assertEquals(1.0, segment.getWeight());\n                    org.junit.Assert.assertTrue(segment.getModel() instanceof org.dmg.pmml.TreeModel);\n                    com.cloudera.oryx.app.mllib.rdf.RDFUpdateIT.checkTreeModel(((org.dmg.pmml.TreeModel) (segment.getModel())));\n                }\n            } else {\n                org.junit.Assert.fail(\"Wrong model type: \" + rootModel.getClass());\n                return;\n            }\n\n        if (schema.isClassification()) {\n            org.junit.Assert.assertEquals(MiningFunctionType.CLASSIFICATION, rootModel.getFunctionName());\n        } else {\n            org.junit.Assert.assertEquals(MiningFunctionType.REGRESSION, rootModel.getFunctionName());\n        }\n        com.cloudera.oryx.app.mllib.AbstractAppMLlibIT.checkMiningSchema(schema, rootModel.getMiningSchema());\n    }\n}",
        "ClassName": "RDFUpdateIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 7,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 10,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRDF",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 15,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 81,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(n >= 1);\n    this.n = n;\n}",
                "ClassName": "RandomCategoricalRDFDataGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.List<java.lang.String> givenFeatureNames = config.getStringList(\"oryx.input-schema.feature-names\");\n    if (givenFeatureNames.isEmpty()) {\n        int numFeatures = config.getInt(\"oryx.input-schema.num-features\");\n        com.google.common.base.Preconditions.checkArgument(numFeatures > 0, \"Neither feature-names nor num-features is set\");\n        java.util.List<java.lang.String> generatedFeatureNames = new java.util.ArrayList<>(numFeatures);\n        for (int i = 0; i < numFeatures; i++) {\n            generatedFeatureNames.add(java.lang.Integer.toString(i));\n        }\n        featureNames = generatedFeatureNames;\n    } else {\n        featureNames = com.google.common.collect.ImmutableList.copyOf(givenFeatureNames);\n    }\n    int numFeatures = featureNames.size();\n    com.google.common.base.Preconditions.checkArgument(new java.util.HashSet<>(featureNames).size() == numFeatures, \"Feature names must be unique: %s\", featureNames);\n    idFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.id-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(idFeatures));\n    java.util.Collection<java.lang.String> ignoredFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.ignored-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(ignoredFeatures));\n    java.util.Collection<java.lang.String> activeFeatureSet = new java.util.HashSet<>(featureNames);\n    activeFeatureSet.removeAll(idFeatures);\n    activeFeatureSet.removeAll(ignoredFeatures);\n    activeFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    java.util.List<java.lang.String> givenNumericFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.numeric-features\");\n    java.util.List<java.lang.String> givenCategoricalFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.categorical-features\");\n    if (givenNumericFeatures == null) {\n        com.google.common.base.Preconditions.checkNotNull(givenCategoricalFeatures, \"Neither numeric-features nor categorical-features was set\");\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(givenCategoricalFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(categoricalFeatures));\n        activeFeatureSet.removeAll(categoricalFeatures);\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    } else {\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(givenNumericFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(numericFeatures));\n        activeFeatureSet.removeAll(numericFeatures);\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    }\n    targetFeature = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalString(config, \"oryx.input-schema.target-feature\");\n    if (targetFeature != null) {\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.contains(targetFeature), \"Target feature is not known, an ID, or ignored: %s\", targetFeature);\n    }\n    targetFeatureIndex = (targetFeature == null) ? -1 : featureNames.indexOf(targetFeature);\n    allToPredictorMap = com.google.common.collect.HashBiMap.create();\n    for (int featureIndex = 0, predictorIndex = 0; featureIndex < featureNames.size(); featureIndex++) {\n        if (isActive(featureIndex) && (!isTarget(featureIndex))) {\n            allToPredictorMap.put(featureIndex, predictorIndex);\n            predictorIndex++;\n        }\n    }\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 50,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (tempDir == null) {\n        tempDir = java.nio.file.Files.createTempDirectory(\"OryxTest\").toAbsolutePath();\n        com.cloudera.oryx.common.OryxTest.log.info(\"Test temp dir is {}\", tempDir);\n        tempDir.toFile().deleteOnExit();\n    }\n    return tempDir;\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getTempDir",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 2,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.nio.file.Path finalPath = (java.nio.file.Files.exists(path, java.nio.file.LinkOption.NOFOLLOW_LINKS)) ? path.toRealPath(java.nio.file.LinkOption.NOFOLLOW_LINKS) : path;\n    overlay.put(key, (\"\\\"\" + finalPath.toUri()) + \"\\\"\");\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "set",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    java.lang.String topicBroker = (\"\\\"localhost:\" + localKafkaBrokerPort) + '\"';\n    java.lang.String topicLockMaster = (\"\\\"localhost:\" + localZKPort) + '\"';\n    overlay.put(\"oryx.input-topic.broker\", topicBroker);\n    overlay.put(\"oryx.input-topic.lock.master\", topicLockMaster);\n    overlay.put(\"oryx.update-topic.broker\", topicBroker);\n    overlay.put(\"oryx.update-topic.lock.master\", topicLockMaster);\n    java.lang.String masterLocalAllCores = \"\\\"local[*]\\\"\";\n    overlay.put(\"oryx.batch.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.speed.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.batch.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.speed.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int zkPort = getZKPort();\n    com.cloudera.oryx.kafka.util.ProduceData produce = new com.cloudera.oryx.kafka.util.ProduceData(datumGenerator, zkPort, getKafkaBrokerPort(), com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC, howMany, intervalMsec);\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> keyMessages;\n    try (com.cloudera.oryx.common.collection.CloseableIterator<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = new com.cloudera.oryx.kafka.util.ConsumeData(com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, zkPort).iterator();com.cloudera.oryx.lambda.BatchLayer<?, ?, ?> batchLayer = new com.cloudera.oryx.lambda.BatchLayer(config)) {\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Starting batch layer\");\n        batchLayer.start();\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Starting consumer thread\");\n        com.cloudera.oryx.kafka.util.ConsumeTopicRunnable consumeInput = new com.cloudera.oryx.kafka.util.ConsumeTopicRunnable(data);\n        new java.lang.Thread(consumeInput).start();\n        java.lang.Thread.sleep(3000);\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Producing data\");\n        produce.start();\n        long genIntervalSec = config.getInt(\"oryx.batch.streaming.generation-interval-sec\");\n        java.lang.Thread.sleep(genIntervalSec * 1000);\n        keyMessages = consumeInput.getKeyMessages();\n    } finally {\n        produce.deleteTopic();\n    }\n    return keyMessages;\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServerProduceConsumeTopics",
                "NumberOfAsynchronousWaits": 2,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 21,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 7
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(java.nio.file.Files.isDirectory(dir), \"%s is not a directory\", dir);\n    java.util.List<java.lang.String> globLevels;\n    if ((glob == null) || glob.isEmpty()) {\n        globLevels = java.util.Collections.singletonList(\"*\");\n    } else {\n        globLevels = java.util.Arrays.asList(glob.split(\"/\"));\n    }\n    com.google.common.base.Preconditions.checkState(!globLevels.isEmpty());\n    java.util.List<java.nio.file.Path> paths = new java.util.ArrayList<>();\n    paths.add(dir);\n    for (java.lang.String globLevel : globLevels) {\n        java.util.List<java.nio.file.Path> newPaths = new java.util.ArrayList<>();\n        for (java.nio.file.Path existingPath : paths) {\n            if (java.nio.file.Files.isDirectory(existingPath)) {\n                try (java.nio.file.DirectoryStream<java.nio.file.Path> stream = java.nio.file.Files.newDirectoryStream(existingPath, globLevel)) {\n                    for (java.nio.file.Path path : stream) {\n                        if (!path.getFileName().toString().startsWith(\".\")) {\n                            newPaths.add(path);\n                        }\n                    }\n                }\n            }\n        }\n        paths = newPaths;\n    }\n    java.util.Collections.sort(paths);\n    return paths;\n}",
                "ClassName": "IOUtils",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "listFiles",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 29,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int minExpectedIntervals = (dataToWrite * writeIntervalMsec) / (1000 * genIntervalSec);\n    org.junit.Assert.assertTrue(((\"Expected \" + minExpectedIntervals) + \" intervals (or up to +4 more) but got \") + numIntervals, (numIntervals >= minExpectedIntervals) && (numIntervals <= (minExpectedIntervals + 4)));\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkIntervals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (java.io.InputStream in = com.cloudera.oryx.common.io.IOUtils.readMaybeCompressed(path)) {\n        return com.cloudera.oryx.common.pmml.PMMLUtils.read(in);\n    }\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "read",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return first;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return org.jpmml.model.JAXBUtil.unmarshalPMML(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(pmmlString)));\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "fromString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    for (java.util.Map.Entry<java.lang.String, ?> e : expected.entrySet()) {\n        java.lang.String key = e.getKey();\n        org.junit.Assert.assertEquals((\"Value for key \" + key) + \" did not match\", e.getValue().toString(), com.cloudera.oryx.app.pmml.AppPMMLUtils.getExtensionValue(pmml, key));\n    }\n}",
                "ClassName": "AbstractAppMLlibIT",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 4,
                "MethodName": "checkExtensions",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(TreeModel.SplitCharacteristic.BINARY_SPLIT, treeModel.getSplitCharacteristic());\n    org.junit.Assert.assertEquals(MissingValueStrategyType.DEFAULT_CHILD, treeModel.getMissingValueStrategy());\n    com.cloudera.oryx.app.mllib.rdf.RDFUpdateIT.checkNode(treeModel.getNode());\n}",
                "ClassName": "RDFUpdateIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 6,
                "MethodName": "checkTreeModel",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return isCategorical(getTargetFeature());\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isClassification",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 15,
        "TotalNumberOfAsynchronousWaits": 2,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 2,
        "TotalNumberOfLines": 184,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 7
    },
    {
        "Body": "{\n    testHowMany(\"/recommend/U5\", -1, 0);\n}",
        "ClassName": "RecommendTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBadHowMany",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testHowMany",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.predict.NumericPrediction prediction = new com.cloudera.oryx.app.rdf.predict.NumericPrediction(1.5, 1);\n    prediction.update(3.5, 3);\n    com.cloudera.oryx.common.OryxTest.assertEquals(3.0, prediction.getPrediction());\n}",
        "ClassName": "NumericPredictionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testUpdate2",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(initialCount);\n    this.prediction = prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int count = getCount();\n    int newTotalCount = count + newCount;\n    double newToTotal = ((double) (newCount)) / newTotalCount;\n    setCount(newTotalCount);\n    prediction += newToTotal * (newPrediction - prediction);\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "update",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getPrediction",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 17,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    float[] a = new float[]{ 1.0E20F };\n    com.cloudera.oryx.common.OryxTest.assertEquals(((double) (1.0E20F)) * ((double) (1.0E20F)), com.cloudera.oryx.common.math.VectorMath.dot(a, a));\n}",
        "ClassName": "VectorMathTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBig",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int length = x.length;\n    double dot = 0.0;\n    for (int i = 0; i < length; i++) {\n        dot += ((double) (x[i])) * ((double) (y[i]));\n    }\n    return dot;\n}",
                "ClassName": "VectorMath",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "dot",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 11,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTestContinuous(com.cloudera.oryx.ml.param.HyperParams.range(3.0, 5.0), 1, 4.0);\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTestContinuous(com.cloudera.oryx.ml.param.HyperParams.range(3.0, 5.0), 2, 3.0, 5.0);\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTestContinuous(com.cloudera.oryx.ml.param.HyperParams.range(3.0, 5.0), 4, 3.0, 3.6666666666666665, 4.333333333333333, 5.0);\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTestContinuous(com.cloudera.oryx.ml.param.HyperParams.range(0.0, 1.0), 3, 0.0, 0.5, 1.0);\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTestContinuous(com.cloudera.oryx.ml.param.HyperParams.range(-1.0, 1.0), 5, -1.0, -0.5, 0.0, 0.5, 1.0);\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTestContinuous(com.cloudera.oryx.ml.param.HyperParams.range(-1.0, 1.0), 4, -1.0, -0.3333333333333333, 0.3333333333333333, 1.0);\n}",
        "ClassName": "HyperParamsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testContinuousRange",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<java.lang.Double> values = range.getTrialValues(howMany);\n    double[] valueArray = new double[values.size()];\n    for (int i = 0; i < valueArray.length; i++) {\n        valueArray[i] = values.get(i);\n    }\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(expected, valueArray);\n}",
                "ClassName": "HyperParamsTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 2,
                "MethodName": "doTestContinuous",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new com.cloudera.oryx.ml.param.ContinuousRange(min, max);\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "range",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 11,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertTrue(com.cloudera.oryx.common.lang.ClassUtils.loadInstanceOf(java.util.HashSet.class.getName(), java.util.Set.class) instanceof java.util.HashSet);\n}",
        "ClassName": "ClassUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testLoadInstanceOf2",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return com.cloudera.oryx.common.lang.ClassUtils.loadInstanceOf(implClassName, superClass, com.cloudera.oryx.common.lang.ClassUtils.NO_TYPES, com.cloudera.oryx.common.lang.ClassUtils.NO_ARGS);\n}",
                "ClassName": "ClassUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "loadInstanceOf",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.Double item = target(\"/estimateForAnonymous/I3/foo/I4=1.0/I5=2.0\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(java.lang.Double.class);\n    org.junit.Assert.assertEquals(-0.05814245143707833, item, com.cloudera.oryx.lambda.serving.AbstractServingTest.DOUBLE_EPSILON);\n}",
        "ClassName": "EstimateForAnonymousTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testEstimateForAnonymousWithUnknown",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.common.OryxTest.assertEquals(1.0, com.cloudera.oryx.app.common.fn.MLFunctions.SUM_WITH_NAN.call(java.util.Arrays.asList(1.0)).doubleValue());\n    com.cloudera.oryx.common.OryxTest.assertEquals(6.0, com.cloudera.oryx.app.common.fn.MLFunctions.SUM_WITH_NAN.call(java.util.Arrays.asList(1.0, 2.0, 3.0)).doubleValue());\n    com.cloudera.oryx.common.OryxTest.assertEquals(3.0, com.cloudera.oryx.app.common.fn.MLFunctions.SUM_WITH_NAN.call(java.util.Arrays.asList(1.0, java.lang.Double.NaN, 3.0)).doubleValue());\n    org.junit.Assert.assertTrue(java.lang.Double.isNaN(com.cloudera.oryx.app.common.fn.MLFunctions.SUM_WITH_NAN.call(java.util.Arrays.asList(1.0, 2.0, java.lang.Double.NaN))));\n    org.junit.Assert.assertTrue(java.lang.Double.isNaN(com.cloudera.oryx.app.common.fn.MLFunctions.SUM_WITH_NAN.call(java.util.Arrays.asList(java.lang.Double.NaN))));\n}",
        "ClassName": "MLFunctionsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testSumWithNaN",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.concurrent.locks.ReentrantLock lock = new java.util.concurrent.locks.ReentrantLock();\n    org.junit.Assert.assertFalse(lock.isHeldByCurrentThread());\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(lock)) {\n        org.junit.Assert.assertTrue(lock.isHeldByCurrentThread());\n    }\n    org.junit.Assert.assertFalse(lock.isHeldByCurrentThread());\n}",
        "ClassName": "AutoLockTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 5,
        "MethodName": "testAutoClose",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 5,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 11,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this.lock = lock;\n    lock.lock();\n}",
                "ClassName": "AutoLock",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 5
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 5
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.decision.CategoricalDecision decision = new com.cloudera.oryx.app.rdf.decision.CategoricalDecision(0, new java.util.BitSet(1), false);\n    org.junit.Assert.assertEquals(0, decision.getFeatureNumber());\n    org.junit.Assert.assertEquals(new java.util.BitSet(1), decision.getActiveCategoryEncodings());\n    org.junit.Assert.assertFalse(decision.getDefaultDecision());\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.example.FeatureType.CATEGORICAL, decision.getType());\n}",
        "ClassName": "CategoricalDecisionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDecisionBasics",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(featureNumber);\n    this.activeCategoryEncodings = activeCategoryEncodings;\n    this.defaultDecision = defaultDecision;\n}",
                "ClassName": "CategoricalDecision",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return featureNumber;\n}",
                "ClassName": "Decision",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFeatureNumber",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return activeCategoryEncodings;\n}",
                "ClassName": "CategoricalDecision",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getActiveCategoryEncodings",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return defaultDecision;\n}",
                "ClassName": "CategoricalDecision",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getDefaultDecision",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.rdf.example.FeatureType.CATEGORICAL;\n}",
                "ClassName": "CategoricalDecision",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getType",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 17,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.als.AbstractRescorerProvider.loadRescorerProviders(\"com.cloudera.oryx.app.als.AbstractRescorerProviderTest\");\n}",
        "ClassName": "AbstractRescorerProviderTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 3,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 14,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testWrongClass",
        "MinimumCyclomaticComplexity": 3,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 14,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    if ((classNamesString == null) || classNamesString.isEmpty()) {\n        return null;\n    }\n    java.lang.String[] classNames = classNamesString.split(\",\");\n    if (classNames.length == 1) {\n        return com.cloudera.oryx.app.als.AbstractRescorerProvider.loadInstanceOf(classNames[0]);\n    }\n    java.util.List<com.cloudera.oryx.app.als.RescorerProvider> providers = new java.util.ArrayList<>(classNames.length);\n    for (java.lang.String className : classNames) {\n        providers.add(com.cloudera.oryx.app.als.AbstractRescorerProvider.loadInstanceOf(className));\n    }\n    return new com.cloudera.oryx.app.als.MultiRescorerProvider(providers);\n}",
                "ClassName": "AbstractRescorerProvider",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "loadRescorerProviders",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 14,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 14,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.nio.file.Path testDir = createTestDirs();\n    com.cloudera.oryx.common.io.IOUtils.deleteRecursively(testDir);\n    org.junit.Assert.assertFalse(java.nio.file.Files.exists(testDir));\n    org.junit.Assert.assertFalse(java.nio.file.Files.exists(testDir.resolve(\"subFile1\")));\n}",
        "ClassName": "IOUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 17,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDeleteRecursively",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 17,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(tempDir));\n    java.nio.file.Path subFile1 = tempDir.resolve(\"subFile1\");\n    java.nio.file.Files.write(subFile1, com.cloudera.oryx.common.io.IOUtilsTest.SOME_BYTES);\n    java.nio.file.Path hidden = tempDir.resolve(\".hidden\");\n    java.nio.file.Files.write(hidden, com.cloudera.oryx.common.io.IOUtilsTest.NO_BYTES);\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(subFile1));\n    java.nio.file.Path subDir1 = tempDir.resolve(\"subDir1\");\n    java.nio.file.Files.createDirectory(subDir1);\n    java.nio.file.Path subFile2 = subDir1.resolve(\"subFile2\");\n    java.nio.file.Files.write(subFile2, com.cloudera.oryx.common.io.IOUtilsTest.SOME_BYTES);\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(subFile2));\n    java.nio.file.Path subDir2 = subDir1.resolve(\"subDir2\");\n    java.nio.file.Files.createDirectory(subDir2);\n    return tempDir;\n}",
                "ClassName": "IOUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "createTestDirs",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 17,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if ((rootDir == null) || (!java.nio.file.Files.exists(rootDir))) {\n        return;\n    }\n    java.nio.file.Files.walkFileTree(rootDir, new java.nio.file.SimpleFileVisitor<java.nio.file.Path>() {\n        @java.lang.Override\n        public java.nio.file.FileVisitResult visitFile(java.nio.file.Path file, java.nio.file.attribute.BasicFileAttributes attrs) throws java.io.IOException {\n            java.nio.file.Files.delete(file);\n            return java.nio.file.FileVisitResult.CONTINUE;\n        }\n\n        @java.lang.Override\n        public java.nio.file.FileVisitResult postVisitDirectory(java.nio.file.Path dir, java.io.IOException exc) throws java.io.IOException {\n            java.nio.file.Files.delete(dir);\n            return java.nio.file.FileVisitResult.CONTINUE;\n        }\n    });\n}",
                "ClassName": "IOUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "deleteRecursively",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 18,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 35,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String response = target(\"/item/allIDs\").request().get(java.lang.String.class);\n    org.junit.Assert.assertEquals(9, response.split(\"\\n\").length);\n}",
        "ClassName": "AllItemIDsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testAllItemIDsCSV",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    int freePort = com.cloudera.oryx.common.io.IOUtils.chooseFreePort();\n    org.junit.Assert.assertTrue((freePort >= 1024) && (freePort < 65536));\n    try (java.net.ServerSocket socket = new java.net.ServerSocket(freePort, 0)) {\n        org.junit.Assert.assertEquals(freePort, socket.getLocalPort());\n    }\n}",
        "ClassName": "IOUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testChooseFreePort",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 5,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    try (java.net.ServerSocket socket = new java.net.ServerSocket(0, 0)) {\n        return socket.getLocalPort();\n    }\n}",
                "ClassName": "IOUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "chooseFreePort",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 5,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.common.math.DoubleWeightedMean mean = new com.cloudera.oryx.common.math.DoubleWeightedMean();\n    mean.increment(0.2, 4.0);\n    mean.increment(-0.1, 2.0);\n    com.cloudera.oryx.common.math.DoubleWeightedMean copy = mean.copy();\n    org.junit.Assert.assertEquals(copy, mean);\n    org.junit.Assert.assertEquals(copy.hashCode(), mean.hashCode());\n    com.cloudera.oryx.common.math.DoubleWeightedMean zero = new com.cloudera.oryx.common.math.DoubleWeightedMean();\n    mean.clear();\n    org.junit.Assert.assertEquals(zero, mean);\n}",
        "ClassName": "DoubleWeightedMeanTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testCopyEquals",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 11,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this(0, 0.0, java.lang.Double.NaN);\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(weight >= 0.0);\n    if (count == 0) {\n        count = 1;\n        mean = datum;\n        totalWeight = weight;\n    } else {\n        count++;\n        totalWeight += weight;\n        mean += (weight / totalWeight) * (datum - mean);\n    }\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "increment",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new com.cloudera.oryx.common.math.DoubleWeightedMean(count, totalWeight, mean);\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "copy",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return (com.google.common.primitives.Longs.hashCode(count) ^ com.google.common.primitives.Doubles.hashCode(totalWeight)) ^ com.google.common.primitives.Doubles.hashCode(mean);\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "hashCode",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    count = 0;\n    totalWeight = 0.0;\n    mean = java.lang.Double.NaN;\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "clear",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 26,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testOffset(\"/similarity/I0/I2/I6\", 3, -1, 0);\n}",
        "ClassName": "SimilarityTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBadOffset",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).queryParam(\"offset\", java.lang.Integer.toString(offset)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testOffset",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    startServer(buildUserPasswordConfig());\n    com.google.common.io.Resources.toString(new java.net.URL((\"http://localhost:\" + getHTTPPort()) + \"/helloWorld\"), java.nio.charset.StandardCharsets.UTF_8);\n}",
        "ClassName": "SecureAPIConfigIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNoUserPassword",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    servingLayer = new com.cloudera.oryx.lambda.serving.ServingLayer(config);\n    com.cloudera.oryx.lambda.serving.AbstractServingIT.log.info(\"Starting serving layer\");\n    servingLayer.start();\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServer",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    overlay.put(\"oryx.serving.api.user-name\", \"oryx\");\n    overlay.put(\"oryx.serving.api.password\", \"pass\");\n    overlay.put(\"oryx.serving.application-resources\", com.cloudera.oryx.lambda.serving.HelloWorld.class.getPackage().getName());\n    overlay.put(\"oryx.serving.no-init-topics\", true);\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, getConfig());\n}",
                "ClassName": "SecureAPIConfigIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 4,
                "MethodName": "buildUserPasswordConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return httpPort;\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getHTTPPort",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 16,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    target(\"/estimateForAnonymous\").request().get(java.lang.String.class);\n}",
        "ClassName": "EstimateForAnonymousTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBadRequest",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.Integer, java.lang.String>> pairs = java.util.Arrays.asList(new com.cloudera.oryx.common.collection.Pair<>(3, \"foo\"), new com.cloudera.oryx.common.collection.Pair<>(4, \"bing\"), new com.cloudera.oryx.common.collection.Pair<>(1, \"baz\"), new com.cloudera.oryx.common.collection.Pair<>(2, \"whizz\"));\n    java.util.Collections.sort(pairs, com.cloudera.oryx.common.collection.PairComparators.<java.lang.String>bySecond());\n    org.junit.Assert.assertEquals(1, pairs.get(0).getFirst().intValue());\n    org.junit.Assert.assertEquals(4, pairs.get(1).getFirst().intValue());\n    org.junit.Assert.assertEquals(\"baz\", pairs.get(0).getSecond());\n    org.junit.Assert.assertEquals(\"bing\", pairs.get(1).getSecond());\n}",
        "ClassName": "PairComparatorsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBySecond",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this.first = first;\n    this.second = second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new java.util.Comparator<com.cloudera.oryx.common.collection.Pair<?, V>>() {\n        @java.lang.Override\n        public int compare(com.cloudera.oryx.common.collection.Pair<?, V> p1, com.cloudera.oryx.common.collection.Pair<?, V> p2) {\n            return p1.getSecond().compareTo(p2.getSecond());\n        }\n    };\n}",
                "ClassName": "PairComparators",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "bySecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return first;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 18,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.apache.spark.api.java.JavaRDD<org.apache.spark.mllib.linalg.Vector> evalData = com.cloudera.oryx.app.mllib.kmeans.SilhouetteCoefficient.fetchSampleData(com.cloudera.oryx.app.mllib.kmeans.KMeansEvalIT.getRddOfVectors());\n    org.junit.Assert.assertEquals(6, evalData.count());\n}",
        "ClassName": "KMeansEvalIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testFetchSampleEvalData",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.apache.spark.api.java.JavaRDD<org.apache.spark.mllib.linalg.Vector> data = evalData;\n    if (evalData.count() > com.cloudera.oryx.app.mllib.kmeans.SilhouetteCoefficient.MAX_SAMPLE_SIZE) {\n        data = evalData.sample(false, ((double) (com.cloudera.oryx.app.mllib.kmeans.SilhouetteCoefficient.MAX_SAMPLE_SIZE)) / evalData.count());\n    }\n    return data;\n}",
                "ClassName": "SilhouetteCoefficient",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "fetchSampleData",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.List<double[]> points = java.util.Arrays.asList(new double[][]{ new double[]{ 1.0, 0.0 }, new double[]{ 2.0, -2.0 }, new double[]{ 2.0, 0.0 }, new double[]{ -2.0, 0.0 }, new double[]{ -0.5, -1.0 }, new double[]{ -0.5, 1.0 } });\n    return com.cloudera.oryx.lambda.AbstractSparkIT.getJavaSparkContext().parallelize(points).map(new com.cloudera.oryx.app.mllib.kmeans.KMeansEvalIT.ToVectorFn());\n}",
                "ClassName": "KMeansEvalIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getRddOfVectors",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 11,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.app.rdf.RDFPMMLUtilsTest.buildDummyClassificationModel(3);\n    com.cloudera.oryx.common.collection.Pair<com.cloudera.oryx.app.rdf.tree.DecisionForest, com.cloudera.oryx.app.schema.CategoricalValueEncodings> forestAndEncodings = com.cloudera.oryx.app.rdf.RDFPMMLUtils.read(pmml);\n    com.cloudera.oryx.app.rdf.tree.DecisionForest forest = forestAndEncodings.getFirst();\n    org.junit.Assert.assertEquals(3, forest.getTrees().length);\n}",
        "ClassName": "RDFPMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 28,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testReadClassificationForest",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.buildSkeletonPMML();\n    java.util.List<org.dmg.pmml.DataField> dataFields = new java.util.ArrayList<>();\n    org.dmg.pmml.DataField predictor = new org.dmg.pmml.DataField(org.dmg.pmml.FieldName.create(\"color\"), org.dmg.pmml.OpType.CATEGORICAL, org.dmg.pmml.DataType.STRING);\n    predictor.getValues().add(new org.dmg.pmml.Value(\"yellow\"));\n    predictor.getValues().add(new org.dmg.pmml.Value(\"red\"));\n    dataFields.add(predictor);\n    org.dmg.pmml.DataField target = new org.dmg.pmml.DataField(org.dmg.pmml.FieldName.create(\"fruit\"), org.dmg.pmml.OpType.CATEGORICAL, org.dmg.pmml.DataType.STRING);\n    target.getValues().add(new org.dmg.pmml.Value(\"banana\"));\n    target.getValues().add(new org.dmg.pmml.Value(\"apple\"));\n    dataFields.add(target);\n    org.dmg.pmml.DataDictionary dataDictionary = new org.dmg.pmml.DataDictionary(dataFields);\n    dataDictionary.setNumberOfFields(dataFields.size());\n    pmml.setDataDictionary(dataDictionary);\n    java.util.List<org.dmg.pmml.MiningField> miningFields = new java.util.ArrayList<>();\n    org.dmg.pmml.MiningField predictorMF = new org.dmg.pmml.MiningField(org.dmg.pmml.FieldName.create(\"color\"));\n    predictorMF.setOpType(OpType.CATEGORICAL);\n    predictorMF.setUsageType(FieldUsageType.ACTIVE);\n    predictorMF.setImportance(0.5);\n    miningFields.add(predictorMF);\n    org.dmg.pmml.MiningField targetMF = new org.dmg.pmml.MiningField(org.dmg.pmml.FieldName.create(\"fruit\"));\n    targetMF.setOpType(OpType.CATEGORICAL);\n    targetMF.setUsageType(FieldUsageType.PREDICTED);\n    miningFields.add(targetMF);\n    org.dmg.pmml.MiningSchema miningSchema = new org.dmg.pmml.MiningSchema(miningFields);\n    org.dmg.pmml.Node rootNode = new org.dmg.pmml.Node();\n    rootNode.setId(\"r\");\n    double dummyCount = 2.0;\n    rootNode.setRecordCount(dummyCount);\n    rootNode.setPredicate(new org.dmg.pmml.True());\n    double halfCount = dummyCount / 2;\n    org.dmg.pmml.Node left = new org.dmg.pmml.Node();\n    left.setId(\"r-\");\n    left.setRecordCount(halfCount);\n    left.setPredicate(new org.dmg.pmml.True());\n    left.getScoreDistributions().add(new org.dmg.pmml.ScoreDistribution(\"apple\", halfCount));\n    org.dmg.pmml.Node right = new org.dmg.pmml.Node();\n    right.setId(\"r+\");\n    right.setRecordCount(halfCount);\n    right.setPredicate(new org.dmg.pmml.SimpleSetPredicate(org.dmg.pmml.FieldName.create(\"color\"), SimpleSetPredicate.BooleanOperator.IS_NOT_IN, new org.dmg.pmml.Array(Array.Type.STRING, \"red\")));\n    right.getScoreDistributions().add(new org.dmg.pmml.ScoreDistribution(\"banana\", halfCount));\n    rootNode.getNodes().add(right);\n    rootNode.getNodes().add(left);\n    org.dmg.pmml.TreeModel treeModel = new org.dmg.pmml.TreeModel(org.dmg.pmml.MiningFunctionType.CLASSIFICATION, miningSchema, rootNode);\n    treeModel.setSplitCharacteristic(TreeModel.SplitCharacteristic.BINARY_SPLIT);\n    treeModel.setMissingValueStrategy(MissingValueStrategyType.DEFAULT_CHILD);\n    if (numTrees > 1) {\n        org.dmg.pmml.MiningModel miningModel = new org.dmg.pmml.MiningModel(org.dmg.pmml.MiningFunctionType.CLASSIFICATION, miningSchema);\n        java.util.List<org.dmg.pmml.Segment> segments = new java.util.ArrayList<>();\n        for (int i = 0; i < numTrees; i++) {\n            org.dmg.pmml.Segment segment = new org.dmg.pmml.Segment();\n            segment.setId(java.lang.Integer.toString(i));\n            segment.setPredicate(new org.dmg.pmml.True());\n            segment.setModel(treeModel);\n            segment.setWeight(1.0);\n            segments.add(segment);\n        }\n        miningModel.setSegmentation(new org.dmg.pmml.Segmentation(org.dmg.pmml.MultipleModelMethodType.WEIGHTED_MAJORITY_VOTE, segments));\n        pmml.getModels().add(miningModel);\n    } else {\n        pmml.getModels().add(treeModel);\n    }\n    return pmml;\n}",
                "ClassName": "RDFPMMLUtilsTest",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 2,
                "MethodName": "buildDummyClassificationModel",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 64,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.dmg.pmml.DataDictionary dictionary = pmml.getDataDictionary();\n    java.util.List<java.lang.String> featureNames = com.cloudera.oryx.app.pmml.AppPMMLUtils.getFeatureNames(dictionary);\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings categoricalValueEncodings = com.cloudera.oryx.app.pmml.AppPMMLUtils.buildCategoricalValueEncodings(dictionary);\n    java.util.List<org.dmg.pmml.Model> models = pmml.getModels();\n    org.dmg.pmml.Model model = models.get(0);\n    org.dmg.pmml.MiningSchema miningSchema = model.getMiningSchema();\n    int targetIndex = com.cloudera.oryx.app.pmml.AppPMMLUtils.findTargetIndex(miningSchema);\n    com.cloudera.oryx.app.rdf.tree.DecisionTree[] trees;\n    double[] weights;\n    if (model instanceof org.dmg.pmml.MiningModel) {\n        org.dmg.pmml.MiningModel miningModel = ((org.dmg.pmml.MiningModel) (model));\n        org.dmg.pmml.Segmentation segmentation = miningModel.getSegmentation();\n        com.google.common.base.Preconditions.checkArgument((segmentation.getMultipleModelMethod() == org.dmg.pmml.MultipleModelMethodType.WEIGHTED_AVERAGE) || (segmentation.getMultipleModelMethod() == org.dmg.pmml.MultipleModelMethodType.WEIGHTED_MAJORITY_VOTE));\n        java.util.List<org.dmg.pmml.Segment> segments = segmentation.getSegments();\n        com.google.common.base.Preconditions.checkArgument(!segments.isEmpty());\n        trees = new com.cloudera.oryx.app.rdf.tree.DecisionTree[segments.size()];\n        weights = new double[trees.length];\n        for (int i = 0; i < trees.length; i++) {\n            org.dmg.pmml.Segment segment = segments.get(i);\n            com.google.common.base.Preconditions.checkArgument(segment.getPredicate() instanceof org.dmg.pmml.True);\n            weights[i] = segment.getWeight();\n            org.dmg.pmml.TreeModel treeModel = ((org.dmg.pmml.TreeModel) (segment.getModel()));\n            com.cloudera.oryx.app.rdf.tree.TreeNode root = com.cloudera.oryx.app.rdf.RDFPMMLUtils.translateFromPMML(treeModel.getNode(), categoricalValueEncodings, featureNames, targetIndex);\n            trees[i] = new com.cloudera.oryx.app.rdf.tree.DecisionTree(root);\n        }\n    } else {\n        com.cloudera.oryx.app.rdf.tree.TreeNode root = com.cloudera.oryx.app.rdf.RDFPMMLUtils.translateFromPMML(((org.dmg.pmml.TreeModel) (model)).getNode(), categoricalValueEncodings, featureNames, targetIndex);\n        trees = new com.cloudera.oryx.app.rdf.tree.DecisionTree[]{ new com.cloudera.oryx.app.rdf.tree.DecisionTree(root) };\n        weights = new double[]{ 1.0 };\n    }\n    java.util.List<org.dmg.pmml.MiningField> miningFields = miningSchema.getMiningFields();\n    double[] featureImportances = new double[featureNames.size()];\n    for (int i = 0; i < miningFields.size(); i++) {\n        org.dmg.pmml.MiningField field = miningFields.get(i);\n        java.lang.Double importance = field.getImportance();\n        if (importance != null) {\n            featureImportances[i] = importance;\n        }\n    }\n    return new com.cloudera.oryx.common.collection.Pair<>(new com.cloudera.oryx.app.rdf.tree.DecisionForest(trees, weights, featureImportances), categoricalValueEncodings);\n}",
                "ClassName": "RDFPMMLUtils",
                "CyclomaticComplexity": 4,
                "DepthOfInheritance": 0,
                "MethodName": "read",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 42,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return first;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return trees;\n}",
                "ClassName": "DecisionForest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getTrees",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 6,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 112,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.Integer result = new com.cloudera.oryx.common.lang.LoggingCallable<java.lang.Integer>() {\n        @java.lang.Override\n        public java.lang.Integer doCall() {\n            return 3;\n        }\n    }.call();\n    org.junit.Assert.assertEquals(3, result.intValue());\n}",
        "ClassName": "LoggingTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testLoggingCallable",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 9,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "2",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try {\n        return doCall();\n    } catch (java.lang.Exception e) {\n        com.cloudera.oryx.common.lang.LoggingCallable.log.warn(\"Unexpected error in {}\", this, e);\n        throw new java.lang.IllegalStateException(e);\n    } catch (java.lang.Throwable t) {\n        com.cloudera.oryx.common.lang.LoggingCallable.log.warn(\"Unexpected error in {}\", this, t);\n        throw t;\n    }\n}",
                "ClassName": "LoggingCallable",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "call",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 11,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n}",
                "ClassName": "LoggingCallable",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 15,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    java.nio.file.Path textFile = tempDir.resolve(\"file.txt\");\n    java.nio.file.Files.write(textFile, java.util.Arrays.asList(\"foo\", \"bar\", \"baz\"), java.nio.charset.StandardCharsets.UTF_8);\n    java.util.Iterator<java.lang.String> it = com.cloudera.oryx.common.io.IOUtils.readLines(textFile).iterator();\n    org.junit.Assert.assertTrue(it.hasNext());\n    org.junit.Assert.assertEquals(\"foo\", it.next());\n    org.junit.Assert.assertTrue(it.hasNext());\n    org.junit.Assert.assertEquals(\"bar\", it.next());\n    org.junit.Assert.assertTrue(it.hasNext());\n    org.junit.Assert.assertEquals(\"baz\", it.next());\n    org.junit.Assert.assertFalse(it.hasNext());\n}",
        "ClassName": "IOUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 1,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testReadLines",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 7,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 13,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    if (tempDir == null) {\n        tempDir = java.nio.file.Files.createTempDirectory(\"OryxTest\").toAbsolutePath();\n        com.cloudera.oryx.common.OryxTest.log.info(\"Test temp dir is {}\", tempDir);\n        tempDir.toFile().deleteOnExit();\n    }\n    return tempDir;\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getTempDir",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 2,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new com.cloudera.oryx.common.io.LineIterable(file);\n}",
                "ClassName": "IOUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "readLines",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 2,
        "TotalNumberOfLines": 11,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.common.math.DoubleWeightedMean mean = new com.cloudera.oryx.common.math.DoubleWeightedMean();\n    mean.increment(-0.1, 2.1);\n    mean.increment(0.1, 2.1);\n    org.junit.Assert.assertEquals(2, mean.getN());\n    com.cloudera.oryx.common.OryxTest.assertEquals(0.0, mean.getResult());\n}",
        "ClassName": "DoubleWeightedMeanTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNegative",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this(0, 0.0, java.lang.Double.NaN);\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(weight >= 0.0);\n    if (count == 0) {\n        count = 1;\n        mean = datum;\n        totalWeight = weight;\n    } else {\n        count++;\n        totalWeight += weight;\n        mean += (weight / totalWeight) * (datum - mean);\n    }\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "increment",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return count;\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getN",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return mean;\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getResult",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 24,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.als.RescorerProvider multi = new com.cloudera.oryx.app.als.MultiRescorerProvider(new com.cloudera.oryx.app.als.SimpleModRescorerProvider(2), new com.cloudera.oryx.app.als.SimpleModRescorerProvider(3));\n    com.cloudera.oryx.app.als.Rescorer provider = multi.getMostSimilarItemsRescorer(null);\n    org.junit.Assert.assertNotNull(provider);\n    org.junit.Assert.assertTrue(provider instanceof com.cloudera.oryx.app.als.MultiRescorer);\n    org.junit.Assert.assertTrue(provider.isFiltered(\"ABC\"));\n    org.junit.Assert.assertTrue(provider.isFiltered(\"ABCDE\"));\n    org.junit.Assert.assertFalse(provider.isFiltered(\"ABCDEFABCDEF\"));\n}",
        "ClassName": "MultiRescorerProviderTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testMultiMostSimilarItemsRescorer",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 5,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 9,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    if (providers.length < 1) {\n        throw new java.lang.IllegalArgumentException(\"providers is empty\");\n    }\n    this.providers = providers;\n}",
                "ClassName": "MultiRescorerProvider",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    this.modulus = modulus;\n}",
                "ClassName": "SimpleModRescorerProvider",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 9,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    target(\"/recommendToMany\").request().get(java.lang.String.class);\n}",
        "ClassName": "RecommendToManyTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNoArg",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String response = target(\"/estimateForAnonymous/I3/I4=1.0/I5=2.0\").request().get(java.lang.String.class);\n    org.junit.Assert.assertEquals(-0.05814245143707833, java.lang.Double.parseDouble(response), com.cloudera.oryx.lambda.serving.AbstractServingTest.DOUBLE_EPSILON);\n}",
        "ClassName": "EstimateForAnonymousTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testEstimateForAnonymousCSV",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.example.CategoricalFeature f = com.cloudera.oryx.app.rdf.example.CategoricalFeature.forEncoding(1);\n    org.junit.Assert.assertEquals(\":1\", f.toString());\n}",
        "ClassName": "CategoricalFeatureTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 6,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testToString",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(encoding >= 0);\n    java.lang.Integer encodingKey = encoding;\n    com.cloudera.oryx.app.rdf.example.CategoricalFeature feature = com.cloudera.oryx.app.rdf.example.CategoricalFeature.FEATURE_CACHE.get(encodingKey);\n    if (feature == null) {\n        feature = new com.cloudera.oryx.app.rdf.example.CategoricalFeature(encoding);\n        com.cloudera.oryx.app.rdf.example.CategoricalFeature.FEATURE_CACHE.put(encodingKey, feature);\n    }\n    return feature;\n}",
                "ClassName": "CategoricalFeature",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "forEncoding",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 10,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return \":\" + encoding;\n}",
                "ClassName": "CategoricalFeature",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "toString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 13,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.common.lang.ClassUtils.loadInstanceOf(java.lang.Long.class.getName(), java.lang.Long.class);\n}",
        "ClassName": "ClassUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNoSuchMethod",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return com.cloudera.oryx.common.lang.ClassUtils.loadInstanceOf(implClassName, superClass, com.cloudera.oryx.common.lang.ClassUtils.NO_TYPES, com.cloudera.oryx.common.lang.ClassUtils.NO_ARGS);\n}",
                "ClassName": "ClassUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "loadInstanceOf",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.common.math.DoubleWeightedMean mean = new com.cloudera.oryx.common.math.DoubleWeightedMean();\n    mean.increment(1.5);\n    org.junit.Assert.assertEquals(1, mean.getN());\n    com.cloudera.oryx.common.OryxTest.assertEquals(1.5, mean.getResult());\n    org.junit.Assert.assertEquals(\"1.5\", mean.toString());\n}",
        "ClassName": "DoubleWeightedMeanTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testOne",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this(0, 0.0, java.lang.Double.NaN);\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    increment(datum, 1.0);\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "increment",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return count;\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getN",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return mean;\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getResult",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return java.lang.Double.toString(mean);\n}",
                "ClassName": "DoubleWeightedMean",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "toString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 18,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.dmg.pmml.MiningSchema miningSchema = com.cloudera.oryx.app.pmml.AppPMMLUtils.buildMiningSchema(com.cloudera.oryx.app.pmml.AppPMMLUtilsTest.buildTestSchema());\n    java.util.List<org.dmg.pmml.MiningField> miningFields = miningSchema.getMiningFields();\n    org.junit.Assert.assertEquals(4, miningFields.size());\n    java.lang.String[] fieldNames = new java.lang.String[]{ \"foo\", \"bar\", \"baz\", \"bing\" };\n    for (int i = 0; i < fieldNames.length; i++) {\n        org.junit.Assert.assertEquals(fieldNames[i], miningFields.get(i).getName().getValue());\n    }\n    org.junit.Assert.assertEquals(FieldUsageType.SUPPLEMENTARY, miningFields.get(0).getUsageType());\n    org.junit.Assert.assertEquals(FieldUsageType.PREDICTED, miningFields.get(1).getUsageType());\n    org.junit.Assert.assertEquals(FieldUsageType.SUPPLEMENTARY, miningFields.get(2).getUsageType());\n    org.junit.Assert.assertEquals(FieldUsageType.ACTIVE, miningFields.get(3).getUsageType());\n    org.junit.Assert.assertEquals(OpType.CATEGORICAL, miningFields.get(1).getOpType());\n    org.junit.Assert.assertEquals(OpType.CONTINUOUS, miningFields.get(3).getOpType());\n}",
        "ClassName": "AppPMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 1,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 6,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBuildMiningSchema",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 8,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 15,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return com.cloudera.oryx.app.pmml.AppPMMLUtils.buildMiningSchema(schema, null);\n}",
                "ClassName": "AppPMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "buildMiningSchema",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.input-schema.feature-names\", \"[\\\"foo\\\",\\\"bar\\\",\\\"baz\\\",\\\"bing\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.id-features\", \"[\\\"baz\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.ignored-features\", \"[\\\"foo\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[\\\"bar\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.target-feature\", \"\\\"bar\\\"\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    return new com.cloudera.oryx.app.schema.InputSchema(config);\n}",
                "ClassName": "AppPMMLUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildTestSchema",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 10,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 13,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.input-schema.num-features\", 5);\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[\\\"4\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.id-features\", \"[\\\"0\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.target-feature\", \"\\\"4\\\"\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    com.cloudera.oryx.app.schema.InputSchema schema = new com.cloudera.oryx.app.schema.InputSchema(config);\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings encodings = new com.cloudera.oryx.app.schema.CategoricalValueEncodings(java.util.Collections.singletonMap(4, java.util.Arrays.asList(\"A\", \"B\", \"C\")));\n    com.cloudera.oryx.app.rdf.ToExampleFn toExampleFn = new com.cloudera.oryx.app.rdf.ToExampleFn(schema, encodings);\n    com.cloudera.oryx.app.rdf.example.Example example = toExampleFn.call(new java.lang.String[]{ \"foo\", \"1\", \"2.5\", \"-3.2\", \"B\" });\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.example.CategoricalFeature.forEncoding(1), example.getTarget());\n    org.junit.Assert.assertNull(example.getFeature(0));\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(1.0), example.getFeature(1));\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(2.5), example.getFeature(2));\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(-3.2), example.getFeature(3));\n    org.junit.Assert.assertNull(example.getFeature(4));\n}",
        "ClassName": "ToExampleFnTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 11,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testToExample",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 6,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 18,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<java.lang.String> givenFeatureNames = config.getStringList(\"oryx.input-schema.feature-names\");\n    if (givenFeatureNames.isEmpty()) {\n        int numFeatures = config.getInt(\"oryx.input-schema.num-features\");\n        com.google.common.base.Preconditions.checkArgument(numFeatures > 0, \"Neither feature-names nor num-features is set\");\n        java.util.List<java.lang.String> generatedFeatureNames = new java.util.ArrayList<>(numFeatures);\n        for (int i = 0; i < numFeatures; i++) {\n            generatedFeatureNames.add(java.lang.Integer.toString(i));\n        }\n        featureNames = generatedFeatureNames;\n    } else {\n        featureNames = com.google.common.collect.ImmutableList.copyOf(givenFeatureNames);\n    }\n    int numFeatures = featureNames.size();\n    com.google.common.base.Preconditions.checkArgument(new java.util.HashSet<>(featureNames).size() == numFeatures, \"Feature names must be unique: %s\", featureNames);\n    idFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.id-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(idFeatures));\n    java.util.Collection<java.lang.String> ignoredFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.ignored-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(ignoredFeatures));\n    java.util.Collection<java.lang.String> activeFeatureSet = new java.util.HashSet<>(featureNames);\n    activeFeatureSet.removeAll(idFeatures);\n    activeFeatureSet.removeAll(ignoredFeatures);\n    activeFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    java.util.List<java.lang.String> givenNumericFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.numeric-features\");\n    java.util.List<java.lang.String> givenCategoricalFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.categorical-features\");\n    if (givenNumericFeatures == null) {\n        com.google.common.base.Preconditions.checkNotNull(givenCategoricalFeatures, \"Neither numeric-features nor categorical-features was set\");\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(givenCategoricalFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(categoricalFeatures));\n        activeFeatureSet.removeAll(categoricalFeatures);\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    } else {\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(givenNumericFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(numericFeatures));\n        activeFeatureSet.removeAll(numericFeatures);\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    }\n    targetFeature = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalString(config, \"oryx.input-schema.target-feature\");\n    if (targetFeature != null) {\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.contains(targetFeature), \"Target feature is not known, an ID, or ignored: %s\", targetFeature);\n    }\n    targetFeatureIndex = (targetFeature == null) ? -1 : featureNames.indexOf(targetFeature);\n    allToPredictorMap = com.google.common.collect.HashBiMap.create();\n    for (int featureIndex = 0, predictorIndex = 0; featureIndex < featureNames.size(); featureIndex++) {\n        if (isActive(featureIndex) && (!isTarget(featureIndex))) {\n            allToPredictorMap.put(featureIndex, predictorIndex);\n            predictorIndex++;\n        }\n    }\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 50,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    encodingsForIndex = new java.util.HashMap(distinctValues.size());\n    for (java.util.Map.Entry<java.lang.Integer, ? extends java.util.Collection<java.lang.String>> e : distinctValues.entrySet()) {\n        encodingsForIndex.put(e.getKey(), com.cloudera.oryx.app.schema.CategoricalValueEncodings.mapDistinctValues(e.getValue()));\n    }\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    this.inputSchema = inputSchema;\n    this.valueEncodings = valueEncodings;\n}",
                "ClassName": "ToExampleFn",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.app.rdf.example.Feature[] features = new com.cloudera.oryx.app.rdf.example.Feature[data.length];\n    com.cloudera.oryx.app.rdf.example.Feature target = null;\n    for (int featureIndex = 0; featureIndex < data.length; featureIndex++) {\n        com.cloudera.oryx.app.rdf.example.Feature feature = null;\n        java.lang.String dataAtIndex = data[featureIndex];\n        boolean isTarget = inputSchema.isTarget(featureIndex);\n        if (isTarget && dataAtIndex.isEmpty()) {\n            feature = null;\n        } else\n            if (inputSchema.isNumeric(featureIndex)) {\n                feature = com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(java.lang.Double.parseDouble(dataAtIndex));\n            } else\n                if (inputSchema.isCategorical(featureIndex)) {\n                    int encoding = valueEncodings.getValueEncodingMap(featureIndex).get(dataAtIndex);\n                    feature = com.cloudera.oryx.app.rdf.example.CategoricalFeature.forEncoding(encoding);\n                }\n\n\n        if (isTarget) {\n            target = feature;\n        } else {\n            features[featureIndex] = feature;\n        }\n    }\n    return new com.cloudera.oryx.app.rdf.example.Example(target, features);\n}",
                "ClassName": "ToExampleFn",
                "CyclomaticComplexity": 5,
                "DepthOfInheritance": 0,
                "MethodName": "call",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 27,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(encoding >= 0);\n    java.lang.Integer encodingKey = encoding;\n    com.cloudera.oryx.app.rdf.example.CategoricalFeature feature = com.cloudera.oryx.app.rdf.example.CategoricalFeature.FEATURE_CACHE.get(encodingKey);\n    if (feature == null) {\n        feature = new com.cloudera.oryx.app.rdf.example.CategoricalFeature(encoding);\n        com.cloudera.oryx.app.rdf.example.CategoricalFeature.FEATURE_CACHE.put(encodingKey, feature);\n    }\n    return feature;\n}",
                "ClassName": "CategoricalFeature",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "forEncoding",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 10,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return target;\n}",
                "ClassName": "Example",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getTarget",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return features[i];\n}",
                "ClassName": "Example",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFeature",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value == 0.0F ? com.cloudera.oryx.app.rdf.example.NumericFeature.ZERO : new com.cloudera.oryx.app.rdf.example.NumericFeature(value);\n}",
                "ClassName": "NumericFeature",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "forValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 14,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 118,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    target(\"/recommend\").request().get(java.lang.String.class);\n}",
        "ClassName": "RecommendTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNoArg",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.concurrent.locks.ReentrantLock lock = new java.util.concurrent.locks.ReentrantLock();\n    org.junit.Assert.assertFalse(lock.isHeldByCurrentThread());\n    com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(lock);\n    org.junit.Assert.assertTrue(lock.isHeldByCurrentThread());\n    al.close();\n    org.junit.Assert.assertFalse(lock.isHeldByCurrentThread());\n}",
        "ClassName": "AutoLockTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 3,
        "MethodName": "testClose",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 2,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 11,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this.lock = lock;\n    lock.lock();\n}",
                "ClassName": "AutoLock",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 5
            },
            {
                "Body": "{\n    lock.unlock();\n}",
                "ClassName": "AutoLock",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "close",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 2
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 7,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 7
    },
    {
        "Body": "{\n    java.nio.file.Path testDir = createTestDirs();\n    java.util.List<java.nio.file.Path> files = com.cloudera.oryx.common.io.IOUtils.listFiles(testDir, \"*/subFile*\");\n    org.junit.Assert.assertEquals(1, files.size());\n    org.junit.Assert.assertTrue(files.contains(testDir.resolve(\"subDir1\").resolve(\"subFile2\")));\n}",
        "ClassName": "IOUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 3,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 23,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testListSubdirs2",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 17,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(tempDir));\n    java.nio.file.Path subFile1 = tempDir.resolve(\"subFile1\");\n    java.nio.file.Files.write(subFile1, com.cloudera.oryx.common.io.IOUtilsTest.SOME_BYTES);\n    java.nio.file.Path hidden = tempDir.resolve(\".hidden\");\n    java.nio.file.Files.write(hidden, com.cloudera.oryx.common.io.IOUtilsTest.NO_BYTES);\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(subFile1));\n    java.nio.file.Path subDir1 = tempDir.resolve(\"subDir1\");\n    java.nio.file.Files.createDirectory(subDir1);\n    java.nio.file.Path subFile2 = subDir1.resolve(\"subFile2\");\n    java.nio.file.Files.write(subFile2, com.cloudera.oryx.common.io.IOUtilsTest.SOME_BYTES);\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(subFile2));\n    java.nio.file.Path subDir2 = subDir1.resolve(\"subDir2\");\n    java.nio.file.Files.createDirectory(subDir2);\n    return tempDir;\n}",
                "ClassName": "IOUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "createTestDirs",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 17,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(java.nio.file.Files.isDirectory(dir), \"%s is not a directory\", dir);\n    java.util.List<java.lang.String> globLevels;\n    if ((glob == null) || glob.isEmpty()) {\n        globLevels = java.util.Collections.singletonList(\"*\");\n    } else {\n        globLevels = java.util.Arrays.asList(glob.split(\"/\"));\n    }\n    com.google.common.base.Preconditions.checkState(!globLevels.isEmpty());\n    java.util.List<java.nio.file.Path> paths = new java.util.ArrayList<>();\n    paths.add(dir);\n    for (java.lang.String globLevel : globLevels) {\n        java.util.List<java.nio.file.Path> newPaths = new java.util.ArrayList<>();\n        for (java.nio.file.Path existingPath : paths) {\n            if (java.nio.file.Files.isDirectory(existingPath)) {\n                try (java.nio.file.DirectoryStream<java.nio.file.Path> stream = java.nio.file.Files.newDirectoryStream(existingPath, globLevel)) {\n                    for (java.nio.file.Path path : stream) {\n                        if (!path.getFileName().toString().startsWith(\".\")) {\n                            newPaths.add(path);\n                        }\n                    }\n                }\n            }\n        }\n        paths = newPaths;\n    }\n    java.util.Collections.sort(paths);\n    return paths;\n}",
                "ClassName": "IOUtils",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "listFiles",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 29,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 6,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 46,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertSame(java.util.ArrayList.class, com.cloudera.oryx.common.lang.ClassUtils.loadClass(java.util.ArrayList.class.getName(), java.util.List.class));\n}",
        "ClassName": "ClassUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testLoadClass2",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return com.cloudera.oryx.common.lang.ClassUtils.doLoadClass(className, superClass, com.cloudera.oryx.common.lang.ClassUtils.class.getClassLoader());\n}",
                "ClassName": "ClassUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "loadClass",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    overlay.put(\"a\", 1);\n    overlay.put(\"b\", 2.7);\n    overlay.put(\"c\", \"[3,4]\");\n    overlay.put(\"d\", \"[5.3,6.6]\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(((com.cloudera.oryx.ml.param.HyperParamValues<java.lang.Integer>) (com.cloudera.oryx.ml.param.HyperParams.fromConfig(config, \"a\"))), 1, java.util.Collections.singletonList(1));\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(((com.cloudera.oryx.ml.param.HyperParamValues<java.lang.Double>) (com.cloudera.oryx.ml.param.HyperParams.fromConfig(config, \"b\"))), 1, java.util.Collections.singletonList(2.7));\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(((com.cloudera.oryx.ml.param.HyperParamValues<java.lang.Integer>) (com.cloudera.oryx.ml.param.HyperParams.fromConfig(config, \"c\"))), 2, java.util.Arrays.asList(3, 4));\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(((com.cloudera.oryx.ml.param.HyperParamValues<java.lang.Double>) (com.cloudera.oryx.ml.param.HyperParams.fromConfig(config, \"d\"))), 2, java.util.Arrays.asList(5.3, 6.6));\n}",
        "ClassName": "HyperParamsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 10,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testConfig",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 12,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, hyperParams.getTrialValues(howMany));\n}",
                "ClassName": "HyperParamsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "doTest",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    switch (config.getValue(key).valueType()) {\n        case LIST :\n            java.util.List<java.lang.String> stringValues = config.getStringList(key);\n            try {\n                return com.cloudera.oryx.ml.param.HyperParams.range(java.lang.Integer.parseInt(stringValues.get(0)), java.lang.Integer.parseInt(stringValues.get(1)));\n            } catch (java.lang.NumberFormatException nfe) {\n            }\n            try {\n                return com.cloudera.oryx.ml.param.HyperParams.range(java.lang.Double.parseDouble(stringValues.get(0)), java.lang.Double.parseDouble(stringValues.get(1)));\n            } catch (java.lang.NumberFormatException nfe) {\n            }\n            return com.cloudera.oryx.ml.param.HyperParams.unorderedFromValues(stringValues);\n        case STRING :\n        case NUMBER :\n            java.lang.String stringValue = config.getString(key);\n            try {\n                return com.cloudera.oryx.ml.param.HyperParams.fixed(java.lang.Integer.parseInt(stringValue));\n            } catch (java.lang.NumberFormatException nfe) {\n            }\n            try {\n                return com.cloudera.oryx.ml.param.HyperParams.fixed(java.lang.Double.parseDouble(stringValue));\n            } catch (java.lang.NumberFormatException nfe) {\n            }\n            return com.cloudera.oryx.ml.param.HyperParams.unorderedFromValues(java.util.Collections.singletonList(stringValue));\n    }\n    throw new java.lang.IllegalArgumentException(\"No valid parameter range for key \" + key);\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "fromConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 28,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 43,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    target(\"/estimate/Z\").request().get(java.lang.String.class);\n}",
        "ClassName": "EstimateTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBadRequest",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    byte[] compressed = com.cloudera.oryx.lambda.serving.AbstractServingTest.compress(com.cloudera.oryx.app.serving.als.IngestTest.INGEST_DATA, java.util.zip.GZIPOutputStream.class);\n    javax.ws.rs.client.Entity<byte[]> entity = javax.ws.rs.client.Entity.entity(compressed, com.cloudera.oryx.app.serving.als.IngestTest.compressedVariant(MediaType.TEXT_PLAIN_TYPE, \"gzip\"));\n    javax.ws.rs.core.Response response = target(\"/ingest\").request().post(entity);\n    com.cloudera.oryx.app.serving.als.IngestTest.checkResponse(response);\n}",
        "ClassName": "IngestTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 10,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testGZippedIngest",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.io.ByteArrayOutputStream bytes = new java.io.ByteArrayOutputStream();\n    try (java.io.OutputStream compressingStream = com.cloudera.oryx.common.lang.ClassUtils.loadInstanceOf(compressingClass.getName(), compressingClass, new java.lang.Class<?>[]{ java.io.OutputStream.class }, new java.lang.Object[]{ bytes })) {\n        if (compressingStream instanceof java.util.zip.ZipOutputStream) {\n            ((java.util.zip.ZipOutputStream) (compressingStream)).putNextEntry(new java.util.zip.ZipEntry(\"data\"));\n        }\n        compressingStream.write(data.getBytes(java.nio.charset.StandardCharsets.UTF_8));\n        if (compressingStream instanceof java.util.zip.ZipOutputStream) {\n            ((java.util.zip.ZipOutputStream) (compressingStream)).closeEntry();\n        }\n        compressingStream.flush();\n    } catch (java.io.IOException e) {\n        throw new java.lang.IllegalStateException(e);\n    }\n    return bytes.toByteArray();\n}",
                "ClassName": "AbstractServingTest",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 1,
                "MethodName": "compress",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 16,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return javax.ws.rs.core.Variant.mediaTypes(contentType).encodings(contentEncoding).build().get(0);\n}",
                "ClassName": "IngestTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "compressedVariant",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = com.cloudera.oryx.lambda.serving.MockTopicProducer.getData();\n    for (int i = 0; i < data.size(); i++) {\n        com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> actual = data.get(i);\n        org.junit.Assert.assertNull(actual.getFirst());\n        java.lang.String[] tokens = actual.getSecond().split(\",\");\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][0], tokens[0]);\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][1], tokens[1]);\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][2], tokens[2]);\n    }\n}",
                "ClassName": "IngestTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 3,
                "MethodName": "checkResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 31,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    new com.cloudera.oryx.common.lang.LoggingCallable<java.lang.Void>() {\n        @java.lang.Override\n        public java.lang.Void doCall() throws java.io.IOException {\n            throw com.cloudera.oryx.common.lang.LoggingTest.buildIOE();\n        }\n    }.call();\n}",
        "ClassName": "LoggingTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testLoggingCallableException",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "3",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try {\n        return doCall();\n    } catch (java.lang.Exception e) {\n        com.cloudera.oryx.common.lang.LoggingCallable.log.warn(\"Unexpected error in {}\", this, e);\n        throw new java.lang.IllegalStateException(e);\n    } catch (java.lang.Throwable t) {\n        com.cloudera.oryx.common.lang.LoggingCallable.log.warn(\"Unexpected error in {}\", this, t);\n        throw t;\n    }\n}",
                "ClassName": "LoggingCallable",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "call",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 11,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n}",
                "ClassName": "LoggingCallable",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.io.IOException ioe = new java.io.IOException(\"It's safe to ignore this exception\");\n    ioe.setStackTrace(new java.lang.StackTraceElement[0]);\n    return ioe;\n}",
                "ClassName": "LoggingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildIOE",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 20,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.tree.DecisionTree tree = com.cloudera.oryx.app.rdf.tree.DecisionTreeTest.buildTestTree();\n    com.cloudera.oryx.app.rdf.tree.TerminalNode node = tree.findTerminal(new com.cloudera.oryx.app.rdf.example.Example(null, com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(0.5)));\n    com.cloudera.oryx.app.rdf.predict.NumericPrediction prediction = ((com.cloudera.oryx.app.rdf.predict.NumericPrediction) (node.getPrediction()));\n    com.cloudera.oryx.common.OryxTest.assertEquals(1.0, prediction.getPrediction());\n}",
        "ClassName": "DecisionTreeTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 6,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testFindTerminal",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(features != null);\n    this.features = features;\n    this.target = target;\n    com.google.common.hash.Hasher hasher = com.cloudera.oryx.app.rdf.example.Example.HASH.newHasher();\n    for (com.cloudera.oryx.app.rdf.example.Feature feature : features) {\n        if (feature != null) {\n            hasher.putInt(feature.hashCode());\n        }\n    }\n    if (target != null) {\n        hasher.putInt(target.hashCode());\n    }\n    cachedHashCode = hasher.hashCode();\n}",
                "ClassName": "Example",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.app.rdf.tree.TerminalNode rnn = new com.cloudera.oryx.app.rdf.tree.TerminalNode(\"r--\", new com.cloudera.oryx.app.rdf.predict.NumericPrediction(0.0, 1));\n    com.cloudera.oryx.app.rdf.tree.TerminalNode rnp = new com.cloudera.oryx.app.rdf.tree.TerminalNode(\"r-+\", new com.cloudera.oryx.app.rdf.predict.NumericPrediction(1.0, 1));\n    com.cloudera.oryx.app.rdf.tree.DecisionNode rn = new com.cloudera.oryx.app.rdf.tree.DecisionNode(\"r-\", new com.cloudera.oryx.app.rdf.decision.NumericDecision(0, -1.0, false), rnn, rnp);\n    com.cloudera.oryx.app.rdf.tree.TerminalNode rp = new com.cloudera.oryx.app.rdf.tree.TerminalNode(\"r+\", new com.cloudera.oryx.app.rdf.predict.NumericPrediction(2.0, 1));\n    com.cloudera.oryx.app.rdf.tree.DecisionNode root = new com.cloudera.oryx.app.rdf.tree.DecisionNode(\"r\", new com.cloudera.oryx.app.rdf.decision.NumericDecision(0, 1.0, false), rn, rp);\n    return new com.cloudera.oryx.app.rdf.tree.DecisionTree(root);\n}",
                "ClassName": "DecisionTreeTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildTestTree",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.app.rdf.tree.TreeNode node = root;\n    while (!node.isTerminal()) {\n        com.cloudera.oryx.app.rdf.tree.DecisionNode decisionNode = ((com.cloudera.oryx.app.rdf.tree.DecisionNode) (node));\n        if (decisionNode.getDecision().isPositive(example)) {\n            node = decisionNode.getRight();\n        } else {\n            node = decisionNode.getLeft();\n        }\n    } \n    return ((com.cloudera.oryx.app.rdf.tree.TerminalNode) (node));\n}",
                "ClassName": "DecisionTree",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "findTerminal",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value == 0.0F ? com.cloudera.oryx.app.rdf.example.NumericFeature.ZERO : new com.cloudera.oryx.app.rdf.example.NumericFeature(value);\n}",
                "ClassName": "NumericFeature",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "forValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return prediction;\n}",
                "ClassName": "TerminalNode",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getPrediction",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getPrediction",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 5,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 47,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(1.5), com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(1.5));\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(java.lang.Double.MIN_VALUE), com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(java.lang.Double.MIN_VALUE));\n}",
        "ClassName": "NumericFeatureTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testHashCode",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return value == 0.0F ? com.cloudera.oryx.app.rdf.example.NumericFeature.ZERO : new com.cloudera.oryx.app.rdf.example.NumericFeature(value);\n}",
                "ClassName": "NumericFeature",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "forValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.serving.als.IngestTest.checkResponse(getFormPostResponse(com.cloudera.oryx.app.serving.als.IngestTest.INGEST_DATA, \"/ingest\", java.util.zip.ZipOutputStream.class, \"zip\"));\n}",
        "ClassName": "IngestTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 13,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testZippedFormIngest",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 12,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = com.cloudera.oryx.lambda.serving.MockTopicProducer.getData();\n    for (int i = 0; i < data.size(); i++) {\n        com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> actual = data.get(i);\n        org.junit.Assert.assertNull(actual.getFirst());\n        java.lang.String[] tokens = actual.getSecond().split(\",\");\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][0], tokens[0]);\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][1], tokens[1]);\n        org.junit.Assert.assertEquals(com.cloudera.oryx.app.serving.als.IngestTest.EXPECTED_TOPIC[i][2], tokens[2]);\n    }\n}",
                "ClassName": "IngestTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 3,
                "MethodName": "checkResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    byte[] bytes;\n    if (compressingClass == null) {\n        bytes = data.getBytes(java.nio.charset.StandardCharsets.UTF_8);\n    } else {\n        bytes = com.cloudera.oryx.lambda.serving.AbstractServingTest.compress(data, compressingClass);\n    }\n    javax.ws.rs.core.MediaType type = (encoding == null) ? javax.ws.rs.core.MediaType.TEXT_PLAIN_TYPE : new javax.ws.rs.core.MediaType(\"application\", encoding);\n    java.io.InputStream in = new java.io.ByteArrayInputStream(bytes);\n    org.glassfish.jersey.media.multipart.file.StreamDataBodyPart filePart = new org.glassfish.jersey.media.multipart.file.StreamDataBodyPart(\"data\", in, \"data\", type);\n    try (org.glassfish.jersey.media.multipart.MultiPart multiPart = new org.glassfish.jersey.media.multipart.MultiPart(javax.ws.rs.core.MediaType.MULTIPART_FORM_DATA_TYPE)) {\n        multiPart.getBodyParts().add(filePart);\n        return target(endpoint).request().post(javax.ws.rs.client.Entity.entity(multiPart, MediaType.MULTIPART_FORM_DATA_TYPE));\n    }\n}",
                "ClassName": "AbstractServingTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getFormPostResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 2,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 27,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String html = target(\"/index.html\").request().accept(MediaType.TEXT_HTML).get(java.lang.String.class);\n    java.lang.String[] substrings = new java.lang.String[]{ \"DOCTYPE\", \"Oryx Serving Layer\", \"Random Decision Forests\", \"/predict\", \"<form\" };\n    for (java.lang.String substring : substrings) {\n        org.junit.Assert.assertTrue(\"Doesn't contain \" + substring, html.contains(substring));\n    }\n}",
        "ClassName": "ConsoleTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 1,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testConsole",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<java.lang.Double> items = target(\"/estimate/U0/I10\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.lambda.serving.AbstractServingTest.LIST_DOUBLE_TYPE);\n    org.junit.Assert.assertEquals(1, items.size());\n    org.junit.Assert.assertEquals(0.0, items.get(0), com.cloudera.oryx.lambda.serving.AbstractServingTest.FLOAT_EPSILON);\n}",
        "ClassName": "EstimateTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testZeroEstimate",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.decision.Decision decision = new com.cloudera.oryx.app.rdf.decision.NumericDecision(0, -3.1, true);\n    org.junit.Assert.assertFalse(decision.isPositive(new com.cloudera.oryx.app.rdf.example.Example(null, com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(-3.5))));\n    org.junit.Assert.assertTrue(decision.isPositive(new com.cloudera.oryx.app.rdf.example.Example(null, com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(-3.1))));\n    org.junit.Assert.assertTrue(decision.isPositive(new com.cloudera.oryx.app.rdf.example.Example(null, com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(-3.0))));\n    org.junit.Assert.assertTrue(decision.isPositive(new com.cloudera.oryx.app.rdf.example.Example(null, com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(3.1))));\n    org.junit.Assert.assertTrue(decision.isPositive(new com.cloudera.oryx.app.rdf.example.Example(null, new com.cloudera.oryx.app.rdf.example.Feature[]{ null })));\n}",
        "ClassName": "NumericDecisionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDecision",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 5,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(featureNumber);\n    this.threshold = threshold;\n    this.defaultDecision = defaultDecision;\n}",
                "ClassName": "NumericDecision",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(features != null);\n    this.features = features;\n    this.target = target;\n    com.google.common.hash.Hasher hasher = com.cloudera.oryx.app.rdf.example.Example.HASH.newHasher();\n    for (com.cloudera.oryx.app.rdf.example.Feature feature : features) {\n        if (feature != null) {\n            hasher.putInt(feature.hashCode());\n        }\n    }\n    if (target != null) {\n        hasher.putInt(target.hashCode());\n    }\n    cachedHashCode = hasher.hashCode();\n}",
                "ClassName": "Example",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value == 0.0F ? com.cloudera.oryx.app.rdf.example.NumericFeature.ZERO : new com.cloudera.oryx.app.rdf.example.NumericFeature(value);\n}",
                "ClassName": "NumericFeature",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "forValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 23,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    target(\"/recommendToAnonymous\").request().get(java.lang.String.class);\n}",
        "ClassName": "RecommendToAnonymousTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNoArg",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String response = target(\"/popularRepresentativeItems\").request().get(java.lang.String.class);\n    org.junit.Assert.assertEquals(2, response.split(\"\\n\").length);\n}",
        "ClassName": "PopularRepresentativeItemsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testPopularRepresentativeItemsCSV",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.dmg.pmml.Array a = com.cloudera.oryx.app.pmml.AppPMMLUtils.toArray(-1.0, 2.01, 3.5);\n    org.junit.Assert.assertEquals(3, a.getN().intValue());\n    org.junit.Assert.assertEquals(Array.Type.REAL, a.getType());\n    org.junit.Assert.assertEquals(\"-1.0 2.01 3.5\", a.getValue());\n}",
        "ClassName": "AppPMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 8,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testToArrayDouble",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 8,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<java.lang.Double> valueList = new java.util.ArrayList<>(values.length);\n    for (double value : values) {\n        valueList.add(value);\n    }\n    java.lang.String arrayValue = com.cloudera.oryx.common.text.TextUtils.joinPMMLDelimitedNumbers(valueList);\n    return new org.dmg.pmml.Array(Array.Type.REAL, arrayValue).withN(valueList.size());\n}",
                "ClassName": "AppPMMLUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "toArray",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 8,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.apache.commons.math3.linear.RealMatrix nearSingular = new org.apache.commons.math3.linear.Array2DRowRealMatrix(new double[][]{ new double[]{ 1.31, -2.0, 3.0 }, new double[]{ 2.6, -4.01, 6.01 }, new double[]{ 0.0, -1.5, 5.5 } });\n    try {\n        new com.cloudera.oryx.common.math.LinearSystemSolver().getSolver(nearSingular);\n    } catch (com.cloudera.oryx.common.math.SingularMatrixSolverException smse) {\n        org.junit.Assert.assertEquals(2, smse.getApparentRank());\n    }\n}",
        "ClassName": "LinearSystemSolverTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 6,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testApparentRank",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "LinearSystemSolver",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (M == null) {\n        return null;\n    }\n    org.apache.commons.math3.linear.RRQRDecomposition decomposition = new org.apache.commons.math3.linear.RRQRDecomposition(M, com.cloudera.oryx.common.math.LinearSystemSolver.SINGULARITY_THRESHOLD);\n    org.apache.commons.math3.linear.DecompositionSolver solver = decomposition.getSolver();\n    if (solver.isNonSingular()) {\n        return new com.cloudera.oryx.common.math.Solver(solver);\n    }\n    int apparentRank = decomposition.getRank(0.01);\n    com.cloudera.oryx.common.math.LinearSystemSolver.log.warn(\"{} x {} matrix is near-singular (threshold {}). Add more data or decrease the \" + \"value of als.hyperparams.features, to <= about {}\", M.getRowDimension(), M.getColumnDimension(), com.cloudera.oryx.common.math.LinearSystemSolver.SINGULARITY_THRESHOLD, apparentRank);\n    throw new com.cloudera.oryx.common.math.SingularMatrixSolverException(apparentRank, \"Apparent rank: \" + apparentRank);\n}",
                "ClassName": "LinearSystemSolver",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "getSolver",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 13,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return apparentRank;\n}",
                "ClassName": "SingularMatrixSolverException",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "getApparentRank",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 2,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 18,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.Integer, java.util.Collection<java.lang.String>> distinctValues = new java.util.HashMap<>();\n    distinctValues.put(1, java.util.Arrays.asList(\"one\", \"two\", \"three\", \"four\", \"five\"));\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings categoricalValueEncodings = new com.cloudera.oryx.app.schema.CategoricalValueEncodings(distinctValues);\n    org.dmg.pmml.DataDictionary dictionary = com.cloudera.oryx.app.pmml.AppPMMLUtils.buildDataDictionary(com.cloudera.oryx.app.pmml.AppPMMLUtilsTest.buildTestSchema(), categoricalValueEncodings);\n    org.junit.Assert.assertEquals(4, dictionary.getNumberOfFields().intValue());\n    com.cloudera.oryx.app.pmml.AppPMMLUtilsTest.checkDataField(dictionary.getDataFields().get(0), \"foo\", null);\n    com.cloudera.oryx.app.pmml.AppPMMLUtilsTest.checkDataField(dictionary.getDataFields().get(1), \"bar\", true);\n    com.cloudera.oryx.app.pmml.AppPMMLUtilsTest.checkDataField(dictionary.getDataFields().get(2), \"baz\", null);\n    com.cloudera.oryx.app.pmml.AppPMMLUtilsTest.checkDataField(dictionary.getDataFields().get(3), \"bing\", false);\n    java.util.List<org.dmg.pmml.Value> dfValues = dictionary.getDataFields().get(1).getValues();\n    org.junit.Assert.assertEquals(5, dfValues.size());\n    java.lang.String[] categoricalValues = new java.lang.String[]{ \"one\", \"two\", \"three\", \"four\", \"five\" };\n    for (int i = 0; i < categoricalValues.length; i++) {\n        org.junit.Assert.assertEquals(categoricalValues[i], dfValues.get(i).getValue());\n    }\n}",
        "ClassName": "AppPMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 1,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 2,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 15,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBuildDataDictionary",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 6,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 17,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    encodingsForIndex = new java.util.HashMap(distinctValues.size());\n    for (java.util.Map.Entry<java.lang.Integer, ? extends java.util.Collection<java.lang.String>> e : distinctValues.entrySet()) {\n        encodingsForIndex.put(e.getKey(), com.cloudera.oryx.app.schema.CategoricalValueEncodings.mapDistinctValues(e.getValue()));\n    }\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.List<java.lang.String> featureNames = schema.getFeatureNames();\n    java.util.List<org.dmg.pmml.DataField> dataFields = new java.util.ArrayList<>();\n    for (int featureIndex = 0; featureIndex < featureNames.size(); featureIndex++) {\n        java.lang.String featureName = featureNames.get(featureIndex);\n        org.dmg.pmml.OpType opType;\n        org.dmg.pmml.DataType dataType;\n        if (schema.isNumeric(featureName)) {\n            opType = org.dmg.pmml.OpType.CONTINUOUS;\n            dataType = org.dmg.pmml.DataType.DOUBLE;\n        } else\n            if (schema.isCategorical(featureName)) {\n                opType = org.dmg.pmml.OpType.CATEGORICAL;\n                dataType = org.dmg.pmml.DataType.STRING;\n            } else {\n                opType = null;\n                dataType = null;\n            }\n\n        org.dmg.pmml.DataField field = new org.dmg.pmml.DataField(org.dmg.pmml.FieldName.create(featureName), opType, dataType);\n        if (schema.isCategorical(featureName)) {\n            java.util.Collection<java.lang.String> valuesOrderedByEncoding = new java.util.TreeMap<>(categoricalValueEncodings.getEncodingValueMap(featureIndex)).values();\n            for (java.lang.String value : valuesOrderedByEncoding) {\n                field.getValues().add(new org.dmg.pmml.Value(value));\n            }\n        }\n        dataFields.add(field);\n    }\n    org.dmg.pmml.DataDictionary dictionary = new org.dmg.pmml.DataDictionary(dataFields);\n    dictionary.setNumberOfFields(dataFields.size());\n    return dictionary;\n}",
                "ClassName": "AppPMMLUtils",
                "CyclomaticComplexity": 5,
                "DepthOfInheritance": 0,
                "MethodName": "buildDataDictionary",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 32,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.input-schema.feature-names\", \"[\\\"foo\\\",\\\"bar\\\",\\\"baz\\\",\\\"bing\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.id-features\", \"[\\\"baz\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.ignored-features\", \"[\\\"foo\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[\\\"bar\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.target-feature\", \"\\\"bar\\\"\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    return new com.cloudera.oryx.app.schema.InputSchema(config);\n}",
                "ClassName": "AppPMMLUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildTestSchema",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 10,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(name, field.getName().getValue());\n    if (categorical == null) {\n        org.junit.Assert.assertNull(field.getOpType());\n        org.junit.Assert.assertNull(field.getDataType());\n    } else\n        if (categorical) {\n            org.junit.Assert.assertEquals(OpType.CATEGORICAL, field.getOpType());\n            org.junit.Assert.assertEquals(DataType.STRING, field.getDataType());\n        } else {\n            org.junit.Assert.assertEquals(OpType.CONTINUOUS, field.getOpType());\n            org.junit.Assert.assertEquals(DataType.DOUBLE, field.getDataType());\n        }\n\n}",
                "ClassName": "AppPMMLUtilsTest",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 2,
                "MethodName": "checkDataField",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 8,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 63,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.BitSet activeCategories = new java.util.BitSet(10);\n    activeCategories.set(2);\n    activeCategories.set(5);\n    com.cloudera.oryx.app.rdf.decision.CategoricalDecision decision = new com.cloudera.oryx.app.rdf.decision.CategoricalDecision(0, activeCategories, true);\n    org.junit.Assert.assertEquals(\"(#0 \u2208 [2,5])\", decision.toString());\n}",
        "ClassName": "CategoricalDecisionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 10,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testToString",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 5,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(featureNumber);\n    this.activeCategoryEncodings = activeCategoryEncodings;\n    this.defaultDecision = defaultDecision;\n}",
                "ClassName": "CategoricalDecision",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder result = new java.lang.StringBuilder();\n    result.append(\"(#\").append(getFeatureNumber()).append(\" \u2208 [\");\n    int category = -1;\n    boolean first = true;\n    while ((category = activeCategoryEncodings.nextSetBit(category + 1)) >= 0) {\n        if (first) {\n            first = false;\n        } else {\n            result.append(',');\n        }\n        result.append(category);\n    } \n    result.append(\"])\");\n    return result.toString();\n}",
                "ClassName": "CategoricalDecision",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 1,
                "MethodName": "toString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 16,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 2,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 21,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(new com.cloudera.oryx.common.collection.Pair<>(3.0, \"foo\"), new com.cloudera.oryx.common.collection.Pair<>(3.0, \"foo\"));\n    org.junit.Assert.assertEquals(new com.cloudera.oryx.common.collection.Pair<>(null, null), new com.cloudera.oryx.common.collection.Pair<>(null, null));\n    org.junit.Assert.assertFalse(new com.cloudera.oryx.common.collection.Pair<>(3.0, \"foo\").equals(new com.cloudera.oryx.common.collection.Pair<>(4.0, \"foo\")));\n    assertNotEquals(new com.cloudera.oryx.common.collection.Pair(3.0, \"foo\"), new com.cloudera.oryx.common.collection.Pair(\"foo\", 3.0));\n    assertNotEquals(\"3.0,foo\", new com.cloudera.oryx.common.collection.Pair(3.0, \"foo\"));\n}",
        "ClassName": "PairTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 6,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testEquals",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this.first = first;\n    this.second = second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (!(o instanceof com.cloudera.oryx.common.collection.Pair)) {\n        return false;\n    }\n    @java.lang.SuppressWarnings(\"unchecked\")\n    com.cloudera.oryx.common.collection.Pair<A, B> other = ((com.cloudera.oryx.common.collection.Pair<A, B>) (o));\n    return java.util.Objects.equals(first, other.first) && java.util.Objects.equals(second, other.second);\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "equals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 12,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.speed.model-manager-class\", com.cloudera.oryx.app.speed.kmeans.KMeansSpeedModelManager.class.getName());\n    overlayConfig.put(\"oryx.speed.streaming.generation-interval-sec\", 6);\n    overlayConfig.put(\"oryx.speed.streaming.block-interval-sec\", 1);\n    overlayConfig.put(\"oryx.input-schema.feature-names\", \"[\\\"x\\\",\\\"y\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[]\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> updates = startServerProduceConsumeTopics(config, new com.cloudera.oryx.app.speed.kmeans.MockKMeansInputGenerator(), new com.cloudera.oryx.app.speed.kmeans.MockKMeansModelGenerator(), 300, 1);\n    for (com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> update : updates) {\n        com.cloudera.oryx.app.speed.kmeans.KMeansSpeedIT.log.info(\"{}\", update);\n    }\n    int numUpdates = updates.size();\n    org.junit.Assert.assertTrue(updates.size() >= (com.cloudera.oryx.app.speed.kmeans.KMeansSpeedIT.NUM_CLUSTERS + 1));\n    org.junit.Assert.assertEquals(\"MODEL\", updates.get(0).getFirst());\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.fromString(updates.get(0).getSecond());\n    org.dmg.pmml.Model model = pmml.getModels().get(0);\n    org.junit.Assert.assertTrue(model instanceof org.dmg.pmml.ClusteringModel);\n    org.dmg.pmml.ClusteringModel clusteringModel = ((org.dmg.pmml.ClusteringModel) (model));\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.speed.kmeans.KMeansSpeedIT.NUM_CLUSTERS, clusteringModel.getNumberOfClusters().intValue());\n    java.util.List<org.dmg.pmml.Cluster> clusters = clusteringModel.getClusters();\n    java.util.Map<java.lang.Integer, com.cloudera.oryx.app.kmeans.ClusterInfo> clusterInfos = new java.util.HashMap<>();\n    for (int i = 1; i < numUpdates; i++) {\n        com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> update = updates.get(i);\n        org.junit.Assert.assertEquals(\"UP\", update.getFirst());\n        java.util.List<?> fields = com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.readValue(update.getSecond(), java.util.List.class);\n        int clusterID = ((java.lang.Integer) (fields.get(0)));\n        double[] updatedCenter = com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.convertValue(fields.get(1), double[].class);\n        int updatedClusterSize = ((java.lang.Integer) (fields.get(2)));\n        clusterInfos.put(clusterID, new com.cloudera.oryx.app.kmeans.ClusterInfo(clusterID, updatedCenter, updatedClusterSize));\n    }\n    org.junit.Assert.assertEquals(3, clusterInfos.size());\n    for (com.cloudera.oryx.app.kmeans.ClusterInfo clusterInfo : clusterInfos.values()) {\n        int id = clusterInfo.getID();\n        org.dmg.pmml.Cluster cluster = clusters.get(id);\n        java.lang.String[] tokens = com.cloudera.oryx.common.text.TextUtils.parseDelimited(cluster.getArray().getValue(), ' ');\n        double[] modelCenter = com.cloudera.oryx.common.math.VectorMath.parseVector(tokens);\n        double[] updatedCenter = clusterInfo.getCenter();\n        org.junit.Assert.assertEquals(tokens.length, modelCenter.length);\n        org.junit.Assert.assertFalse(java.util.Arrays.equals(modelCenter, updatedCenter));\n        org.junit.Assert.assertArrayEquals(updatedCenter, com.cloudera.oryx.app.speed.kmeans.MockKMeansInputGenerator.UPDATE_POINTS[id], 0.1);\n        long updatedClusterSize = clusterInfo.getCount();\n        org.junit.Assert.assertTrue(updatedClusterSize > cluster.getSize());\n        org.junit.Assert.assertEquals(100 + cluster.getSize(), updatedClusterSize);\n    }\n}",
        "ClassName": "KMeansSpeedIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 3,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 6,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testKMeansSpeed",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 11,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 47,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "MockKMeansInputGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n}",
                "ClassName": "MockKMeansModelGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(center.length > 0);\n    com.google.common.base.Preconditions.checkArgument(initialCount >= 1);\n    this.id = id;\n    this.center = center;\n    this.count = initialCount;\n}",
                "ClassName": "ClusterInfo",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    java.lang.String topicBroker = (\"\\\"localhost:\" + localKafkaBrokerPort) + '\"';\n    java.lang.String topicLockMaster = (\"\\\"localhost:\" + localZKPort) + '\"';\n    overlay.put(\"oryx.input-topic.broker\", topicBroker);\n    overlay.put(\"oryx.input-topic.lock.master\", topicLockMaster);\n    overlay.put(\"oryx.update-topic.broker\", topicBroker);\n    overlay.put(\"oryx.update-topic.lock.master\", topicLockMaster);\n    java.lang.String masterLocalAllCores = \"\\\"local[*]\\\"\";\n    overlay.put(\"oryx.batch.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.speed.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.batch.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.speed.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int zkPort = getZKPort();\n    int kafkaPort = getKafkaBrokerPort();\n    com.cloudera.oryx.kafka.util.ProduceData inputProducer = new com.cloudera.oryx.kafka.util.ProduceData(inputGenerator, zkPort, kafkaPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC, howManyInput, 10);\n    com.cloudera.oryx.kafka.util.ProduceData updateProducer = new com.cloudera.oryx.kafka.util.ProduceData(updateGenerator, zkPort, kafkaPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, howManyUpdate, 10);\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> keyMessages;\n    try (com.cloudera.oryx.common.collection.CloseableIterator<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = new com.cloudera.oryx.kafka.util.ConsumeData(com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, zkPort).iterator();com.cloudera.oryx.lambda.speed.SpeedLayer<?, ?, ?> speedLayer = new com.cloudera.oryx.lambda.speed.SpeedLayer(config)) {\n        com.cloudera.oryx.lambda.speed.AbstractSpeedIT.log.info(\"Starting speed layer\");\n        speedLayer.start();\n        com.cloudera.oryx.lambda.speed.AbstractSpeedIT.log.info(\"Starting consumer thread\");\n        com.cloudera.oryx.kafka.util.ConsumeTopicRunnable consumeUpdate = new com.cloudera.oryx.kafka.util.ConsumeTopicRunnable(data);\n        new java.lang.Thread(consumeUpdate).start();\n        java.lang.Thread.sleep(3000);\n        com.cloudera.oryx.lambda.speed.AbstractSpeedIT.log.info(\"Producing updates\");\n        updateProducer.start();\n        long genIntervalSec = config.getInt(\"oryx.speed.streaming.generation-interval-sec\");\n        java.lang.Thread.sleep(genIntervalSec * 1000);\n        com.cloudera.oryx.lambda.speed.AbstractSpeedIT.log.info(\"Producing input\");\n        inputProducer.start();\n        java.lang.Thread.sleep(genIntervalSec * 1000);\n        keyMessages = consumeUpdate.getKeyMessages();\n    } finally {\n        inputProducer.deleteTopic();\n        updateProducer.deleteTopic();\n    }\n    return keyMessages;\n}",
                "ClassName": "AbstractSpeedIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServerProduceConsumeTopics",
                "NumberOfAsynchronousWaits": 3,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 27,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 9
            },
            {
                "Body": "{\n    return first;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return org.jpmml.model.JAXBUtil.unmarshalPMML(new javax.xml.transform.stream.StreamSource(new java.io.StringReader(pmmlString)));\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "fromString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return id;\n}",
                "ClassName": "ClusterInfo",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.text.TextUtils.doParseDelimited(delimited, com.cloudera.oryx.common.text.TextUtils.formatForDelimiter(delimiter));\n}",
                "ClassName": "TextUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "parseDelimited",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    double[] doubles = new double[values.length];\n    for (int i = 0; i < values.length; i++) {\n        doubles[i] = java.lang.Double.parseDouble(values[i]);\n    }\n    return doubles;\n}",
                "ClassName": "VectorMath",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "parseVector",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return center;\n}",
                "ClassName": "ClusterInfo",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getCenter",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return count;\n}",
                "ClassName": "ClusterInfo",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getCount",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 2,
        "TotalNumberOfAsynchronousWaits": 3,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 102,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 9
    },
    {
        "Body": "{\n    java.nio.file.Path tempModelFile = java.nio.file.Files.createTempFile(getTempDir(), \"model\", \".pmml.gz\");\n    org.dmg.pmml.PMML model = com.cloudera.oryx.common.pmml.PMMLUtilsTest.buildDummyModel();\n    com.cloudera.oryx.common.pmml.PMMLUtils.write(model, tempModelFile);\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(tempModelFile));\n    org.dmg.pmml.PMML model2 = com.cloudera.oryx.common.pmml.PMMLUtils.read(tempModelFile);\n    java.util.List<org.dmg.pmml.Model> models = model2.getModels();\n    org.junit.Assert.assertEquals(1, models.size());\n    org.junit.Assert.assertTrue(models.get(0) instanceof org.dmg.pmml.TreeModel);\n    org.dmg.pmml.TreeModel treeModel = ((org.dmg.pmml.TreeModel) (models.get(0)));\n    org.junit.Assert.assertEquals(123.0, treeModel.getNode().getRecordCount().doubleValue());\n    org.junit.Assert.assertEquals(MiningFunctionType.CLASSIFICATION, treeModel.getFunctionName());\n}",
        "ClassName": "PMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 6,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testReadWrite",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 5,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 5,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 13,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    if (tempDir == null) {\n        tempDir = java.nio.file.Files.createTempDirectory(\"OryxTest\").toAbsolutePath();\n        com.cloudera.oryx.common.OryxTest.log.info(\"Test temp dir is {}\", tempDir);\n        tempDir.toFile().deleteOnExit();\n    }\n    return tempDir;\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getTempDir",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 2,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.dmg.pmml.Node node = new org.dmg.pmml.Node();\n    node.setRecordCount(123.0);\n    org.dmg.pmml.TreeModel treeModel = new org.dmg.pmml.TreeModel(org.dmg.pmml.MiningFunctionType.CLASSIFICATION, null, node);\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.buildSkeletonPMML();\n    pmml.getModels().add(treeModel);\n    return pmml;\n}",
                "ClassName": "PMMLUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildDummyModel",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (java.io.OutputStream out = com.cloudera.oryx.common.io.IOUtils.writeMaybeCompressed(path, 1 << 16)) {\n        com.cloudera.oryx.common.pmml.PMMLUtils.write(pmml, out);\n    }\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "write",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (java.io.InputStream in = com.cloudera.oryx.common.io.IOUtils.readMaybeCompressed(path)) {\n        return com.cloudera.oryx.common.pmml.PMMLUtils.read(in);\n    }\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "read",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 2,
        "TotalNumberOfLines": 26,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.predict.Prediction prediction = new com.cloudera.oryx.app.rdf.predict.NumericPrediction(1.2, 3);\n    com.cloudera.oryx.app.rdf.tree.TerminalNode node = new com.cloudera.oryx.app.rdf.tree.TerminalNode(\"1\", prediction);\n    org.junit.Assert.assertTrue(node.isTerminal());\n    org.junit.Assert.assertSame(prediction, node.getPrediction());\n    org.junit.Assert.assertEquals(3, node.getCount());\n}",
        "ClassName": "TerminalNodeTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNode",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(initialCount);\n    this.prediction = prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    super(id);\n    this.prediction = prediction;\n}",
                "ClassName": "TerminalNode",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return true;\n}",
                "ClassName": "TerminalNode",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "isTerminal",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return prediction;\n}",
                "ClassName": "TerminalNode",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getPrediction",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return prediction.getCount();\n}",
                "ClassName": "TerminalNode",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getCount",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 17,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    doTestBatchLayer(4, 4);\n}",
        "ClassName": "BatchLayerIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 31,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBatchLayerMultipleReceivers",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 31,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    java.nio.file.Path dataDir = tempDir.resolve(\"data\");\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.batch.update-class\", com.cloudera.oryx.lambda.MockBatchUpdate.class.getName());\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.data-dir\", dataDir);\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.model-dir\", tempDir.resolve(\"model\"));\n    overlayConfig.put(\"oryx.batch.streaming.generation-interval-sec\", com.cloudera.oryx.lambda.BatchLayerIT.GEN_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.batch.streaming.block-interval-sec\", com.cloudera.oryx.lambda.BatchLayerIT.BLOCK_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.batch.storage.partitions\", partitions);\n    overlayConfig.put(\"oryx.batch.streaming.receiver-parallelism\", receivers);\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    java.util.List<com.cloudera.oryx.lambda.IntervalData<java.lang.String, java.lang.String>> intervalData = com.cloudera.oryx.lambda.MockBatchUpdate.getIntervalDataHolder();\n    intervalData.clear();\n    startMessaging();\n    startServerProduceConsumeTopics(config, com.cloudera.oryx.lambda.BatchLayerIT.DATA_TO_WRITE, com.cloudera.oryx.lambda.BatchLayerIT.WRITE_INTERVAL_MSEC);\n    int numIntervals = intervalData.size();\n    com.cloudera.oryx.lambda.BatchLayerIT.log.info(\"{} intervals: {}\", numIntervals, intervalData);\n    com.cloudera.oryx.lambda.AbstractBatchIT.checkOutputData(dataDir, com.cloudera.oryx.lambda.BatchLayerIT.DATA_TO_WRITE);\n    com.cloudera.oryx.lambda.AbstractBatchIT.checkIntervals(numIntervals, com.cloudera.oryx.lambda.BatchLayerIT.DATA_TO_WRITE, com.cloudera.oryx.lambda.BatchLayerIT.WRITE_INTERVAL_MSEC, com.cloudera.oryx.lambda.BatchLayerIT.GEN_INTERVAL_SEC);\n    com.cloudera.oryx.lambda.IntervalData<java.lang.String, java.lang.String> last = intervalData.get(0);\n    com.cloudera.oryx.lambda.BatchLayerIT.log.info(\"Interval 0: {}\", last);\n    for (int i = 1; i < numIntervals; i++) {\n        com.cloudera.oryx.lambda.IntervalData<java.lang.String, java.lang.String> current = intervalData.get(i);\n        com.cloudera.oryx.lambda.BatchLayerIT.log.info(\"Interval {}: {}\", i, current);\n        org.junit.Assert.assertTrue(current.getTimestamp() > last.getTimestamp());\n        org.junit.Assert.assertTrue(current.getPastData().size() >= last.getPastData().size());\n        org.junit.Assert.assertEquals(last.getPastData().size() + last.getCurrentData().size(), current.getPastData().size());\n        last = current;\n    }\n}",
                "ClassName": "BatchLayerIT",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 4,
                "MethodName": "doTestBatchLayer",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 31,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 31,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.predict.NumericPrediction prediction = new com.cloudera.oryx.app.rdf.predict.NumericPrediction(1.5, 1);\n    com.cloudera.oryx.app.rdf.predict.NumericPrediction prediction1 = new com.cloudera.oryx.app.rdf.predict.NumericPrediction(1.5, 2);\n    org.junit.Assert.assertEquals(prediction, prediction1);\n    prediction1.update(2.0, 2);\n    org.junit.Assert.assertFalse(prediction.equals(prediction1));\n    prediction1.update(1.5, 4);\n    org.junit.Assert.assertFalse(prediction.equals(prediction1));\n}",
        "ClassName": "NumericPredictionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 6,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testEquals",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 9,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(initialCount);\n    this.prediction = prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int count = getCount();\n    int newTotalCount = count + newCount;\n    double newToTotal = ((double) (newCount)) / newTotalCount;\n    setCount(newTotalCount);\n    prediction += newToTotal * (newPrediction - prediction);\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "update",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (!(o instanceof com.cloudera.oryx.app.rdf.predict.NumericPrediction)) {\n        return false;\n    }\n    com.cloudera.oryx.app.rdf.predict.NumericPrediction other = ((com.cloudera.oryx.app.rdf.predict.NumericPrediction) (o));\n    return prediction == other.prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "equals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 18,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"a\", \"1\", \"foo\" }, com.cloudera.oryx.common.text.TextUtils.parseDelimited(\"a,1,foo\", ','));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"a\", \"1\", \"foo\", \"\" }, com.cloudera.oryx.common.text.TextUtils.parseDelimited(\"a,1,foo,\", ','));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"2.3\" }, com.cloudera.oryx.common.text.TextUtils.parseDelimited(\"2.3\", ','));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"\\\"a\\\"\" }, com.cloudera.oryx.common.text.TextUtils.parseDelimited(\"\\\"\\\"\\\"a\\\"\\\"\\\"\", ','));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"\\\"\", \"\\\"\\\"\" }, com.cloudera.oryx.common.text.TextUtils.parseDelimited(\"\\\"\\\"\\\"\\\" \\\"\\\"\\\"\\\"\\\"\\\"\", ' '));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"\" }, com.cloudera.oryx.common.text.TextUtils.parseDelimited(\"\", ','));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"a\", \"1,\", \",foo\" }, com.cloudera.oryx.common.text.TextUtils.parseDelimited(\"a\\t1,\\t,foo\", '\\t'));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"a\", \"1\", \"foo\", \"\" }, com.cloudera.oryx.common.text.TextUtils.parseDelimited(\"a 1 foo \", ' '));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"-1.0\", \"a\\\" \\\"b\" }, com.cloudera.oryx.common.text.TextUtils.parseDelimited(\"-1.0 a\\\"\\\\ \\\"b\", ' '));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"-1.0\", \"a\\\"b\\\"c\" }, com.cloudera.oryx.common.text.TextUtils.parseDelimited(\"-1.0 \\\"a\\\\\\\"b\\\\\\\"c\\\"\", ' '));\n}",
        "ClassName": "TextUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testParseDelimited",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 10,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 12,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return com.cloudera.oryx.common.text.TextUtils.doParseDelimited(delimited, com.cloudera.oryx.common.text.TextUtils.formatForDelimiter(delimiter));\n}",
                "ClassName": "TextUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "parseDelimited",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.nio.file.Path testDir = createTestDirs();\n    java.util.List<java.nio.file.Path> files = com.cloudera.oryx.common.io.IOUtils.listFiles(testDir, \"*/*\");\n    org.junit.Assert.assertEquals(testDir.resolve(\"subDir1\").resolve(\"subDir2\"), files.get(0));\n    org.junit.Assert.assertEquals(testDir.resolve(\"subDir1\").resolve(\"subFile2\"), files.get(1));\n}",
        "ClassName": "IOUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 3,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 23,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testOrder",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 17,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(tempDir));\n    java.nio.file.Path subFile1 = tempDir.resolve(\"subFile1\");\n    java.nio.file.Files.write(subFile1, com.cloudera.oryx.common.io.IOUtilsTest.SOME_BYTES);\n    java.nio.file.Path hidden = tempDir.resolve(\".hidden\");\n    java.nio.file.Files.write(hidden, com.cloudera.oryx.common.io.IOUtilsTest.NO_BYTES);\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(subFile1));\n    java.nio.file.Path subDir1 = tempDir.resolve(\"subDir1\");\n    java.nio.file.Files.createDirectory(subDir1);\n    java.nio.file.Path subFile2 = subDir1.resolve(\"subFile2\");\n    java.nio.file.Files.write(subFile2, com.cloudera.oryx.common.io.IOUtilsTest.SOME_BYTES);\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(subFile2));\n    java.nio.file.Path subDir2 = subDir1.resolve(\"subDir2\");\n    java.nio.file.Files.createDirectory(subDir2);\n    return tempDir;\n}",
                "ClassName": "IOUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "createTestDirs",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 17,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(java.nio.file.Files.isDirectory(dir), \"%s is not a directory\", dir);\n    java.util.List<java.lang.String> globLevels;\n    if ((glob == null) || glob.isEmpty()) {\n        globLevels = java.util.Collections.singletonList(\"*\");\n    } else {\n        globLevels = java.util.Arrays.asList(glob.split(\"/\"));\n    }\n    com.google.common.base.Preconditions.checkState(!globLevels.isEmpty());\n    java.util.List<java.nio.file.Path> paths = new java.util.ArrayList<>();\n    paths.add(dir);\n    for (java.lang.String globLevel : globLevels) {\n        java.util.List<java.nio.file.Path> newPaths = new java.util.ArrayList<>();\n        for (java.nio.file.Path existingPath : paths) {\n            if (java.nio.file.Files.isDirectory(existingPath)) {\n                try (java.nio.file.DirectoryStream<java.nio.file.Path> stream = java.nio.file.Files.newDirectoryStream(existingPath, globLevel)) {\n                    for (java.nio.file.Path path : stream) {\n                        if (!path.getFileName().toString().startsWith(\".\")) {\n                            newPaths.add(path);\n                        }\n                    }\n                }\n            }\n        }\n        paths = newPaths;\n    }\n    java.util.Collections.sort(paths);\n    return paths;\n}",
                "ClassName": "IOUtils",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "listFiles",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 29,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 6,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 46,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.rdf.tree.DecisionForest forest = com.cloudera.oryx.app.rdf.tree.DecisionForestTest.buildTestForest();\n    com.cloudera.oryx.app.rdf.predict.NumericPrediction prediction = ((com.cloudera.oryx.app.rdf.predict.NumericPrediction) (forest.predict(new com.cloudera.oryx.app.rdf.example.Example(null, com.cloudera.oryx.app.rdf.example.NumericFeature.forValue(0.5)))));\n    com.cloudera.oryx.common.OryxTest.assertEquals(1.0, prediction.getPrediction());\n}",
        "ClassName": "DecisionForestTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testPredict",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(features != null);\n    this.features = features;\n    this.target = target;\n    com.google.common.hash.Hasher hasher = com.cloudera.oryx.app.rdf.example.Example.HASH.newHasher();\n    for (com.cloudera.oryx.app.rdf.example.Feature feature : features) {\n        if (feature != null) {\n            hasher.putInt(feature.hashCode());\n        }\n    }\n    if (target != null) {\n        hasher.putInt(target.hashCode());\n    }\n    cachedHashCode = hasher.hashCode();\n}",
                "ClassName": "Example",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new com.cloudera.oryx.app.rdf.tree.DecisionForest(new com.cloudera.oryx.app.rdf.tree.DecisionTree[]{ com.cloudera.oryx.app.rdf.tree.DecisionTreeTest.buildTestTree(), com.cloudera.oryx.app.rdf.tree.DecisionTreeTest.buildTestTree() }, new double[]{ 1.0, 2.0 }, null);\n}",
                "ClassName": "DecisionForestTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildTestForest",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.rdf.predict.WeightedPrediction.voteOnFeature(com.google.common.collect.Lists.transform(java.util.Arrays.asList(trees), new com.cloudera.oryx.app.rdf.tree.DecisionForest.TreeToPredictionFunction(test)), weights);\n}",
                "ClassName": "DecisionForest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "predict",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return value == 0.0F ? com.cloudera.oryx.app.rdf.example.NumericFeature.ZERO : new com.cloudera.oryx.app.rdf.example.NumericFeature(value);\n}",
                "ClassName": "NumericFeature",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "forValue",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getPrediction",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 30,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<org.dmg.pmml.DataField> dataFields = new java.util.ArrayList<>();\n    dataFields.add(new org.dmg.pmml.DataField(org.dmg.pmml.FieldName.create(\"foo\"), org.dmg.pmml.OpType.CONTINUOUS, org.dmg.pmml.DataType.DOUBLE));\n    org.dmg.pmml.DataField barField = new org.dmg.pmml.DataField(org.dmg.pmml.FieldName.create(\"bar\"), org.dmg.pmml.OpType.CATEGORICAL, org.dmg.pmml.DataType.STRING);\n    barField.getValues().add(new org.dmg.pmml.Value(\"b\"));\n    barField.getValues().add(new org.dmg.pmml.Value(\"a\"));\n    dataFields.add(barField);\n    org.dmg.pmml.DataDictionary dictionary = new org.dmg.pmml.DataDictionary(dataFields);\n    dictionary.setNumberOfFields(dataFields.size());\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings encodings = com.cloudera.oryx.app.pmml.AppPMMLUtils.buildCategoricalValueEncodings(dictionary);\n    org.junit.Assert.assertEquals(2, encodings.getValueCount(1));\n    org.junit.Assert.assertEquals(0, encodings.getValueEncodingMap(1).get(\"b\").intValue());\n    org.junit.Assert.assertEquals(1, encodings.getValueEncodingMap(1).get(\"a\").intValue());\n    org.junit.Assert.assertEquals(\"b\", encodings.getEncodingValueMap(1).get(0));\n    org.junit.Assert.assertEquals(\"a\", encodings.getEncodingValueMap(1).get(1));\n    org.junit.Assert.assertEquals(java.util.Collections.singletonMap(1, 2), encodings.getCategoryCounts());\n}",
        "ClassName": "AppPMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 6,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBuildCategoricalEncoding",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 6,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 17,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.Map<java.lang.Integer, java.util.Collection<java.lang.String>> indexToValues = new java.util.HashMap<>();\n    java.util.List<org.dmg.pmml.DataField> dataFields = dictionary.getDataFields();\n    for (int featureIndex = 0; featureIndex < dataFields.size(); featureIndex++) {\n        org.dmg.pmml.TypeDefinitionField field = dataFields.get(featureIndex);\n        java.util.Collection<org.dmg.pmml.Value> values = field.getValues();\n        if ((values != null) && (!values.isEmpty())) {\n            java.util.Collection<java.lang.String> categoricalValues = new java.util.ArrayList<>();\n            for (org.dmg.pmml.Value value : values) {\n                categoricalValues.add(value.getValue());\n            }\n            indexToValues.put(featureIndex, categoricalValues);\n        }\n    }\n    return new com.cloudera.oryx.app.schema.CategoricalValueEncodings(indexToValues);\n}",
                "ClassName": "AppPMMLUtils",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "buildCategoricalValueEncodings",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 16,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return doGetMap(index).size();\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getValueCount",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return doGetMap(index);\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getValueEncodingMap",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return doGetMap(index).inverse();\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getEncodingValueMap",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.Integer, java.lang.Integer> counts = new java.util.HashMap(encodingsForIndex.size());\n    for (java.util.Map.Entry<java.lang.Integer, com.google.common.collect.BiMap<java.lang.String, java.lang.Integer>> entry : encodingsForIndex.entrySet()) {\n        counts.put(entry.getKey(), entry.getValue().size());\n    }\n    return counts;\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "getCategoryCounts",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 4,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 32,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(\"3.0,foo\", new com.cloudera.oryx.common.collection.Pair<>(3.0, \"foo\").toString());\n}",
        "ClassName": "PairTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testToString",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this.first = first;\n    this.second = second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return (first + \",\") + second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "toString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 7,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    float[] a = new float[]{ 1.0E-24F };\n    com.cloudera.oryx.common.OryxTest.assertEquals(1.0E-24 * 1.0E-24, com.cloudera.oryx.common.math.VectorMath.dot(a, a));\n}",
        "ClassName": "VectorMathTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testSmall",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int length = x.length;\n    double dot = 0.0;\n    for (int i = 0; i < length; i++) {\n        dot += ((double) (x[i])) * ((double) (y[i]));\n    }\n    return dot;\n}",
                "ClassName": "VectorMath",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "dot",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 11,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.speed.model-manager-class\", com.cloudera.oryx.app.speed.rdf.RDFSpeedModelManager.class.getName());\n    overlayConfig.put(\"oryx.speed.streaming.generation-interval-sec\", 5);\n    overlayConfig.put(\"oryx.speed.streaming.block-interval-sec\", 1);\n    overlayConfig.put(\"oryx.input-schema.feature-names\", \"[\\\"foo\\\",\\\"bar\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[]\");\n    overlayConfig.put(\"oryx.input-schema.target-feature\", \"bar\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> updates = startServerProduceConsumeTopics(config, new com.cloudera.oryx.app.speed.rdf.MockRDFRegressionInputGenerator(), new com.cloudera.oryx.app.speed.rdf.MockRDFRegressionModelGenerator(), com.cloudera.oryx.app.speed.rdf.RDFSpeedIT.NUM_INPUT, 1);\n    if (com.cloudera.oryx.app.speed.rdf.RDFSpeedIT.log.isDebugEnabled()) {\n        for (com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> update : updates) {\n            com.cloudera.oryx.app.speed.rdf.RDFSpeedIT.log.debug(\"{}\", update);\n        }\n    }\n    int numUpdates = updates.size();\n    org.junit.Assert.assertTrue((numUpdates >= 3) && ((numUpdates % 2) != 0));\n    org.junit.Assert.assertEquals(\"MODEL\", updates.get(0).getFirst());\n    for (int i = 1; i < numUpdates; i++) {\n        com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> update = updates.get(i);\n        org.junit.Assert.assertEquals(\"UP\", update.getFirst());\n        java.util.List<?> fields = com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.readValue(update.getSecond(), java.util.List.class);\n        int treeID = ((java.lang.Integer) (fields.get(0)));\n        java.lang.String nodeID = fields.get(1).toString();\n        double mean = ((java.lang.Double) (fields.get(2)));\n        org.junit.Assert.assertEquals(0, treeID);\n        org.junit.Assert.assertTrue(\"r-\".equals(nodeID) || \"r+\".equals(nodeID));\n        if (\"r+\".equals(nodeID)) {\n            org.junit.Assert.assertEquals(5.0, mean, 0.5);\n        } else {\n            org.junit.Assert.assertEquals(-4.0, mean, 0.5);\n        }\n    }\n    for (int i = 1; i < numUpdates; i += 2) {\n        com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> update1 = updates.get(i);\n        com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String> update2 = updates.get(i + 1);\n        java.util.List<?> fields1 = com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.readValue(update1.getSecond(), java.util.List.class);\n        java.util.List<?> fields2 = com.cloudera.oryx.lambda.AbstractLambdaIT.MAPPER.readValue(update2.getSecond(), java.util.List.class);\n        int count1 = ((java.lang.Integer) (fields1.get(3)));\n        int count2 = ((java.lang.Integer) (fields2.get(3)));\n        org.junit.Assert.assertTrue(java.lang.Math.abs(count1 - count2) <= 1);\n        java.lang.String nodeID1 = fields1.get(1).toString();\n        java.lang.String nodeID2 = fields2.get(1).toString();\n        if (\"r-\".equals(nodeID1)) {\n            org.junit.Assert.assertEquals(\"r+\", nodeID2);\n        } else {\n            org.junit.Assert.assertEquals(\"r-\", nodeID2);\n        }\n    }\n}",
        "ClassName": "RDFSpeedIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 6,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 9,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 1,
        "MethodName": "testRDFSpeedRegression",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 10,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 51,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "MockRDFRegressionInputGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n}",
                "ClassName": "MockRDFRegressionModelGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    java.lang.String topicBroker = (\"\\\"localhost:\" + localKafkaBrokerPort) + '\"';\n    java.lang.String topicLockMaster = (\"\\\"localhost:\" + localZKPort) + '\"';\n    overlay.put(\"oryx.input-topic.broker\", topicBroker);\n    overlay.put(\"oryx.input-topic.lock.master\", topicLockMaster);\n    overlay.put(\"oryx.update-topic.broker\", topicBroker);\n    overlay.put(\"oryx.update-topic.lock.master\", topicLockMaster);\n    java.lang.String masterLocalAllCores = \"\\\"local[*]\\\"\";\n    overlay.put(\"oryx.batch.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.speed.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.batch.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.speed.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int zkPort = getZKPort();\n    int kafkaPort = getKafkaBrokerPort();\n    com.cloudera.oryx.kafka.util.ProduceData inputProducer = new com.cloudera.oryx.kafka.util.ProduceData(inputGenerator, zkPort, kafkaPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC, howManyInput, 10);\n    com.cloudera.oryx.kafka.util.ProduceData updateProducer = new com.cloudera.oryx.kafka.util.ProduceData(updateGenerator, zkPort, kafkaPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, howManyUpdate, 10);\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> keyMessages;\n    try (com.cloudera.oryx.common.collection.CloseableIterator<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = new com.cloudera.oryx.kafka.util.ConsumeData(com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, zkPort).iterator();com.cloudera.oryx.lambda.speed.SpeedLayer<?, ?, ?> speedLayer = new com.cloudera.oryx.lambda.speed.SpeedLayer(config)) {\n        com.cloudera.oryx.lambda.speed.AbstractSpeedIT.log.info(\"Starting speed layer\");\n        speedLayer.start();\n        com.cloudera.oryx.lambda.speed.AbstractSpeedIT.log.info(\"Starting consumer thread\");\n        com.cloudera.oryx.kafka.util.ConsumeTopicRunnable consumeUpdate = new com.cloudera.oryx.kafka.util.ConsumeTopicRunnable(data);\n        new java.lang.Thread(consumeUpdate).start();\n        java.lang.Thread.sleep(3000);\n        com.cloudera.oryx.lambda.speed.AbstractSpeedIT.log.info(\"Producing updates\");\n        updateProducer.start();\n        long genIntervalSec = config.getInt(\"oryx.speed.streaming.generation-interval-sec\");\n        java.lang.Thread.sleep(genIntervalSec * 1000);\n        com.cloudera.oryx.lambda.speed.AbstractSpeedIT.log.info(\"Producing input\");\n        inputProducer.start();\n        java.lang.Thread.sleep(genIntervalSec * 1000);\n        keyMessages = consumeUpdate.getKeyMessages();\n    } finally {\n        inputProducer.deleteTopic();\n        updateProducer.deleteTopic();\n    }\n    return keyMessages;\n}",
                "ClassName": "AbstractSpeedIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServerProduceConsumeTopics",
                "NumberOfAsynchronousWaits": 3,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 27,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 9
            },
            {
                "Body": "{\n    return first;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFirst",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return second;\n}",
                "ClassName": "Pair",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getSecond",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 3,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 73,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 9
    },
    {
        "Body": "{\n    int[] counts = new int[]{ 0, 1, 3, 0, 4, 0 };\n    com.cloudera.oryx.app.rdf.predict.CategoricalPrediction prediction = new com.cloudera.oryx.app.rdf.predict.CategoricalPrediction(counts);\n    com.cloudera.oryx.app.rdf.example.Example example = new com.cloudera.oryx.app.rdf.example.Example(com.cloudera.oryx.app.rdf.example.CategoricalFeature.forEncoding(2));\n    prediction.update(example);\n    prediction.update(example);\n    org.junit.Assert.assertEquals(2, prediction.getMostProbableCategoryEncoding());\n    counts[2] += 2;\n    org.junit.Assert.assertArrayEquals(counts, prediction.getCategoryCounts());\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(new double[]{ 0.0, 0.1, 0.5, 0.0, 0.4, 0.0 }, prediction.getCategoryProbabilities());\n}",
        "ClassName": "CategoricalPredictionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testUpdate",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 11,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(com.cloudera.oryx.app.rdf.predict.CategoricalPrediction.sum(categoryCounts));\n    this.categoryCounts = categoryCounts;\n    recompute();\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(features != null);\n    this.features = features;\n    this.target = target;\n    com.google.common.hash.Hasher hasher = com.cloudera.oryx.app.rdf.example.Example.HASH.newHasher();\n    for (com.cloudera.oryx.app.rdf.example.Feature feature : features) {\n        if (feature != null) {\n            hasher.putInt(feature.hashCode());\n        }\n    }\n    if (target != null) {\n        hasher.putInt(target.hashCode());\n    }\n    cachedHashCode = hasher.hashCode();\n}",
                "ClassName": "Example",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(encoding >= 0);\n    java.lang.Integer encodingKey = encoding;\n    com.cloudera.oryx.app.rdf.example.CategoricalFeature feature = com.cloudera.oryx.app.rdf.example.CategoricalFeature.FEATURE_CACHE.get(encodingKey);\n    if (feature == null) {\n        feature = new com.cloudera.oryx.app.rdf.example.CategoricalFeature(encoding);\n        com.cloudera.oryx.app.rdf.example.CategoricalFeature.FEATURE_CACHE.put(encodingKey, feature);\n    }\n    return feature;\n}",
                "ClassName": "CategoricalFeature",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "forEncoding",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 10,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.app.rdf.example.CategoricalFeature target = ((com.cloudera.oryx.app.rdf.example.CategoricalFeature) (train.getTarget()));\n    update(target.getEncoding(), 1);\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "update",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return maxCategory;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getMostProbableCategoryEncoding",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return categoryCounts;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getCategoryCounts",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertArrayEquals(expecteds, actuals, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertArrayEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return categoryProbabilities;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getCategoryProbabilities",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 4,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 46,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.app.rdf.RDFPMMLUtilsTest.buildDummyRegressionModel();\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.input-schema.feature-names\", \"[\\\"foo\\\",\\\"bar\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[]\");\n    overlayConfig.put(\"oryx.input-schema.target-feature\", \"bar\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    com.cloudera.oryx.app.schema.InputSchema schema = new com.cloudera.oryx.app.schema.InputSchema(config);\n    com.cloudera.oryx.app.rdf.RDFPMMLUtils.validatePMMLVsSchema(pmml, schema);\n}",
        "ClassName": "RDFPMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 26,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testValidateRegression",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 10,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<java.lang.String> givenFeatureNames = config.getStringList(\"oryx.input-schema.feature-names\");\n    if (givenFeatureNames.isEmpty()) {\n        int numFeatures = config.getInt(\"oryx.input-schema.num-features\");\n        com.google.common.base.Preconditions.checkArgument(numFeatures > 0, \"Neither feature-names nor num-features is set\");\n        java.util.List<java.lang.String> generatedFeatureNames = new java.util.ArrayList<>(numFeatures);\n        for (int i = 0; i < numFeatures; i++) {\n            generatedFeatureNames.add(java.lang.Integer.toString(i));\n        }\n        featureNames = generatedFeatureNames;\n    } else {\n        featureNames = com.google.common.collect.ImmutableList.copyOf(givenFeatureNames);\n    }\n    int numFeatures = featureNames.size();\n    com.google.common.base.Preconditions.checkArgument(new java.util.HashSet<>(featureNames).size() == numFeatures, \"Feature names must be unique: %s\", featureNames);\n    idFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.id-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(idFeatures));\n    java.util.Collection<java.lang.String> ignoredFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.ignored-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(ignoredFeatures));\n    java.util.Collection<java.lang.String> activeFeatureSet = new java.util.HashSet<>(featureNames);\n    activeFeatureSet.removeAll(idFeatures);\n    activeFeatureSet.removeAll(ignoredFeatures);\n    activeFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    java.util.List<java.lang.String> givenNumericFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.numeric-features\");\n    java.util.List<java.lang.String> givenCategoricalFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.categorical-features\");\n    if (givenNumericFeatures == null) {\n        com.google.common.base.Preconditions.checkNotNull(givenCategoricalFeatures, \"Neither numeric-features nor categorical-features was set\");\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(givenCategoricalFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(categoricalFeatures));\n        activeFeatureSet.removeAll(categoricalFeatures);\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    } else {\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(givenNumericFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(numericFeatures));\n        activeFeatureSet.removeAll(numericFeatures);\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    }\n    targetFeature = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalString(config, \"oryx.input-schema.target-feature\");\n    if (targetFeature != null) {\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.contains(targetFeature), \"Target feature is not known, an ID, or ignored: %s\", targetFeature);\n    }\n    targetFeatureIndex = (targetFeature == null) ? -1 : featureNames.indexOf(targetFeature);\n    allToPredictorMap = com.google.common.collect.HashBiMap.create();\n    for (int featureIndex = 0, predictorIndex = 0; featureIndex < featureNames.size(); featureIndex++) {\n        if (isActive(featureIndex) && (!isTarget(featureIndex))) {\n            allToPredictorMap.put(featureIndex, predictorIndex);\n            predictorIndex++;\n        }\n    }\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 50,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.buildSkeletonPMML();\n    java.util.List<org.dmg.pmml.DataField> dataFields = new java.util.ArrayList<>();\n    dataFields.add(new org.dmg.pmml.DataField(org.dmg.pmml.FieldName.create(\"foo\"), org.dmg.pmml.OpType.CONTINUOUS, org.dmg.pmml.DataType.DOUBLE));\n    dataFields.add(new org.dmg.pmml.DataField(org.dmg.pmml.FieldName.create(\"bar\"), org.dmg.pmml.OpType.CONTINUOUS, org.dmg.pmml.DataType.DOUBLE));\n    org.dmg.pmml.DataDictionary dataDictionary = new org.dmg.pmml.DataDictionary(dataFields);\n    dataDictionary.setNumberOfFields(dataFields.size());\n    pmml.setDataDictionary(dataDictionary);\n    java.util.List<org.dmg.pmml.MiningField> miningFields = new java.util.ArrayList<>();\n    org.dmg.pmml.MiningField predictorMF = new org.dmg.pmml.MiningField(org.dmg.pmml.FieldName.create(\"foo\"));\n    predictorMF.setOpType(OpType.CONTINUOUS);\n    predictorMF.setUsageType(FieldUsageType.ACTIVE);\n    predictorMF.setImportance(0.5);\n    miningFields.add(predictorMF);\n    org.dmg.pmml.MiningField targetMF = new org.dmg.pmml.MiningField(org.dmg.pmml.FieldName.create(\"bar\"));\n    targetMF.setOpType(OpType.CONTINUOUS);\n    targetMF.setUsageType(FieldUsageType.PREDICTED);\n    miningFields.add(targetMF);\n    org.dmg.pmml.MiningSchema miningSchema = new org.dmg.pmml.MiningSchema(miningFields);\n    org.dmg.pmml.Node rootNode = new org.dmg.pmml.Node();\n    rootNode.setId(\"r\");\n    double dummyCount = 2.0;\n    rootNode.setRecordCount(dummyCount);\n    rootNode.setPredicate(new org.dmg.pmml.True());\n    double halfCount = dummyCount / 2;\n    org.dmg.pmml.Node left = new org.dmg.pmml.Node();\n    left.setId(\"r-\");\n    left.setRecordCount(halfCount);\n    left.setPredicate(new org.dmg.pmml.True());\n    left.setScore(\"-2.0\");\n    org.dmg.pmml.Node right = new org.dmg.pmml.Node();\n    right.setId(\"r+\");\n    right.setRecordCount(halfCount);\n    org.dmg.pmml.SimplePredicate predicate = new org.dmg.pmml.SimplePredicate(org.dmg.pmml.FieldName.create(\"foo\"), SimplePredicate.Operator.GREATER_THAN);\n    predicate.setValue(\"3.14\");\n    right.setPredicate(predicate);\n    right.setScore(\"2.0\");\n    rootNode.getNodes().add(right);\n    rootNode.getNodes().add(left);\n    org.dmg.pmml.TreeModel treeModel = new org.dmg.pmml.TreeModel(org.dmg.pmml.MiningFunctionType.REGRESSION, miningSchema, rootNode);\n    treeModel.setSplitCharacteristic(TreeModel.SplitCharacteristic.BINARY_SPLIT);\n    treeModel.setMissingValueStrategy(MissingValueStrategyType.DEFAULT_CHILD);\n    treeModel.setMiningSchema(miningSchema);\n    pmml.getModels().add(treeModel);\n    return pmml;\n}",
                "ClassName": "RDFPMMLUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildDummyRegressionModel",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 46,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.List<org.dmg.pmml.Model> models = pmml.getModels();\n    com.google.common.base.Preconditions.checkArgument(models.size() == 1, \"Should have exactly one model, but had %s\", models.size());\n    org.dmg.pmml.Model model = models.get(0);\n    org.dmg.pmml.MiningFunctionType function = model.getFunctionName();\n    if (schema.isClassification()) {\n        com.google.common.base.Preconditions.checkArgument(function == org.dmg.pmml.MiningFunctionType.CLASSIFICATION, \"Expected classification function type but got %s\", function);\n    } else {\n        com.google.common.base.Preconditions.checkArgument(function == org.dmg.pmml.MiningFunctionType.REGRESSION, \"Expected regression function type but got %s\", function);\n    }\n    org.dmg.pmml.DataDictionary dictionary = pmml.getDataDictionary();\n    com.google.common.base.Preconditions.checkArgument(schema.getFeatureNames().equals(com.cloudera.oryx.app.pmml.AppPMMLUtils.getFeatureNames(dictionary)), \"Feature names in schema don't match names in PMML\");\n    org.dmg.pmml.MiningSchema miningSchema = model.getMiningSchema();\n    com.google.common.base.Preconditions.checkArgument(schema.getFeatureNames().equals(com.cloudera.oryx.app.pmml.AppPMMLUtils.getFeatureNames(miningSchema)));\n    if (schema.hasTarget()) {\n        int schemaIndex = schema.getTargetFeatureIndex();\n        int pmmlIndex = com.cloudera.oryx.app.pmml.AppPMMLUtils.findTargetIndex(miningSchema);\n        com.google.common.base.Preconditions.checkArgument(schemaIndex == pmmlIndex, \"Configured schema expects target at index %s, but PMML has target at index %s\", schemaIndex, pmmlIndex);\n    } else {\n        com.google.common.base.Preconditions.checkArgument(com.cloudera.oryx.app.pmml.AppPMMLUtils.findTargetIndex(miningSchema) == null);\n    }\n}",
                "ClassName": "RDFPMMLUtils",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "validatePMMLVsSchema",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 22,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 9,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 130,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String response = target(\"/knownItems/U1\").request().get(java.lang.String.class);\n    java.util.List<java.lang.String> items = java.util.Arrays.asList(response.split(\"\\n\"));\n    org.junit.Assert.assertEquals(5, items.size());\n    for (int i : new int[]{ 1, 4, 5, 7, 8 }) {\n        org.junit.Assert.assertTrue(items.contains(\"I\" + i));\n    }\n}",
        "ClassName": "KnownItemsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 1,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testKnownItemsCSV",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    target(\"/similarity\").request().get(java.lang.String.class);\n}",
        "ClassName": "SimilarityTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNoArg",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.serving.application-resources\", \"\\\"com.cloudera.oryx.app.serving,com.cloudera.oryx.app.serving.als\\\"\");\n    overlayConfig.put(\"oryx.serving.model-manager-class\", com.cloudera.oryx.app.serving.als.model.ALSServingModelManager.class.getName());\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    startServer(config);\n    startUpdateTopics(new com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator(), 10);\n    java.lang.Thread.sleep(1000);\n    com.cloudera.oryx.app.serving.als.model.ALSServingModelManager manager = ((com.cloudera.oryx.app.serving.als.model.ALSServingModelManager) (getServingLayer().getContext().getServletContext().getAttribute(com.cloudera.oryx.app.serving.AbstractOryxResource.MODEL_MANAGER_KEY)));\n    org.junit.Assert.assertNotNull(\"Manager must initialize in web context\", manager);\n    com.cloudera.oryx.app.serving.als.model.ALSServingModel model = manager.getModel();\n    com.cloudera.oryx.app.serving.als.model.ALSServingModelManagerIT.log.debug(\"{}\", model);\n    org.junit.Assert.assertNotNull(model);\n    org.junit.Assert.assertEquals(2, model.getFeatures());\n    org.junit.Assert.assertTrue(model.isImplicit());\n    java.util.Collection<java.lang.String> expectedItems = com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator.Y.keySet();\n    org.junit.Assert.assertTrue(expectedItems.containsAll(model.getAllItemIDs()));\n    org.junit.Assert.assertTrue(model.getAllItemIDs().containsAll(expectedItems));\n    org.junit.Assert.assertNotNull(model.getYTYSolver());\n    for (java.util.Map.Entry<java.lang.String, float[]> entry : com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator.X.entrySet()) {\n        com.cloudera.oryx.common.OryxTest.assertArrayEquals(entry.getValue(), model.getUserVector(entry.getKey()));\n    }\n    for (java.util.Map.Entry<java.lang.String, float[]> entry : com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator.Y.entrySet()) {\n        com.cloudera.oryx.common.OryxTest.assertArrayEquals(entry.getValue(), model.getItemVector(entry.getKey()));\n    }\n    for (java.util.Map.Entry<java.lang.String, java.util.Collection<java.lang.String>> entry : com.cloudera.oryx.app.speed.als.MockALSModelUpdateGenerator.A.entrySet()) {\n        java.util.Collection<java.lang.String> expected = entry.getValue();\n        java.util.Collection<java.lang.String> actual = model.getKnownItems(entry.getKey());\n        org.junit.Assert.assertTrue(expected.containsAll(actual));\n        org.junit.Assert.assertTrue(actual.containsAll(expected));\n    }\n}",
        "ClassName": "ALSServingModelManagerIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 3,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 1,
        "MethodName": "testALSServingModel",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 9,
        "NumberOfAsynchronousWaits": 1,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 33,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 2,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "MockALSModelUpdateGenerator",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    overlay.put(\"oryx.serving.api.port\", httpPort);\n    overlay.put(\"oryx.serving.api.secure-port\", httpsPort);\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, super.getConfig());\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    servingLayer = new com.cloudera.oryx.lambda.serving.ServingLayer(config);\n    com.cloudera.oryx.lambda.serving.AbstractServingIT.log.info(\"Starting serving layer\");\n    servingLayer.start();\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServer",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int zkPort = getZKPort();\n    int kafkaPort = getKafkaBrokerPort();\n    updateProducer = new com.cloudera.oryx.kafka.util.ProduceData(updateGenerator, zkPort, kafkaPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC, howManyUpdate, 0);\n    com.cloudera.oryx.lambda.serving.AbstractServingIT.log.info(\"Producing updates\");\n    updateProducer.start();\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startUpdateTopics",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return context;\n}",
                "ClassName": "ServingLayer",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getContext",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return servingLayer;\n}",
                "ClassName": "AbstractServingIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "getServingLayer",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return model;\n}",
                "ClassName": "ALSServingModelManager",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getModel",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return features;\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFeatures",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return implicit;\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isImplicit",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Collection<java.lang.String> itemsList = new java.util.ArrayList<>();\n    for (int partition = 0; partition < Y.length; partition++) {\n        try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(yLocks[partition].readLock())) {\n            itemsList.addAll(Y[partition].keySet());\n        }\n    }\n    return itemsList;\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "getAllItemIDs",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 6
            },
            {
                "Body": "{\n    org.apache.commons.math3.linear.RealMatrix YTY = null;\n    for (int partition = 0; partition < Y.length; partition++) {\n        org.apache.commons.math3.linear.RealMatrix YTYpartial;\n        try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(yLocks[partition].readLock())) {\n            YTYpartial = com.cloudera.oryx.common.math.VectorMath.transposeTimesSelf(Y[partition].values());\n        }\n        if (YTYpartial != null) {\n            YTY = (YTY == null) ? YTYpartial : YTY.add(YTYpartial);\n        }\n    }\n    return new com.cloudera.oryx.common.math.LinearSystemSolver().getSolver(YTY);\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "getYTYSolver",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 13,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 6
            },
            {
                "Body": "{\n    org.junit.Assert.assertArrayEquals(expecteds, actuals, com.cloudera.oryx.common.OryxTest.FLOAT_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertArrayEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(xLock.readLock())) {\n        return X.get(user);\n    }\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getUserVector",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 4
            },
            {
                "Body": "{\n    int partition = com.cloudera.oryx.app.serving.als.model.ALSServingModel.partition(item);\n    try (com.cloudera.oryx.common.lang.AutoLock al = new com.cloudera.oryx.common.lang.AutoLock(yLocks[partition].readLock())) {\n        return Y[partition].get(item);\n    }\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getItemVector",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 6,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 6
            },
            {
                "Body": "{\n    return doGetKnownItems(user);\n}",
                "ClassName": "ALSServingModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getKnownItems",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 4,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 95,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 22
    },
    {
        "Body": "{\n    int[] counts = new int[]{ 0, 1, 3, 0, 4, 0 };\n    com.cloudera.oryx.app.rdf.predict.CategoricalPrediction prediction = new com.cloudera.oryx.app.rdf.predict.CategoricalPrediction(counts);\n    org.junit.Assert.assertEquals(-504480959, prediction.hashCode());\n}",
        "ClassName": "CategoricalPredictionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testHashCode",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(com.cloudera.oryx.app.rdf.predict.CategoricalPrediction.sum(categoryCounts));\n    this.categoryCounts = categoryCounts;\n    recompute();\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 5,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return java.util.Arrays.hashCode(categoryProbabilities);\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "hashCode",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 8,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.nio.file.Path testDir = createTestDirs();\n    java.util.List<java.nio.file.Path> files = com.cloudera.oryx.common.io.IOUtils.listFiles(testDir, \"*\");\n    org.junit.Assert.assertEquals(2, files.size());\n    org.junit.Assert.assertTrue(files.contains(testDir.resolve(\"subFile1\")));\n    org.junit.Assert.assertFalse(files.contains(testDir.resolve(\".hidden\")));\n    org.junit.Assert.assertTrue(files.contains(testDir.resolve(\"subDir1\")));\n}",
        "ClassName": "IOUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 3,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 23,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testListFiles",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 17,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(tempDir));\n    java.nio.file.Path subFile1 = tempDir.resolve(\"subFile1\");\n    java.nio.file.Files.write(subFile1, com.cloudera.oryx.common.io.IOUtilsTest.SOME_BYTES);\n    java.nio.file.Path hidden = tempDir.resolve(\".hidden\");\n    java.nio.file.Files.write(hidden, com.cloudera.oryx.common.io.IOUtilsTest.NO_BYTES);\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(subFile1));\n    java.nio.file.Path subDir1 = tempDir.resolve(\"subDir1\");\n    java.nio.file.Files.createDirectory(subDir1);\n    java.nio.file.Path subFile2 = subDir1.resolve(\"subFile2\");\n    java.nio.file.Files.write(subFile2, com.cloudera.oryx.common.io.IOUtilsTest.SOME_BYTES);\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(subFile2));\n    java.nio.file.Path subDir2 = subDir1.resolve(\"subDir2\");\n    java.nio.file.Files.createDirectory(subDir2);\n    return tempDir;\n}",
                "ClassName": "IOUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "createTestDirs",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 17,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(java.nio.file.Files.isDirectory(dir), \"%s is not a directory\", dir);\n    java.util.List<java.lang.String> globLevels;\n    if ((glob == null) || glob.isEmpty()) {\n        globLevels = java.util.Collections.singletonList(\"*\");\n    } else {\n        globLevels = java.util.Arrays.asList(glob.split(\"/\"));\n    }\n    com.google.common.base.Preconditions.checkState(!globLevels.isEmpty());\n    java.util.List<java.nio.file.Path> paths = new java.util.ArrayList<>();\n    paths.add(dir);\n    for (java.lang.String globLevel : globLevels) {\n        java.util.List<java.nio.file.Path> newPaths = new java.util.ArrayList<>();\n        for (java.nio.file.Path existingPath : paths) {\n            if (java.nio.file.Files.isDirectory(existingPath)) {\n                try (java.nio.file.DirectoryStream<java.nio.file.Path> stream = java.nio.file.Files.newDirectoryStream(existingPath, globLevel)) {\n                    for (java.nio.file.Path path : stream) {\n                        if (!path.getFileName().toString().startsWith(\".\")) {\n                            newPaths.add(path);\n                        }\n                    }\n                }\n            }\n        }\n        paths = newPaths;\n    }\n    java.util.Collections.sort(paths);\n    return paths;\n}",
                "ClassName": "IOUtils",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "listFiles",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 29,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 6,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 46,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.apache.commons.math3.random.RandomGenerator generator = com.cloudera.oryx.common.random.RandomManager.getRandom();\n    double unseededValue = generator.nextDouble();\n    com.cloudera.oryx.common.random.RandomManager.useTestSeed();\n    double seededValue = generator.nextDouble();\n    assertNotEquals(unseededValue, seededValue);\n    org.junit.Assert.assertEquals(seededValue, com.cloudera.oryx.common.random.RandomManager.getRandom().nextDouble());\n}",
        "ClassName": "RandomManagerRandomTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 2,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 13,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRandomState",
        "MinimumCyclomaticComplexity": 2,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 13,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    if (com.cloudera.oryx.common.random.RandomManager.useTestSeed) {\n        return new org.apache.commons.math3.random.Well19937c(com.cloudera.oryx.common.random.RandomManager.TEST_SEED);\n    }\n    org.apache.commons.math3.random.RandomGenerator random = new org.apache.commons.math3.random.Well19937c();\n    java.util.Collection<org.apache.commons.math3.random.RandomGenerator> instances = com.cloudera.oryx.common.random.RandomManager.INSTANCES.get();\n    if (instances != null) {\n        synchronized(instances) {\n            instances.add(random);\n        }\n    }\n    return random;\n}",
                "ClassName": "RandomManager",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "getRandom",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 13,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.common.random.RandomManager.useTestSeed = true;\n    java.util.Collection<org.apache.commons.math3.random.RandomGenerator> instances = com.cloudera.oryx.common.random.RandomManager.INSTANCES.get();\n    if (instances != null) {\n        synchronized(instances) {\n            for (org.apache.commons.math3.random.RandomGenerator random : instances) {\n                random.setSeed(com.cloudera.oryx.common.random.RandomManager.TEST_SEED);\n            }\n            instances.clear();\n        }\n        com.cloudera.oryx.common.random.RandomManager.INSTANCES.clear();\n    }\n}",
                "ClassName": "RandomManager",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "useTestSeed",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 13,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 4,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 26,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String prediction = target(\"/assign\").request().post(javax.ws.rs.client.Entity.text(\"-1.5,0.5\\n-1,0\")).readEntity(java.lang.String.class);\n    org.junit.Assert.assertEquals(\"2\\n2\\n\", prediction);\n}",
        "ClassName": "AssignTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testAssignPost",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(123L, com.cloudera.oryx.app.common.fn.MLFunctions.TO_TIMESTAMP_FN.call(\"a,b,c,123\").longValue());\n    org.junit.Assert.assertEquals(123L, com.cloudera.oryx.app.common.fn.MLFunctions.TO_TIMESTAMP_FN.call(\"a,b,c,123,\").longValue());\n    org.junit.Assert.assertEquals(123L, com.cloudera.oryx.app.common.fn.MLFunctions.TO_TIMESTAMP_FN.call(\"[\\\"a\\\",\\\"b\\\",\\\"c\\\",123]\").longValue());\n    org.junit.Assert.assertEquals(123L, com.cloudera.oryx.app.common.fn.MLFunctions.TO_TIMESTAMP_FN.call(\"[\\\"a\\\",\\\"b\\\",\\\"c\\\",123,\\\"d\\\"]\").longValue());\n}",
        "ClassName": "MLFunctionsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testToTimestamp",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testOffset(\"/recommendToMany/U6\", 3, -1, 0);\n}",
        "ClassName": "RecommendToManyTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBadOffset",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).queryParam(\"offset\", java.lang.Integer.toString(offset)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testOffset",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    java.nio.file.Path dataDir = tempDir.resolve(\"data\");\n    java.nio.file.Path modelDir = tempDir.resolve(\"model\");\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.batch.update-class\", com.cloudera.oryx.ml.MockMLUpdate.class.getName());\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.data-dir\", dataDir);\n    com.cloudera.oryx.common.settings.ConfigUtils.set(overlayConfig, \"oryx.batch.storage.model-dir\", modelDir);\n    overlayConfig.put(\"oryx.batch.streaming.generation-interval-sec\", com.cloudera.oryx.ml.SimpleMLUpdateIT.GEN_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.batch.streaming.block-interval-sec\", com.cloudera.oryx.ml.SimpleMLUpdateIT.BLOCK_INTERVAL_SEC);\n    overlayConfig.put(\"oryx.ml.eval.test-fraction\", com.cloudera.oryx.ml.SimpleMLUpdateIT.TEST_FRACTION);\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, getConfig());\n    startMessaging();\n    java.util.List<java.lang.Integer> trainCounts = new java.util.ArrayList<>();\n    java.util.List<java.lang.Integer> testCounts = new java.util.ArrayList<>();\n    com.cloudera.oryx.ml.MockMLUpdate.setCountHolders(trainCounts, testCounts);\n    startServerProduceConsumeTopics(config, com.cloudera.oryx.ml.SimpleMLUpdateIT.DATA_TO_WRITE, com.cloudera.oryx.ml.SimpleMLUpdateIT.WRITE_INTERVAL_MSEC);\n    while (trainCounts.size() > testCounts.size()) {\n        testCounts.add(0);\n    } \n    com.cloudera.oryx.ml.SimpleMLUpdateIT.log.info(\"trainCounts = {}\", trainCounts);\n    com.cloudera.oryx.ml.SimpleMLUpdateIT.log.info(\"testCounts = {}\", testCounts);\n    com.cloudera.oryx.lambda.AbstractBatchIT.checkOutputData(dataDir, com.cloudera.oryx.ml.SimpleMLUpdateIT.DATA_TO_WRITE);\n    com.cloudera.oryx.lambda.AbstractBatchIT.checkIntervals(trainCounts.size(), com.cloudera.oryx.ml.SimpleMLUpdateIT.DATA_TO_WRITE, com.cloudera.oryx.ml.SimpleMLUpdateIT.WRITE_INTERVAL_MSEC, com.cloudera.oryx.ml.SimpleMLUpdateIT.GEN_INTERVAL_SEC);\n    org.junit.Assert.assertEquals(testCounts.size(), trainCounts.size());\n    org.apache.commons.math3.random.RandomGenerator random = com.cloudera.oryx.common.random.RandomManager.getRandom();\n    int lastTotalTrainCount = 0;\n    int lastTestCount = 0;\n    for (int i = 0; i < testCounts.size(); i++) {\n        int totalTrainCount = trainCounts.get(i);\n        int testCount = testCounts.get(i);\n        int newTrainInGen = totalTrainCount - (lastTotalTrainCount + lastTestCount);\n        if (newTrainInGen == 0) {\n            continue;\n        }\n        lastTotalTrainCount = totalTrainCount;\n        lastTestCount = testCount;\n        int totalNew = testCount + newTrainInGen;\n        org.apache.commons.math3.distribution.IntegerDistribution dist = new org.apache.commons.math3.distribution.BinomialDistribution(random, totalNew, com.cloudera.oryx.ml.SimpleMLUpdateIT.TEST_FRACTION);\n        double probability;\n        if (testCount < dist.getNumericalMean()) {\n            probability = dist.cumulativeProbability(testCount);\n        } else {\n            probability = 1.0 - dist.cumulativeProbability(testCount);\n        }\n        com.cloudera.oryx.ml.SimpleMLUpdateIT.log.info(\"Probability of observing {} as {} sample of {}: {}\", testCount, com.cloudera.oryx.ml.SimpleMLUpdateIT.TEST_FRACTION, totalNew, probability);\n        org.junit.Assert.assertTrue(probability >= 0.001);\n    }\n}",
        "ClassName": "SimpleMLUpdateIT",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 4,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 10,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testMLUpdate",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 49,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    if (tempDir == null) {\n        tempDir = java.nio.file.Files.createTempDirectory(\"OryxTest\").toAbsolutePath();\n        com.cloudera.oryx.common.OryxTest.log.info(\"Test temp dir is {}\", tempDir);\n        tempDir.toFile().deleteOnExit();\n    }\n    return tempDir;\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getTempDir",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 2,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.nio.file.Path finalPath = (java.nio.file.Files.exists(path, java.nio.file.LinkOption.NOFOLLOW_LINKS)) ? path.toRealPath(java.nio.file.LinkOption.NOFOLLOW_LINKS) : path;\n    overlay.put(key, (\"\\\"\" + finalPath.toUri()) + \"\\\"\");\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "set",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    java.lang.String topicBroker = (\"\\\"localhost:\" + localKafkaBrokerPort) + '\"';\n    java.lang.String topicLockMaster = (\"\\\"localhost:\" + localZKPort) + '\"';\n    overlay.put(\"oryx.input-topic.broker\", topicBroker);\n    overlay.put(\"oryx.input-topic.lock.master\", topicLockMaster);\n    overlay.put(\"oryx.update-topic.broker\", topicBroker);\n    overlay.put(\"oryx.update-topic.lock.master\", topicLockMaster);\n    java.lang.String masterLocalAllCores = \"\\\"local[*]\\\"\";\n    overlay.put(\"oryx.batch.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.speed.streaming.master\", masterLocalAllCores);\n    overlay.put(\"oryx.batch.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    overlay.put(\"oryx.speed.ui.port\", com.cloudera.oryx.common.io.IOUtils.chooseFreePort());\n    return com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "getConfig",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local test Zookeeper server\");\n    localZKServer = new com.cloudera.oryx.zk.LocalZKServer(localZKPort);\n    localZKServer.start();\n    com.cloudera.oryx.lambda.AbstractLambdaIT.log.info(\"Starting local Kafka broker\");\n    localKafkaBroker = new com.cloudera.oryx.kafka.util.LocalKafkaBroker(localKafkaBrokerPort, localZKPort);\n    localKafkaBroker.start();\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.deleteTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.INPUT_TOPIC);\n    com.cloudera.oryx.kafka.util.KafkaUtils.maybeCreateTopic(\"localhost\", localZKPort, com.cloudera.oryx.lambda.AbstractLambdaIT.UPDATE_TOPIC);\n}",
                "ClassName": "AbstractLambdaIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "startMessaging",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.cloudera.oryx.ml.MockMLUpdate.trainCounts = trainCounts;\n    com.cloudera.oryx.ml.MockMLUpdate.testCounts = testCounts;\n}",
                "ClassName": "MockMLUpdate",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "setCountHolders",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return startServerProduceConsumeTopics(config, new com.cloudera.oryx.kafka.util.DefaultCSVDatumGenerator(), howMany, intervalMsec);\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "startServerProduceConsumeTopics",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.List<java.nio.file.Path> dataFiles = com.cloudera.oryx.common.io.IOUtils.listFiles(dataDir, \"*/part-*\");\n    org.apache.hadoop.conf.Configuration hadoopConf = new org.apache.hadoop.conf.Configuration();\n    org.apache.hadoop.io.Writable key = new org.apache.hadoop.io.Text();\n    org.apache.hadoop.io.Writable message = new org.apache.hadoop.io.Text();\n    int count = 0;\n    for (java.nio.file.Path dataFile : dataFiles) {\n        org.apache.hadoop.io.SequenceFile.Reader.Option fileOptions = SequenceFile.Reader.file(new org.apache.hadoop.fs.Path(dataFile.toUri().toString()));\n        try (org.apache.hadoop.io.SequenceFile.Reader reader = new org.apache.hadoop.io.SequenceFile.Reader(hadoopConf, fileOptions)) {\n            while (reader.next(key, message)) {\n                count++;\n            } \n        }\n    }\n    com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Read {} data\", count);\n    if (expectedCount != count) {\n        com.cloudera.oryx.lambda.AbstractBatchIT.log.warn(\"Bad count of data read, dumping data...\");\n        for (java.nio.file.Path dataFile : dataFiles) {\n            com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"Data file: {}\", dataFile);\n            org.apache.hadoop.io.SequenceFile.Reader.Option fileOptions = SequenceFile.Reader.file(new org.apache.hadoop.fs.Path(dataFile.toUri().toString()));\n            try (org.apache.hadoop.io.SequenceFile.Reader reader = new org.apache.hadoop.io.SequenceFile.Reader(hadoopConf, fileOptions)) {\n                while (reader.next(key, message)) {\n                    com.cloudera.oryx.lambda.AbstractBatchIT.log.info(\"  {} = {}\", key, message);\n                } \n            }\n        }\n    }\n    org.junit.Assert.assertEquals(\"Wrong count of data read\", expectedCount, count);\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 5,
                "DepthOfInheritance": 3,
                "MethodName": "checkOutputData",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 29,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int minExpectedIntervals = (dataToWrite * writeIntervalMsec) / (1000 * genIntervalSec);\n    org.junit.Assert.assertTrue(((\"Expected \" + minExpectedIntervals) + \" intervals (or up to +4 more) but got \") + numIntervals, (numIntervals >= minExpectedIntervals) && (numIntervals <= (minExpectedIntervals + 4)));\n}",
                "ClassName": "AbstractBatchIT",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkIntervals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    if (com.cloudera.oryx.common.random.RandomManager.useTestSeed) {\n        return new org.apache.commons.math3.random.Well19937c(com.cloudera.oryx.common.random.RandomManager.TEST_SEED);\n    }\n    org.apache.commons.math3.random.RandomGenerator random = new org.apache.commons.math3.random.Well19937c();\n    java.util.Collection<org.apache.commons.math3.random.RandomGenerator> instances = com.cloudera.oryx.common.random.RandomManager.INSTANCES.get();\n    if (instances != null) {\n        synchronized(instances) {\n            instances.add(random);\n        }\n    }\n    return random;\n}",
                "ClassName": "RandomManager",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "getRandom",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 13,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 9,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 2,
        "TotalNumberOfLines": 101,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlay = new java.util.HashMap<>();\n    overlay.put(\"foo\", \"bar\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlay, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    org.junit.Assert.assertEquals(\"bar\", config.getString(\"foo\"));\n}",
        "ClassName": "ConfigUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 6,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testOverlayOn",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 12,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    for (int i = 0; i < 1000; i++) {\n        org.junit.Assert.assertEquals(java.lang.Double.valueOf(i).hashCode(), com.cloudera.oryx.common.lang.LangUtils.hashDouble(i));\n    }\n}",
        "ClassName": "LangUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 1,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testHashDouble",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    long bits = java.lang.Double.doubleToLongBits(d);\n    return ((int) (bits ^ (bits >>> 32)));\n}",
                "ClassName": "LangUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "hashDouble",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    target(\"/similarityToItem\").request().get(java.lang.String.class);\n}",
        "ClassName": "SimilarityToItemTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNoArg",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.unorderedFromValues(java.util.Arrays.asList(\"foo\", \"bar\")), 1, java.util.Collections.singletonList(\"foo\"));\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.unorderedFromValues(java.util.Arrays.asList(\"foo\", \"bar\")), 2, java.util.Arrays.asList(\"foo\", \"bar\"));\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.unorderedFromValues(java.util.Arrays.asList(\"foo\", \"bar\")), 3, java.util.Arrays.asList(\"foo\", \"bar\"));\n}",
        "ClassName": "HyperParamsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testUnordered",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, hyperParams.getTrialValues(howMany));\n}",
                "ClassName": "HyperParamsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "doTest",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new com.cloudera.oryx.ml.param.Unordered<>(values);\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "unorderedFromValues",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 6,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.lambda.serving.InMemoryRealm realm = new com.cloudera.oryx.lambda.serving.InMemoryRealm();\n    realm.addUser(\"foo\", \"bar\");\n    org.junit.Assert.assertNotNull(realm.getName());\n    java.security.Principal authPrincipal = realm.authenticate(\"foo\", \"bar\");\n    org.junit.Assert.assertEquals(\"foo\", authPrincipal.getName());\n    org.junit.Assert.assertNull(realm.authenticate(\"foo\", \"baz\"));\n    org.junit.Assert.assertNull(realm.authenticate(\"bar\", \"foo\"));\n    org.junit.Assert.assertEquals(\"bar\", realm.getPassword(\"foo\"));\n    org.junit.Assert.assertEquals(\"foo\", realm.getPrincipal(\"foo\").getName());\n}",
        "ClassName": "InMemoryRealmTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testAuthenticate",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 6,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 11,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "InMemoryRealm",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    principals.put(username, new org.apache.catalina.realm.GenericPrincipal(username, password, java.util.Collections.singletonList(com.cloudera.oryx.lambda.serving.InMemoryRealm.AUTH_ROLE)));\n}",
                "ClassName": "InMemoryRealm",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "addUser",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.lambda.serving.InMemoryRealm.NAME;\n}",
                "ClassName": "InMemoryRealm",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getName",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.apache.catalina.realm.GenericPrincipal principal = principals.get(username);\n    boolean validated = false;\n    if ((principal != null) && (credentials != null)) {\n        if (hasMessageDigest()) {\n            validated = digest(credentials).equalsIgnoreCase(principal.getPassword());\n        } else {\n            validated = digest(credentials).equals(principal.getPassword());\n        }\n    }\n    return validated ? principal : null;\n}",
                "ClassName": "InMemoryRealm",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 1,
                "MethodName": "authenticate",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 12,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.apache.catalina.realm.GenericPrincipal principal = principals.get(username);\n    return principal == null ? null : principal.getPassword();\n}",
                "ClassName": "InMemoryRealm",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getPassword",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return principals.get(username);\n}",
                "ClassName": "InMemoryRealm",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getPrincipal",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 2,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 27,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.common.lang.ClassUtils.loadInstanceOf(java.lang.String.class.getName(), java.lang.String.class, new java.lang.Class<?>[]{ char[].class }, new java.lang.Object[]{ null });\n}",
        "ClassName": "ClassUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "tesInvocationException",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return com.cloudera.oryx.common.lang.ClassUtils.doLoadInstanceOf(implClassName, superClass, constructorTypes, constructorArgs, com.cloudera.oryx.common.lang.ClassUtils.class.getClassLoader());\n}",
                "ClassName": "ClassUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "loadInstanceOf",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    @java.lang.SuppressWarnings(\"unchecked\")\n    java.util.List<java.lang.Double> importances = ((java.util.List<java.lang.Double>) (target(\"/feature/importance\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(java.util.List.class)));\n    org.junit.Assert.assertEquals(java.util.Arrays.asList(0.1, 0.3), importances);\n}",
        "ClassName": "FeatureImportanceTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testAllImportance",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    double[] probability = new double[]{ 0.0, 0.125, 0.375, 0.0, 0.5, 0.0 };\n    com.cloudera.oryx.app.rdf.predict.CategoricalPrediction prediction = new com.cloudera.oryx.app.rdf.predict.CategoricalPrediction(probability);\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.example.FeatureType.CATEGORICAL, prediction.getFeatureType());\n    org.junit.Assert.assertEquals(4, prediction.getMostProbableCategoryEncoding());\n    org.junit.Assert.assertNull(prediction.getCategoryCounts());\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(probability, prediction.getCategoryProbabilities());\n}",
        "ClassName": "CategoricalPredictionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testConstructFromProbability",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(0);\n    this.categoryCounts = null;\n    this.categoryProbabilities = categoryProbabilities;\n    double maxProbability = java.lang.Double.NEGATIVE_INFINITY;\n    int theMaxCategory = -1;\n    for (int i = 0; i < categoryProbabilities.length; i++) {\n        double probability = categoryProbabilities[i];\n        if (probability > maxProbability) {\n            maxProbability = probability;\n            theMaxCategory = i;\n        }\n    }\n    com.google.common.base.Preconditions.checkArgument(theMaxCategory >= 0);\n    maxCategory = theMaxCategory;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 16,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.rdf.example.FeatureType.CATEGORICAL;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getFeatureType",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return maxCategory;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getMostProbableCategoryEncoding",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return categoryCounts;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getCategoryCounts",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertArrayEquals(expecteds, actuals, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertArrayEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return categoryProbabilities;\n}",
                "ClassName": "CategoricalPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getCategoryProbabilities",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 2,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 31,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.nio.file.Path testDir = createTestDirs();\n    java.util.List<java.nio.file.Path> files = com.cloudera.oryx.common.io.IOUtils.listFiles(testDir, \"*/*\");\n    org.junit.Assert.assertEquals(2, files.size());\n    org.junit.Assert.assertTrue(files.contains(testDir.resolve(\"subDir1\").resolve(\"subFile2\")));\n    org.junit.Assert.assertTrue(files.contains(testDir.resolve(\"subDir1\").resolve(\"subDir2\")));\n}",
        "ClassName": "IOUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 3,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 23,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testListSubdirs",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 17,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.nio.file.Path tempDir = getTempDir();\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(tempDir));\n    java.nio.file.Path subFile1 = tempDir.resolve(\"subFile1\");\n    java.nio.file.Files.write(subFile1, com.cloudera.oryx.common.io.IOUtilsTest.SOME_BYTES);\n    java.nio.file.Path hidden = tempDir.resolve(\".hidden\");\n    java.nio.file.Files.write(hidden, com.cloudera.oryx.common.io.IOUtilsTest.NO_BYTES);\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(subFile1));\n    java.nio.file.Path subDir1 = tempDir.resolve(\"subDir1\");\n    java.nio.file.Files.createDirectory(subDir1);\n    java.nio.file.Path subFile2 = subDir1.resolve(\"subFile2\");\n    java.nio.file.Files.write(subFile2, com.cloudera.oryx.common.io.IOUtilsTest.SOME_BYTES);\n    org.junit.Assert.assertTrue(java.nio.file.Files.exists(subFile2));\n    java.nio.file.Path subDir2 = subDir1.resolve(\"subDir2\");\n    java.nio.file.Files.createDirectory(subDir2);\n    return tempDir;\n}",
                "ClassName": "IOUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "createTestDirs",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 17,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(java.nio.file.Files.isDirectory(dir), \"%s is not a directory\", dir);\n    java.util.List<java.lang.String> globLevels;\n    if ((glob == null) || glob.isEmpty()) {\n        globLevels = java.util.Collections.singletonList(\"*\");\n    } else {\n        globLevels = java.util.Arrays.asList(glob.split(\"/\"));\n    }\n    com.google.common.base.Preconditions.checkState(!globLevels.isEmpty());\n    java.util.List<java.nio.file.Path> paths = new java.util.ArrayList<>();\n    paths.add(dir);\n    for (java.lang.String globLevel : globLevels) {\n        java.util.List<java.nio.file.Path> newPaths = new java.util.ArrayList<>();\n        for (java.nio.file.Path existingPath : paths) {\n            if (java.nio.file.Files.isDirectory(existingPath)) {\n                try (java.nio.file.DirectoryStream<java.nio.file.Path> stream = java.nio.file.Files.newDirectoryStream(existingPath, globLevel)) {\n                    for (java.nio.file.Path path : stream) {\n                        if (!path.getFileName().toString().startsWith(\".\")) {\n                            newPaths.add(path);\n                        }\n                    }\n                }\n            }\n        }\n        paths = newPaths;\n    }\n    java.util.Collections.sort(paths);\n    return paths;\n}",
                "ClassName": "IOUtils",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "listFiles",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 29,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 6,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 46,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String response = target(\"/recommend/U0\").request().get(java.lang.String.class);\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testCSVTopByScore(6, response);\n}",
        "ClassName": "RecommendTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testRecommendCSV",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.cloudera.oryx.app.serving.als.AbstractALSServingTest.testCSVTop(expectedSize, response, false, false);\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testCSVTopByScore",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.schema.CategoricalValueEncodings encodings = com.cloudera.oryx.app.schema.CategoricalValueEncodingsTest.makeTestValues();\n    org.junit.Assert.assertEquals(3, encodings.getValueCount(0));\n    org.junit.Assert.assertEquals(4, encodings.getValueCount(2));\n    org.junit.Assert.assertEquals(1, encodings.getValueCount(3));\n    java.util.Map<java.lang.Integer, java.lang.Integer> counts = encodings.getCategoryCounts();\n    org.junit.Assert.assertEquals(3, counts.get(0).intValue());\n    org.junit.Assert.assertEquals(4, counts.get(2).intValue());\n    org.junit.Assert.assertEquals(1, counts.get(3).intValue());\n}",
        "ClassName": "CategoricalValueEncodingsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testCounts",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 6,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 10,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.Map<java.lang.Integer, java.util.Collection<java.lang.String>> distinctValues = new java.util.HashMap<>();\n    distinctValues.put(0, java.util.Arrays.asList(\"foo\", \"bar\", \"baz\"));\n    distinctValues.put(2, java.util.Arrays.asList(\"3\", \"2\", \"1\", \"0\"));\n    distinctValues.put(3, java.util.Arrays.asList(\"one\"));\n    return new com.cloudera.oryx.app.schema.CategoricalValueEncodings(distinctValues);\n}",
                "ClassName": "CategoricalValueEncodingsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "makeTestValues",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return doGetMap(index).size();\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getValueCount",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.Map<java.lang.Integer, java.lang.Integer> counts = new java.util.HashMap(encodingsForIndex.size());\n    for (java.util.Map.Entry<java.lang.Integer, com.google.common.collect.BiMap<java.lang.String, java.lang.Integer>> entry : encodingsForIndex.entrySet()) {\n        counts.put(entry.getKey(), entry.getValue().size());\n    }\n    return counts;\n}",
                "ClassName": "CategoricalValueEncodings",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "getCategoryCounts",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 17,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.fixed(3), 1, java.util.Collections.singletonList(3));\n    com.cloudera.oryx.ml.param.HyperParamsTest.doTest(com.cloudera.oryx.ml.param.HyperParams.fixed(3), 3, java.util.Collections.singletonList(3));\n}",
        "ClassName": "HyperParamsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testFixedDiscrete",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, hyperParams.getTrialValues(howMany));\n}",
                "ClassName": "HyperParamsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "doTest",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new com.cloudera.oryx.ml.param.DiscreteRange(fixedValue, fixedValue);\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "fixed",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 6,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(0, com.cloudera.oryx.ml.param.HyperParams.chooseValuesPerHyperParam(0, 1));\n    org.junit.Assert.assertEquals(1, com.cloudera.oryx.ml.param.HyperParams.chooseValuesPerHyperParam(1, 1));\n    org.junit.Assert.assertEquals(3, com.cloudera.oryx.ml.param.HyperParams.chooseValuesPerHyperParam(1, 3));\n    org.junit.Assert.assertEquals(1, com.cloudera.oryx.ml.param.HyperParams.chooseValuesPerHyperParam(2, 1));\n    org.junit.Assert.assertEquals(2, com.cloudera.oryx.ml.param.HyperParams.chooseValuesPerHyperParam(2, 2));\n    org.junit.Assert.assertEquals(2, com.cloudera.oryx.ml.param.HyperParams.chooseValuesPerHyperParam(2, 4));\n    org.junit.Assert.assertEquals(1, com.cloudera.oryx.ml.param.HyperParams.chooseValuesPerHyperParam(3, 1));\n    org.junit.Assert.assertEquals(2, com.cloudera.oryx.ml.param.HyperParams.chooseValuesPerHyperParam(3, 7));\n    org.junit.Assert.assertEquals(2, com.cloudera.oryx.ml.param.HyperParams.chooseValuesPerHyperParam(3, 8));\n}",
        "ClassName": "HyperParamsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 3,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 15,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testChooseValues",
        "MinimumCyclomaticComplexity": 3,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 15,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 9,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 11,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    if (numParams < 1) {\n        return 0;\n    }\n    int valuesPerHyperParam = 0;\n    int total;\n    do {\n        valuesPerHyperParam++;\n        total = 1;\n        for (int i = 0; i < numParams; i++) {\n            total *= valuesPerHyperParam;\n        }\n    } while (total < candidates );\n    return valuesPerHyperParam;\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 3,
                "DepthOfInheritance": 0,
                "MethodName": "chooseValuesPerHyperParam",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 3,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 15,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.serving.kmeans.AssignTest.checkResponse(getFormPostResponse(com.cloudera.oryx.app.serving.kmeans.AssignTest.ASSIGN_DATA, \"/assign\", null, null));\n}",
        "ClassName": "AssignTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 9,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testFormAssign",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.cloudera.oryx.lambda.serving.AbstractServingTest.checkResponse(response, Response.Status.OK, com.cloudera.oryx.app.serving.kmeans.AssignTest.EXPECTED_TOPIC);\n}",
                "ClassName": "AssignTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    byte[] bytes;\n    if (compressingClass == null) {\n        bytes = data.getBytes(java.nio.charset.StandardCharsets.UTF_8);\n    } else {\n        bytes = com.cloudera.oryx.lambda.serving.AbstractServingTest.compress(data, compressingClass);\n    }\n    javax.ws.rs.core.MediaType type = (encoding == null) ? javax.ws.rs.core.MediaType.TEXT_PLAIN_TYPE : new javax.ws.rs.core.MediaType(\"application\", encoding);\n    java.io.InputStream in = new java.io.ByteArrayInputStream(bytes);\n    org.glassfish.jersey.media.multipart.file.StreamDataBodyPart filePart = new org.glassfish.jersey.media.multipart.file.StreamDataBodyPart(\"data\", in, \"data\", type);\n    try (org.glassfish.jersey.media.multipart.MultiPart multiPart = new org.glassfish.jersey.media.multipart.MultiPart(javax.ws.rs.core.MediaType.MULTIPART_FORM_DATA_TYPE)) {\n        multiPart.getBodyParts().add(filePart);\n        return target(endpoint).request().post(javax.ws.rs.client.Entity.entity(multiPart, MediaType.MULTIPART_FORM_DATA_TYPE));\n    }\n}",
                "ClassName": "AbstractServingTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 1,
                "MethodName": "getFormPostResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 15,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 18,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"a\", \"1\", \"foo\" }, com.cloudera.oryx.common.text.TextUtils.parseJSONArray(\"[\\\"a\\\",\\\"1\\\",\\\"foo\\\"]\"));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"a\", \"1\", \"foo\", \"\" }, com.cloudera.oryx.common.text.TextUtils.parseJSONArray(\"[\\\"a\\\",\\\"1\\\",\\\"foo\\\",\\\"\\\"]\"));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"2.3\" }, com.cloudera.oryx.common.text.TextUtils.parseJSONArray(\"[\\\"2.3\\\"]\"));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{  }, com.cloudera.oryx.common.text.TextUtils.parseJSONArray(\"[]\"));\n}",
        "ClassName": "TextUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testParseJSON",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return com.cloudera.oryx.common.text.TextUtils.MAPPER.readValue(json, java.lang.String[].class);\n}",
                "ClassName": "TextUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "parseJSONArray",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<java.lang.Object> list = new java.util.ArrayList<>();\n    list.add(\"foo\");\n    list.add(2);\n    org.junit.Assert.assertEquals(\"[\\\"A\\\",[\\\"foo\\\",2],\\\"B\\\"]\", com.cloudera.oryx.common.text.TextUtils.joinJSON(java.util.Arrays.asList(\"A\", list, \"B\")));\n}",
        "ClassName": "TextUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 7,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testJSONList",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 7,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    try {\n        return com.cloudera.oryx.common.text.TextUtils.MAPPER.writeValueAsString(elements);\n    } catch (com.fasterxml.jackson.core.JsonProcessingException e) {\n        throw new java.lang.IllegalArgumentException(e);\n    }\n}",
                "ClassName": "TextUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "joinJSON",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 7,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.app.serving.rdf.TrainTest.checkResponse(target(\"/train\").request().post(javax.ws.rs.client.Entity.text(com.cloudera.oryx.app.serving.rdf.TrainTest.TRAIN_DATA)));\n}",
        "ClassName": "TrainTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testSimpleTrain",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.cloudera.oryx.lambda.serving.AbstractServingTest.checkResponse(response, Response.Status.NO_CONTENT, com.cloudera.oryx.app.serving.rdf.TrainTest.EXPECTED_TOPIC);\n}",
                "ClassName": "TrainTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    javax.ws.rs.core.Response response = target(\"/pref/U1/I1\").request().post(javax.ws.rs.client.Entity.entity(com.cloudera.oryx.app.serving.als.PreferenceTest.PREFERENCE_DATA, MediaType.APPLICATION_JSON));\n    com.cloudera.oryx.app.serving.als.PreferenceTest.checkResponse(response, \"U1\", \"I1\", \"2.5\");\n}",
        "ClassName": "PreferenceTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 11,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testPostJson",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 11,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.junit.Assert.assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n    java.util.List<com.cloudera.oryx.common.collection.Pair<java.lang.String, java.lang.String>> data = com.cloudera.oryx.lambda.serving.MockTopicProducer.getData();\n    org.junit.Assert.assertEquals(1, data.size());\n    org.junit.Assert.assertNull(data.get(0).getFirst());\n    java.lang.String[] tokens = data.get(0).getSecond().split(\",\");\n    org.junit.Assert.assertEquals(expectedUser, tokens[0]);\n    org.junit.Assert.assertEquals(expectedItem, tokens[1]);\n    org.junit.Assert.assertEquals(expectedValue, tokens[2]);\n    java.lang.Long.parseLong(tokens[3]);\n}",
                "ClassName": "PreferenceTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "checkResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 11,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 11,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"1\", \"22\", \"3\" }, com.cloudera.oryx.common.text.TextUtils.parsePMMLDelimited(\"1 22 3\"));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"ab\", \"a b\", \"with \\\"quotes\\\" \" }, com.cloudera.oryx.common.text.TextUtils.parsePMMLDelimited(\"ab  \\\"a b\\\"   \\\"with \\\\\\\"quotes\\\\\\\" \\\" \"));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \"\\\" \\\"\" }, com.cloudera.oryx.common.text.TextUtils.parsePMMLDelimited(\"\\\"\\\\\\\" \\\\\\\"\\\"\"));\n    org.junit.Assert.assertArrayEquals(new java.lang.String[]{ \" c\\\" d \\\"e \", \" c\\\" d \\\"e \" }, com.cloudera.oryx.common.text.TextUtils.parsePMMLDelimited(\" \\\" c\\\\\\\" d \\\\\\\"e \\\" \\\" c\\\\\\\" d \\\\\\\"e \\\" \"));\n}",
        "ClassName": "TextUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 2,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 10,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testParsePMMLDelimited",
        "MinimumCyclomaticComplexity": 2,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 10,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 4,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.lang.String[] rawResult = com.cloudera.oryx.common.text.TextUtils.doParseDelimited(delimited, com.cloudera.oryx.common.text.TextUtils.formatForDelimiter(' '));\n    java.util.List<java.lang.String> resultList = new java.util.ArrayList<>();\n    for (java.lang.String raw : rawResult) {\n        if (!raw.isEmpty()) {\n            resultList.add(raw);\n        }\n    }\n    return resultList.toArray(new java.lang.String[resultList.size()]);\n}",
                "ClassName": "TextUtils",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "parsePMMLDelimited",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 10,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 2,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 10,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertSame(java.util.ArrayList.class, com.cloudera.oryx.common.lang.ClassUtils.loadClass(java.util.ArrayList.class.getName()));\n}",
        "ClassName": "ClassUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 9,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testLoadClass",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 9,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    try {\n        @java.lang.SuppressWarnings(\"unchecked\")\n        java.lang.Class<T> theClass = ((java.lang.Class<T>) (java.lang.Class.forName(className)));\n        return theClass;\n    } catch (java.lang.ClassNotFoundException cnfe) {\n        throw new java.lang.IllegalStateException((\"No valid \" + className) + \" exists\", cnfe);\n    }\n}",
                "ClassName": "ClassUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "loadClass",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 9,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String pretty = com.cloudera.oryx.common.settings.ConfigUtils.prettyPrint(com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    org.junit.Assert.assertTrue(pretty.contains(\"oryx {\"));\n    org.junit.Assert.assertTrue(pretty.contains(\"batch {\"));\n    org.junit.Assert.assertTrue(pretty.contains(\"master=yarn-client\"));\n    org.junit.Assert.assertTrue(pretty.contains(\"password=*****\"));\n    org.junit.Assert.assertTrue(pretty.contains(\"keystore-password=*****\"));\n}",
        "ClassName": "ConfigUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testPrettyPrint",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 5,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 8,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.redact(config.root().withOnlyKey(\"oryx\").render(com.cloudera.oryx.common.settings.ConfigUtils.RENDER_OPTS));\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "prettyPrint",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 6,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.String response = target(\"/similarityToItem/I0/I1/I2\").request().get(java.lang.String.class);\n    testCSVScores(2, response);\n}",
        "ClassName": "SimilarityToItemTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 9,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testSimilarityToItemCSV",
        "MinimumCyclomaticComplexity": 1,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 9,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.lang.String[] rows = response.split(\"\\n\");\n    org.junit.Assert.assertEquals(expectedSize, rows.length);\n    for (java.lang.String row : rows) {\n        double score = java.lang.Double.parseDouble(row);\n        org.junit.Assert.assertFalse(java.lang.Double.isNaN(score));\n        org.junit.Assert.assertFalse(java.lang.Double.isInfinite(score));\n    }\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 2,
                "MethodName": "testCSVScores",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 9,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.dmg.pmml.PMML model = com.cloudera.oryx.common.pmml.PMMLUtilsTest.buildDummyModel();\n    model.getHeader().setTimestamp(null);\n    org.junit.Assert.assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n\" + (((((((\"<PMML version=\\\"4.2.1\\\" xmlns=\\\"http://www.dmg.org/PMML-4_2\\\">\\n\" + \"    <Header>\\n\") + \"        <Application name=\\\"Oryx\\\"/>\\n\") + \"    </Header>\\n\") + \"    <TreeModel functionName=\\\"classification\\\">\\n\") + \"        <Node recordCount=\\\"123.0\\\"/>\\n\") + \"    </TreeModel>\\n\") + \"</PMML>\\n\"), com.cloudera.oryx.common.pmml.PMMLUtils.toString(model));\n}",
        "ClassName": "PMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 8,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testToString",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 8,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 5,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    org.dmg.pmml.Node node = new org.dmg.pmml.Node();\n    node.setRecordCount(123.0);\n    org.dmg.pmml.TreeModel treeModel = new org.dmg.pmml.TreeModel(org.dmg.pmml.MiningFunctionType.CLASSIFICATION, null, node);\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.common.pmml.PMMLUtils.buildSkeletonPMML();\n    pmml.getModels().add(treeModel);\n    return pmml;\n}",
                "ClassName": "PMMLUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildDummyModel",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    try (java.io.StringWriter out = new java.io.StringWriter()) {\n        org.jpmml.model.JAXBUtil.marshalPMML(pmml, new javax.xml.transform.stream.StreamResult(out));\n        return out.toString();\n    } catch (javax.xml.bind.JAXBException | java.io.IOException e) {\n        throw new java.lang.IllegalStateException(e);\n    }\n}",
                "ClassName": "PMMLUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "toString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 8,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 16,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    com.cloudera.oryx.common.lang.JVMUtils.closeAtShutdown(new java.io.Closeable() {\n        @java.lang.Override\n        public void close() {\n        }\n    });\n}",
        "ClassName": "JVMUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 9,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 1,
        "MethodName": "testShutdownHook",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 2,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n}",
                "ClassName": "1",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 2,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkNotNull(closeable);\n    synchronized(com.cloudera.oryx.common.lang.JVMUtils.closeAtShutdown) {\n        if (com.cloudera.oryx.common.lang.JVMUtils.closeAtShutdown.isEmpty()) {\n            java.lang.Runtime.getRuntime().addShutdownHook(new java.lang.Thread(new java.lang.Runnable() {\n                @java.lang.Override\n                public void run() {\n                    for (java.io.Closeable c : com.cloudera.oryx.common.lang.JVMUtils.closeAtShutdown) {\n                        com.cloudera.oryx.common.io.IOUtils.closeQuietly(c);\n                    }\n                }\n            }));\n        }\n        com.cloudera.oryx.common.lang.JVMUtils.closeAtShutdown.push(closeable);\n    }\n}",
                "ClassName": "JVMUtils",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "closeAtShutdown",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 16,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 3
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 2,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 18,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 3
    },
    {
        "Body": "{\n    java.util.List<java.lang.String> items = target(\"/popularRepresentativeItems\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.lambda.serving.AbstractServingTest.LIST_STRING_TYPE);\n    org.junit.Assert.assertEquals(2, items.size());\n    org.junit.Assert.assertTrue(\"I0\".equals(items.get(0)) || \"I3\".equals(items.get(0)));\n    org.junit.Assert.assertEquals(\"I4\", items.get(1));\n}",
        "ClassName": "PopularRepresentativeItemsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testPopularRepresentativeItems",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.dmg.pmml.PMML pmml = com.cloudera.oryx.app.rdf.RDFPMMLUtilsTest.buildDummyClassificationModel();\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.input-schema.feature-names\", \"[\\\"color\\\",\\\"fruit\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.numeric-features\", \"[]\");\n    overlayConfig.put(\"oryx.input-schema.target-feature\", \"fruit\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    com.cloudera.oryx.app.schema.InputSchema schema = new com.cloudera.oryx.app.schema.InputSchema(config);\n    com.cloudera.oryx.app.rdf.RDFPMMLUtils.validatePMMLVsSchema(pmml, schema);\n}",
        "ClassName": "RDFPMMLUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 17,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testValidateClassification",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 10,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<java.lang.String> givenFeatureNames = config.getStringList(\"oryx.input-schema.feature-names\");\n    if (givenFeatureNames.isEmpty()) {\n        int numFeatures = config.getInt(\"oryx.input-schema.num-features\");\n        com.google.common.base.Preconditions.checkArgument(numFeatures > 0, \"Neither feature-names nor num-features is set\");\n        java.util.List<java.lang.String> generatedFeatureNames = new java.util.ArrayList<>(numFeatures);\n        for (int i = 0; i < numFeatures; i++) {\n            generatedFeatureNames.add(java.lang.Integer.toString(i));\n        }\n        featureNames = generatedFeatureNames;\n    } else {\n        featureNames = com.google.common.collect.ImmutableList.copyOf(givenFeatureNames);\n    }\n    int numFeatures = featureNames.size();\n    com.google.common.base.Preconditions.checkArgument(new java.util.HashSet<>(featureNames).size() == numFeatures, \"Feature names must be unique: %s\", featureNames);\n    idFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.id-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(idFeatures));\n    java.util.Collection<java.lang.String> ignoredFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.ignored-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(ignoredFeatures));\n    java.util.Collection<java.lang.String> activeFeatureSet = new java.util.HashSet<>(featureNames);\n    activeFeatureSet.removeAll(idFeatures);\n    activeFeatureSet.removeAll(ignoredFeatures);\n    activeFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    java.util.List<java.lang.String> givenNumericFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.numeric-features\");\n    java.util.List<java.lang.String> givenCategoricalFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.categorical-features\");\n    if (givenNumericFeatures == null) {\n        com.google.common.base.Preconditions.checkNotNull(givenCategoricalFeatures, \"Neither numeric-features nor categorical-features was set\");\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(givenCategoricalFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(categoricalFeatures));\n        activeFeatureSet.removeAll(categoricalFeatures);\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    } else {\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(givenNumericFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(numericFeatures));\n        activeFeatureSet.removeAll(numericFeatures);\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    }\n    targetFeature = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalString(config, \"oryx.input-schema.target-feature\");\n    if (targetFeature != null) {\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.contains(targetFeature), \"Target feature is not known, an ID, or ignored: %s\", targetFeature);\n    }\n    targetFeatureIndex = (targetFeature == null) ? -1 : featureNames.indexOf(targetFeature);\n    allToPredictorMap = com.google.common.collect.HashBiMap.create();\n    for (int featureIndex = 0, predictorIndex = 0; featureIndex < featureNames.size(); featureIndex++) {\n        if (isActive(featureIndex) && (!isTarget(featureIndex))) {\n            allToPredictorMap.put(featureIndex, predictorIndex);\n            predictorIndex++;\n        }\n    }\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 50,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.rdf.RDFPMMLUtilsTest.buildDummyClassificationModel(1);\n}",
                "ClassName": "RDFPMMLUtilsTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "buildDummyClassificationModel",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.util.List<org.dmg.pmml.Model> models = pmml.getModels();\n    com.google.common.base.Preconditions.checkArgument(models.size() == 1, \"Should have exactly one model, but had %s\", models.size());\n    org.dmg.pmml.Model model = models.get(0);\n    org.dmg.pmml.MiningFunctionType function = model.getFunctionName();\n    if (schema.isClassification()) {\n        com.google.common.base.Preconditions.checkArgument(function == org.dmg.pmml.MiningFunctionType.CLASSIFICATION, \"Expected classification function type but got %s\", function);\n    } else {\n        com.google.common.base.Preconditions.checkArgument(function == org.dmg.pmml.MiningFunctionType.REGRESSION, \"Expected regression function type but got %s\", function);\n    }\n    org.dmg.pmml.DataDictionary dictionary = pmml.getDataDictionary();\n    com.google.common.base.Preconditions.checkArgument(schema.getFeatureNames().equals(com.cloudera.oryx.app.pmml.AppPMMLUtils.getFeatureNames(dictionary)), \"Feature names in schema don't match names in PMML\");\n    org.dmg.pmml.MiningSchema miningSchema = model.getMiningSchema();\n    com.google.common.base.Preconditions.checkArgument(schema.getFeatureNames().equals(com.cloudera.oryx.app.pmml.AppPMMLUtils.getFeatureNames(miningSchema)));\n    if (schema.hasTarget()) {\n        int schemaIndex = schema.getTargetFeatureIndex();\n        int pmmlIndex = com.cloudera.oryx.app.pmml.AppPMMLUtils.findTargetIndex(miningSchema);\n        com.google.common.base.Preconditions.checkArgument(schemaIndex == pmmlIndex, \"Configured schema expects target at index %s, but PMML has target at index %s\", schemaIndex, pmmlIndex);\n    } else {\n        com.google.common.base.Preconditions.checkArgument(com.cloudera.oryx.app.pmml.AppPMMLUtils.findTargetIndex(miningSchema) == null);\n    }\n}",
                "ClassName": "RDFPMMLUtils",
                "CyclomaticComplexity": 2,
                "DepthOfInheritance": 0,
                "MethodName": "validatePMMLVsSchema",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 22,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 9,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 87,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertNull(com.cloudera.oryx.common.settings.ConfigUtils.getOptionalString(com.cloudera.oryx.common.settings.ConfigUtils.getDefault(), \"nonexistent\"));\n}",
        "ClassName": "ConfigUtilsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testOptionalString",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return config.hasPath(key) ? config.getString(key) : null;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getOptionalString",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 6,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.rdf.predict.NumericPrediction> predictions = java.util.Arrays.asList(new com.cloudera.oryx.app.rdf.predict.NumericPrediction(1.0, 1), new com.cloudera.oryx.app.rdf.predict.NumericPrediction(3.0, 2), new com.cloudera.oryx.app.rdf.predict.NumericPrediction(6.0, 3));\n    double[] weights = new double[]{ 1.0, 1.0, 1.0 };\n    com.cloudera.oryx.app.rdf.predict.NumericPrediction vote = ((com.cloudera.oryx.app.rdf.predict.NumericPrediction) (com.cloudera.oryx.app.rdf.predict.WeightedPrediction.voteOnFeature(predictions, weights)));\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.example.FeatureType.NUMERIC, vote.getFeatureType());\n    com.cloudera.oryx.common.OryxTest.assertEquals(10.0 / 3.0, vote.getPrediction());\n}",
        "ClassName": "WeightedPredictionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNumericVote",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(initialCount);\n    this.prediction = prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(!predictions.isEmpty(), \"No predictions\");\n    com.google.common.base.Preconditions.checkArgument(predictions.size() == weights.length, \"%s predictions but %s weights?\", predictions.size(), weights.length);\n    switch (predictions.get(0).getFeatureType()) {\n        case NUMERIC :\n            @java.lang.SuppressWarnings(\"unchecked\")\n            java.util.List<com.cloudera.oryx.app.rdf.predict.NumericPrediction> numericVotes = ((java.util.List<com.cloudera.oryx.app.rdf.predict.NumericPrediction>) (predictions));\n            return com.cloudera.oryx.app.rdf.predict.WeightedPrediction.voteOnNumericFeature(numericVotes, weights);\n        case CATEGORICAL :\n            @java.lang.SuppressWarnings(\"unchecked\")\n            java.util.List<com.cloudera.oryx.app.rdf.predict.CategoricalPrediction> categoricalVotes = ((java.util.List<com.cloudera.oryx.app.rdf.predict.CategoricalPrediction>) (predictions));\n            return com.cloudera.oryx.app.rdf.predict.WeightedPrediction.voteOnCategoricalFeature(categoricalVotes, weights);\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}",
                "ClassName": "WeightedPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "voteOnFeature",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 16,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.rdf.example.FeatureType.NUMERIC;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getFeatureType",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getPrediction",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 29,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.tree.TreePathTest.LRL, com.cloudera.oryx.app.rdf.tree.TreePath.EMPTY.extendLeft().extendRight().extendLeft());\n    assertNotEquals(com.cloudera.oryx.app.rdf.tree.TreePath.EMPTY, com.cloudera.oryx.app.rdf.tree.TreePathTest.LRL);\n    java.util.Set<com.cloudera.oryx.app.rdf.tree.TreePath> paths = new java.util.HashSet<>();\n    paths.add(com.cloudera.oryx.app.rdf.tree.TreePathTest.LRL);\n    paths.add(com.cloudera.oryx.app.rdf.tree.TreePathTest.LRR);\n    paths.add(com.cloudera.oryx.app.rdf.tree.TreePathTest.LRR);\n    org.junit.Assert.assertEquals(2, paths.size());\n}",
        "ClassName": "TreePathTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testEquals",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 9,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return new com.cloudera.oryx.app.rdf.tree.TreePath(leftRight, pathLength + 1);\n}",
                "ClassName": "TreePath",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "extendLeft",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new com.cloudera.oryx.app.rdf.tree.TreePath(leftRight | (java.lang.Long.MIN_VALUE >>> pathLength), pathLength + 1);\n}",
                "ClassName": "TreePath",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "extendRight",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 6,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    testOffset(\"/recommendToAnonymous/I1\", 3, -1, 0);\n}",
        "ClassName": "RecommendToAnonymousTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testBadOffset",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 4,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<?> results = target(requestPath).queryParam(\"howMany\", java.lang.Integer.toString(howMany)).queryParam(\"offset\", java.lang.Integer.toString(offset)).request().accept(MediaType.APPLICATION_JSON_TYPE).get(com.cloudera.oryx.app.serving.als.AbstractALSServingTest.LIST_ID_VALUE_TYPE);\n    org.junit.Assert.assertEquals(expectedSize, results.size());\n}",
                "ClassName": "AbstractALSServingTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 2,
                "MethodName": "testOffset",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 4,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Collection<com.cloudera.oryx.ml.param.HyperParamValues<?>> hyperParams = new java.util.ArrayList<>();\n    hyperParams.add(com.cloudera.oryx.ml.param.HyperParams.fixed(1.0));\n    hyperParams.add(com.cloudera.oryx.ml.param.HyperParams.range(2, 10));\n    hyperParams.add(com.cloudera.oryx.ml.param.HyperParams.around(5.0, 0.5));\n    java.util.List<java.util.List<?>> combos = com.cloudera.oryx.ml.param.HyperParams.chooseHyperParameterCombos(hyperParams, 2, 2);\n    org.junit.Assert.assertEquals(2, combos.size());\n    org.junit.Assert.assertTrue(combos.contains(java.util.Arrays.<java.lang.Number>asList(1.0, 10, 4.75)));\n    org.junit.Assert.assertTrue(combos.contains(java.util.Arrays.<java.lang.Number>asList(1.0, 2, 4.75)));\n}",
        "ClassName": "HyperParamsTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 1,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 12,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testCombos2",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 3,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 10,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    return new com.cloudera.oryx.ml.param.ContinuousRange(fixedValue, fixedValue);\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "fixed",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new com.cloudera.oryx.ml.param.DiscreteRange(min, max);\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "range",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return new com.cloudera.oryx.ml.param.ContinuousAround(value, step);\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "around",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(howMany > 0);\n    com.google.common.base.Preconditions.checkArgument(perParam >= 0);\n    int numParams = ranges.size();\n    if ((numParams == 0) || (perParam == 0)) {\n        return java.util.Collections.<java.util.List<?>>singletonList(java.util.Collections.emptyList());\n    }\n    com.google.common.base.Preconditions.checkArgument(java.lang.Math.pow(perParam, numParams) <= com.cloudera.oryx.ml.param.HyperParams.MAX_COMBOS);\n    int howManyCombos = 1;\n    java.util.List<java.util.List<?>> paramRanges = new java.util.ArrayList<>(numParams);\n    for (com.cloudera.oryx.ml.param.HyperParamValues<?> range : ranges) {\n        java.util.List<?> values = range.getTrialValues(perParam);\n        paramRanges.add(values);\n        howManyCombos *= values.size();\n    }\n    java.util.List<java.util.List<?>> allCombinations = new java.util.ArrayList<>(howManyCombos);\n    for (int combo = 0; combo < howManyCombos; combo++) {\n        java.util.List<java.lang.Object> combination = new java.util.ArrayList<>(numParams);\n        for (int param = 0; param < numParams; param++) {\n            int whichValueToTry = combo;\n            for (int i = 0; i < param; i++) {\n                whichValueToTry /= paramRanges.get(i).size();\n            }\n            whichValueToTry %= paramRanges.get(param).size();\n            combination.add(paramRanges.get(param).get(whichValueToTry));\n        }\n        allCombinations.add(combination);\n    }\n    if (howMany >= howManyCombos) {\n        java.util.Collections.shuffle(allCombinations);\n        return allCombinations;\n    }\n    org.apache.commons.math3.random.RandomDataGenerator rdg = new org.apache.commons.math3.random.RandomDataGenerator(com.cloudera.oryx.common.random.RandomManager.getRandom());\n    int[] indices = rdg.nextPermutation(howManyCombos, howMany);\n    java.util.List<java.util.List<?>> result = new java.util.ArrayList<>(indices.length);\n    for (int i = 0; i < indices.length; i++) {\n        result.add(allCombinations.get(i));\n    }\n    java.util.Collections.shuffle(result);\n    return result;\n}",
                "ClassName": "HyperParams",
                "CyclomaticComplexity": 7,
                "DepthOfInheritance": 0,
                "MethodName": "chooseHyperParameterCombos",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 41,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 7,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 50,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.lang.Double item = target(\"/estimateForAnonymous/I7/I4=1.0/I5=2.0\").request().accept(MediaType.APPLICATION_JSON_TYPE).get(java.lang.Double.class);\n    org.junit.Assert.assertEquals(0.41001138390689273, item, com.cloudera.oryx.lambda.serving.AbstractServingTest.DOUBLE_EPSILON);\n}",
        "ClassName": "EstimateForAnonymousTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testEstimateForAnonymous",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 4,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    doTestCompressedResponse(\"deflate\", java.util.zip.InflaterInputStream.class);\n}",
        "ClassName": "CompressedResponseTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 9,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testDeflateResponse",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 9,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 0,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 3,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    byte[] bytes = target(\"/item/allIDs\").request().acceptEncoding(encoding).get(byte[].class);\n    java.lang.String content;\n    try (java.io.Reader reader = new java.io.InputStreamReader(com.cloudera.oryx.common.lang.ClassUtils.loadInstanceOf(decompressingStreamClass.getName(), decompressingStreamClass, new java.lang.Class<?>[]{ java.io.InputStream.class }, new java.lang.Object[]{ new java.io.ByteArrayInputStream(bytes) }), java.nio.charset.StandardCharsets.UTF_8)) {\n        content = com.google.common.io.CharStreams.toString(reader);\n    }\n    java.lang.String expected = target(\"/item/allIDs\").request().get(java.lang.String.class);\n    org.junit.Assert.assertEquals(expected, content);\n}",
                "ClassName": "CompressedResponseTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 3,
                "MethodName": "doTestCompressedResponse",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 9,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.Map<java.lang.String, java.lang.Object> overlayConfig = new java.util.HashMap<>();\n    overlayConfig.put(\"oryx.input-schema.feature-names\", \"[\\\"foo\\\",\\\"bar\\\",\\\"baz\\\",\\\"bing\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.id-features\", \"[\\\"baz\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.ignored-features\", \"[\\\"foo\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.categorical-features\", \"[\\\"bar\\\"]\");\n    overlayConfig.put(\"oryx.input-schema.target-feature\", \"\\\"bar\\\"\");\n    com.typesafe.config.Config config = com.cloudera.oryx.common.settings.ConfigUtils.overlayOn(overlayConfig, com.cloudera.oryx.common.settings.ConfigUtils.getDefault());\n    com.cloudera.oryx.app.schema.InputSchema schema = new com.cloudera.oryx.app.schema.InputSchema(config);\n    org.junit.Assert.assertEquals(4, schema.getNumFeatures());\n    org.junit.Assert.assertEquals(1, schema.getNumPredictors());\n    org.junit.Assert.assertTrue(schema.getFeatureNames().containsAll(java.util.Arrays.asList(\"foo\", \"bar\", \"baz\", \"bing\")));\n    for (int i = 0; i < 4; i++) {\n        org.junit.Assert.assertEquals(i == 2, schema.isID(i));\n        org.junit.Assert.assertEquals(i == 2, schema.isID(schema.getFeatureNames().get(i)));\n    }\n    for (int i = 0; i < 4; i++) {\n        org.junit.Assert.assertEquals((i == 1) || (i == 3), schema.isActive(i));\n        org.junit.Assert.assertEquals((i == 1) || (i == 3), schema.isActive(schema.getFeatureNames().get(i)));\n    }\n    for (int i = 0; i < 4; i++) {\n        org.junit.Assert.assertEquals(i == 3, schema.isNumeric(i));\n        org.junit.Assert.assertEquals(i == 3, schema.isNumeric(schema.getFeatureNames().get(i)));\n    }\n    for (int i = 0; i < 4; i++) {\n        org.junit.Assert.assertEquals(i == 1, schema.isCategorical(i));\n        org.junit.Assert.assertEquals(i == 1, schema.isCategorical(schema.getFeatureNames().get(i)));\n    }\n    for (int i = 0; i < 4; i++) {\n        org.junit.Assert.assertEquals(i == 1, schema.isTarget(i));\n        org.junit.Assert.assertEquals(i == 1, schema.isTarget(schema.getFeatureNames().get(i)));\n    }\n    org.junit.Assert.assertTrue(schema.hasTarget());\n    org.junit.Assert.assertEquals(\"bar\", schema.getTargetFeature());\n    org.junit.Assert.assertEquals(1, schema.getTargetFeatureIndex());\n}",
        "ClassName": "InputSchemaTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 5,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testConfig",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 16,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 36,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    java.util.List<java.lang.String> givenFeatureNames = config.getStringList(\"oryx.input-schema.feature-names\");\n    if (givenFeatureNames.isEmpty()) {\n        int numFeatures = config.getInt(\"oryx.input-schema.num-features\");\n        com.google.common.base.Preconditions.checkArgument(numFeatures > 0, \"Neither feature-names nor num-features is set\");\n        java.util.List<java.lang.String> generatedFeatureNames = new java.util.ArrayList<>(numFeatures);\n        for (int i = 0; i < numFeatures; i++) {\n            generatedFeatureNames.add(java.lang.Integer.toString(i));\n        }\n        featureNames = generatedFeatureNames;\n    } else {\n        featureNames = com.google.common.collect.ImmutableList.copyOf(givenFeatureNames);\n    }\n    int numFeatures = featureNames.size();\n    com.google.common.base.Preconditions.checkArgument(new java.util.HashSet<>(featureNames).size() == numFeatures, \"Feature names must be unique: %s\", featureNames);\n    idFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.id-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(idFeatures));\n    java.util.Collection<java.lang.String> ignoredFeatures = com.google.common.collect.ImmutableSet.copyOf(config.getStringList(\"oryx.input-schema.ignored-features\"));\n    com.google.common.base.Preconditions.checkArgument(featureNames.containsAll(ignoredFeatures));\n    java.util.Collection<java.lang.String> activeFeatureSet = new java.util.HashSet<>(featureNames);\n    activeFeatureSet.removeAll(idFeatures);\n    activeFeatureSet.removeAll(ignoredFeatures);\n    activeFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    java.util.List<java.lang.String> givenNumericFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.numeric-features\");\n    java.util.List<java.lang.String> givenCategoricalFeatures = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalStringList(config, \"oryx.input-schema.categorical-features\");\n    if (givenNumericFeatures == null) {\n        com.google.common.base.Preconditions.checkNotNull(givenCategoricalFeatures, \"Neither numeric-features nor categorical-features was set\");\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(givenCategoricalFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(categoricalFeatures));\n        activeFeatureSet.removeAll(categoricalFeatures);\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    } else {\n        numericFeatures = com.google.common.collect.ImmutableSet.copyOf(givenNumericFeatures);\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.containsAll(numericFeatures));\n        activeFeatureSet.removeAll(numericFeatures);\n        categoricalFeatures = com.google.common.collect.ImmutableSet.copyOf(activeFeatureSet);\n    }\n    targetFeature = com.cloudera.oryx.common.settings.ConfigUtils.getOptionalString(config, \"oryx.input-schema.target-feature\");\n    if (targetFeature != null) {\n        com.google.common.base.Preconditions.checkArgument(activeFeatures.contains(targetFeature), \"Target feature is not known, an ID, or ignored: %s\", targetFeature);\n    }\n    targetFeatureIndex = (targetFeature == null) ? -1 : featureNames.indexOf(targetFeature);\n    allToPredictorMap = com.google.common.collect.HashBiMap.create();\n    for (int featureIndex = 0, predictorIndex = 0; featureIndex < featureNames.size(); featureIndex++) {\n        if (isActive(featureIndex) && (!isTarget(featureIndex))) {\n            allToPredictorMap.put(featureIndex, predictorIndex);\n            predictorIndex++;\n        }\n    }\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 6,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 50,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    java.lang.StringBuilder configFileString = new java.lang.StringBuilder();\n    for (java.util.Map.Entry<java.lang.String, ?> entry : overlay.entrySet()) {\n        configFileString.append(entry.getKey()).append('=').append(entry.getValue()).append('\\n');\n    }\n    java.lang.String configFile = configFileString.toString();\n    com.cloudera.oryx.common.settings.ConfigUtils.log.debug(\"Overlaid config: \\n{}\", configFile);\n    return com.typesafe.config.ConfigFactory.parseString(configFile).resolve().withFallback(underlying);\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "overlayOn",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 9,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.common.settings.ConfigUtils.DEFAULT_CONFIG;\n}",
                "ClassName": "ConfigUtils",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getDefault",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return featureNames.size();\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getNumFeatures",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return activeFeatures.size() - (hasTarget() ? 1 : 0);\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getNumPredictors",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return featureNames;\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getFeatureNames",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return isID(featureNames.get(featureIndex));\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return idFeatures.contains(featureName);\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return isActive(featureNames.get(featureIndex));\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isActive",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return activeFeatures.contains(featureName);\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isActive",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return isNumeric(featureNames.get(featureIndex));\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isNumeric",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return numericFeatures.contains(featureName);\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isNumeric",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return isCategorical(featureNames.get(featureIndex));\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isCategorical",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return categoricalFeatures.contains(featureName);\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isCategorical",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return targetFeatureIndex == featureIndex;\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isTarget",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return featureName.equals(targetFeature);\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "isTarget",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return targetFeature != null;\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "hasTarget",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkState(targetFeature != null);\n    return targetFeature;\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getTargetFeature",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkState(targetFeatureIndex >= 0);\n    return targetFeatureIndex;\n}",
                "ClassName": "InputSchema",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getTargetFeatureIndex",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 7,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 112,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    net.openhft.koloboke.collect.map.ObjObjMap<java.lang.String, java.lang.String> map = net.openhft.koloboke.collect.map.hash.HashObjObjMaps.newMutableMap(new java.lang.String[]{ \"foo\", \"bar\", \"baz\" }, new java.lang.String[]{ \"1\", \"3\", \"4\" });\n    map.removeIf(new com.cloudera.oryx.common.collection.KeyOnlyBiPredicate<java.lang.String, java.lang.String>(new net.openhft.koloboke.function.Predicate<java.lang.String>() {\n        @java.lang.Override\n        public boolean test(java.lang.String s) {\n            return s.startsWith(\"b\");\n        }\n    }));\n    org.junit.Assert.assertEquals(1, map.size());\n    org.junit.Assert.assertEquals(\"1\", map.get(\"foo\"));\n}",
        "ClassName": "KeyOnlyBiPredicateTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 3,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testKeyOnly",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 11,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    this.keyPredicate = keyPredicate;\n}",
                "ClassName": "KeyOnlyBiPredicate",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 3,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.kmeans.ClusterInfo> clusters = new java.util.ArrayList<>();\n    clusters.add(new com.cloudera.oryx.app.kmeans.ClusterInfo(0, new double[]{ -1.0, 2.0 }, 2));\n    clusters.add(new com.cloudera.oryx.app.kmeans.ClusterInfo(1, new double[]{ 1.0, 3.0 }, 3));\n    clusters.add(new com.cloudera.oryx.app.kmeans.ClusterInfo(2, new double[]{ 2.0, -1.0 }, 4));\n    com.cloudera.oryx.app.speed.kmeans.KMeansSpeedModel model = new com.cloudera.oryx.app.speed.kmeans.KMeansSpeedModel(clusters);\n    com.cloudera.oryx.app.kmeans.ClusterInfo cluster = model.getCluster(1);\n    cluster.update(new double[]{ -1.0, -1.0 }, 3);\n    cluster = model.getCluster(1);\n    org.junit.Assert.assertEquals(1, cluster.getID());\n    org.junit.Assert.assertEquals(6, cluster.getCount());\n    com.cloudera.oryx.common.OryxTest.assertArrayEquals(new double[]{ 0.0, 1.0 }, cluster.getCenter());\n}",
        "ClassName": "KMeansSpeedModelTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 4,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "update",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 2,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 13,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(center.length > 0);\n    com.google.common.base.Preconditions.checkArgument(initialCount >= 1);\n    this.id = id;\n    this.center = center;\n    this.count = initialCount;\n}",
                "ClassName": "ClusterInfo",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 7,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    this.clusters = clusterCenters;\n    distanceFn = new com.cloudera.oryx.app.kmeans.SquaredDistanceFn();\n}",
                "ClassName": "KMeansSpeedModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return clusters.get(id);\n}",
                "ClassName": "KMeansSpeedModel",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getCluster",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    int length = center.length;\n    com.google.common.base.Preconditions.checkArgument(length == newPoint.length);\n    double[] newCenter = new double[length];\n    long newTotalCount = newCount + count;\n    double newToTotal = ((double) (newCount)) / newTotalCount;\n    for (int i = 0; i < length; i++) {\n        double centerI = center[i];\n        newCenter[i] = centerI + (newToTotal * (newPoint[i] - centerI));\n    }\n    center = newCenter;\n    count = newTotalCount;\n}",
                "ClassName": "ClusterInfo",
                "CyclomaticComplexity": 1,
                "DepthOfInheritance": 0,
                "MethodName": "update",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 13,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return id;\n}",
                "ClassName": "ClusterInfo",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getID",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return count;\n}",
                "ClassName": "ClusterInfo",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getCount",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertArrayEquals(expecteds, actuals, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertArrayEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return center;\n}",
                "ClassName": "ClusterInfo",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "getCenter",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 1,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 39,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.rdf.predict.NumericPrediction> predictions = java.util.Arrays.asList(new com.cloudera.oryx.app.rdf.predict.NumericPrediction(1.0, 1), new com.cloudera.oryx.app.rdf.predict.NumericPrediction(3.0, 2), new com.cloudera.oryx.app.rdf.predict.NumericPrediction(6.0, 3));\n    double[] weights = new double[]{ 3.0, 2.0, 1.0 };\n    com.cloudera.oryx.app.rdf.predict.NumericPrediction vote = ((com.cloudera.oryx.app.rdf.predict.NumericPrediction) (com.cloudera.oryx.app.rdf.predict.WeightedPrediction.voteOnFeature(predictions, weights)));\n    org.junit.Assert.assertEquals(com.cloudera.oryx.app.rdf.example.FeatureType.NUMERIC, vote.getFeatureType());\n    com.cloudera.oryx.common.OryxTest.assertEquals(15.0 / 6.0, vote.getPrediction());\n}",
        "ClassName": "WeightedPredictionTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 5,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testNumericVoteWeighted",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 3,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 7,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [
            {
                "Body": "{\n    super(initialCount);\n    this.prediction = prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "<init>",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 4,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    com.google.common.base.Preconditions.checkArgument(!predictions.isEmpty(), \"No predictions\");\n    com.google.common.base.Preconditions.checkArgument(predictions.size() == weights.length, \"%s predictions but %s weights?\", predictions.size(), weights.length);\n    switch (predictions.get(0).getFeatureType()) {\n        case NUMERIC :\n            @java.lang.SuppressWarnings(\"unchecked\")\n            java.util.List<com.cloudera.oryx.app.rdf.predict.NumericPrediction> numericVotes = ((java.util.List<com.cloudera.oryx.app.rdf.predict.NumericPrediction>) (predictions));\n            return com.cloudera.oryx.app.rdf.predict.WeightedPrediction.voteOnNumericFeature(numericVotes, weights);\n        case CATEGORICAL :\n            @java.lang.SuppressWarnings(\"unchecked\")\n            java.util.List<com.cloudera.oryx.app.rdf.predict.CategoricalPrediction> categoricalVotes = ((java.util.List<com.cloudera.oryx.app.rdf.predict.CategoricalPrediction>) (predictions));\n            return com.cloudera.oryx.app.rdf.predict.WeightedPrediction.voteOnCategoricalFeature(categoricalVotes, weights);\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}",
                "ClassName": "WeightedPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 0,
                "MethodName": "voteOnFeature",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 16,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return com.cloudera.oryx.app.rdf.example.FeatureType.NUMERIC;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getFeatureType",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    org.junit.Assert.assertEquals(expected, actual, com.cloudera.oryx.common.OryxTest.DOUBLE_EPSILON);\n}",
                "ClassName": "OryxTest",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "assertEquals",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            },
            {
                "Body": "{\n    return prediction;\n}",
                "ClassName": "NumericPrediction",
                "CyclomaticComplexity": 0,
                "DepthOfInheritance": 1,
                "MethodName": "getPrediction",
                "NumberOfAsynchronousWaits": 0,
                "NumberOfDates": 0,
                "NumberOfFiles": 0,
                "NumberOfLines": 3,
                "NumberOfRandoms": 0,
                "NumberOfThreads": 0
            }
        ],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 29,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    },
    {
        "Body": "{\n    java.util.List<com.cloudera.oryx.app.rdf.tree.TreePath> paths = new java.util.ArrayList<>();\n    paths.addAll(java.util.Arrays.asList(com.cloudera.oryx.app.rdf.tree.TreePathTest.LRL, com.cloudera.oryx.app.rdf.tree.TreePathTest.R, com.cloudera.oryx.app.rdf.tree.TreePathTest.LR, com.cloudera.oryx.app.rdf.tree.TreePathTest.LRR));\n    java.util.Collections.sort(paths);\n    org.junit.Assert.assertEquals(java.util.Arrays.asList(com.cloudera.oryx.app.rdf.tree.TreePathTest.LRL, com.cloudera.oryx.app.rdf.tree.TreePathTest.LR, com.cloudera.oryx.app.rdf.tree.TreePathTest.LRR, com.cloudera.oryx.app.rdf.tree.TreePathTest.R), paths);\n}",
        "ClassName": "TreePathTest",
        "Commit": "7ab42c4fedc1e71eb93891ab572dda34b44ee325",
        "CyclomaticComplexity": 0,
        "Date": "Fri, 27 Feb 2015 13:41:49 +0000",
        "HasTimeoutInAnnotations": 0,
        "Label": 0,
        "MaximumCyclomaticComplexity": 0,
        "MaximumNumberOfAsynchronousWaits": 0,
        "MaximumNumberOfDates": 0,
        "MaximumNumberOfFiles": 0,
        "MaximumNumberOfLines": 0,
        "MaximumNumberOfRandoms": 0,
        "MaximumNumberOfThreads": 0,
        "MeanCyclomaticComplexity": 0,
        "MeanNumberOfAsynchronousWaits": 0,
        "MeanNumberOfDates": 0,
        "MeanNumberOfFiles": 0,
        "MeanNumberOfLines": 0,
        "MeanNumberOfRandoms": 0,
        "MeanNumberOfThreads": 0,
        "MethodName": "testOrder",
        "MinimumCyclomaticComplexity": 0,
        "MinimumNumberOfAsynchronousWaits": 0,
        "MinimumNumberOfDates": 0,
        "MinimumNumberOfFiles": 0,
        "MinimumNumberOfLines": 0,
        "MinimumNumberOfRandoms": 0,
        "MinimumNumberOfThreads": 0,
        "NumberOfAsserts": 1,
        "NumberOfAsynchronousWaits": 0,
        "NumberOfDates": 0,
        "NumberOfFiles": 0,
        "NumberOfLines": 6,
        "NumberOfRandoms": 0,
        "NumberOfThreads": 0,
        "ProjectName": "oryx",
        "StaticCUT": [],
        "Timestamp": "1425044523",
        "TotalCyclomaticComplexity": 0,
        "TotalNumberOfAsynchronousWaits": 0,
        "TotalNumberOfDates": 0,
        "TotalNumberOfFiles": 0,
        "TotalNumberOfLines": 0,
        "TotalNumberOfRandoms": 0,
        "TotalNumberOfThreads": 0
    }
]
