<?xml version="1.0" encoding="utf-8"?>
<testsuite errors="0" failures="3" name="pytest" skipped="192" tests="1904" time="177.181">
  <testcase classname="tests.test_animation.TestAnimation" file="tests/test_animation.py" line="56" name="test_creation" time="0.707"/>
  <testcase classname="tests.test_animation.TestAnimation" file="tests/test_animation.py" line="63" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_animation.TestAnimation" file="tests/test_animation.py" line="69" name="test_send_all_args" time="0.674"/>
  <testcase classname="tests.test_animation.TestAnimation" file="tests/test_animation.py" line="95" name="test_get_and_download" time="0.098"/>
  <testcase classname="tests.test_animation.TestAnimation" file="tests/test_animation.py" line="108" name="test_send_animation_url_file" time="0.077"/>
  <testcase classname="tests.test_animation.TestAnimation" file="tests/test_animation.py" line="128" name="test_send_animation_default_parse_mode_1[default_bot0]" time="0.762"/>
  <testcase classname="tests.test_animation.TestAnimation" file="tests/test_animation.py" line="139" name="test_send_animation_default_parse_mode_2[default_bot0]" time="0.713"/>
  <testcase classname="tests.test_animation.TestAnimation" file="tests/test_animation.py" line="151" name="test_send_animation_default_parse_mode_3[default_bot0]" time="0.466"/>
  <testcase classname="tests.test_animation.TestAnimation" file="tests/test_animation.py" line="163" name="test_resend" time="0.080"/>
  <testcase classname="tests.test_animation.TestAnimation" file="tests/test_animation.py" line="170" name="test_send_with_animation" time="0.001"/>
  <testcase classname="tests.test_animation.TestAnimation" file="tests/test_animation.py" line="178" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_animation.TestAnimation" file="tests/test_animation.py" line="198" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_animation.TestAnimation" file="tests/test_animation.py" line="212" name="test_error_send_empty_file" time="0.046"/>
  <testcase classname="tests.test_animation.TestAnimation" file="tests/test_animation.py" line="220" name="test_error_send_empty_file_id" time="0.044"/>
  <testcase classname="tests.test_animation.TestAnimation" file="tests/test_animation.py" line="226" name="test_error_send_without_required_args" time="0.001"/>
  <testcase classname="tests.test_animation.TestAnimation" file="tests/test_animation.py" line="230" name="test_get_file_instance_method" time="0.001"/>
  <testcase classname="tests.test_animation.TestAnimation" file="tests/test_animation.py" line="237" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_audio.TestAudio" file="tests/test_audio.py" line="58" name="test_creation" time="0.451"/>
  <testcase classname="tests.test_audio.TestAudio" file="tests/test_audio.py" line="66" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_audio.TestAudio" file="tests/test_audio.py" line="76" name="test_send_all_args" time="0.343"/>
  <testcase classname="tests.test_audio.TestAudio" file="tests/test_audio.py" line="107" name="test_get_and_download" time="0.309"/>
  <testcase classname="tests.test_audio.TestAudio" file="tests/test_audio.py" line="121" name="test_send_mp3_url_file" time="0.085"/>
  <testcase classname="tests.test_audio.TestAudio" file="tests/test_audio.py" line="137" name="test_resend" time="0.075"/>
  <testcase classname="tests.test_audio.TestAudio" file="tests/test_audio.py" line="144" name="test_send_with_audio" time="0.001"/>
  <testcase classname="tests.test_audio.TestAudio" file="tests/test_audio.py" line="152" name="test_send_audio_default_parse_mode_1[default_bot0]" time="0.312"/>
  <testcase classname="tests.test_audio.TestAudio" file="tests/test_audio.py" line="163" name="test_send_audio_default_parse_mode_2[default_bot0]" time="0.177"/>
  <testcase classname="tests.test_audio.TestAudio" file="tests/test_audio.py" line="175" name="test_send_audio_default_parse_mode_3[default_bot0]" time="0.178"/>
  <testcase classname="tests.test_audio.TestAudio" file="tests/test_audio.py" line="187" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_audio.TestAudio" file="tests/test_audio.py" line="210" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_audio.TestAudio" file="tests/test_audio.py" line="220" name="test_error_send_empty_file" time="0.043"/>
  <testcase classname="tests.test_audio.TestAudio" file="tests/test_audio.py" line="228" name="test_error_send_empty_file_id" time="0.047"/>
  <testcase classname="tests.test_audio.TestAudio" file="tests/test_audio.py" line="234" name="test_error_send_without_required_args" time="0.001"/>
  <testcase classname="tests.test_audio.TestAudio" file="tests/test_audio.py" line="238" name="test_get_file_instance_method" time="0.001"/>
  <testcase classname="tests.test_audio.TestAudio" file="tests/test_audio.py" line="245" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="96" name="test_invalid_token[123]" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="96" name="test_invalid_token[12a:abcd1234]" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="96" name="test_invalid_token[12:abcd1234]" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="96" name="test_invalid_token[1234:abcd1234\n]" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="96" name="test_invalid_token[ 1234:abcd1234]" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="96" name="test_invalid_token[ 1234:abcd1234\r]" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="96" name="test_invalid_token[1234:abcd 1234]" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="112" name="test_invalid_token_server_response" time="0.166"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="120" name="test_unknown_kwargs" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="128" name="test_get_me_and_properties" time="0.102"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="146" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="158" name="test_forward_message" time="0.249"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="167" name="test_delete_message" time="2.140"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="175" name="test_delete_message_old_message" time="0.053"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="186" name="test_send_venue" time="0.075"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="213" name="test_send_contact" time="0.075">
    <skipped message="expected test failure">reason: Not waiting for flood control: Flood control exceeded. Retry in 59032.0 seconds</skipped>
  </testcase>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="234" name="test_send_and_stop_poll[None]" time="0.334"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="234" name="test_send_and_stop_poll[reply_markup1]" time="5.160">
    <failure message="telegram.error.TimedOut: Timed out">self = &lt;telegram.vendor.ptb_urllib3.urllib3.connectionpool.HTTPSConnectionPool object at 0x112d69cd0&gt;
conn = &lt;telegram.vendor.ptb_urllib3.urllib3.connection.VerifiedHTTPSConnection object at 0x112d69f10&gt;, method = 'POST'
url = '/bot579694714:AAHRLL5zBVy4Blx2jRFKe1HlfnXCg08WuLY/sendPoll'
timeout = &lt;telegram.vendor.ptb_urllib3.urllib3.util.timeout.Timeout object at 0x1131cd810&gt;, chunked = False
httplib_request_kw = {'body': b'{"chat_id": "-1001310911135", "question": "Is this a test?", "options": ["Yes", "No", "Maybe"], "type": "qu...tion': 'keep-alive', 'user-agent': 'Python Telegram Bot (https://github.com/python-telegram-bot/python-telegram-bot)'}}
timeout_obj = &lt;telegram.vendor.ptb_urllib3.urllib3.util.timeout.Timeout object at 0x1131cd250&gt;, read_timeout = 5.0

    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,
                      **httplib_request_kw):
        """
        Perform a request on a given urllib connection object taken from our
        pool.
    
        :param conn:
            a connection from one of our connection pools
    
        :param timeout:
            Socket timeout in seconds for the request. This can be a
            float or integer, which will set the same timeout value for
            the socket connect and the socket read, or an instance of
            :class:`urllib3.util.Timeout`, which gives you more fine-grained
            control over your timeouts.
        """
        self.num_requests += 1
    
        timeout_obj = self._get_timeout(timeout)
        timeout_obj.start_connect()
        conn.timeout = timeout_obj.connect_timeout
    
        # Trigger any extra validation we need to do.
        try:
            self._validate_conn(conn)
        except (SocketTimeout, BaseSSLError) as e:
            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.
            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout,
                                exc_cls=ConnectTimeoutError)
            raise
    
        # Reset the timeout for the recv() on the socket
        read_timeout = timeout_obj.read_timeout
    
        # App Engine doesn't have a sock attr
        if getattr(conn, 'sock', None):
            # In Python 3 socket.py will catch EAGAIN and return None when you
            # try and read into the file pointer created by http.client, which
            # instead raises a BadStatusLine exception. Instead of catching
            # the exception and assuming all BadStatusLine exceptions are read
            # timeouts, check for a zero timeout before making the request.
            if read_timeout == 0:
                raise ReadTimeoutError(
                    self, url, "Read timed out. (read timeout=%s)" % read_timeout)
            if read_timeout is Timeout.DEFAULT_TIMEOUT:
                conn.sock.settimeout(socket.getdefaulttimeout())
            else:  # None or a value
                conn.sock.settimeout(read_timeout)
    
        # conn.request() calls httplib.*.request, not the method in
        # urllib3.request. It also calls makefile (recv) on the socket.
        if chunked:
            conn.request_chunked(method, url, **httplib_request_kw)
        else:
            conn.request(method, url, **httplib_request_kw)
    
        # Receive the response from the server
        try:
            try:  # Python 2.7, use buffering of HTTP responses
                httplib_response = conn.getresponse(buffering=True)
            except TypeError:  # Python 2.6 and older, Python 3
                try:
                    httplib_response = conn.getresponse()
                except Exception as e:
                    # Remove the TypeError from the exception chain in Python 3;
                    # otherwise it looks like a programming error was the cause.
&gt;                   six.raise_from(e, None)

telegram/vendor/ptb_urllib3/urllib3/connectionpool.py:402: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = timeout('The read operation timed out'), from_value = None

&gt;   ???

&lt;string&gt;:2: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;telegram.vendor.ptb_urllib3.urllib3.connectionpool.HTTPSConnectionPool object at 0x112d69cd0&gt;
conn = &lt;telegram.vendor.ptb_urllib3.urllib3.connection.VerifiedHTTPSConnection object at 0x112d69f10&gt;, method = 'POST'
url = '/bot579694714:AAHRLL5zBVy4Blx2jRFKe1HlfnXCg08WuLY/sendPoll'
timeout = &lt;telegram.vendor.ptb_urllib3.urllib3.util.timeout.Timeout object at 0x1131cd810&gt;, chunked = False
httplib_request_kw = {'body': b'{"chat_id": "-1001310911135", "question": "Is this a test?", "options": ["Yes", "No", "Maybe"], "type": "qu...tion': 'keep-alive', 'user-agent': 'Python Telegram Bot (https://github.com/python-telegram-bot/python-telegram-bot)'}}
timeout_obj = &lt;telegram.vendor.ptb_urllib3.urllib3.util.timeout.Timeout object at 0x1131cd250&gt;, read_timeout = 5.0

    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,
                      **httplib_request_kw):
        """
        Perform a request on a given urllib connection object taken from our
        pool.
    
        :param conn:
            a connection from one of our connection pools
    
        :param timeout:
            Socket timeout in seconds for the request. This can be a
            float or integer, which will set the same timeout value for
            the socket connect and the socket read, or an instance of
            :class:`urllib3.util.Timeout`, which gives you more fine-grained
            control over your timeouts.
        """
        self.num_requests += 1
    
        timeout_obj = self._get_timeout(timeout)
        timeout_obj.start_connect()
        conn.timeout = timeout_obj.connect_timeout
    
        # Trigger any extra validation we need to do.
        try:
            self._validate_conn(conn)
        except (SocketTimeout, BaseSSLError) as e:
            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.
            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout,
                                exc_cls=ConnectTimeoutError)
            raise
    
        # Reset the timeout for the recv() on the socket
        read_timeout = timeout_obj.read_timeout
    
        # App Engine doesn't have a sock attr
        if getattr(conn, 'sock', None):
            # In Python 3 socket.py will catch EAGAIN and return None when you
            # try and read into the file pointer created by http.client, which
            # instead raises a BadStatusLine exception. Instead of catching
            # the exception and assuming all BadStatusLine exceptions are read
            # timeouts, check for a zero timeout before making the request.
            if read_timeout == 0:
                raise ReadTimeoutError(
                    self, url, "Read timed out. (read timeout=%s)" % read_timeout)
            if read_timeout is Timeout.DEFAULT_TIMEOUT:
                conn.sock.settimeout(socket.getdefaulttimeout())
            else:  # None or a value
                conn.sock.settimeout(read_timeout)
    
        # conn.request() calls httplib.*.request, not the method in
        # urllib3.request. It also calls makefile (recv) on the socket.
        if chunked:
            conn.request_chunked(method, url, **httplib_request_kw)
        else:
            conn.request(method, url, **httplib_request_kw)
    
        # Receive the response from the server
        try:
            try:  # Python 2.7, use buffering of HTTP responses
                httplib_response = conn.getresponse(buffering=True)
            except TypeError:  # Python 2.6 and older, Python 3
                try:
&gt;                   httplib_response = conn.getresponse()

telegram/vendor/ptb_urllib3/urllib3/connectionpool.py:398: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;telegram.vendor.ptb_urllib3.urllib3.connection.VerifiedHTTPSConnection object at 0x112d69f10&gt;

    def getresponse(self):
        """Get the response from the server.
    
        If the HTTPConnection is in the correct state, returns an
        instance of HTTPResponse or of whatever object is returned by
        the response_class variable.
    
        If a request has not been sent or if a previous response has
        not be handled, ResponseNotReady is raised.  If the HTTP
        response indicates that the connection should be closed, then
        it will be closed before the response is returned.  When the
        connection is closed, the underlying socket is closed.
        """
    
        # if a prior response has been completed, then forget about it.
        if self.__response and self.__response.isclosed():
            self.__response = None
    
        # if a prior response exists, then it must be completed (otherwise, we
        # cannot read this response's header to determine the connection-close
        # behavior)
        #
        # note: if a prior response existed, but was connection-close, then the
        # socket and response were made independent of this HTTPConnection
        # object since a new request requires that we open a whole new
        # connection
        #
        # this means the prior response had one of two states:
        #   1) will_close: this connection was reset and the prior socket and
        #                  response operate independently
        #   2) persistent: the response was retained and we await its
        #                  isclosed() status to become true.
        #
        if self.__state != _CS_REQ_SENT or self.__response:
            raise ResponseNotReady(self.__state)
    
        if self.debuglevel &gt; 0:
            response = self.response_class(self.sock, self.debuglevel,
                                           method=self._method)
        else:
            response = self.response_class(self.sock, method=self._method)
    
        try:
            try:
&gt;               response.begin()

/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/http/client.py:1344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;http.client.HTTPResponse object at 0x1131cd350&gt;

    def begin(self):
        if self.headers is not None:
            # we've already started reading the response
            return
    
        # read until we get a non-100 response
        while True:
&gt;           version, status, reason = self._read_status()

/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/http/client.py:306: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;http.client.HTTPResponse object at 0x1131cd350&gt;

    def _read_status(self):
&gt;       line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")

/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/http/client.py:267: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;socket.SocketIO object at 0x1131cd5d0&gt;, b = &lt;memory at 0x112e4cd50&gt;

    def readinto(self, b):
        """Read up to len(b) bytes into the writable buffer *b* and return
        the number of bytes read.  If the socket is non-blocking and no bytes
        are available, None is returned.
    
        If *b* is non-empty, a 0 return value indicates that the connection
        was shutdown at the other end.
        """
        self._checkClosed()
        self._checkReadable()
        if self._timeout_occurred:
            raise OSError("cannot read from timed out object")
        while True:
            try:
&gt;               return self._sock.recv_into(b)

/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py:589: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0&gt;
buffer = &lt;memory at 0x112e4cd50&gt;, nbytes = 8192, flags = 0

    def recv_into(self, buffer, nbytes=None, flags=0):
        self._checkClosed()
        if buffer and (nbytes is None):
            nbytes = len(buffer)
        elif nbytes is None:
            nbytes = 1024
        if self._sslobj is not None:
            if flags != 0:
                raise ValueError(
                  "non-zero flags not allowed in calls to recv_into() on %s" %
                  self.__class__)
&gt;           return self.read(nbytes, buffer)

/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ssl.py:1071: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0&gt;, len = 8192
buffer = &lt;memory at 0x112e4cd50&gt;

    def read(self, len=1024, buffer=None):
        """Read up to LEN bytes and return them.
        Return zero-length string on EOF."""
    
        self._checkClosed()
        if self._sslobj is None:
            raise ValueError("Read on closed or unwrapped SSL socket.")
        try:
            if buffer is not None:
&gt;               return self._sslobj.read(len, buffer)
E               socket.timeout: The read operation timed out

/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ssl.py:929: timeout

During handling of the above exception, another exception occurred:

self = &lt;telegram.utils.request.Request object at 0x110899290&gt;
args = ('POST', 'https://api.telegram.org/bot579694714:AAHRLL5zBVy4Blx2jRFKe1HlfnXCg08WuLY/sendPoll')
kwargs = {'body': b'{"chat_id": "-1001310911135", "question": "Is this a test?", "options": ["Yes", "No", "Maybe"], "type": "qu...tion': 'keep-alive', 'user-agent': 'Python Telegram Bot (https://github.com/python-telegram-bot/python-telegram-bot)'}}

    def _request_wrapper(self, *args: Any, **kwargs: Any) -&gt; bytes:
        """Wraps urllib3 request for handling known exceptions.
    
        Args:
            args: unnamed arguments, passed to urllib3 request.
            kwargs: keyword arguments, passed tp urllib3 request.
    
        Returns:
            bytes: A non-parsed JSON text.
    
        Raises:
            TelegramError
    
        """
        # Make sure to hint Telegram servers that we reuse connections by sending
        # "Connection: keep-alive" in the HTTP headers.
        if 'headers' not in kwargs:
            kwargs['headers'] = {}
        kwargs['headers']['connection'] = 'keep-alive'
        # Also set our user agent
        kwargs['headers']['user-agent'] = USER_AGENT
    
        try:
&gt;           resp = self._con_pool.request(*args, **kwargs)

telegram/utils/request.py:252: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;telegram.vendor.ptb_urllib3.urllib3.poolmanager.PoolManager object at 0x1108994d0&gt;, method = 'POST'
url = 'https://api.telegram.org/bot579694714:AAHRLL5zBVy4Blx2jRFKe1HlfnXCg08WuLY/sendPoll', fields = None
headers = {'Content-Type': 'application/json', 'connection': 'keep-alive', 'user-agent': 'Python Telegram Bot (https://github.com/python-telegram-bot/python-telegram-bot)'}
urlopen_kw = {'body': b'{"chat_id": "-1001310911135", "question": "Is this a test?", "options": ["Yes", "No", "Maybe"], "type": "qu..., "is_closed": "True", "explanation": "[Here is a link](https://google.com)", "explanation_parse_mode": "MarkdownV2"}'}

    def request(self, method, url, fields=None, headers=None, **urlopen_kw):
        """
        Make a request using :meth:`urlopen` with the appropriate encoding of
        ``fields`` based on the ``method`` used.
    
        This is a convenience method that requires the least amount of manual
        effort. It can be used in most situations, while still having the
        option to drop down to more specific methods when necessary, such as
        :meth:`request_encode_url`, :meth:`request_encode_body`,
        or even the lowest level :meth:`urlopen`.
        """
        method = method.upper()
    
        if method in self._encode_url_methods:
            return self.request_encode_url(method, url, fields=fields,
                                           headers=headers,
                                           **urlopen_kw)
        else:
            return self.request_encode_body(method, url, fields=fields,
                                            headers=headers,
&gt;                                           **urlopen_kw)

telegram/vendor/ptb_urllib3/urllib3/request.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;telegram.vendor.ptb_urllib3.urllib3.poolmanager.PoolManager object at 0x1108994d0&gt;, method = 'POST'
url = 'https://api.telegram.org/bot579694714:AAHRLL5zBVy4Blx2jRFKe1HlfnXCg08WuLY/sendPoll', fields = None
headers = {'Content-Type': 'application/json', 'connection': 'keep-alive', 'user-agent': 'Python Telegram Bot (https://github.com/python-telegram-bot/python-telegram-bot)'}
encode_multipart = True, multipart_boundary = None
urlopen_kw = {'body': b'{"chat_id": "-1001310911135", "question": "Is this a test?", "options": ["Yes", "No", "Maybe"], "type": "qu..., "is_closed": "True", "explanation": "[Here is a link](https://google.com)", "explanation_parse_mode": "MarkdownV2"}'}
extra_kw = {'body': b'{"chat_id": "-1001310911135", "question": "Is this a test?", "options": ["Yes", "No", "Maybe"], "type": "qu...tion': 'keep-alive', 'user-agent': 'Python Telegram Bot (https://github.com/python-telegram-bot/python-telegram-bot)'}}

    def request_encode_body(self, method, url, fields=None, headers=None,
                            encode_multipart=True, multipart_boundary=None,
                            **urlopen_kw):
        """
        Make a request using :meth:`urlopen` with the ``fields`` encoded in
        the body. This is useful for request methods like POST, PUT, PATCH, etc.
    
        When ``encode_multipart=True`` (default), then
        :meth:`urllib3.filepost.encode_multipart_formdata` is used to encode
        the payload with the appropriate content type. Otherwise
        :meth:`urllib.urlencode` is used with the
        'application/x-www-form-urlencoded' content type.
    
        Multipart encoding must be used when posting files, and it's reasonably
        safe to use it in other times too. However, it may break request
        signing, such as with OAuth.
    
        Supports an optional ``fields`` parameter of key/value strings AND
        key/filetuple. A filetuple is a (filename, data, MIME type) tuple where
        the MIME type is optional. For example::
    
            fields = {
                'foo': 'bar',
                'fakefile': ('foofile.txt', 'contents of foofile'),
                'realfile': ('barfile.txt', open('realfile').read()),
                'typedfile': ('bazfile.bin', open('bazfile').read(),
                              'image/jpeg'),
                'nonamefile': 'contents of nonamefile field',
            }
    
        When uploading a file, providing a filename (the first parameter of the
        tuple) is optional but recommended to best mimick behavior of browsers.
    
        Note that if ``headers`` are supplied, the 'Content-Type' header will
        be overwritten because it depends on the dynamic random boundary string
        which is used to compose the body of the request. The random boundary
        string can be explicitly set with the ``multipart_boundary`` parameter.
        """
        if headers is None:
            headers = self.headers
    
        extra_kw = {'headers': {}}
    
        if fields:
            if 'body' in urlopen_kw:
                raise TypeError(
                    "request got values for both 'fields' and 'body', can only specify one.")
    
            if encode_multipart:
                body, content_type = encode_multipart_formdata(fields, boundary=multipart_boundary)
            else:
                body, content_type = urlencode(fields), 'application/x-www-form-urlencoded'
    
            extra_kw['body'] = body
            extra_kw['headers'] = {'Content-Type': content_type}
    
        extra_kw['headers'].update(headers)
        extra_kw.update(urlopen_kw)
    
&gt;       return self.urlopen(method, url, **extra_kw)

telegram/vendor/ptb_urllib3/urllib3/request.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;telegram.vendor.ptb_urllib3.urllib3.poolmanager.PoolManager object at 0x1108994d0&gt;, method = 'POST'
url = 'https://api.telegram.org/bot579694714:AAHRLL5zBVy4Blx2jRFKe1HlfnXCg08WuLY/sendPoll', redirect = True
kw = {'assert_same_host': False, 'body': b'{"chat_id": "-1001310911135", "question": "Is this a test?", "options": ["Yes", ..., 'user-agent': 'Python Telegram Bot (https://github.com/python-telegram-bot/python-telegram-bot)'}, 'redirect': False}
u = Url(scheme='https', auth=None, host='api.telegram.org', port=None, path='/bot579694714:AAHRLL5zBVy4Blx2jRFKe1HlfnXCg08WuLY/sendPoll', query=None, fragment=None)
conn = &lt;telegram.vendor.ptb_urllib3.urllib3.connectionpool.HTTPSConnectionPool object at 0x112d69cd0&gt;

    def urlopen(self, method, url, redirect=True, **kw):
        """
        Same as :meth:`urllib3.connectionpool.HTTPConnectionPool.urlopen`
        with custom cross-host redirect logic and only sends the request-uri
        portion of the ``url``.
    
        The given ``url`` parameter must be absolute, such that an appropriate
        :class:`urllib3.connectionpool.ConnectionPool` can be chosen for it.
        """
        u = parse_url(url)
        conn = self.connection_from_host(u.host, port=u.port, scheme=u.scheme)
    
        kw['assert_same_host'] = False
        kw['redirect'] = False
        if 'headers' not in kw:
            kw['headers'] = self.headers
    
        if self.proxy is not None and u.scheme == "http":
            response = conn.urlopen(method, url, **kw)
        else:
&gt;           response = conn.urlopen(method, u.request_uri, **kw)

telegram/vendor/ptb_urllib3/urllib3/poolmanager.py:244: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;telegram.vendor.ptb_urllib3.urllib3.connectionpool.HTTPSConnectionPool object at 0x112d69cd0&gt;, method = 'POST'
url = '/bot579694714:AAHRLL5zBVy4Blx2jRFKe1HlfnXCg08WuLY/sendPoll'
body = b'{"chat_id": "-1001310911135", "question": "Is this a test?", "options": ["Yes", "No", "Maybe"], "type": "quiz", "cor...", "is_closed": "True", "explanation": "[Here is a link](https://google.com)", "explanation_parse_mode": "MarkdownV2"}'
headers = {'Content-Type': 'application/json', 'connection': 'keep-alive', 'user-agent': 'Python Telegram Bot (https://github.com/python-telegram-bot/python-telegram-bot)'}
retries = Retry(total=3, connect=None, read=None, redirect=None), redirect = False, assert_same_host = False
timeout = &lt;object object at 0x10fdf2910&gt;, pool_timeout = None, release_conn = True, chunked = False, body_pos = None, response_kw = {}
conn = None, release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;telegram.vendor.ptb_urllib3.urllib3.util.timeout.Timeout object at 0x1131cd810&gt;, is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        """
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you'll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it's appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you're not preloading
            the response's content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get('preload_content', True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won't need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        """
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get('preload_content', True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else's copy.
        if self.scheme == 'http':
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
                                                  chunked=chunked)
    
            # If we're going to release the connection in ``finally:``, then
            # the response doesn't need to know about the connection. Otherwise
            # it will also try to release it and we'll have a double-release
            # mess.
            response_conn = conn if not release_conn else None
    
            # Pass method to Response for length checking
            response_kw['request_method'] = method
    
            # Import httplib's response into our own wrapper object
            response = self.ResponseCls.from_httplib(httplib_response,
                                                     pool=self,
                                                     connection=response_conn,
                                                     retries=retries,
                                                     **response_kw)
    
            # Everything went great!
            clean_exit = True
    
        except queue.Empty:
            # Timed out by queue.
            raise EmptyPoolError(self, "No pool connections are available.")
    
        except (BaseSSLError, CertificateError) as e:
            # Close the connection. If a connection is reused on which there
            # was a Certificate error, the next request will certainly raise
            # another Certificate error.
            clean_exit = False
            raise SSLError(e)
    
        except SSLError:
            # Treat SSLError separately from BaseSSLError to preserve
            # traceback.
            clean_exit = False
            raise
    
        except (TimeoutError, HTTPException, SocketError, ProtocolError) as e:
            # Discard the connection for these exceptions. It will be
            # be replaced during the next _get_conn() call.
            clean_exit = False
    
            if isinstance(e, (SocketError, NewConnectionError)) and self.proxy:
                e = ProxyError('Cannot connect to proxy.', e)
            elif isinstance(e, (SocketError, HTTPException)):
                e = ProtocolError('Connection aborted.', e)
    
            retries = retries.increment(method, url, error=e, _pool=self,
&gt;                                       _stacktrace=sys.exc_info()[2])

telegram/vendor/ptb_urllib3/urllib3/connectionpool.py:666: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = Retry(total=3, connect=None, read=None, redirect=None), method = 'POST'
url = '/bot579694714:AAHRLL5zBVy4Blx2jRFKe1HlfnXCg08WuLY/sendPoll', response = None
error = ReadTimeoutError("HTTPSConnectionPool(host='api.telegram.org', port=443): Read timed out. (read timeout=5.0)")
_pool = &lt;telegram.vendor.ptb_urllib3.urllib3.connectionpool.HTTPSConnectionPool object at 0x112d69cd0&gt;
_stacktrace = &lt;traceback object at 0x112f0f2d0&gt;

    def increment(self, method=None, url=None, response=None, error=None,
                  _pool=None, _stacktrace=None):
        """ Return a new Retry object with incremented retry counters.
    
        :param response: A response object, or None, if the server did not
            return a response.
        :type response: :class:`~urllib3.response.HTTPResponse`
        :param Exception error: An error encountered during the request, or
            None if the response was received successfully.
    
        :return: A new ``Retry`` object.
        """
        if self.total is False and error:
            # Disabled, indicate to re-raise the error.
            raise six.reraise(type(error), error, _stacktrace)
    
        total = self.total
        if total is not None:
            total -= 1
    
        connect = self.connect
        read = self.read
        redirect = self.redirect
        cause = 'unknown'
        status = None
        redirect_location = None
    
        if error and self._is_connection_error(error):
            # Connect retry?
            if connect is False:
                raise six.reraise(type(error), error, _stacktrace)
            elif connect is not None:
                connect -= 1
    
        elif error and self._is_read_error(error):
            # Read retry?
            if read is False or not self._is_method_retryable(method):
&gt;               raise six.reraise(type(error), error, _stacktrace)

telegram/vendor/ptb_urllib3/urllib3/util/retry.py:347: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

tp = &lt;class 'telegram.vendor.ptb_urllib3.urllib3.exceptions.ReadTimeoutError'&gt;
value = ReadTimeoutError("HTTPSConnectionPool(host='api.telegram.org', port=443): Read timed out. (read timeout=5.0)")
tb = &lt;traceback object at 0x112f0f2d0&gt;

    def reraise(tp, value, tb=None):
        if value is None:
            value = tp()
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
&gt;       raise value

telegram/vendor/ptb_urllib3/urllib3/packages/six.py:686: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;telegram.vendor.ptb_urllib3.urllib3.connectionpool.HTTPSConnectionPool object at 0x112d69cd0&gt;, method = 'POST'
url = '/bot579694714:AAHRLL5zBVy4Blx2jRFKe1HlfnXCg08WuLY/sendPoll'
body = b'{"chat_id": "-1001310911135", "question": "Is this a test?", "options": ["Yes", "No", "Maybe"], "type": "quiz", "cor...", "is_closed": "True", "explanation": "[Here is a link](https://google.com)", "explanation_parse_mode": "MarkdownV2"}'
headers = {'Content-Type': 'application/json', 'connection': 'keep-alive', 'user-agent': 'Python Telegram Bot (https://github.com/python-telegram-bot/python-telegram-bot)'}
retries = Retry(total=3, connect=None, read=None, redirect=None), redirect = False, assert_same_host = False
timeout = &lt;object object at 0x10fdf2910&gt;, pool_timeout = None, release_conn = True, chunked = False, body_pos = None, response_kw = {}
conn = None, release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;telegram.vendor.ptb_urllib3.urllib3.util.timeout.Timeout object at 0x1131cd810&gt;, is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        """
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you'll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it's appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you're not preloading
            the response's content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get('preload_content', True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won't need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        """
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get('preload_content', True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else's copy.
        if self.scheme == 'http':
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
&gt;                                                 chunked=chunked)

telegram/vendor/ptb_urllib3/urllib3/connectionpool.py:617: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;telegram.vendor.ptb_urllib3.urllib3.connectionpool.HTTPSConnectionPool object at 0x112d69cd0&gt;
conn = &lt;telegram.vendor.ptb_urllib3.urllib3.connection.VerifiedHTTPSConnection object at 0x112d69f10&gt;, method = 'POST'
url = '/bot579694714:AAHRLL5zBVy4Blx2jRFKe1HlfnXCg08WuLY/sendPoll'
timeout = &lt;telegram.vendor.ptb_urllib3.urllib3.util.timeout.Timeout object at 0x1131cd810&gt;, chunked = False
httplib_request_kw = {'body': b'{"chat_id": "-1001310911135", "question": "Is this a test?", "options": ["Yes", "No", "Maybe"], "type": "qu...tion': 'keep-alive', 'user-agent': 'Python Telegram Bot (https://github.com/python-telegram-bot/python-telegram-bot)'}}
timeout_obj = &lt;telegram.vendor.ptb_urllib3.urllib3.util.timeout.Timeout object at 0x1131cd250&gt;, read_timeout = 5.0

    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,
                      **httplib_request_kw):
        """
        Perform a request on a given urllib connection object taken from our
        pool.
    
        :param conn:
            a connection from one of our connection pools
    
        :param timeout:
            Socket timeout in seconds for the request. This can be a
            float or integer, which will set the same timeout value for
            the socket connect and the socket read, or an instance of
            :class:`urllib3.util.Timeout`, which gives you more fine-grained
            control over your timeouts.
        """
        self.num_requests += 1
    
        timeout_obj = self._get_timeout(timeout)
        timeout_obj.start_connect()
        conn.timeout = timeout_obj.connect_timeout
    
        # Trigger any extra validation we need to do.
        try:
            self._validate_conn(conn)
        except (SocketTimeout, BaseSSLError) as e:
            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.
            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout,
                                exc_cls=ConnectTimeoutError)
            raise
    
        # Reset the timeout for the recv() on the socket
        read_timeout = timeout_obj.read_timeout
    
        # App Engine doesn't have a sock attr
        if getattr(conn, 'sock', None):
            # In Python 3 socket.py will catch EAGAIN and return None when you
            # try and read into the file pointer created by http.client, which
            # instead raises a BadStatusLine exception. Instead of catching
            # the exception and assuming all BadStatusLine exceptions are read
            # timeouts, check for a zero timeout before making the request.
            if read_timeout == 0:
                raise ReadTimeoutError(
                    self, url, "Read timed out. (read timeout=%s)" % read_timeout)
            if read_timeout is Timeout.DEFAULT_TIMEOUT:
                conn.sock.settimeout(socket.getdefaulttimeout())
            else:  # None or a value
                conn.sock.settimeout(read_timeout)
    
        # conn.request() calls httplib.*.request, not the method in
        # urllib3.request. It also calls makefile (recv) on the socket.
        if chunked:
            conn.request_chunked(method, url, **httplib_request_kw)
        else:
            conn.request(method, url, **httplib_request_kw)
    
        # Receive the response from the server
        try:
            try:  # Python 2.7, use buffering of HTTP responses
                httplib_response = conn.getresponse(buffering=True)
            except TypeError:  # Python 2.6 and older, Python 3
                try:
                    httplib_response = conn.getresponse()
                except Exception as e:
                    # Remove the TypeError from the exception chain in Python 3;
                    # otherwise it looks like a programming error was the cause.
                    six.raise_from(e, None)
        except (SocketTimeout, BaseSSLError, SocketError) as e:
            self._raise_timeout(err=e, url=url, timeout_value=read_timeout,
&gt;                               exc_cls=ReadTimeoutError)

telegram/vendor/ptb_urllib3/urllib3/connectionpool.py:405: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;telegram.vendor.ptb_urllib3.urllib3.connectionpool.HTTPSConnectionPool object at 0x112d69cd0&gt;
err = timeout('The read operation timed out'), url = '/bot579694714:AAHRLL5zBVy4Blx2jRFKe1HlfnXCg08WuLY/sendPoll', timeout_value = 5.0
exc_cls = &lt;class 'telegram.vendor.ptb_urllib3.urllib3.exceptions.ReadTimeoutError'&gt;

    def _raise_timeout(self, err, url, timeout_value, exc_cls):
        """Is the error actually a timeout? Will raise a ReadTimeout or pass"""
    
        # exc_cls is either ReadTimeoutError or ConnectTimeoutError
        # Only ReadTimeoutError requires the url (preserving old behaviour)
        args = [self]
        if exc_cls is ReadTimeoutError:
            args.append(url)
            desc = 'Read'
        else:
            desc = 'Connect'
    
        if isinstance(err, SocketTimeout):
            args.append("%s timed out. (%s timeout=%s)" % (desc, desc.lower(), timeout_value))
&gt;           raise exc_cls(*args)
E           telegram.vendor.ptb_urllib3.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.telegram.org', port=443): Read timed out. (read timeout=5.0)

telegram/vendor/ptb_urllib3/urllib3/connectionpool.py:321: ReadTimeoutError

The above exception was the direct cause of the following exception:

self = &lt;tests.test_bot.TestBot object at 0x1131cd590&gt;, bot = &lt;telegram.bot.Bot object at 0x110899250&gt;, super_group_id = '-1001310911135'
reply_markup = &lt;telegram.inline.inlinekeyboardmarkup.InlineKeyboardMarkup object at 0x1109e6b10&gt;

    @flaky(3, 1)
    @pytest.mark.timeout(10)
    @pytest.mark.parametrize(
        'reply_markup',
        [
            None,
            InlineKeyboardMarkup.from_button(
                InlineKeyboardButton(text='text', callback_data='data')
            ),
            InlineKeyboardMarkup.from_button(
                InlineKeyboardButton(text='text', callback_data='data')
            ).to_dict(),
        ],
    )
    def test_send_and_stop_poll(self, bot, super_group_id, reply_markup):
        question = 'Is this a test?'
        answers = ['Yes', 'No', 'Maybe']
        message = bot.send_poll(
            chat_id=super_group_id,
            question=question,
            options=answers,
            is_anonymous=False,
            allows_multiple_answers=True,
            timeout=60,
        )
    
        assert message.poll
        assert message.poll.question == question
        assert message.poll.options[0].text == answers[0]
        assert message.poll.options[1].text == answers[1]
        assert message.poll.options[2].text == answers[2]
        assert not message.poll.is_anonymous
        assert message.poll.allows_multiple_answers
        assert not message.poll.is_closed
        assert message.poll.type == Poll.REGULAR
    
        # Since only the poll and not the complete message is returned, we can't check that the
        # reply_markup is correct. So we just test that sending doesn't give an error.
        poll = bot.stop_poll(
            chat_id=super_group_id,
            message_id=message.message_id,
            reply_markup=reply_markup,
            timeout=60,
        )
        assert isinstance(poll, Poll)
        assert poll.is_closed
        assert poll.options[0].text == answers[0]
        assert poll.options[0].voter_count == 0
        assert poll.options[1].text == answers[1]
        assert poll.options[1].voter_count == 0
        assert poll.options[2].text == answers[2]
        assert poll.options[2].voter_count == 0
        assert poll.question == question
        assert poll.total_voter_count == 0
    
        explanation = '[Here is a link](https://google.com)'
        explanation_entities = [
            MessageEntity(MessageEntity.TEXT_LINK, 0, 14, url='https://google.com')
        ]
        message_quiz = bot.send_poll(
            chat_id=super_group_id,
            question=question,
            options=answers,
            type=Poll.QUIZ,
            correct_option_id=2,
            is_closed=True,
            explanation=explanation,
&gt;           explanation_parse_mode=ParseMode.MARKDOWN_V2,
        )

tests/test_bot.py:302: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
&lt;decorator-gen-65&gt;:2: in send_poll
    ???
telegram/bot.py:122: in decorator
    result = func(*args, **kwargs)
telegram/bot.py:4189: in send_poll
    api_kwargs=api_kwargs,
telegram/bot.py:266: in _message
    result = self._post(endpoint, data, timeout=timeout, api_kwargs=api_kwargs)
telegram/bot.py:233: in _post
    '{}/{}'.format(self.base_url, endpoint), data=data, timeout=timeout
telegram/utils/request.py:350: in post
    **urlopen_kwargs,
tests/bots.py:88: in patient_request_wrapper
    return original_request_wrapper(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;telegram.utils.request.Request object at 0x110899290&gt;
args = ('POST', 'https://api.telegram.org/bot579694714:AAHRLL5zBVy4Blx2jRFKe1HlfnXCg08WuLY/sendPoll')
kwargs = {'body': b'{"chat_id": "-1001310911135", "question": "Is this a test?", "options": ["Yes", "No", "Maybe"], "type": "qu...tion': 'keep-alive', 'user-agent': 'Python Telegram Bot (https://github.com/python-telegram-bot/python-telegram-bot)'}}

    def _request_wrapper(self, *args: Any, **kwargs: Any) -&gt; bytes:
        """Wraps urllib3 request for handling known exceptions.
    
        Args:
            args: unnamed arguments, passed to urllib3 request.
            kwargs: keyword arguments, passed tp urllib3 request.
    
        Returns:
            bytes: A non-parsed JSON text.
    
        Raises:
            TelegramError
    
        """
        # Make sure to hint Telegram servers that we reuse connections by sending
        # "Connection: keep-alive" in the HTTP headers.
        if 'headers' not in kwargs:
            kwargs['headers'] = {}
        kwargs['headers']['connection'] = 'keep-alive'
        # Also set our user agent
        kwargs['headers']['user-agent'] = USER_AGENT
    
        try:
            resp = self._con_pool.request(*args, **kwargs)
        except urllib3.exceptions.TimeoutError as error:
&gt;           raise TimedOut() from error
E           telegram.error.TimedOut: Timed out

telegram/utils/request.py:254: TimedOut</failure>
  </testcase>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="234" name="test_send_and_stop_poll[reply_markup2]" time="0.377"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="309" name="test_send_open_period[5-None]" time="5.263"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="309" name="test_send_open_period[None-True]" time="5.269"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="342" name="test_send_close_date_default_tz[Europe/Berlin]" time="5.513"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="342" name="test_send_close_date_default_tz[Asia/Singapore]" time="5.490"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="342" name="test_send_close_date_default_tz[UTC]" time="5.338"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="374" name="test_send_poll_default_parse_mode[default_bot0]" time="0.116">
    <skipped message="expected test failure">reason: Not waiting for flood control: Flood control exceeded. Retry in 26.0 seconds</skipped>
  </testcase>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="425" name="test_send_dice[\U0001f3b2]" time="0.090"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="425" name="test_send_dice[\U0001f3af]" time="0.072"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="425" name="test_send_dice[\U0001f3c0]" time="0.070"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="425" name="test_send_dice[None]" time="0.075"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="437" name="test_send_chat_action" time="0.054"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="443" name="test_answer_inline_query" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="485" name="test_answer_inline_query_no_default_parse_mode" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="530" name="test_answer_inline_query_default_parse_mode[default_bot0]" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="577" name="test_answer_inline_query_current_offset_error" time="0.002"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="583" name="test_answer_inline_query_current_offset_1[-50-1-1]" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="583" name="test_answer_inline_query_current_offset_1[1-50-51-2]" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="583" name="test_answer_inline_query_current_offset_1[5-3-251-]" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="613" name="test_answer_inline_query_current_offset_2" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="639" name="test_answer_inline_query_current_offset_callback" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="662" name="test_get_user_profile_photos" time="0.042"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="669" name="test_get_one_user_profile_photo" time="0.043"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="678" name="test_kick_chat_member" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="692" name="test_kick_chat_member_default_tz[Europe/Berlin]" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="692" name="test_kick_chat_member_default_tz[Asia/Singapore]" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="692" name="test_kick_chat_member_default_tz[UTC]" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="709" name="test_unban_chat_member" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="719" name="test_set_chat_permissions" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="729" name="test_set_chat_administrator_custom_title" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="740" name="test_answer_callback_query" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="757" name="test_edit_message_text" time="0.100"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="770" name="test_edit_message_text_default_parse_mode[default_bot0]" time="0.347"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="812" name="test_edit_message_text_inline" time="0.000">
    <skipped message="need reference to an inline message" type="pytest.skip">tests/test_bot.py:812: need reference to an inline message</skipped>
  </testcase>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="816" name="test_edit_message_caption" time="0.216"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="829" name="test_edit_message_caption_default_parse_mode[default_bot0]" time="0.351"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="867" name="test_edit_message_caption_with_parse_mode" time="0.112"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="879" name="test_edit_message_caption_without_required" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="883" name="test_edit_message_caption_inline" time="0.000">
    <skipped message="need reference to an inline message" type="pytest.skip">tests/test_bot.py:883: need reference to an inline message</skipped>
  </testcase>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="887" name="test_edit_reply_markup" time="0.103"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="897" name="test_edit_message_reply_markup_without_required" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="902" name="test_edit_reply_markup_inline" time="0.000">
    <skipped message="need reference to an inline message" type="pytest.skip">tests/test_bot.py:902: need reference to an inline message</skipped>
  </testcase>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="907" name="test_get_updates" time="1.133"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="917" name="test_set_webhook_get_webhook_info_and_delete_webhook" time="10.201"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="936" name="test_leave_chat" time="0.101"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="945" name="test_get_chat" time="0.069"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="954" name="test_get_chat_administrators" time="0.129"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="963" name="test_get_chat_members_count" time="0.040"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="970" name="test_get_chat_member" time="0.057"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="979" name="test_set_chat_sticker_set" time="0.000">
    <skipped message="Not implemented yet." type="pytest.skip">tests/test_bot.py:979: Not implemented yet.</skipped>
  </testcase>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="983" name="test_delete_chat_sticker_set" time="0.001">
    <skipped message="Not implemented yet." type="pytest.skip">tests/test_bot.py:983: Not implemented yet.</skipped>
  </testcase>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="987" name="test_send_game" time="0.087"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1000" name="test_set_game_score_1" time="0.360"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1023" name="test_set_game_score_2" time="0.373"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1045" name="test_set_game_score_3" time="0.129"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1059" name="test_set_game_score_4" time="0.218"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1085" name="test_set_game_score_too_low_score" time="0.135"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1097" name="test_get_game_high_scores" time="0.130"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1110" name="test_answer_shipping_query_ok" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1125" name="test_answer_shipping_query_error_message" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1137" name="test_answer_shipping_query_errors" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1153" name="test_answer_pre_checkout_query_ok" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1161" name="test_answer_pre_checkout_query_error_message" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1173" name="test_answer_pre_checkout_query_errors" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1180" name="test_restrict_chat_member" time="0.043"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1189" name="test_restrict_chat_member_default_tz[Europe/Berlin]" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1189" name="test_restrict_chat_member_default_tz[Asia/Singapore]" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1189" name="test_restrict_chat_member_default_tz[UTC]" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1208" name="test_promote_chat_member" time="0.062"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1226" name="test_export_chat_invite_link" time="0.053"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1234" name="test_set_chat_photo" time="0.370"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1243" name="test_delete_chat_photo" time="0.126"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1251" name="test_set_chat_title" time="0.041"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1256" name="test_set_chat_description" time="0.059"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1262" name="test_pin_and_unpin_message" time="0.085">
    <skipped message="expected test failure">reason: Not waiting for flood control: Flood control exceeded. Retry in 10.0 seconds</skipped>
  </testcase>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1279" name="test_timeout_propagation_explicit" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1305" name="test_timeout_propagation_implicit" time="0.001"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1325" name="test_send_message_default_parse_mode[default_bot0]" time="0.186"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1344" name="test_set_and_get_my_commands" time="0.192"/>
  <testcase classname="tests.test_bot.TestBot" file="tests/test_bot.py" line="1363" name="test_set_and_get_my_commands_strings" time="0.197"/>
  <testcase classname="tests.test_botcommand.TestBotCommand" file="tests/test_botcommand.py" line="33" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_botcommand.TestBotCommand" file="tests/test_botcommand.py" line="42" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_botcommand.TestBotCommand" file="tests/test_botcommand.py" line="49" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_callbackcontext.TestCallbackContext" file="tests/test_callbackcontext.py" line="25" name="test_non_context_dp" time="2.012"/>
  <testcase classname="tests.test_callbackcontext.TestCallbackContext" file="tests/test_callbackcontext.py" line="29" name="test_from_job" time="0.095"/>
  <testcase classname="tests.test_callbackcontext.TestCallbackContext" file="tests/test_callbackcontext.py" line="42" name="test_from_update" time="0.001"/>
  <testcase classname="tests.test_callbackcontext.TestCallbackContext" file="tests/test_callbackcontext.py" line="76" name="test_from_update_not_update" time="0.001"/>
  <testcase classname="tests.test_callbackcontext.TestCallbackContext" file="tests/test_callbackcontext.py" line="95" name="test_from_error" time="0.001"/>
  <testcase classname="tests.test_callbackcontext.TestCallbackContext" file="tests/test_callbackcontext.py" line="114" name="test_from_error_async_params" time="0.001"/>
  <testcase classname="tests.test_callbackcontext.TestCallbackContext" file="tests/test_callbackcontext.py" line="128" name="test_match" time="0.001"/>
  <testcase classname="tests.test_callbackcontext.TestCallbackContext" file="tests/test_callbackcontext.py" line="137" name="test_data_assignment" time="0.001"/>
  <testcase classname="tests.test_callbackcontext.TestCallbackContext" file="tests/test_callbackcontext.py" line="151" name="test_dispatcher_attribute" time="0.001"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="50" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="70" name="test_to_dict[message]" time="0.001"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="84" name="test_answer[message]" time="0.001"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="92" name="test_edit_message_text[message]" time="0.001"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="107" name="test_edit_message_caption[message]" time="0.001"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="122" name="test_edit_message_reply_markup[message]" time="0.001"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="137" name="test_edit_message_media[message]" time="0.001"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="152" name="test_edit_message_live_location[message]" time="0.001"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="168" name="test_stop_message_live_location[message]" time="0.001"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="181" name="test_set_game_score[message]" time="0.001"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="197" name="test_get_game_high_scores[message]" time="0.001"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="70" name="test_to_dict[inline]" time="0.001"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="84" name="test_answer[inline]" time="0.001"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="92" name="test_edit_message_text[inline]" time="0.001"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="107" name="test_edit_message_caption[inline]" time="0.001"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="122" name="test_edit_message_reply_markup[inline]" time="0.000"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="137" name="test_edit_message_media[inline]" time="0.000"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="152" name="test_edit_message_live_location[inline]" time="0.001"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="168" name="test_stop_message_live_location[inline]" time="0.000"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="181" name="test_set_game_score[inline]" time="0.000"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="197" name="test_get_game_high_scores[inline]" time="0.000"/>
  <testcase classname="tests.test_callbackquery.TestCallbackQuery" file="tests/test_callbackquery.py" line="212" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_callbackqueryhandler.TestCallbackQueryHandler" file="tests/test_callbackqueryhandler.py" line="120" name="test_basic" time="0.001"/>
  <testcase classname="tests.test_callbackqueryhandler.TestCallbackQueryHandler" file="tests/test_callbackqueryhandler.py" line="129" name="test_with_pattern" time="0.001"/>
  <testcase classname="tests.test_callbackqueryhandler.TestCallbackQueryHandler" file="tests/test_callbackqueryhandler.py" line="137" name="test_with_passing_group_dict" time="0.001"/>
  <testcase classname="tests.test_callbackqueryhandler.TestCallbackQueryHandler" file="tests/test_callbackqueryhandler.py" line="156" name="test_pass_user_or_chat_data" time="0.001"/>
  <testcase classname="tests.test_callbackqueryhandler.TestCallbackQueryHandler" file="tests/test_callbackqueryhandler.py" line="181" name="test_pass_job_or_update_queue" time="0.001"/>
  <testcase classname="tests.test_callbackqueryhandler.TestCallbackQueryHandler" file="tests/test_callbackqueryhandler.py" line="206" name="test_other_update_types[message]" time="0.000"/>
  <testcase classname="tests.test_callbackqueryhandler.TestCallbackQueryHandler" file="tests/test_callbackqueryhandler.py" line="206" name="test_other_update_types[edited_message]" time="0.001"/>
  <testcase classname="tests.test_callbackqueryhandler.TestCallbackQueryHandler" file="tests/test_callbackqueryhandler.py" line="206" name="test_other_update_types[channel_post]" time="0.000"/>
  <testcase classname="tests.test_callbackqueryhandler.TestCallbackQueryHandler" file="tests/test_callbackqueryhandler.py" line="206" name="test_other_update_types[edited_channel_post]" time="0.000"/>
  <testcase classname="tests.test_callbackqueryhandler.TestCallbackQueryHandler" file="tests/test_callbackqueryhandler.py" line="206" name="test_other_update_types[inline_query]" time="0.000"/>
  <testcase classname="tests.test_callbackqueryhandler.TestCallbackQueryHandler" file="tests/test_callbackqueryhandler.py" line="206" name="test_other_update_types[chosen_inline_result]" time="0.001"/>
  <testcase classname="tests.test_callbackqueryhandler.TestCallbackQueryHandler" file="tests/test_callbackqueryhandler.py" line="206" name="test_other_update_types[shipping_query]" time="0.000"/>
  <testcase classname="tests.test_callbackqueryhandler.TestCallbackQueryHandler" file="tests/test_callbackqueryhandler.py" line="206" name="test_other_update_types[pre_checkout_query]" time="0.001"/>
  <testcase classname="tests.test_callbackqueryhandler.TestCallbackQueryHandler" file="tests/test_callbackqueryhandler.py" line="210" name="test_context" time="0.001"/>
  <testcase classname="tests.test_callbackqueryhandler.TestCallbackQueryHandler" file="tests/test_callbackqueryhandler.py" line="217" name="test_context_pattern" time="0.001"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="56" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="80" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="92" name="test_link" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="97" name="test_anonymous_admin" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="102" name="test_service_chat" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="107" name="test_send_action" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="117" name="test_leave" time="0.001"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="124" name="test_get_administrators" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="131" name="test_get_members_count" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="138" name="test_get_member" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="147" name="test_kick_member" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="157" name="test_unban_member" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="166" name="test_set_permissions" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="175" name="test_set_administrator_custom_title" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="185" name="test_instance_method_send_message" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="192" name="test_instance_method_send_media_group" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="199" name="test_instance_method_send_photo" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="206" name="test_instance_method_send_contact" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="213" name="test_instance_method_send_audio" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="220" name="test_instance_method_send_document" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="227" name="test_instance_method_send_dice" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="234" name="test_instance_method_send_game" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="241" name="test_instance_method_send_invoice" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="248" name="test_instance_method_send_location" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="255" name="test_instance_method_send_sticker" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="262" name="test_instance_method_send_venue" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="269" name="test_instance_method_send_video" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="276" name="test_instance_method_send_video_note" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="283" name="test_instance_method_send_voice" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="290" name="test_instance_method_send_animation" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="297" name="test_instance_method_send_poll" time="0.000"/>
  <testcase classname="tests.test_chat.TestChat" file="tests/test_chat.py" line="304" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_chatmember.TestChatMember" file="tests/test_chatmember.py" line="39" name="test_de_json_required_args" time="0.000"/>
  <testcase classname="tests.test_chatmember.TestChatMember" file="tests/test_chatmember.py" line="47" name="test_de_json_all_args" time="0.000"/>
  <testcase classname="tests.test_chatmember.TestChatMember" file="tests/test_chatmember.py" line="92" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_chatmember.TestChatMember" file="tests/test_chatmember.py" line="98" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_chatpermissions.TestChatPermissions" file="tests/test_chatpermissions.py" line="48" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_chatpermissions.TestChatPermissions" file="tests/test_chatpermissions.py" line="70" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_chatpermissions.TestChatPermissions" file="tests/test_chatpermissions.py" line="90" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_chatphoto.TestChatPhoto" file="tests/test_chatphoto.py" line="49" name="test_send_all_args" time="7.335">
    <skipped message="expected test failure">reason: Not waiting for flood control: Flood control exceeded. Retry in 3.0 seconds</skipped>
  </testcase>
  <testcase classname="tests.test_chatphoto.TestChatPhoto" file="tests/test_chatphoto.py" line="57" name="test_get_and_download" time="0.259"/>
  <testcase classname="tests.test_chatphoto.TestChatPhoto" file="tests/test_chatphoto.py" line="78" name="test_send_with_chat_photo" time="0.042"/>
  <testcase classname="tests.test_chatphoto.TestChatPhoto" file="tests/test_chatphoto.py" line="86" name="test_de_json" time="0.053"/>
  <testcase classname="tests.test_chatphoto.TestChatPhoto" file="tests/test_chatphoto.py" line="99" name="test_to_dict" time="0.041"/>
  <testcase classname="tests.test_chatphoto.TestChatPhoto" file="tests/test_chatphoto.py" line="108" name="test_error_send_empty_file" time="0.042"/>
  <testcase classname="tests.test_chatphoto.TestChatPhoto" file="tests/test_chatphoto.py" line="116" name="test_error_send_empty_file_id" time="0.040"/>
  <testcase classname="tests.test_chatphoto.TestChatPhoto" file="tests/test_chatphoto.py" line="122" name="test_error_send_without_required_args" time="0.001"/>
  <testcase classname="tests.test_chatphoto.TestChatPhoto" file="tests/test_chatphoto.py" line="126" name="test_get_small_file_instance_method" time="0.042"/>
  <testcase classname="tests.test_chatphoto.TestChatPhoto" file="tests/test_chatphoto.py" line="133" name="test_get_big_file_instance_method" time="0.043"/>
  <testcase classname="tests.test_chatphoto.TestChatPhoto" file="tests/test_chatphoto.py" line="140" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_choseninlineresult.TestChosenInlineResult" file="tests/test_choseninlineresult.py" line="38" name="test_de_json_required" time="0.001"/>
  <testcase classname="tests.test_choseninlineresult.TestChosenInlineResult" file="tests/test_choseninlineresult.py" line="46" name="test_de_json_all" time="0.001"/>
  <testcase classname="tests.test_choseninlineresult.TestChosenInlineResult" file="tests/test_choseninlineresult.py" line="63" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_choseninlineresult.TestChosenInlineResult" file="tests/test_choseninlineresult.py" line="71" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_choseninlineresulthandler.TestChosenInlineResultHandler" file="tests/test_choseninlineresulthandler.py" line="113" name="test_basic" time="0.001"/>
  <testcase classname="tests.test_choseninlineresulthandler.TestChosenInlineResultHandler" file="tests/test_choseninlineresulthandler.py" line="121" name="test_pass_user_or_chat_data" time="0.001"/>
  <testcase classname="tests.test_choseninlineresulthandler.TestChosenInlineResultHandler" file="tests/test_choseninlineresulthandler.py" line="146" name="test_pass_job_or_update_queue" time="0.001"/>
  <testcase classname="tests.test_choseninlineresulthandler.TestChosenInlineResultHandler" file="tests/test_choseninlineresulthandler.py" line="171" name="test_other_update_types[message]" time="0.001"/>
  <testcase classname="tests.test_choseninlineresulthandler.TestChosenInlineResultHandler" file="tests/test_choseninlineresulthandler.py" line="171" name="test_other_update_types[edited_message]" time="0.001"/>
  <testcase classname="tests.test_choseninlineresulthandler.TestChosenInlineResultHandler" file="tests/test_choseninlineresulthandler.py" line="171" name="test_other_update_types[callback_query]" time="0.001"/>
  <testcase classname="tests.test_choseninlineresulthandler.TestChosenInlineResultHandler" file="tests/test_choseninlineresulthandler.py" line="171" name="test_other_update_types[channel_post]" time="0.001"/>
  <testcase classname="tests.test_choseninlineresulthandler.TestChosenInlineResultHandler" file="tests/test_choseninlineresulthandler.py" line="171" name="test_other_update_types[edited_channel_post]" time="0.001"/>
  <testcase classname="tests.test_choseninlineresulthandler.TestChosenInlineResultHandler" file="tests/test_choseninlineresulthandler.py" line="171" name="test_other_update_types[inline_query]" time="0.001"/>
  <testcase classname="tests.test_choseninlineresulthandler.TestChosenInlineResultHandler" file="tests/test_choseninlineresulthandler.py" line="171" name="test_other_update_types[shipping_query]" time="0.001"/>
  <testcase classname="tests.test_choseninlineresulthandler.TestChosenInlineResultHandler" file="tests/test_choseninlineresulthandler.py" line="171" name="test_other_update_types[pre_checkout_query]" time="0.001"/>
  <testcase classname="tests.test_choseninlineresulthandler.TestChosenInlineResultHandler" file="tests/test_choseninlineresulthandler.py" line="171" name="test_other_update_types[callback_query_without_message]" time="0.001"/>
  <testcase classname="tests.test_choseninlineresulthandler.TestChosenInlineResultHandler" file="tests/test_choseninlineresulthandler.py" line="175" name="test_context" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="169" name="test_basic" time="0.450"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="180" name="test_invalid_commands[too long]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="180" name="test_invalid_commands[invalid letter]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="180" name="test_invalid_commands[invalid characters]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="189" name="test_command_list" time="0.659"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="196" name="test_deprecation_warning" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="201" name="test_edited" time="0.136"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="207" name="test_edited_deprecated" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="213" name="test_directed_commands" time="0.012"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="219" name="test_with_filter" time="0.349"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="225" name="test_pass_args" time="0.424"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="235" name="test_newline" time="0.228"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination0-pass_user_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination0-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination0-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination0-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-!-help-pass_user_data]" time="0.006"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-!-help-pass_chat_data]" time="0.006"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-!-help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-!-help-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-#-help-pass_user_data]" time="0.008"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-#-help-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-#-help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-#-help-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-#-test-pass_user_data]" time="0.006"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-#-test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-#-test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-#-test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-!-test-pass_user_data]" time="0.006"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-!-test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-!-test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-!-test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-mytrig--test-pass_user_data]" time="0.006"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-mytrig--test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-mytrig--test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-mytrig--test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-mytrig--help-pass_user_data]" time="0.007"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-mytrig--help-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-mytrig--help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination0-mytrig--help-pass_update_queue]" time="0.002"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination1-pass_user_data]" time="0.207"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination1-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination1-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination1-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-!-help-pass_user_data]" time="0.006"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-!-help-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-!-help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-!-help-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-#-help-pass_user_data]" time="0.007"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-#-help-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-#-help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-#-help-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-#-test-pass_user_data]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-#-test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-#-test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-#-test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-!-test-pass_user_data]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-!-test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-!-test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-!-test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-mytrig--test-pass_user_data]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-mytrig--test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-mytrig--test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-mytrig--test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-mytrig--help-pass_user_data]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-mytrig--help-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-mytrig--help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination1-mytrig--help-pass_update_queue]" time="0.002"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination2-pass_user_data]" time="0.202"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination2-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination2-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination2-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-!-help-pass_user_data]" time="0.006"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-!-help-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-!-help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-!-help-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-#-help-pass_user_data]" time="0.007"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-#-help-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-#-help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-#-help-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-#-test-pass_user_data]" time="0.006"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-#-test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-#-test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-#-test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-!-test-pass_user_data]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-!-test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-!-test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-!-test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-mytrig--test-pass_user_data]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-mytrig--test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-mytrig--test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-mytrig--test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-mytrig--help-pass_user_data]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-mytrig--help-pass_chat_data]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-mytrig--help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination2-mytrig--help-pass_update_queue]" time="0.002"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination3-pass_user_data]" time="0.133"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination3-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination3-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination3-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-!-help-pass_user_data]" time="0.006"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-!-help-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-!-help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-!-help-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-#-help-pass_user_data]" time="0.007"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-#-help-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-#-help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-#-help-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-#-test-pass_user_data]" time="0.006"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-#-test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-#-test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-#-test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-!-test-pass_user_data]" time="0.006"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-!-test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-!-test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-!-test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-mytrig--test-pass_user_data]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-mytrig--test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-mytrig--test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-mytrig--test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-mytrig--help-pass_user_data]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-mytrig--help-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-mytrig--help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination3-mytrig--help-pass_update_queue]" time="0.002"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination4-pass_user_data]" time="0.130"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination4-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination4-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination4-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-!-help-pass_user_data]" time="0.006"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-!-help-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-!-help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-!-help-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-#-help-pass_user_data]" time="0.007"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-#-help-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-#-help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-#-help-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-#-test-pass_user_data]" time="0.006"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-#-test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-#-test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-#-test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-!-test-pass_user_data]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-!-test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-!-test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-!-test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-mytrig--test-pass_user_data]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-mytrig--test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-mytrig--test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-mytrig--test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-mytrig--help-pass_user_data]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-mytrig--help-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-mytrig--help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination4-mytrig--help-pass_update_queue]" time="0.002"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination5-pass_user_data]" time="0.128"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination5-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination5-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="243" name="test_pass_data[pass_combination5-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-!-help-pass_user_data]" time="0.006"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-!-help-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-!-help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-!-help-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="337" name="test_basic[!-help]" time="0.021"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[single prefix-single command-!-help]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[single prefix-single command-#-help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[single prefix-single command-#-test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[multiple prefixes-single command-#-test]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[multiple prefixes-multiple commands-#-test]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[multiple prefixes-multiple commands-!-test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[multiple prefixes-multiple commands-mytrig--test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[multiple prefixes-multiple commands-mytrig--help]" time="0.004"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[single prefix-multiple commands-mytrig--test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[single prefix-multiple commands-mytrig--help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[multiple prefixes-single command-mytrig--test]" time="0.004"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[multiple prefixes-single command-mytrig--help]" time="0.004"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[single prefix-single command-mytrig--test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-mytrig--test-pass_user_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-mytrig--test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-mytrig--test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-mytrig--test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="337" name="test_basic[mytrig--test]" time="0.017"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="355" name="test_edited[mytrig--test]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="360" name="test_with_filter[mytrig--test]" time="0.008"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="366" name="test_pass_args[mytrig--test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="407" name="test_basic_after_editing[mytrig--test]" time="0.009"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="418" name="test_context[mytrig--test]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="423" name="test_context_args[mytrig--test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="427" name="test_context_regex[mytrig--test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="433" name="test_context_multiple_regex[mytrig--test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[single prefix-single command-mytrig--help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-mytrig--help-pass_user_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-mytrig--help-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-mytrig--help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-mytrig--help-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="337" name="test_basic[mytrig--help]" time="0.017"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="355" name="test_edited[mytrig--help]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="360" name="test_with_filter[mytrig--help]" time="0.009"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="366" name="test_pass_args[mytrig--help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="407" name="test_basic_after_editing[mytrig--help]" time="0.009"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="418" name="test_context[mytrig--help]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="423" name="test_context_args[mytrig--help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="427" name="test_context_regex[mytrig--help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="433" name="test_context_multiple_regex[mytrig--help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[multiple prefixes-multiple commands-#-help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[multiple prefixes-multiple commands-!-help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[single prefix-multiple commands-#-test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[single prefix-multiple commands-!-test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[single prefix-multiple commands-#-help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[single prefix-multiple commands-!-help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[multiple prefixes-single command-!-test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[multiple prefixes-single command-#-help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[multiple prefixes-single command-!-help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-#-test-pass_user_data]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-#-test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-#-test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-#-test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="337" name="test_basic[#-test]" time="0.017"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="355" name="test_edited[#-test]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="360" name="test_with_filter[#-test]" time="0.008"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="366" name="test_pass_args[#-test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="407" name="test_basic_after_editing[#-test]" time="0.009"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="418" name="test_context[#-test]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="423" name="test_context_args[#-test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="427" name="test_context_regex[#-test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="433" name="test_context_multiple_regex[#-test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="348" name="test_single_multi_prefixes_commands[single prefix-single command-!-test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-!-test-pass_user_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-!-test-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-!-test-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-!-test-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="337" name="test_basic[!-test]" time="0.016"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="355" name="test_edited[!-test]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="360" name="test_with_filter[!-test]" time="0.008"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="366" name="test_pass_args[!-test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="407" name="test_basic_after_editing[!-test]" time="0.009"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="418" name="test_context[!-test]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="423" name="test_context_args[!-test]" time="0.006"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="427" name="test_context_regex[!-test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="433" name="test_context_multiple_regex[!-test]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-#-help-pass_user_data]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-#-help-pass_chat_data]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-#-help-pass_job_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="374" name="test_pass_data[pass_combination5-#-help-pass_update_queue]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="337" name="test_basic[#-help]" time="0.017"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="355" name="test_edited[#-help]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="360" name="test_with_filter[#-help]" time="0.008"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="366" name="test_pass_args[#-help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="407" name="test_basic_after_editing[#-help]" time="0.009"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="418" name="test_context[#-help]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="423" name="test_context_args[#-help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="427" name="test_context_regex[#-help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="433" name="test_context_multiple_regex[#-help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="355" name="test_edited[!-help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="360" name="test_with_filter[!-help]" time="0.008"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="366" name="test_pass_args[!-help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="407" name="test_basic_after_editing[!-help]" time="0.009"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="418" name="test_context[!-help]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="423" name="test_context_args[!-help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="427" name="test_context_regex[!-help]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="433" name="test_context_multiple_regex[!-help]" time="0.008"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="249" name="test_other_update_types[callback_query0]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="249" name="test_other_update_types[channel_post]" time="0.000"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="249" name="test_other_update_types[edited_channel_post]" time="0.000"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="249" name="test_other_update_types[inline_query]" time="0.000"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="249" name="test_other_update_types[chosen_inline_result]" time="0.000"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="249" name="test_other_update_types[shipping_query]" time="0.000"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="249" name="test_other_update_types[pre_checkout_query]" time="0.000"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="249" name="test_other_update_types[callback_query1]" time="0.000"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="254" name="test_filters_for_wrong_command[MessageFilter]" time="0.212"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="254" name="test_filters_for_wrong_command[UpdateFilter]" time="0.137"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="260" name="test_context" time="0.132"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="266" name="test_context_args" time="0.145"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="271" name="test_context_regex" time="0.212"/>
  <testcase classname="tests.test_commandhandler.TestCommandHandler" file="tests/test_commandhandler.py" line="278" name="test_context_multiple_regex" time="0.218"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="385" name="test_other_update_types[callback_query0]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="385" name="test_other_update_types[channel_post]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="385" name="test_other_update_types[edited_channel_post]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="385" name="test_other_update_types[inline_query]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="385" name="test_other_update_types[chosen_inline_result]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="385" name="test_other_update_types[shipping_query]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="385" name="test_other_update_types[pre_checkout_query]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="385" name="test_other_update_types[callback_query1]" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="389" name="test_filters_for_wrong_command[MessageFilter]" time="0.006"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="389" name="test_filters_for_wrong_command[UpdateFilter]" time="0.005"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="395" name="test_edit_prefix" time="0.001"/>
  <testcase classname="tests.test_commandhandler.TestPrefixHandler" file="tests/test_commandhandler.py" line="402" name="test_edit_command" time="0.002"/>
  <testcase classname="tests.test_constants.TestConstants" file="tests/test_constants.py" line="26" name="test_max_message_length" time="0.133"/>
  <testcase classname="tests.test_constants.TestConstants" file="tests/test_constants.py" line="38" name="test_max_caption_length" time="0.150"/>
  <testcase classname="tests.test_contact.TestContact" file="tests/test_contact.py" line="40" name="test_de_json_required" time="0.001"/>
  <testcase classname="tests.test_contact.TestContact" file="tests/test_contact.py" line="47" name="test_de_json_all" time="0.001"/>
  <testcase classname="tests.test_contact.TestContact" file="tests/test_contact.py" line="61" name="test_send_with_contact" time="0.001"/>
  <testcase classname="tests.test_contact.TestContact" file="tests/test_contact.py" line="72" name="test_send_contact_without_required" time="0.001"/>
  <testcase classname="tests.test_contact.TestContact" file="tests/test_contact.py" line="76" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_contact.TestContact" file="tests/test_contact.py" line="85" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="244" name="test_immutable[entry_points]" time="0.002"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="244" name="test_immutable[states]" time="0.005"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="244" name="test_immutable[fallbacks]" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="244" name="test_immutable[per_chat]" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="244" name="test_immutable[name]" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="244" name="test_immutable[per_user]" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="244" name="test_immutable[allow_reentry]" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="244" name="test_immutable[conversation_timeout]" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="244" name="test_immutable[map_to_parent]" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="283" name="test_immutable_per_message" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="300" name="test_per_all_false" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="311" name="test_name_and_persistent" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="317" name="test_conversation_handler" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="363" name="test_conversation_handler_end" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="397" name="test_conversation_handler_fallback" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="435" name="test_conversation_handler_per_chat" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="472" name="test_conversation_handler_per_user" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="509" name="test_conversation_handler_per_message" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="548" name="test_end_on_first_message" time="0.001"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="569" name="test_end_on_first_message_async" time="0.214"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="606" name="test_end_on_first_message_async_handler" time="0.213"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="639" name="test_none_on_first_message" time="0.002"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="650" name="test_none_on_first_message_async" time="0.215"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="686" name="test_none_on_first_message_async_handler" time="0.208"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="718" name="test_per_chat_message_without_chat" time="0.002"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="726" name="test_channel_message_without_chat" time="0.002"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="734" name="test_all_update_types" time="0.002"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="751" name="test_conversation_timeout" time="1.260"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="787" name="test_conversation_timeout_dispatcher_handler_stop" time="0.809"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="823" name="test_conversation_handler_timeout_update_and_context" time="0.610"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="869" name="test_conversation_timeout_keeps_extending" time="1.221"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="915" name="test_conversation_timeout_two_users" time="0.612"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="952" name="test_conversation_handler_timeout_state" time="1.826"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="1012" name="test_conversation_handler_timeout_state_context" time="1.832"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="1072" name="test_conversation_timeout_cancel_conflict" time="1.379"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="1124" name="test_per_message_warning_is_only_shown_once" time="0.002"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="1141" name="test_per_message_false_warning_is_only_shown_once" time="0.002"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="1157" name="test_warnings_per_chat_is_only_shown_once" time="0.002"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="1179" name="test_nested_conversation_handler" time="0.002"/>
  <testcase classname="tests.test_conversationhandler.TestConversationHandler" file="tests/test_conversationhandler.py" line="1295" name="test_conversation_dispatcher_handler_stop" time="0.002"/>
  <testcase classname="tests.test_defaults.TestDefault" file="tests/test_defaults.py" line="26" name="test_data_assignment" time="0.001"/>
  <testcase classname="tests.test_defaults.TestDefault" file="tests/test_defaults.py" line="42" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_dice.TestDice" file="tests/test_dice.py" line="32" name="test_de_json[\U0001f3b2]" time="0.001"/>
  <testcase classname="tests.test_dice.TestDice" file="tests/test_dice.py" line="32" name="test_de_json[\U0001f3af]" time="0.001"/>
  <testcase classname="tests.test_dice.TestDice" file="tests/test_dice.py" line="32" name="test_de_json[\U0001f3c0]" time="0.001"/>
  <testcase classname="tests.test_dice.TestDice" file="tests/test_dice.py" line="41" name="test_to_dict[\U0001f3b2]" time="0.001"/>
  <testcase classname="tests.test_dice.TestDice" file="tests/test_dice.py" line="41" name="test_to_dict[\U0001f3af]" time="0.001"/>
  <testcase classname="tests.test_dice.TestDice" file="tests/test_dice.py" line="41" name="test_to_dict[\U0001f3c0]" time="0.001"/>
  <testcase classname="tests.test_dice.TestDice" file="tests/test_dice.py" line="48" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="98" name="test_one_context_per_update" time="0.001"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="118" name="test_error_handler" time="0.216"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="133" name="test_double_add_error_handler" time="0.002"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="140" name="test_construction_with_bad_persistence" time="0.001"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="152" name="test_error_handler_that_raises_errors" time="0.214"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="176" name="test_run_async_multiple" time="4.066"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="193" name="test_multiple_run_async_decorator" time="3.113"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="206" name="test_run_async_with_args" time="0.107"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="217" name="test_multiple_run_async_deprecation" time="0.002"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="229" name="test_async_raises_dispatcher_handler_stop" time="0.101"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="246" name="test_async_raises_exception" time="0.104"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="263" name="test_add_async_handler" time="0.110"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="277" name="test_run_async_no_error_handler" time="0.110"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="287" name="test_async_handler_error_handler" time="0.105"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="295" name="test_async_handler_async_error_handler_context" time="2.005"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="303" name="test_async_handler_error_handler_that_raises_error" time="0.210"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="321" name="test_async_handler_async_error_handler_that_raises_error" time="0.213"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="339" name="test_error_in_handler" time="0.107"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="347" name="test_add_remove_handler" time="0.105"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="357" name="test_add_remove_handler_non_default_group" time="0.001"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="364" name="test_error_start_twice" time="0.001"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="368" name="test_handler_order_in_group" time="0.109"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="376" name="test_groups" time="0.106"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="385" name="test_add_handler_errors" time="0.002"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="394" name="test_flow_stop" time="0.001"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="434" name="test_exception_in_handler" time="0.001"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="477" name="test_telegram_error_in_handler" time="0.001"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="520" name="test_error_while_saving_chat_data" time="0.001"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="584" name="test_flow_stop_in_error_handler" time="0.001"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="628" name="test_error_handler_context" time="0.111"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="636" name="test_sensible_worker_thread_names" time="3.123">
    <system-out>['Bot:579694714:worker:c234e0f0-65dc-4ae1-9fe6-a0bec9d4232b_0', 'Bot:579694714:worker:c234e0f0-65dc-4ae1-9fe6-a0bec9d4232b_1']
</system-out>
  </testcase>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="642" name="test_non_context_deprecation" time="0.001"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="648" name="test_error_while_persisting" time="0.001"/>
  <testcase classname="tests.test_dispatcher.TestDispatcher" file="tests/test_dispatcher.py" line="708" name="test_persisting_no_user_no_chat" time="0.001"/>
  <testcase classname="tests.test_document.TestDocument" file="tests/test_document.py" line="52" name="test_creation" time="0.146"/>
  <testcase classname="tests.test_document.TestDocument" file="tests/test_document.py" line="59" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_document.TestDocument" file="tests/test_document.py" line="67" name="test_send_all_args" time="0.148"/>
  <testcase classname="tests.test_document.TestDocument" file="tests/test_document.py" line="93" name="test_get_and_download" time="0.209"/>
  <testcase classname="tests.test_document.TestDocument" file="tests/test_document.py" line="107" name="test_send_url_gif_file" time="0.086"/>
  <testcase classname="tests.test_document.TestDocument" file="tests/test_document.py" line="124" name="test_send_resend" time="0.070"/>
  <testcase classname="tests.test_document.TestDocument" file="tests/test_document.py" line="131" name="test_send_with_document" time="0.001"/>
  <testcase classname="tests.test_document.TestDocument" file="tests/test_document.py" line="141" name="test_send_document_default_parse_mode_1[default_bot0]" time="0.076"/>
  <testcase classname="tests.test_document.TestDocument" file="tests/test_document.py" line="152" name="test_send_document_default_parse_mode_2[default_bot0]" time="0.064"/>
  <testcase classname="tests.test_document.TestDocument" file="tests/test_document.py" line="164" name="test_send_document_default_parse_mode_3[default_bot0]" time="0.065"/>
  <testcase classname="tests.test_document.TestDocument" file="tests/test_document.py" line="176" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_document.TestDocument" file="tests/test_document.py" line="194" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_document.TestDocument" file="tests/test_document.py" line="204" name="test_error_send_empty_file" time="0.042"/>
  <testcase classname="tests.test_document.TestDocument" file="tests/test_document.py" line="211" name="test_error_send_empty_file_id" time="0.045"/>
  <testcase classname="tests.test_document.TestDocument" file="tests/test_document.py" line="217" name="test_error_send_without_required_args" time="0.001"/>
  <testcase classname="tests.test_document.TestDocument" file="tests/test_document.py" line="221" name="test_get_file_instance_method" time="0.001"/>
  <testcase classname="tests.test_document.TestDocument" file="tests/test_document.py" line="228" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_encryptedcredentials.TestEncryptedCredentials" file="tests/test_encryptedcredentials.py" line="38" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_encryptedcredentials.TestEncryptedCredentials" file="tests/test_encryptedcredentials.py" line="43" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_encryptedcredentials.TestEncryptedCredentials" file="tests/test_encryptedcredentials.py" line="51" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_encryptedpassportelement.TestEncryptedPassportElement" file="tests/test_encryptedpassportelement.py" line="48" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_encryptedpassportelement.TestEncryptedPassportElement" file="tests/test_encryptedpassportelement.py" line="58" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_encryptedpassportelement.TestEncryptedPassportElement" file="tests/test_encryptedpassportelement.py" line="83" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="37" name="test_telegram_error" time="0.001"/>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="47" name="test_unauthorized" time="0.001"/>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="57" name="test_invalid_token" time="0.000"/>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="61" name="test_network_error" time="0.000"/>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="71" name="test_bad_request" time="0.000"/>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="81" name="test_timed_out" time="0.001"/>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="85" name="test_chat_migrated" time="0.001"/>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="93" name="test_retry_after" time="0.001"/>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="97" name="test_conflict" time="0.001"/>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="101" name="test_errors_pickling[exception0-attributes0]" time="0.001">
    <system-out>test message
</system-out>
  </testcase>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="101" name="test_errors_pickling[exception1-attributes1]" time="0.001">
    <system-out>test message
</system-out>
  </testcase>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="101" name="test_errors_pickling[exception2-attributes2]" time="0.001">
    <system-out>Invalid token
</system-out>
  </testcase>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="101" name="test_errors_pickling[exception3-attributes3]" time="0.001">
    <system-out>test message
</system-out>
  </testcase>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="101" name="test_errors_pickling[exception4-attributes4]" time="0.001">
    <system-out>test message
</system-out>
  </testcase>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="101" name="test_errors_pickling[exception5-attributes5]" time="0.001">
    <system-out>Timed out
</system-out>
  </testcase>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="101" name="test_errors_pickling[exception6-attributes6]" time="0.001">
    <system-out>Group migrated to supergroup. New chat id: 1234
</system-out>
  </testcase>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="101" name="test_errors_pickling[exception7-attributes7]" time="0.001">
    <system-out>Flood control exceeded. Retry in 12.0 seconds
</system-out>
  </testcase>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="101" name="test_errors_pickling[exception8-attributes8]" time="0.001">
    <system-out>test message
</system-out>
  </testcase>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="101" name="test_errors_pickling[exception9-attributes9]" time="0.001">
    <system-out>TelegramDecryptionError: test message
</system-out>
  </testcase>
  <testcase classname="tests.test_error.TestErrors" file="tests/test_error.py" line="126" name="test_pickling_test_coverage" time="0.000"/>
  <testcase classname="tests.test_file.TestFile" file="tests/test_file.py" line="48" name="test_de_json" time="0.000"/>
  <testcase classname="tests.test_file.TestFile" file="tests/test_file.py" line="62" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_file.TestFile" file="tests/test_file.py" line="71" name="test_error_get_empty_file_id" time="0.043"/>
  <testcase classname="tests.test_file.TestFile" file="tests/test_file.py" line="77" name="test_download" time="0.002"/>
  <testcase classname="tests.test_file.TestFile" file="tests/test_file.py" line="90" name="test_download_custom_path" time="0.001"/>
  <testcase classname="tests.test_file.TestFile" file="tests/test_file.py" line="106" name="test_download_no_filename" time="0.001"/>
  <testcase classname="tests.test_file.TestFile" file="tests/test_file.py" line="122" name="test_download_file_obj" time="0.001"/>
  <testcase classname="tests.test_file.TestFile" file="tests/test_file.py" line="134" name="test_download_bytearray" time="0.001"/>
  <testcase classname="tests.test_file.TestFile" file="tests/test_file.py" line="151" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="58" name="test_filters_all" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="61" name="test_filters_text" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="67" name="test_filters_text_strings" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="72" name="test_filters_caption" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="78" name="test_filters_caption_strings" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="83" name="test_filters_command_default" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="94" name="test_filters_command_anywhere" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="100" name="test_filters_regex" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="124" name="test_filters_regex_multiple" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="148" name="test_filters_merged_with_regex" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="174" name="test_regex_complex_merges" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="263" name="test_regex_inverted" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="303" name="test_filters_reply" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="315" name="test_filters_audio" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="320" name="test_filters_document" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="325" name="test_filters_document_type" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="427" name="test_filters_animation" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="432" name="test_filters_photo" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="437" name="test_filters_sticker" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="442" name="test_filters_video" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="447" name="test_filters_voice" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="452" name="test_filters_video_note" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="457" name="test_filters_contact" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="462" name="test_filters_location" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="467" name="test_filters_venue" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="472" name="test_filters_status_update" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="535" name="test_filters_forwarded" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="540" name="test_filters_game" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="545" name="test_entities_filter[mention]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="545" name="test_entities_filter[hashtag]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="545" name="test_entities_filter[cashtag]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="545" name="test_entities_filter[phone_number]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="545" name="test_entities_filter[bot_command]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="545" name="test_entities_filter[url]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="545" name="test_entities_filter[email]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="545" name="test_entities_filter[bold]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="545" name="test_entities_filter[italic]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="545" name="test_entities_filter[code]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="545" name="test_entities_filter[pre]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="545" name="test_entities_filter[text_link]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="545" name="test_entities_filter[text_mention]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="545" name="test_entities_filter[underline]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="545" name="test_entities_filter[strikethrough]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="559" name="test_caption_entities_filter[mention]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="559" name="test_caption_entities_filter[hashtag]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="559" name="test_caption_entities_filter[cashtag]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="559" name="test_caption_entities_filter[phone_number]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="559" name="test_caption_entities_filter[bot_command]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="559" name="test_caption_entities_filter[url]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="559" name="test_caption_entities_filter[email]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="559" name="test_caption_entities_filter[bold]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="559" name="test_caption_entities_filter[italic]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="559" name="test_caption_entities_filter[code]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="559" name="test_caption_entities_filter[pre]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="559" name="test_caption_entities_filter[text_link]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="559" name="test_caption_entities_filter[text_mention]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="559" name="test_caption_entities_filter[underline]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="559" name="test_caption_entities_filter[strikethrough]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="573" name="test_private_filter" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="578" name="test_private_filter_deprecation" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="582" name="test_group_filter" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="589" name="test_group_filter_deprecation" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="593" name="test_filters_chat_types[None-results0]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="593" name="test_filters_chat_types[private-results1]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="593" name="test_filters_chat_types[group-results2]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="593" name="test_filters_chat_types[supergroup-results3]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="593" name="test_filters_chat_types[channel-results4]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="612" name="test_filters_user_init" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="616" name="test_filters_user_allow_empty" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="620" name="test_filters_user_id" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="630" name="test_filters_username" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="641" name="test_filters_user_change_id" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="653" name="test_filters_user_change_username" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="665" name="test_filters_user_add_user_by_name" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="683" name="test_filters_user_add_user_by_id" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="701" name="test_filters_user_remove_user_by_name" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="719" name="test_filters_user_remove_user_by_id" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="737" name="test_filters_chat_init" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="741" name="test_filters_chat_allow_empty" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="745" name="test_filters_chat_id" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="755" name="test_filters_chat_username" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="766" name="test_filters_chat_change_id" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="778" name="test_filters_chat_change_username" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="790" name="test_filters_chat_add_chat_by_name" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="808" name="test_filters_chat_add_chat_by_id" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="826" name="test_filters_chat_remove_chat_by_name" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="844" name="test_filters_chat_remove_chat_by_id" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="862" name="test_filters_invoice" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="867" name="test_filters_successful_payment" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="872" name="test_filters_passport_data" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="877" name="test_filters_poll" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="882" name="test_filters_dice[\U0001f3b2]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="882" name="test_filters_dice[\U0001f3af]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="882" name="test_filters_dice[\U0001f3c0]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="889" name="test_filters_dice_list[\U0001f3b2]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="889" name="test_filters_dice_list[\U0001f3af]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="889" name="test_filters_dice_list[\U0001f3c0]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="900" name="test_filters_dice_type" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="922" name="test_language_filter_single" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="934" name="test_language_filter_multiple" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="943" name="test_and_filters" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="957" name="test_or_filters" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="967" name="test_and_or_filters" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="982" name="test_inverted_filters" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="992" name="test_inverted_and_filters" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1012" name="test_faulty_custom_filter" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1019" name="test_custom_unnamed_filter[MessageFilter]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1066" name="test_merged_short_circuit_and[MessageFilter]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1086" name="test_merged_short_circuit_or[MessageFilter]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1105" name="test_merged_data_merging_and[MessageFilter]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1129" name="test_merged_data_merging_or[MessageFilter]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1019" name="test_custom_unnamed_filter[UpdateFilter]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1066" name="test_merged_short_circuit_and[UpdateFilter]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1086" name="test_merged_short_circuit_or[UpdateFilter]" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1105" name="test_merged_data_merging_and[UpdateFilter]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1129" name="test_merged_data_merging_or[UpdateFilter]" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1027" name="test_update_type_message" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1036" name="test_update_type_edited_message" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1046" name="test_update_type_channel_post" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1056" name="test_update_type_edited_channel_post" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1151" name="test_filters_via_bot_init" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1155" name="test_filters_via_bot_allow_empty" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1159" name="test_filters_via_bot_id" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1169" name="test_filters_via_bot_username" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1180" name="test_filters_via_bot_change_id" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1192" name="test_filters_via_bot_change_username" time="0.001"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1204" name="test_filters_via_bot_add_user_by_name" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1222" name="test_filters_via_bot_add_user_by_id" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1240" name="test_filters_via_bot_remove_user_by_name" time="0.000"/>
  <testcase classname="tests.test_filters.TestFilters" file="tests/test_filters.py" line="1258" name="test_filters_via_bot_remove_user_by_id" time="0.001"/>
  <testcase classname="tests.test_forcereply.TestForceReply" file="tests/test_forcereply.py" line="34" name="test_send_message_with_force_reply" time="0.073"/>
  <testcase classname="tests.test_forcereply.TestForceReply" file="tests/test_forcereply.py" line="41" name="test_expected" time="0.001"/>
  <testcase classname="tests.test_forcereply.TestForceReply" file="tests/test_forcereply.py" line="45" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_forcereply.TestForceReply" file="tests/test_forcereply.py" line="52" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_game.TestGame" file="tests/test_game.py" line="47" name="test_de_json_required" time="0.001"/>
  <testcase classname="tests.test_game.TestGame" file="tests/test_game.py" line="59" name="test_de_json_all" time="0.001"/>
  <testcase classname="tests.test_game.TestGame" file="tests/test_game.py" line="77" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_game.TestGame" file="tests/test_game.py" line="88" name="test_parse_entity" time="0.000"/>
  <testcase classname="tests.test_game.TestGame" file="tests/test_game.py" line="94" name="test_parse_entities" time="0.001"/>
  <testcase classname="tests.test_game.TestGame" file="tests/test_game.py" line="102" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_gamehighscore.TestGameHighScore" file="tests/test_gamehighscore.py" line="36" name="test_de_json" time="0.000"/>
  <testcase classname="tests.test_gamehighscore.TestGameHighScore" file="tests/test_gamehighscore.py" line="44" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_gamehighscore.TestGameHighScore" file="tests/test_gamehighscore.py" line="52" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="48" name="test_escape_markdown" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="54" name="test_escape_markdown_v2" time="0.001"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="60" name="test_escape_markdown_v2_monospaced" time="0.001"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="72" name="test_escape_markdown_v2_text_link" time="0.001"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="81" name="test_markdown_invalid_version" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="85" name="test_to_float_timestamp_absolute_naive" time="0.001"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="92" name="test_to_float_timestamp_absolute_aware[Europe/Berlin]" time="0.001"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="92" name="test_to_float_timestamp_absolute_aware[Asia/Singapore]" time="0.001"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="92" name="test_to_float_timestamp_absolute_aware[UTC]" time="0.001"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="103" name="test_to_float_timestamp_absolute_no_reference" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="108" name="test_to_float_timestamp_delta[3:00:42.002000]" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="108" name="test_to_float_timestamp_delta[30]" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="108" name="test_to_float_timestamp_delta[7.5]" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="115" name="test_to_float_timestamp_time_of_day" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="125" name="test_to_float_timestamp_time_of_day_timezone[Europe/Berlin]" time="0.001"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="125" name="test_to_float_timestamp_time_of_day_timezone[Asia/Singapore]" time="0.001"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="125" name="test_to_float_timestamp_time_of_day_timezone[UTC]" time="0.001"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="141" name="test_to_float_timestamp_default_reference[3:00:42.002000]" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="141" name="test_to_float_timestamp_default_reference[30]" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="141" name="test_to_float_timestamp_default_reference[7.5]" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="141" name="test_to_float_timestamp_default_reference[12:42:00-07:00]" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="141" name="test_to_float_timestamp_default_reference[12:42:00]" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="149" name="test_to_float_timestamp_error" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="153" name="test_to_timestamp[2020-11-12 21:05:20.240790-07:00]" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="153" name="test_to_timestamp[2020-11-13 04:05:20.240798]" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="153" name="test_to_timestamp[3:00:42.002000]" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="153" name="test_to_timestamp[30]" time="0.001"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="153" name="test_to_timestamp[7.5]" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="153" name="test_to_timestamp[12:42:00-07:00]" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="153" name="test_to_timestamp[12:42:00]" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="158" name="test_to_timestamp_none" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="162" name="test_from_timestamp_none" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="165" name="test_from_timestamp_naive" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="169" name="test_from_timestamp_aware[Europe/Berlin]" time="0.001"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="169" name="test_from_timestamp_aware[Asia/Singapore]" time="0.001"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="169" name="test_from_timestamp_aware[UTC]" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="181" name="test_create_deep_linked_url" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="211" name="test_effective_message_type" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="246" name="test_mention_html" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="251" name="test_mention_markdown" time="0.000"/>
  <testcase classname="tests.test_helpers.TestHelpers" file="tests/test_helpers.py" line="256" name="test_mention_markdown_2" time="0.000"/>
  <testcase classname="tests.test_inlinekeyboardbutton.TestInlineKeyboardButton" file="tests/test_inlinekeyboardbutton.py" line="48" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_inlinekeyboardbutton.TestInlineKeyboardButton" file="tests/test_inlinekeyboardbutton.py" line="61" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinekeyboardbutton.TestInlineKeyboardButton" file="tests/test_inlinekeyboardbutton.py" line="82" name="test_de_json" time="0.000"/>
  <testcase classname="tests.test_inlinekeyboardbutton.TestInlineKeyboardButton" file="tests/test_inlinekeyboardbutton.py" line="105" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinekeyboardmarkup.TestInlineKeyboardMarkup" file="tests/test_inlinekeyboardmarkup.py" line="38" name="test_send_message_with_inline_keyboard_markup" time="0.080"/>
  <testcase classname="tests.test_inlinekeyboardmarkup.TestInlineKeyboardMarkup" file="tests/test_inlinekeyboardmarkup.py" line="47" name="test_from_button" time="0.001"/>
  <testcase classname="tests.test_inlinekeyboardmarkup.TestInlineKeyboardMarkup" file="tests/test_inlinekeyboardmarkup.py" line="54" name="test_from_row" time="0.001"/>
  <testcase classname="tests.test_inlinekeyboardmarkup.TestInlineKeyboardMarkup" file="tests/test_inlinekeyboardmarkup.py" line="64" name="test_from_column" time="0.001"/>
  <testcase classname="tests.test_inlinekeyboardmarkup.TestInlineKeyboardMarkup" file="tests/test_inlinekeyboardmarkup.py" line="75" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_inlinekeyboardmarkup.TestInlineKeyboardMarkup" file="tests/test_inlinekeyboardmarkup.py" line="78" name="test_expected_values_empty_switch" time="0.001"/>
  <testcase classname="tests.test_inlinekeyboardmarkup.TestInlineKeyboardMarkup" file="tests/test_inlinekeyboardmarkup.py" line="105" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_inlinekeyboardmarkup.TestInlineKeyboardMarkup" file="tests/test_inlinekeyboardmarkup.py" line="113" name="test_de_json" time="0.000"/>
  <testcase classname="tests.test_inlinekeyboardmarkup.TestInlineKeyboardMarkup" file="tests/test_inlinekeyboardmarkup.py" line="138" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_inlinequery.TestInlineQuery" file="tests/test_inlinequery.py" line="43" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_inlinequery.TestInlineQuery" file="tests/test_inlinequery.py" line="59" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_inlinequery.TestInlineQuery" file="tests/test_inlinequery.py" line="69" name="test_answer" time="0.001"/>
  <testcase classname="tests.test_inlinequery.TestInlineQuery" file="tests/test_inlinequery.py" line="76" name="test_answer_auto_pagination" time="0.001"/>
  <testcase classname="tests.test_inlinequery.TestInlineQuery" file="tests/test_inlinequery.py" line="85" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_inlinequeryhandler.TestCallbackQueryHandler" file="tests/test_inlinequeryhandler.py" line="132" name="test_basic" time="0.001"/>
  <testcase classname="tests.test_inlinequeryhandler.TestCallbackQueryHandler" file="tests/test_inlinequeryhandler.py" line="141" name="test_with_pattern" time="0.001"/>
  <testcase classname="tests.test_inlinequeryhandler.TestCallbackQueryHandler" file="tests/test_inlinequeryhandler.py" line="149" name="test_with_passing_group_dict" time="0.001"/>
  <testcase classname="tests.test_inlinequeryhandler.TestCallbackQueryHandler" file="tests/test_inlinequeryhandler.py" line="168" name="test_pass_user_or_chat_data" time="0.001"/>
  <testcase classname="tests.test_inlinequeryhandler.TestCallbackQueryHandler" file="tests/test_inlinequeryhandler.py" line="193" name="test_pass_job_or_update_queue" time="0.001"/>
  <testcase classname="tests.test_inlinequeryhandler.TestCallbackQueryHandler" file="tests/test_inlinequeryhandler.py" line="218" name="test_other_update_types[message]" time="0.001"/>
  <testcase classname="tests.test_inlinequeryhandler.TestCallbackQueryHandler" file="tests/test_inlinequeryhandler.py" line="218" name="test_other_update_types[edited_message]" time="0.001"/>
  <testcase classname="tests.test_inlinequeryhandler.TestCallbackQueryHandler" file="tests/test_inlinequeryhandler.py" line="218" name="test_other_update_types[callback_query]" time="0.001"/>
  <testcase classname="tests.test_inlinequeryhandler.TestCallbackQueryHandler" file="tests/test_inlinequeryhandler.py" line="218" name="test_other_update_types[channel_post]" time="0.001"/>
  <testcase classname="tests.test_inlinequeryhandler.TestCallbackQueryHandler" file="tests/test_inlinequeryhandler.py" line="218" name="test_other_update_types[edited_channel_post]" time="0.001"/>
  <testcase classname="tests.test_inlinequeryhandler.TestCallbackQueryHandler" file="tests/test_inlinequeryhandler.py" line="218" name="test_other_update_types[chosen_inline_result]" time="0.001"/>
  <testcase classname="tests.test_inlinequeryhandler.TestCallbackQueryHandler" file="tests/test_inlinequeryhandler.py" line="218" name="test_other_update_types[shipping_query]" time="0.001"/>
  <testcase classname="tests.test_inlinequeryhandler.TestCallbackQueryHandler" file="tests/test_inlinequeryhandler.py" line="218" name="test_other_update_types[pre_checkout_query]" time="0.001"/>
  <testcase classname="tests.test_inlinequeryhandler.TestCallbackQueryHandler" file="tests/test_inlinequeryhandler.py" line="218" name="test_other_update_types[callback_query_without_message]" time="0.001"/>
  <testcase classname="tests.test_inlinequeryhandler.TestCallbackQueryHandler" file="tests/test_inlinequeryhandler.py" line="222" name="test_context" time="0.001"/>
  <testcase classname="tests.test_inlinequeryhandler.TestCallbackQueryHandler" file="tests/test_inlinequeryhandler.py" line="229" name="test_context_pattern" time="0.001"/>
  <testcase classname="tests.test_inlinequeryresultarticle.TestInlineQueryResultArticle" file="tests/test_inlinequeryresultarticle.py" line="59" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultarticle.TestInlineQueryResultArticle" file="tests/test_inlinequeryresultarticle.py" line="75" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultarticle.TestInlineQueryResultArticle" file="tests/test_inlinequeryresultarticle.py" line="108" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultaudio.TestInlineQueryResultAudio" file="tests/test_inlinequeryresultaudio.py" line="57" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultaudio.TestInlineQueryResultAudio" file="tests/test_inlinequeryresultaudio.py" line="72" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultaudio.TestInlineQueryResultAudio" file="tests/test_inlinequeryresultaudio.py" line="96" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedaudio.TestInlineQueryResultCachedAudio" file="tests/test_inlinequeryresultcachedaudio.py" line="51" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedaudio.TestInlineQueryResultCachedAudio" file="tests/test_inlinequeryresultcachedaudio.py" line="65" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedaudio.TestInlineQueryResultCachedAudio" file="tests/test_inlinequeryresultcachedaudio.py" line="94" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcacheddocument.TestInlineQueryResultCachedDocument" file="tests/test_inlinequeryresultcacheddocument.py" line="55" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcacheddocument.TestInlineQueryResultCachedDocument" file="tests/test_inlinequeryresultcacheddocument.py" line="72" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcacheddocument.TestInlineQueryResultCachedDocument" file="tests/test_inlinequeryresultcacheddocument.py" line="113" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedgif.TestInlineQueryResultCachedGif" file="tests/test_inlinequeryresultcachedgif.py" line="53" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedgif.TestInlineQueryResultCachedGif" file="tests/test_inlinequeryresultcachedgif.py" line="66" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedgif.TestInlineQueryResultCachedGif" file="tests/test_inlinequeryresultcachedgif.py" line="94" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_inlinequeryresultcachedmpeg4gif.TestInlineQueryResultCachedMpeg4Gif" file="tests/test_inlinequeryresultcachedmpeg4gif.py" line="53" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedmpeg4gif.TestInlineQueryResultCachedMpeg4Gif" file="tests/test_inlinequeryresultcachedmpeg4gif.py" line="69" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedmpeg4gif.TestInlineQueryResultCachedMpeg4Gif" file="tests/test_inlinequeryresultcachedmpeg4gif.py" line="106" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedphoto.TestInlineQueryResultCachedPhoto" file="tests/test_inlinequeryresultcachedphoto.py" line="55" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_inlinequeryresultcachedphoto.TestInlineQueryResultCachedPhoto" file="tests/test_inlinequeryresultcachedphoto.py" line="71" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedphoto.TestInlineQueryResultCachedPhoto" file="tests/test_inlinequeryresultcachedphoto.py" line="108" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedsticker.TestInlineQueryResultCachedSticker" file="tests/test_inlinequeryresultcachedsticker.py" line="47" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedsticker.TestInlineQueryResultCachedSticker" file="tests/test_inlinequeryresultcachedsticker.py" line="60" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedsticker.TestInlineQueryResultCachedSticker" file="tests/test_inlinequeryresultcachedsticker.py" line="84" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedvideo.TestInlineQueryResultCachedVideo" file="tests/test_inlinequeryresultcachedvideo.py" line="55" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedvideo.TestInlineQueryResultCachedVideo" file="tests/test_inlinequeryresultcachedvideo.py" line="71" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedvideo.TestInlineQueryResultCachedVideo" file="tests/test_inlinequeryresultcachedvideo.py" line="108" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedvoice.TestInlineQueryResultCachedVoice" file="tests/test_inlinequeryresultcachedvoice.py" line="53" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedvoice.TestInlineQueryResultCachedVoice" file="tests/test_inlinequeryresultcachedvoice.py" line="68" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcachedvoice.TestInlineQueryResultCachedVoice" file="tests/test_inlinequeryresultcachedvoice.py" line="101" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcontact.TestInlineQueryResultContact" file="tests/test_inlinequeryresultcontact.py" line="57" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcontact.TestInlineQueryResultContact" file="tests/test_inlinequeryresultcontact.py" line="72" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultcontact.TestInlineQueryResultContact" file="tests/test_inlinequeryresultcontact.py" line="109" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultdocument.TestInlineQueryResultDocument" file="tests/test_inlinequeryresultdocument.py" line="63" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_inlinequeryresultdocument.TestInlineQueryResultDocument" file="tests/test_inlinequeryresultdocument.py" line="81" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultdocument.TestInlineQueryResultDocument" file="tests/test_inlinequeryresultdocument.py" line="126" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultgame.TestInlineQueryResultGame" file="tests/test_inlinequeryresultgame.py" line="44" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_inlinequeryresultgame.TestInlineQueryResultGame" file="tests/test_inlinequeryresultgame.py" line="50" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultgame.TestInlineQueryResultGame" file="tests/test_inlinequeryresultgame.py" line="65" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultgif.TestInlineQueryResultGif" file="tests/test_inlinequeryresultgif.py" line="63" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_inlinequeryresultgif.TestInlineQueryResultGif" file="tests/test_inlinequeryresultgif.py" line="81" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultgif.TestInlineQueryResultGif" file="tests/test_inlinequeryresultgif.py" line="108" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultlocation.TestInlineQueryResultLocation" file="tests/test_inlinequeryresultlocation.py" line="59" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultlocation.TestInlineQueryResultLocation" file="tests/test_inlinequeryresultlocation.py" line="75" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultlocation.TestInlineQueryResultLocation" file="tests/test_inlinequeryresultlocation.py" line="114" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultmpeg4gif.TestInlineQueryResultMpeg4Gif" file="tests/test_inlinequeryresultmpeg4gif.py" line="63" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultmpeg4gif.TestInlineQueryResultMpeg4Gif" file="tests/test_inlinequeryresultmpeg4gif.py" line="81" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultmpeg4gif.TestInlineQueryResultMpeg4Gif" file="tests/test_inlinequeryresultmpeg4gif.py" line="128" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultphoto.TestInlineQueryResultPhoto" file="tests/test_inlinequeryresultphoto.py" line="61" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_inlinequeryresultphoto.TestInlineQueryResultPhoto" file="tests/test_inlinequeryresultphoto.py" line="78" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultphoto.TestInlineQueryResultPhoto" file="tests/test_inlinequeryresultphoto.py" line="108" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultvenue.TestInlineQueryResultVenue" file="tests/test_inlinequeryresultvenue.py" line="63" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultvenue.TestInlineQueryResultVenue" file="tests/test_inlinequeryresultvenue.py" line="81" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultvenue.TestInlineQueryResultVenue" file="tests/test_inlinequeryresultvenue.py" line="116" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultvideo.TestInlineQueryResultVideo" file="tests/test_inlinequeryresultvideo.py" line="65" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultvideo.TestInlineQueryResultVideo" file="tests/test_inlinequeryresultvideo.py" line="84" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultvideo.TestInlineQueryResultVideo" file="tests/test_inlinequeryresultvideo.py" line="119" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultvoice.TestInlineQueryResultVoice" file="tests/test_inlinequeryresultvoice.py" line="56" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultvoice.TestInlineQueryResultVoice" file="tests/test_inlinequeryresultvoice.py" line="70" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inlinequeryresultvoice.TestInlineQueryResultVoice" file="tests/test_inlinequeryresultvoice.py" line="93" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inputcontactmessagecontent.TestInputContactMessageContent" file="tests/test_inputcontactmessagecontent.py" line="38" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_inputcontactmessagecontent.TestInputContactMessageContent" file="tests/test_inputcontactmessagecontent.py" line="43" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inputcontactmessagecontent.TestInputContactMessageContent" file="tests/test_inputcontactmessagecontent.py" line="60" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inputfile.TestInputFile" file="tests/test_inputfile.py" line="30" name="test_subprocess_pipe" time="0.006"/>
  <testcase classname="tests.test_inputfile.TestInputFile" file="tests/test_inputfile.py" line="50" name="test_mimetypes" time="0.001"/>
  <testcase classname="tests.test_inputfile.TestInputFile" file="tests/test_inputfile.py" line="67" name="test_filenames" time="0.001"/>
  <testcase classname="tests.test_inputlocationmessagecontent.TestInputLocationMessageContent" file="tests/test_inputlocationmessagecontent.py" line="38" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_inputlocationmessagecontent.TestInputLocationMessageContent" file="tests/test_inputlocationmessagecontent.py" line="43" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inputlocationmessagecontent.TestInputLocationMessageContent" file="tests/test_inputlocationmessagecontent.py" line="60" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaVideo" file="tests/test_inputmedia.py" line="117" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaVideo" file="tests/test_inputmedia.py" line="128" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaVideo" file="tests/test_inputmedia.py" line="139" name="test_with_video" time="0.400"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaVideo" file="tests/test_inputmedia.py" line="149" name="test_with_video_file" time="0.001"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaPhoto" file="tests/test_inputmedia.py" line="163" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaPhoto" file="tests/test_inputmedia.py" line="169" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaPhoto" file="tests/test_inputmedia.py" line="176" name="test_with_photo" time="0.090"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaPhoto" file="tests/test_inputmedia.py" line="183" name="test_with_photo_file" time="0.001"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaAnimation" file="tests/test_inputmedia.py" line="200" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaAnimation" file="tests/test_inputmedia.py" line="207" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaAnimation" file="tests/test_inputmedia.py" line="217" name="test_with_animation" time="0.632"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaAnimation" file="tests/test_inputmedia.py" line="224" name="test_with_animation_file" time="0.001"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaAudio" file="tests/test_inputmedia.py" line="241" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaAudio" file="tests/test_inputmedia.py" line="251" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaAudio" file="tests/test_inputmedia.py" line="261" name="test_with_audio" time="0.189"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaAudio" file="tests/test_inputmedia.py" line="271" name="test_with_audio_file" time="0.001"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaDocument" file="tests/test_inputmedia.py" line="285" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaDocument" file="tests/test_inputmedia.py" line="292" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaDocument" file="tests/test_inputmedia.py" line="299" name="test_with_document" time="0.129"/>
  <testcase classname="tests.test_inputmedia.TestInputMediaDocument" file="tests/test_inputmedia.py" line="306" name="test_with_document_file" time="0.001"/>
  <testcase classname="tests.test_inputmedia.TestSendMediaGroup" file="tests/test_inputmedia.py" line="323" name="test_send_media_group_photo" time="0.171"/>
  <testcase classname="tests.test_inputmedia.TestSendMediaGroup" file="tests/test_inputmedia.py" line="332" name="test_send_media_group_all_args" time="0.170"/>
  <testcase classname="tests.test_inputmedia.TestSendMediaGroup" file="tests/test_inputmedia.py" line="344" name="test_send_media_group_with_thumbs" time="0.002"/>
  <testcase classname="tests.test_inputmedia.TestSendMediaGroup" file="tests/test_inputmedia.py" line="359" name="test_send_media_group_new_files" time="0.512"/>
  <testcase classname="tests.test_inputmedia.TestSendMediaGroup" file="tests/test_inputmedia.py" line="378" name="test_edit_message_media" time="0.251"/>
  <testcase classname="tests.test_inputmedia.TestSendMediaGroup" file="tests/test_inputmedia.py" line="387" name="test_edit_message_media_new_file" time="0.146"/>
  <testcase classname="tests.test_inputtextmessagecontent.TestInputTextMessageContent" file="tests/test_inputtextmessagecontent.py" line="38" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_inputtextmessagecontent.TestInputTextMessageContent" file="tests/test_inputtextmessagecontent.py" line="43" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_inputtextmessagecontent.TestInputTextMessageContent" file="tests/test_inputtextmessagecontent.py" line="59" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_inputvenuemessagecontent.TestInputVenueMessageContent" file="tests/test_inputvenuemessagecontent.py" line="44" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_inputvenuemessagecontent.TestInputVenueMessageContent" file="tests/test_inputvenuemessagecontent.py" line="52" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_inputvenuemessagecontent.TestInputVenueMessageContent" file="tests/test_inputvenuemessagecontent.py" line="71" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_invoice.TestInvoice" file="tests/test_invoice.py" line="46" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_invoice.TestInvoice" file="tests/test_invoice.py" line="64" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_invoice.TestInvoice" file="tests/test_invoice.py" line="74" name="test_send_required_args_only" time="0.071"/>
  <testcase classname="tests.test_invoice.TestInvoice" file="tests/test_invoice.py" line="94" name="test_send_all_args" time="3.074"/>
  <testcase classname="tests.test_invoice.TestInvoice" file="tests/test_invoice.py" line="128" name="test_send_object_as_provider_data" time="0.001"/>
  <testcase classname="tests.test_invoice.TestInvoice" file="tests/test_invoice.py" line="149" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="96" name="test_run_once" time="0.031"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="101" name="test_run_once_timezone[Europe/Berlin]" time="0.003"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="101" name="test_run_once_timezone[Asia/Singapore]" time="0.003"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="101" name="test_run_once_timezone[UTC]" time="0.003"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="110" name="test_job_with_context" time="0.027"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="115" name="test_run_repeating" time="0.063"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="120" name="test_run_repeating_first" time="0.235"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="127" name="test_run_repeating_first_timezone[Europe/Berlin]" time="0.106"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="127" name="test_run_repeating_first_timezone[Asia/Singapore]" time="0.104"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="127" name="test_run_repeating_first_timezone[UTC]" time="0.104"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="135" name="test_run_repeating_last" time="0.214"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="142" name="test_run_repeating_last_timezone[Europe/Berlin]" time="0.214"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="142" name="test_run_repeating_last_timezone[Asia/Singapore]" time="0.215"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="142" name="test_run_repeating_last_timezone[UTC]" time="0.206"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="152" name="test_run_repeating_last_before_first" time="0.002"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="156" name="test_run_repeating_timedelta" time="0.058"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="161" name="test_run_custom" time="0.055"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="166" name="test_multiple" time="0.066"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="173" name="test_disabled" time="0.271"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="190" name="test_schedule_removal" time="0.035">
    <failure message="apscheduler.jobstores.base.JobLookupError: 'No job by the id of a98fe8cb1d4341a3b3d8439be5ab78dd was found'">self = &lt;tests.test_jobqueue.TestJobQueue object at 0x11353f950&gt;, job_queue = &lt;telegram.ext.jobqueue.JobQueue object at 0x11353fdd0&gt;

    def test_schedule_removal(self, job_queue):
        j1 = job_queue.run_once(self.job_run_once, 0.03)
        j2 = job_queue.run_repeating(self.job_run_once, 0.02)
    
        sleep(0.025)
    
&gt;       j1.schedule_removal()

tests/test_jobqueue.py:197: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
telegram/ext/jobqueue.py:587: in schedule_removal
    self.job.remove()
venv/lib/python3.7/site-packages/apscheduler/job.py:108: in remove
    self._scheduler.remove_job(self.id, self._jobstore_alias)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;apscheduler.schedulers.background.BackgroundScheduler object at 0x11353fe10&gt;, job_id = 'a98fe8cb1d4341a3b3d8439be5ab78dd'
jobstore = 'default'

    def remove_job(self, job_id, jobstore=None):
        """
        Removes a job, preventing it from being run any more.
    
        :param str|unicode job_id: the identifier of the job
        :param str|unicode jobstore: alias of the job store that contains the job
        :raises JobLookupError: if the job was not found
    
        """
        jobstore_alias = None
        with self._jobstores_lock:
            # Check if the job is among the pending jobs
            if self.state == STATE_STOPPED:
                for i, (job, alias, replace_existing) in enumerate(self._pending_jobs):
                    if job.id == job_id and jobstore in (None, alias):
                        del self._pending_jobs[i]
                        jobstore_alias = alias
                        break
            else:
                # Otherwise, try to remove it from each store until it succeeds or we run out of
                # stores to check
                for alias, store in six.iteritems(self._jobstores):
                    if jobstore in (None, alias):
                        try:
                            store.remove_job(job_id)
                            jobstore_alias = alias
                            break
                        except JobLookupError:
                            continue
    
        if jobstore_alias is None:
&gt;           raise JobLookupError(job_id)
E           apscheduler.jobstores.base.JobLookupError: 'No job by the id of a98fe8cb1d4341a3b3d8439be5ab78dd was found'

venv/lib/python3.7/site-packages/apscheduler/schedulers/base.py:621: JobLookupError</failure>
  </testcase>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="203" name="test_schedule_removal_from_within" time="0.060"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="210" name="test_longer_first" time="0.026">
    <failure message="assert 2 == 1  +  where 2 = &lt;tests.test_jobqueue.TestJobQueue object at 0x112e86150&gt;.result">self = &lt;tests.test_jobqueue.TestJobQueue object at 0x112e86150&gt;, job_queue = &lt;telegram.ext.jobqueue.JobQueue object at 0x112e79d90&gt;

    def test_longer_first(self, job_queue):
        job_queue.run_once(self.job_run_once, 0.02)
        job_queue.run_once(self.job_run_once, 0.01)
    
        sleep(0.015)
    
&gt;       assert self.result == 1
E       assert 2 == 1
E        +  where 2 = &lt;tests.test_jobqueue.TestJobQueue object at 0x112e86150&gt;.result

tests/test_jobqueue.py:217: AssertionError</failure>
  </testcase>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="218" name="test_error" time="0.040"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="224" name="test_in_updater" time="1.041"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="240" name="test_time_unit_int" time="0.073"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="249" name="test_time_unit_dt_timedelta" time="0.072"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="259" name="test_time_unit_dt_datetime" time="0.063"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="269" name="test_time_unit_dt_time_today" time="0.072"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="280" name="test_time_unit_dt_time_tomorrow" time="0.002"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="291" name="test_run_daily" time="1.103"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="302" name="test_run_monthly[Europe/Berlin]" time="1.108"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="302" name="test_run_monthly[Asia/Singapore]" time="1.107"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="302" name="test_run_monthly[UTC]" time="1.110"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="331" name="test_run_monthly_non_strict_day[Europe/Berlin]" time="0.003"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="331" name="test_run_monthly_non_strict_day[Asia/Singapore]" time="0.002"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="331" name="test_run_monthly_non_strict_day[UTC]" time="0.002"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="350" name="test_default_tzinfo[Europe/Berlin]" time="0.003"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="350" name="test_default_tzinfo[Asia/Singapore]" time="0.003"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="350" name="test_default_tzinfo[UTC]" time="0.003"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="369" name="test_get_jobs[True]" time="0.002"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="369" name="test_get_jobs[False]" time="0.002"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="385" name="test_context_based_callback" time="0.039"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="394" name="test_job_run[True]" time="0.001"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="394" name="test_job_run[False]" time="0.001"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="407" name="test_enable_disable_job" time="0.168"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="420" name="test_remove_job" time="0.115"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="430" name="test_job_lt_eq" time="0.002"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="435" name="test_dispatch_error" time="0.214"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="455" name="test_dispatch_error_context" time="0.211"/>
  <testcase classname="tests.test_jobqueue.TestJobQueue" file="tests/test_jobqueue.py" line="475" name="test_dispatch_error_that_raises_errors" time="0.218"/>
  <testcase classname="tests.test_keyboardbutton.TestKeyboardButton" file="tests/test_keyboardbutton.py" line="41" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_keyboardbutton.TestKeyboardButton" file="tests/test_keyboardbutton.py" line="47" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_keyboardbutton.TestKeyboardButton" file="tests/test_keyboardbutton.py" line="56" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_keyboardbuttonpolltype.TestKeyboardButtonPollType" file="tests/test_keyboardbuttonpolltype.py" line="31" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_keyboardbuttonpolltype.TestKeyboardButtonPollType" file="tests/test_keyboardbuttonpolltype.py" line="36" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_labeledprice.TestLabeledPrice" file="tests/test_labeledprice.py" line="33" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_labeledprice.TestLabeledPrice" file="tests/test_labeledprice.py" line="37" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_labeledprice.TestLabeledPrice" file="tests/test_labeledprice.py" line="44" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_location.TestLocation" file="tests/test_location.py" line="35" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_location.TestLocation" file="tests/test_location.py" line="42" name="test_send_live_location" time="0.195">
    <skipped message="expected test failure"/>
  </testcase>
  <testcase classname="tests.test_location.TestLocation" file="tests/test_location.py" line="67" name="test_edit_live_inline_message" time="0.001"/>
  <testcase classname="tests.test_location.TestLocation" file="tests/test_location.py" line="78" name="test_stop_live_inline_message" time="0.000"/>
  <testcase classname="tests.test_location.TestLocation" file="tests/test_location.py" line="86" name="test_send_with_location" time="0.001"/>
  <testcase classname="tests.test_location.TestLocation" file="tests/test_location.py" line="95" name="test_edit_live_location_with_location" time="0.000"/>
  <testcase classname="tests.test_location.TestLocation" file="tests/test_location.py" line="104" name="test_send_location_without_required" time="0.001"/>
  <testcase classname="tests.test_location.TestLocation" file="tests/test_location.py" line="108" name="test_edit_location_without_required" time="0.000"/>
  <testcase classname="tests.test_location.TestLocation" file="tests/test_location.py" line="112" name="test_send_location_with_all_args" time="0.001"/>
  <testcase classname="tests.test_location.TestLocation" file="tests/test_location.py" line="116" name="test_edit_location_with_all_args" time="0.000"/>
  <testcase classname="tests.test_location.TestLocation" file="tests/test_location.py" line="122" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_location.TestLocation" file="tests/test_location.py" line="128" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_loginurl.TestLoginUrl" file="tests/test_loginurl.py" line="40" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_loginurl.TestLoginUrl" file="tests/test_loginurl.py" line="49" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[forwarded_user]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[forwarded_channel]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[reply]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[edited]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[text]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[caption_entities]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[audio]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[document]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[animation]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[game]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[photo]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[sticker]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[video]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[voice]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[video_note]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[new_members]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[contact]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[location]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[venue]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[left_member]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[new_title]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[new_photo]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[delete_photo]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[group_created]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[supergroup_created]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[channel_created]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[migrated_to]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[migrated_from]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[pinned]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[invoice]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[successful_payment]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[connected_website]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[forward_signature]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[author_signature]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[photo_from_media_group]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[passport_data]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[poll]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[reply_markup]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[default_quote]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[dice]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="280" name="test_all_possibilities_de_json_and_to_dict[via_bot]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="285" name="test_dict_approach" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="290" name="test_parse_entity" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="299" name="test_parse_caption_entity" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="310" name="test_parse_entities" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="323" name="test_parse_caption_entities" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="341" name="test_text_html_simple" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="354" name="test_text_html_empty" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="359" name="test_text_html_urled" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="372" name="test_text_markdown_simple" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="382" name="test_text_markdown_v2_simple" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="393" name="test_text_markdown_new_in_v2" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="412" name="test_text_markdown_empty" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="418" name="test_text_markdown_urled" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="428" name="test_text_markdown_v2_urled" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="439" name="test_text_html_emoji" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="448" name="test_text_markdown_emoji" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="457" name="test_caption_html_simple" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="470" name="test_caption_html_empty" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="475" name="test_caption_html_urled" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="488" name="test_caption_markdown_simple" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="498" name="test_caption_markdown_v2_simple" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="509" name="test_caption_markdown_empty" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="515" name="test_caption_markdown_urled" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="525" name="test_caption_markdown_v2_urled" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="536" name="test_caption_html_emoji" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="550" name="test_caption_markdown_emoji" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="564" name="test_parse_entities_url_emoji" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="574" name="test_chat_id" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="577" name="test_link_with_username[supergroup]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="577" name="test_link_with_username[channel]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="585" name="test_link_with_id[channel--1003]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="585" name="test_link_with_id[supergroup--1003]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="595" name="test_link_private_chats[None-username]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="595" name="test_link_private_chats[-3-None]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[forwarded_user]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[forwarded_channel]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[reply]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[edited]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[text]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[caption_entities]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[audio]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[document]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[animation]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[game]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[photo]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[sticker]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[video]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[voice]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[video_note]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[new_members]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[contact]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[location]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[venue]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[left_member]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[new_title]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[new_photo]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[delete_photo]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[group_created]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[supergroup_created]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[channel_created]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[migrated_to]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[migrated_from]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[pinned]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[invoice]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[successful_payment]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[connected_website]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[forward_signature]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[author_signature]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[photo_from_media_group]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[passport_data]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[poll]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[reply_markup]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[default_quote]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[dice]" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="604" name="test_effective_attachment[via_bot]" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="629" name="test_reply_text" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="644" name="test_reply_markdown" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="672" name="test_reply_markdown_v2" time="0.002"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="703" name="test_reply_html" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="734" name="test_reply_media_group" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="748" name="test_reply_photo" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="762" name="test_reply_audio" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="776" name="test_reply_document" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="790" name="test_reply_animation" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="804" name="test_reply_sticker" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="818" name="test_reply_video" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="832" name="test_reply_video_note" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="846" name="test_reply_voice" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="860" name="test_reply_location" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="874" name="test_reply_venue" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="888" name="test_reply_contact" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="902" name="test_reply_poll" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="916" name="test_reply_dice" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="930" name="test_forward" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="946" name="test_edit_text" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="956" name="test_edit_caption" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="966" name="test_edit_media" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="976" name="test_edit_reply_markup" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="986" name="test_edit_live_location" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="997" name="test_stop_live_location" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="1006" name="test_set_game_score" time="0.001"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="1017" name="test_get_game_high_scores" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="1027" name="test_delete" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="1036" name="test_stop_poll" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="1045" name="test_pin" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="1054" name="test_default_quote" time="0.000"/>
  <testcase classname="tests.test_message.TestMessage" file="tests/test_message.py" line="1076" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_messageentity.TestMessageEntity" file="tests/test_messageentity.py" line="45" name="test_de_json" time="0.000"/>
  <testcase classname="tests.test_messageentity.TestMessageEntity" file="tests/test_messageentity.py" line="53" name="test_to_dict[mention]" time="0.000"/>
  <testcase classname="tests.test_messageentity.TestMessageEntity" file="tests/test_messageentity.py" line="53" name="test_to_dict[hashtag]" time="0.001"/>
  <testcase classname="tests.test_messageentity.TestMessageEntity" file="tests/test_messageentity.py" line="53" name="test_to_dict[cashtag]" time="0.000"/>
  <testcase classname="tests.test_messageentity.TestMessageEntity" file="tests/test_messageentity.py" line="53" name="test_to_dict[phone_number]" time="0.000"/>
  <testcase classname="tests.test_messageentity.TestMessageEntity" file="tests/test_messageentity.py" line="53" name="test_to_dict[bot_command]" time="0.000"/>
  <testcase classname="tests.test_messageentity.TestMessageEntity" file="tests/test_messageentity.py" line="53" name="test_to_dict[url]" time="0.000"/>
  <testcase classname="tests.test_messageentity.TestMessageEntity" file="tests/test_messageentity.py" line="53" name="test_to_dict[email]" time="0.000"/>
  <testcase classname="tests.test_messageentity.TestMessageEntity" file="tests/test_messageentity.py" line="53" name="test_to_dict[bold]" time="0.000"/>
  <testcase classname="tests.test_messageentity.TestMessageEntity" file="tests/test_messageentity.py" line="53" name="test_to_dict[italic]" time="0.000"/>
  <testcase classname="tests.test_messageentity.TestMessageEntity" file="tests/test_messageentity.py" line="53" name="test_to_dict[code]" time="0.000"/>
  <testcase classname="tests.test_messageentity.TestMessageEntity" file="tests/test_messageentity.py" line="53" name="test_to_dict[pre]" time="0.000"/>
  <testcase classname="tests.test_messageentity.TestMessageEntity" file="tests/test_messageentity.py" line="53" name="test_to_dict[text_link]" time="0.000"/>
  <testcase classname="tests.test_messageentity.TestMessageEntity" file="tests/test_messageentity.py" line="53" name="test_to_dict[text_mention]" time="0.001"/>
  <testcase classname="tests.test_messageentity.TestMessageEntity" file="tests/test_messageentity.py" line="53" name="test_to_dict[underline]" time="0.001"/>
  <testcase classname="tests.test_messageentity.TestMessageEntity" file="tests/test_messageentity.py" line="53" name="test_to_dict[strikethrough]" time="0.000"/>
  <testcase classname="tests.test_messageentity.TestMessageEntity" file="tests/test_messageentity.py" line="67" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="133" name="test_basic" time="0.001"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="141" name="test_deprecation_warning" time="0.000"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="149" name="test_edited_deprecated" time="0.000"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="163" name="test_channel_post_deprecated" time="0.000"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="176" name="test_multiple_flags_deprecated" time="0.000"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="190" name="test_none_allowed_deprecated" time="0.000"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="200" name="test_with_filter" time="0.000"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="209" name="test_callback_query_with_filter" time="0.001"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="225" name="test_specific_filters" time="0.000"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="238" name="test_pass_user_or_chat_data" time="0.001"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="263" name="test_pass_job_or_update_queue" time="0.001"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="288" name="test_other_update_types[callback_query]" time="0.000"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="288" name="test_other_update_types[inline_query]" time="0.000"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="288" name="test_other_update_types[chosen_inline_result]" time="0.000"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="288" name="test_other_update_types[shipping_query]" time="0.001"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="288" name="test_other_update_types[pre_checkout_query]" time="0.000"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="288" name="test_other_update_types[callback_query_without_message]" time="0.000"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="292" name="test_context" time="0.001"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="313" name="test_context_regex" time="0.001"/>
  <testcase classname="tests.test_messagehandler.TestMessageHandler" file="tests/test_messagehandler.py" line="325" name="test_context_multiple_regex" time="0.001"/>
  <testcase classname="tests.test_messagequeue.TestDelayQueue" file="tests/test_messagequeue.py" line="41" name="test_delayqueue_limits" time="5.047"/>
  <testcase classname="tests.test_meta" file="tests/test_meta.py" line="28" name="test_pre_commit_hook[yapf]" time="0.000">
    <skipped message="TEST_PRE_COMMIT not enabled" type="pytest.skip">tests/test_meta.py:28: TEST_PRE_COMMIT not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_meta" file="tests/test_meta.py" line="28" name="test_pre_commit_hook[flake8]" time="0.000">
    <skipped message="TEST_PRE_COMMIT not enabled" type="pytest.skip">tests/test_meta.py:28: TEST_PRE_COMMIT not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_meta" file="tests/test_meta.py" line="28" name="test_pre_commit_hook[pylint]" time="0.000">
    <skipped message="TEST_PRE_COMMIT not enabled" type="pytest.skip">tests/test_meta.py:28: TEST_PRE_COMMIT not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_meta" file="tests/test_meta.py" line="35" name="test_build" time="0.000">
    <skipped message="TEST_BUILD not enabled" type="pytest.skip">tests/test_meta.py:35: TEST_BUILD not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[Update]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[getUpdates]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[setWebhook]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[deleteWebhook]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[getWebhookInfo]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[WebhookInfo]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[User]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[Chat]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[Message]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[MessageId]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[MessageEntity]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[PhotoSize]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[Animation]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[Audio]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[Document]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[Video]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[VideoNote]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[Voice]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[Contact]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[Dice]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[PollOption]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[PollAnswer]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[Poll]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[Location]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[Venue]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[ProximityAlertTriggered]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[UserProfilePhotos]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[File]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[ReplyKeyboardMarkup]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[KeyboardButton]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[KeyboardButtonPollType]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[ReplyKeyboardRemove]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineKeyboardMarkup]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineKeyboardButton]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[LoginUrl]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[CallbackQuery]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[ForceReply]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[ChatPhoto]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[ChatMember]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[ChatPermissions]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[ChatLocation]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[BotCommand]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InputMedia]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InputMediaPhoto]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InputMediaVideo]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InputMediaAnimation]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InputMediaAudio]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InputMediaDocument]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InputFile]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[getMe]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[logOut]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[close]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendMessage]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[forwardMessage]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[copyMessage]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendPhoto]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendAudio]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendDocument]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendVideo]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendAnimation]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendVoice]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendVideoNote]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendMediaGroup]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendLocation]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[editMessageLiveLocation]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[stopMessageLiveLocation]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendVenue]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendContact]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendPoll]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendDice]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendChatAction]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[getUserProfilePhotos]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[getFile]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[kickChatMember]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[unbanChatMember]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[restrictChatMember]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[promoteChatMember]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[setChatAdministratorCustomTitle]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[setChatPermissions]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[exportChatInviteLink]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[setChatPhoto]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[deleteChatPhoto]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[setChatTitle]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[setChatDescription]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[pinChatMessage]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[unpinChatMessage]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[unpinAllChatMessages]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[leaveChat]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[getChat]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[getChatAdministrators]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[getChatMembersCount]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[getChatMember]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[setChatStickerSet]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[deleteChatStickerSet]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[answerCallbackQuery]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[setMyCommands]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[getMyCommands]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[editMessageText]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[editMessageCaption]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[editMessageMedia]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[editMessageReplyMarkup]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[stopPoll]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[deleteMessage]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[Sticker]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[StickerSet]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[MaskPosition]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendSticker]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[getStickerSet]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[uploadStickerFile]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[createNewStickerSet]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[addStickerToSet]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[setStickerPositionInSet]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[deleteStickerFromSet]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[setStickerSetThumb]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQuery]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[answerInlineQuery]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResult]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultArticle]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultPhoto]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultGif]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultMpeg4Gif]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultVideo]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultAudio]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultVoice]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultDocument]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultLocation]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultVenue]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultContact]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultGame]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultCachedPhoto]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultCachedGif]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultCachedMpeg4Gif]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultCachedSticker]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultCachedDocument]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultCachedVideo]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultCachedVoice]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InlineQueryResultCachedAudio]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InputMessageContent]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InputTextMessageContent]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InputLocationMessageContent]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InputVenueMessageContent]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[InputContactMessageContent]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[ChosenInlineResult]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendInvoice]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[answerShippingQuery]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[answerPreCheckoutQuery]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[LabeledPrice]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[Invoice]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[ShippingAddress]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[OrderInfo]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[ShippingOption]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[SuccessfulPayment]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[ShippingQuery]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[PreCheckoutQuery]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[PassportData]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[PassportFile]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[EncryptedPassportElement]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[EncryptedCredentials]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[setPassportDataErrors]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[PassportElementError]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[PassportElementErrorDataField]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[PassportElementErrorFrontSide]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[PassportElementErrorReverseSide]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[PassportElementErrorSelfie]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[PassportElementErrorFile]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[PassportElementErrorFiles]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[PassportElementErrorTranslationFile]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[PassportElementErrorTranslationFiles]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[PassportElementErrorUnspecified]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[sendGame]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[Game]" time="0.001">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[setGameScore]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[getGameHighScores]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_official" file="tests/test_official.py" line="162" name="test_official[GameHighScore]" time="0.000">
    <skipped message="test_official is not enabled" type="pytest.skip">tests/test_official.py:162: test_official is not enabled</skipped>
  </testcase>
  <testcase classname="tests.test_orderinfo.TestOrderInfo" file="tests/test_orderinfo.py" line="40" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_orderinfo.TestOrderInfo" file="tests/test_orderinfo.py" line="54" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_orderinfo.TestOrderInfo" file="tests/test_orderinfo.py" line="63" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_parsemode.TestParseMode" file="tests/test_parsemode.py" line="32" name="test_send_message_with_parse_mode_markdown" time="0.064"/>
  <testcase classname="tests.test_parsemode.TestParseMode" file="tests/test_parsemode.py" line="41" name="test_send_message_with_parse_mode_html" time="0.067"/>
  <testcase classname="tests.test_passport.TestPassport" file="tests/test_passport.py" line="232" name="test_creation" time="0.001"/>
  <testcase classname="tests.test_passport.TestPassport" file="tests/test_passport.py" line="235" name="test_expected_encrypted_values" time="0.001"/>
  <testcase classname="tests.test_passport.TestPassport" file="tests/test_passport.py" line="304" name="test_expected_decrypted_values" time="0.003"/>
  <testcase classname="tests.test_passport.TestPassport" file="tests/test_passport.py" line="372" name="test_all_types" time="0.003"/>
  <testcase classname="tests.test_passport.TestPassport" file="tests/test_passport.py" line="405" name="test_bot_init_invalid_key" time="0.001"/>
  <testcase classname="tests.test_passport.TestPassport" file="tests/test_passport.py" line="412" name="test_passport_data_okay_with_non_crypto_bot" time="0.001"/>
  <testcase classname="tests.test_passport.TestPassport" file="tests/test_passport.py" line="416" name="test_wrong_hash" time="0.001"/>
  <testcase classname="tests.test_passport.TestPassport" file="tests/test_passport.py" line="423" name="test_wrong_key" time="0.008"/>
  <testcase classname="tests.test_passport.TestPassport" file="tests/test_passport.py" line="436" name="test_mocked_download_passport_file" time="0.002"/>
  <testcase classname="tests.test_passport.TestPassport" file="tests/test_passport.py" line="454" name="test_mocked_set_passport_data_errors" time="0.002"/>
  <testcase classname="tests.test_passport.TestPassport" file="tests/test_passport.py" line="489" name="test_de_json_and_to_dict" time="0.002"/>
  <testcase classname="tests.test_passport.TestPassport" file="tests/test_passport.py" line="496" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_passportelementerrordatafield.TestPassportElementErrorDataField" file="tests/test_passportelementerrordatafield.py" line="41" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_passportelementerrordatafield.TestPassportElementErrorDataField" file="tests/test_passportelementerrordatafield.py" line="48" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_passportelementerrordatafield.TestPassportElementErrorDataField" file="tests/test_passportelementerrordatafield.py" line="73" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_passportelementerrorfile.TestPassportElementErrorFile" file="tests/test_passportelementerrorfile.py" line="39" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_passportelementerrorfile.TestPassportElementErrorFile" file="tests/test_passportelementerrorfile.py" line="45" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_passportelementerrorfile.TestPassportElementErrorFile" file="tests/test_passportelementerrorfile.py" line="56" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_passportelementerrorfiles.TestPassportElementErrorFiles" file="tests/test_passportelementerrorfiles.py" line="39" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_passportelementerrorfiles.TestPassportElementErrorFiles" file="tests/test_passportelementerrorfiles.py" line="46" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_passportelementerrorfiles.TestPassportElementErrorFiles" file="tests/test_passportelementerrorfiles.py" line="58" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_passportelementerrorfrontside.TestPassportElementErrorFrontSide" file="tests/test_passportelementerrorfrontside.py" line="39" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_passportelementerrorfrontside.TestPassportElementErrorFrontSide" file="tests/test_passportelementerrorfrontside.py" line="45" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_passportelementerrorfrontside.TestPassportElementErrorFrontSide" file="tests/test_passportelementerrorfrontside.py" line="66" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_passportelementerrorreverseside.TestPassportElementErrorReverseSide" file="tests/test_passportelementerrorreverseside.py" line="39" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_passportelementerrorreverseside.TestPassportElementErrorReverseSide" file="tests/test_passportelementerrorreverseside.py" line="45" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_passportelementerrorreverseside.TestPassportElementErrorReverseSide" file="tests/test_passportelementerrorreverseside.py" line="66" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_passportelementerrorselfie.TestPassportElementErrorSelfie" file="tests/test_passportelementerrorselfie.py" line="39" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_passportelementerrorselfie.TestPassportElementErrorSelfie" file="tests/test_passportelementerrorselfie.py" line="45" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_passportelementerrorselfie.TestPassportElementErrorSelfie" file="tests/test_passportelementerrorselfie.py" line="59" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_passportelementerrortranslationfile.TestPassportElementErrorTranslationFile" file="tests/test_passportelementerrortranslationfile.py" line="39" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_passportelementerrortranslationfile.TestPassportElementErrorTranslationFile" file="tests/test_passportelementerrortranslationfile.py" line="45" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_passportelementerrortranslationfile.TestPassportElementErrorTranslationFile" file="tests/test_passportelementerrortranslationfile.py" line="68" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_passportelementerrortranslationfiles.TestPassportElementErrorTranslationFiles" file="tests/test_passportelementerrortranslationfiles.py" line="39" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_passportelementerrortranslationfiles.TestPassportElementErrorTranslationFiles" file="tests/test_passportelementerrortranslationfiles.py" line="46" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_passportelementerrortranslationfiles.TestPassportElementErrorTranslationFiles" file="tests/test_passportelementerrortranslationfiles.py" line="69" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_passportelementerrorunspecified.TestPassportElementErrorUnspecified" file="tests/test_passportelementerrorunspecified.py" line="39" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_passportelementerrorunspecified.TestPassportElementErrorUnspecified" file="tests/test_passportelementerrorunspecified.py" line="45" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_passportelementerrorunspecified.TestPassportElementErrorUnspecified" file="tests/test_passportelementerrorunspecified.py" line="66" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_passportfile.TestPassportFile" file="tests/test_passportfile.py" line="40" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_passportfile.TestPassportFile" file="tests/test_passportfile.py" line="46" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_passportfile.TestPassportFile" file="tests/test_passportfile.py" line="55" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_persistence.TestBasePersistence" file="tests/test_persistence.py" line="134" name="test_creation" time="0.019"/>
  <testcase classname="tests.test_persistence.TestBasePersistence" file="tests/test_persistence.py" line="139" name="test_abstract_methods" time="0.001"/>
  <testcase classname="tests.test_persistence.TestBasePersistence" file="tests/test_persistence.py" line="150" name="test_implementation" time="0.001"/>
  <testcase classname="tests.test_persistence.TestBasePersistence" file="tests/test_persistence.py" line="154" name="test_conversationhandler_addition" time="0.001"/>
  <testcase classname="tests.test_persistence.TestBasePersistence" file="tests/test_persistence.py" line="161" name="test_dispatcher_integration_init" time="0.002"/>
  <testcase classname="tests.test_persistence.TestBasePersistence" file="tests/test_persistence.py" line="205" name="test_dispatcher_integration_handlers" time="0.002"/>
  <testcase classname="tests.test_persistence.TestBasePersistence" file="tests/test_persistence.py" line="311" name="test_dispatcher_integration_handlers_run_async" time="0.209"/>
  <testcase classname="tests.test_persistence.TestBasePersistence" file="tests/test_persistence.py" line="424" name="test_persistence_dispatcher_arbitrary_update_types" time="0.003"/>
  <testcase classname="tests.test_persistence.TestBasePersistence" file="tests/test_persistence.py" line="439" name="test_bot_replace_insert_bot" time="0.002"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="652" name="test_no_files_present_multi_file" time="0.001"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="662" name="test_no_files_present_single_file" time="0.001"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="669" name="test_with_bad_multi_file" time="0.002"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="679" name="test_with_bad_single_file" time="0.002"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="690" name="test_with_good_multi_file" time="0.002"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="722" name="test_with_good_single_file" time="0.002"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="755" name="test_with_multi_file_wo_bot_data" time="0.002"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="785" name="test_with_single_file_wo_bot_data" time="0.002"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="803" name="test_updating_multi_file" time="0.003"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="840" name="test_updating_single_file" time="0.003"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="879" name="test_save_on_flush_multi_files" time="0.003"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="945" name="test_save_on_flush_single_files" time="0.003"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="1005" name="test_with_handler" time="0.003"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="1048" name="test_flush_on_stop" time="0.002"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="1070" name="test_flush_on_stop_only_bot" time="0.002"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="1093" name="test_flush_on_stop_only_chat" time="0.002"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="1115" name="test_flush_on_stop_only_user" time="0.002"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="1137" name="test_with_conversationHandler" time="0.003"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="1170" name="test_with_nested_conversationHandler" time="0.003"/>
  <testcase classname="tests.test_persistence.TestPickelPersistence" file="tests/test_persistence.py" line="1222" name="test_with_job" time="0.061"/>
  <testcase classname="tests.test_persistence.TestDictPersistence" file="tests/test_persistence.py" line="1264" name="test_no_json_given" time="0.002"/>
  <testcase classname="tests.test_persistence.TestDictPersistence" file="tests/test_persistence.py" line="1271" name="test_bad_json_string_given" time="0.002"/>
  <testcase classname="tests.test_persistence.TestDictPersistence" file="tests/test_persistence.py" line="1285" name="test_invalid_json_string_given" time="0.002"/>
  <testcase classname="tests.test_persistence.TestDictPersistence" file="tests/test_persistence.py" line="1299" name="test_good_json_input" time="0.002"/>
  <testcase classname="tests.test_persistence.TestDictPersistence" file="tests/test_persistence.py" line="1339" name="test_dict_outputs" time="0.002"/>
  <testcase classname="tests.test_persistence.TestDictPersistence" file="tests/test_persistence.py" line="1361" name="test_json_outputs" time="0.002"/>
  <testcase classname="tests.test_persistence.TestDictPersistence" file="tests/test_persistence.py" line="1373" name="test_json_changes" time="0.002"/>
  <testcase classname="tests.test_persistence.TestDictPersistence" file="tests/test_persistence.py" line="1421" name="test_with_handler" time="0.002"/>
  <testcase classname="tests.test_persistence.TestDictPersistence" file="tests/test_persistence.py" line="1464" name="test_with_conversationHandler" time="0.002"/>
  <testcase classname="tests.test_persistence.TestDictPersistence" file="tests/test_persistence.py" line="1498" name="test_with_nested_conversationHandler" time="0.002"/>
  <testcase classname="tests.test_persistence.TestDictPersistence" file="tests/test_persistence.py" line="1549" name="test_with_job" time="0.059"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="62" name="test_creation" time="0.127"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="76" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="84" name="test_send_photo_all_args" time="0.105"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="115" name="test_send_photo_parse_mode_markdown" time="0.072"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="140" name="test_send_photo_parse_mode_html" time="0.070"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="165" name="test_send_photo_default_parse_mode_1[default_bot0]" time="0.097"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="176" name="test_send_photo_default_parse_mode_2[default_bot0]" time="0.081"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="188" name="test_send_photo_default_parse_mode_3[default_bot0]" time="0.070"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="200" name="test_get_and_download" time="0.080"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="213" name="test_send_url_jpg_file" time="0.062"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="236" name="test_send_url_png_file" time="0.068"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="251" name="test_send_url_gif_file" time="0.070"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="266" name="test_send_file_unicode_filename" time="0.074"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="283" name="test_send_bytesio_jpg_file" time="0.074"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="312" name="test_send_with_photosize" time="0.001"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="320" name="test_resend" time="0.067"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="345" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="361" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="371" name="test_error_send_empty_file" time="0.026"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="377" name="test_error_send_empty_file_id" time="0.028"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="383" name="test_error_without_required_args" time="0.001"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="387" name="test_get_file_instance_method" time="0.028"/>
  <testcase classname="tests.test_photo.TestPhoto" file="tests/test_photo.py" line="394" name="test_equality" time="0.002"/>
  <testcase classname="tests.test_poll.TestPollOption" file="tests/test_poll.py" line="37" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_poll.TestPollOption" file="tests/test_poll.py" line="44" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_poll.TestPollOption" file="tests/test_poll.py" line="51" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_poll.TestPollAnswer" file="tests/test_poll.py" line="83" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_poll.TestPollAnswer" file="tests/test_poll.py" line="95" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_poll.TestPollAnswer" file="tests/test_poll.py" line="103" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_poll.TestPoll" file="tests/test_poll.py" line="158" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_poll.TestPoll" file="tests/test_poll.py" line="193" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_poll.TestPoll" file="tests/test_poll.py" line="210" name="test_parse_entity" time="0.000"/>
  <testcase classname="tests.test_poll.TestPoll" file="tests/test_poll.py" line="216" name="test_parse_entities" time="0.000"/>
  <testcase classname="tests.test_poll.TestPoll" file="tests/test_poll.py" line="224" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_pollanswerhandler.TestPollAnswerHandler" file="tests/test_pollanswerhandler.py" line="110" name="test_basic" time="0.001"/>
  <testcase classname="tests.test_pollanswerhandler.TestPollAnswerHandler" file="tests/test_pollanswerhandler.py" line="119" name="test_pass_user_or_chat_data" time="0.001"/>
  <testcase classname="tests.test_pollanswerhandler.TestPollAnswerHandler" file="tests/test_pollanswerhandler.py" line="142" name="test_pass_job_or_update_queue" time="0.001"/>
  <testcase classname="tests.test_pollanswerhandler.TestPollAnswerHandler" file="tests/test_pollanswerhandler.py" line="167" name="test_other_update_types[message]" time="0.001"/>
  <testcase classname="tests.test_pollanswerhandler.TestPollAnswerHandler" file="tests/test_pollanswerhandler.py" line="167" name="test_other_update_types[edited_message]" time="0.001"/>
  <testcase classname="tests.test_pollanswerhandler.TestPollAnswerHandler" file="tests/test_pollanswerhandler.py" line="167" name="test_other_update_types[callback_query]" time="0.001"/>
  <testcase classname="tests.test_pollanswerhandler.TestPollAnswerHandler" file="tests/test_pollanswerhandler.py" line="167" name="test_other_update_types[channel_post]" time="0.001"/>
  <testcase classname="tests.test_pollanswerhandler.TestPollAnswerHandler" file="tests/test_pollanswerhandler.py" line="167" name="test_other_update_types[edited_channel_post]" time="0.001"/>
  <testcase classname="tests.test_pollanswerhandler.TestPollAnswerHandler" file="tests/test_pollanswerhandler.py" line="167" name="test_other_update_types[chosen_inline_result]" time="0.001"/>
  <testcase classname="tests.test_pollanswerhandler.TestPollAnswerHandler" file="tests/test_pollanswerhandler.py" line="167" name="test_other_update_types[shipping_query]" time="0.001"/>
  <testcase classname="tests.test_pollanswerhandler.TestPollAnswerHandler" file="tests/test_pollanswerhandler.py" line="167" name="test_other_update_types[pre_checkout_query]" time="0.001"/>
  <testcase classname="tests.test_pollanswerhandler.TestPollAnswerHandler" file="tests/test_pollanswerhandler.py" line="167" name="test_other_update_types[callback_query_without_message]" time="0.001"/>
  <testcase classname="tests.test_pollanswerhandler.TestPollAnswerHandler" file="tests/test_pollanswerhandler.py" line="171" name="test_context" time="0.001"/>
  <testcase classname="tests.test_pollhandler.TestPollHandler" file="tests/test_pollhandler.py" line="123" name="test_basic" time="0.001"/>
  <testcase classname="tests.test_pollhandler.TestPollHandler" file="tests/test_pollhandler.py" line="132" name="test_pass_user_or_chat_data" time="0.001"/>
  <testcase classname="tests.test_pollhandler.TestPollHandler" file="tests/test_pollhandler.py" line="155" name="test_pass_job_or_update_queue" time="0.001"/>
  <testcase classname="tests.test_pollhandler.TestPollHandler" file="tests/test_pollhandler.py" line="178" name="test_other_update_types[message]" time="0.000"/>
  <testcase classname="tests.test_pollhandler.TestPollHandler" file="tests/test_pollhandler.py" line="178" name="test_other_update_types[edited_message]" time="0.000"/>
  <testcase classname="tests.test_pollhandler.TestPollHandler" file="tests/test_pollhandler.py" line="178" name="test_other_update_types[callback_query]" time="0.001"/>
  <testcase classname="tests.test_pollhandler.TestPollHandler" file="tests/test_pollhandler.py" line="178" name="test_other_update_types[channel_post]" time="0.001"/>
  <testcase classname="tests.test_pollhandler.TestPollHandler" file="tests/test_pollhandler.py" line="178" name="test_other_update_types[edited_channel_post]" time="0.000"/>
  <testcase classname="tests.test_pollhandler.TestPollHandler" file="tests/test_pollhandler.py" line="178" name="test_other_update_types[chosen_inline_result]" time="0.001"/>
  <testcase classname="tests.test_pollhandler.TestPollHandler" file="tests/test_pollhandler.py" line="178" name="test_other_update_types[shipping_query]" time="0.000"/>
  <testcase classname="tests.test_pollhandler.TestPollHandler" file="tests/test_pollhandler.py" line="178" name="test_other_update_types[pre_checkout_query]" time="0.000"/>
  <testcase classname="tests.test_pollhandler.TestPollHandler" file="tests/test_pollhandler.py" line="178" name="test_other_update_types[callback_query_without_message]" time="0.000"/>
  <testcase classname="tests.test_pollhandler.TestPollHandler" file="tests/test_pollhandler.py" line="182" name="test_context" time="0.001"/>
  <testcase classname="tests.test_precheckoutquery.TestPreCheckoutQuery" file="tests/test_precheckoutquery.py" line="47" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_precheckoutquery.TestPreCheckoutQuery" file="tests/test_precheckoutquery.py" line="67" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_precheckoutquery.TestPreCheckoutQuery" file="tests/test_precheckoutquery.py" line="80" name="test_answer" time="0.000"/>
  <testcase classname="tests.test_precheckoutquery.TestPreCheckoutQuery" file="tests/test_precheckoutquery.py" line="87" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_precheckoutqueryhandler.TestPreCheckoutQueryHandler" file="tests/test_precheckoutqueryhandler.py" line="115" name="test_basic" time="0.001"/>
  <testcase classname="tests.test_precheckoutqueryhandler.TestPreCheckoutQueryHandler" file="tests/test_precheckoutqueryhandler.py" line="123" name="test_pass_user_or_chat_data" time="0.001"/>
  <testcase classname="tests.test_precheckoutqueryhandler.TestPreCheckoutQueryHandler" file="tests/test_precheckoutqueryhandler.py" line="148" name="test_pass_job_or_update_queue" time="0.001"/>
  <testcase classname="tests.test_precheckoutqueryhandler.TestPreCheckoutQueryHandler" file="tests/test_precheckoutqueryhandler.py" line="173" name="test_other_update_types[message]" time="0.001"/>
  <testcase classname="tests.test_precheckoutqueryhandler.TestPreCheckoutQueryHandler" file="tests/test_precheckoutqueryhandler.py" line="173" name="test_other_update_types[edited_message]" time="0.001"/>
  <testcase classname="tests.test_precheckoutqueryhandler.TestPreCheckoutQueryHandler" file="tests/test_precheckoutqueryhandler.py" line="173" name="test_other_update_types[callback_query]" time="0.000"/>
  <testcase classname="tests.test_precheckoutqueryhandler.TestPreCheckoutQueryHandler" file="tests/test_precheckoutqueryhandler.py" line="173" name="test_other_update_types[channel_post]" time="0.000"/>
  <testcase classname="tests.test_precheckoutqueryhandler.TestPreCheckoutQueryHandler" file="tests/test_precheckoutqueryhandler.py" line="173" name="test_other_update_types[edited_channel_post]" time="0.000"/>
  <testcase classname="tests.test_precheckoutqueryhandler.TestPreCheckoutQueryHandler" file="tests/test_precheckoutqueryhandler.py" line="173" name="test_other_update_types[inline_query]" time="0.000"/>
  <testcase classname="tests.test_precheckoutqueryhandler.TestPreCheckoutQueryHandler" file="tests/test_precheckoutqueryhandler.py" line="173" name="test_other_update_types[chosen_inline_result]" time="0.000"/>
  <testcase classname="tests.test_precheckoutqueryhandler.TestPreCheckoutQueryHandler" file="tests/test_precheckoutqueryhandler.py" line="173" name="test_other_update_types[shipping_query]" time="0.000"/>
  <testcase classname="tests.test_precheckoutqueryhandler.TestPreCheckoutQueryHandler" file="tests/test_precheckoutqueryhandler.py" line="173" name="test_other_update_types[callback_query_without_message]" time="0.000"/>
  <testcase classname="tests.test_precheckoutqueryhandler.TestPreCheckoutQueryHandler" file="tests/test_precheckoutqueryhandler.py" line="177" name="test_context" time="0.001"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="119" name="test_deprecation_Warning" time="0.001"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="123" name="test_basic" time="0.001"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="131" name="test_pattern" time="0.001"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="139" name="test_with_passing_group_dict" time="0.001"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="157" name="test_edited" time="0.000"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="171" name="test_channel_post" time="0.000"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="185" name="test_multiple_flags" time="0.000"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="199" name="test_none_allowed" time="0.000"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="209" name="test_pass_user_or_chat_data" time="0.001"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="234" name="test_pass_job_or_update_queue" time="0.001"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="259" name="test_other_update_types[callback_query]" time="0.000"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="259" name="test_other_update_types[inline_query]" time="0.000"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="259" name="test_other_update_types[chosen_inline_result]" time="0.000"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="259" name="test_other_update_types[shipping_query]" time="0.000"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="259" name="test_other_update_types[pre_checkout_query]" time="0.000"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="259" name="test_other_update_types[callback_query_without_message]" time="0.000"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="263" name="test_context" time="0.001"/>
  <testcase classname="tests.test_regexhandler.TestRegexHandler" file="tests/test_regexhandler.py" line="270" name="test_context_pattern" time="0.001"/>
  <testcase classname="tests.test_replykeyboardmarkup.TestReplyKeyboardMarkup" file="tests/test_replykeyboardmarkup.py" line="41" name="test_send_message_with_reply_keyboard_markup" time="0.053"/>
  <testcase classname="tests.test_replykeyboardmarkup.TestReplyKeyboardMarkup" file="tests/test_replykeyboardmarkup.py" line="48" name="test_send_message_with_data_markup" time="0.056"/>
  <testcase classname="tests.test_replykeyboardmarkup.TestReplyKeyboardMarkup" file="tests/test_replykeyboardmarkup.py" line="55" name="test_from_button" time="0.001"/>
  <testcase classname="tests.test_replykeyboardmarkup.TestReplyKeyboardMarkup" file="tests/test_replykeyboardmarkup.py" line="66" name="test_from_row" time="0.001"/>
  <testcase classname="tests.test_replykeyboardmarkup.TestReplyKeyboardMarkup" file="tests/test_replykeyboardmarkup.py" line="77" name="test_from_column" time="0.001"/>
  <testcase classname="tests.test_replykeyboardmarkup.TestReplyKeyboardMarkup" file="tests/test_replykeyboardmarkup.py" line="90" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_replykeyboardmarkup.TestReplyKeyboardMarkup" file="tests/test_replykeyboardmarkup.py" line="98" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_replykeyboardmarkup.TestReplyKeyboardMarkup" file="tests/test_replykeyboardmarkup.py" line="119" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_replykeyboardremove.TestReplyKeyboardRemove" file="tests/test_replykeyboardremove.py" line="34" name="test_send_message_with_reply_keyboard_remove" time="0.046"/>
  <testcase classname="tests.test_replykeyboardremove.TestReplyKeyboardRemove" file="tests/test_replykeyboardremove.py" line="41" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_replykeyboardremove.TestReplyKeyboardRemove" file="tests/test_replykeyboardremove.py" line="45" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_request" file="tests/test_request.py" line="25" name="test_replaced_unprintable_char" time="0.000"/>
  <testcase classname="tests.test_request" file="tests/test_request.py" line="35" name="test_parse_illegal_json" time="0.001"/>
  <testcase classname="tests.test_shippingaddress.TestShippingAddress" file="tests/test_shippingaddress.py" line="44" name="test_de_json" time="0.000"/>
  <testcase classname="tests.test_shippingaddress.TestShippingAddress" file="tests/test_shippingaddress.py" line="62" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_shippingaddress.TestShippingAddress" file="tests/test_shippingaddress.py" line="73" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_shippingoption.TestShippingOption" file="tests/test_shippingoption.py" line="36" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_shippingoption.TestShippingOption" file="tests/test_shippingoption.py" line="41" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_shippingoption.TestShippingOption" file="tests/test_shippingoption.py" line="50" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_shippingquery.TestShippingQuery" file="tests/test_shippingquery.py" line="41" name="test_de_json" time="0.000"/>
  <testcase classname="tests.test_shippingquery.TestShippingQuery" file="tests/test_shippingquery.py" line="56" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_shippingquery.TestShippingQuery" file="tests/test_shippingquery.py" line="65" name="test_answer" time="0.001"/>
  <testcase classname="tests.test_shippingquery.TestShippingQuery" file="tests/test_shippingquery.py" line="72" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_shippingqueryhandler.TestShippingQueryHandler" file="tests/test_shippingqueryhandler.py" line="119" name="test_basic" time="0.001"/>
  <testcase classname="tests.test_shippingqueryhandler.TestShippingQueryHandler" file="tests/test_shippingqueryhandler.py" line="127" name="test_pass_user_or_chat_data" time="0.001"/>
  <testcase classname="tests.test_shippingqueryhandler.TestShippingQueryHandler" file="tests/test_shippingqueryhandler.py" line="152" name="test_pass_job_or_update_queue" time="0.001"/>
  <testcase classname="tests.test_shippingqueryhandler.TestShippingQueryHandler" file="tests/test_shippingqueryhandler.py" line="177" name="test_other_update_types[message]" time="0.001"/>
  <testcase classname="tests.test_shippingqueryhandler.TestShippingQueryHandler" file="tests/test_shippingqueryhandler.py" line="177" name="test_other_update_types[edited_message]" time="0.001"/>
  <testcase classname="tests.test_shippingqueryhandler.TestShippingQueryHandler" file="tests/test_shippingqueryhandler.py" line="177" name="test_other_update_types[callback_query]" time="0.001"/>
  <testcase classname="tests.test_shippingqueryhandler.TestShippingQueryHandler" file="tests/test_shippingqueryhandler.py" line="177" name="test_other_update_types[channel_post]" time="0.001"/>
  <testcase classname="tests.test_shippingqueryhandler.TestShippingQueryHandler" file="tests/test_shippingqueryhandler.py" line="177" name="test_other_update_types[edited_channel_post]" time="0.001"/>
  <testcase classname="tests.test_shippingqueryhandler.TestShippingQueryHandler" file="tests/test_shippingqueryhandler.py" line="177" name="test_other_update_types[inline_query]" time="0.001"/>
  <testcase classname="tests.test_shippingqueryhandler.TestShippingQueryHandler" file="tests/test_shippingqueryhandler.py" line="177" name="test_other_update_types[chosen_inline_result]" time="0.001"/>
  <testcase classname="tests.test_shippingqueryhandler.TestShippingQueryHandler" file="tests/test_shippingqueryhandler.py" line="177" name="test_other_update_types[pre_checkout_query]" time="0.001"/>
  <testcase classname="tests.test_shippingqueryhandler.TestShippingQueryHandler" file="tests/test_shippingqueryhandler.py" line="177" name="test_other_update_types[callback_query_without_message]" time="0.001"/>
  <testcase classname="tests.test_shippingqueryhandler.TestShippingQueryHandler" file="tests/test_shippingqueryhandler.py" line="181" name="test_context" time="0.001"/>
  <testcase classname="tests.test_sticker.TestSticker" file="tests/test_sticker.py" line="75" name="test_creation" time="0.179"/>
  <testcase classname="tests.test_sticker.TestSticker" file="tests/test_sticker.py" line="88" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_sticker.TestSticker" file="tests/test_sticker.py" line="97" name="test_send_all_args" time="0.163"/>
  <testcase classname="tests.test_sticker.TestSticker" file="tests/test_sticker.py" line="121" name="test_get_and_download" time="0.082"/>
  <testcase classname="tests.test_sticker.TestSticker" file="tests/test_sticker.py" line="135" name="test_resend" time="0.057"/>
  <testcase classname="tests.test_sticker.TestSticker" file="tests/test_sticker.py" line="142" name="test_send_on_server_emoji" time="0.066"/>
  <testcase classname="tests.test_sticker.TestSticker" file="tests/test_sticker.py" line="150" name="test_send_from_url" time="0.067"/>
  <testcase classname="tests.test_sticker.TestSticker" file="tests/test_sticker.py" line="175" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_sticker.TestSticker" file="tests/test_sticker.py" line="197" name="test_send_with_sticker" time="0.001"/>
  <testcase classname="tests.test_sticker.TestSticker" file="tests/test_sticker.py" line="205" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_sticker.TestSticker" file="tests/test_sticker.py" line="217" name="test_error_send_empty_file" time="0.024"/>
  <testcase classname="tests.test_sticker.TestSticker" file="tests/test_sticker.py" line="223" name="test_error_send_empty_file_id" time="0.028"/>
  <testcase classname="tests.test_sticker.TestSticker" file="tests/test_sticker.py" line="229" name="test_error_without_required_args" time="0.001"/>
  <testcase classname="tests.test_sticker.TestSticker" file="tests/test_sticker.py" line="233" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_sticker.TestStickerSet" file="tests/test_sticker.py" line="296" name="test_de_json" time="0.165"/>
  <testcase classname="tests.test_sticker.TestStickerSet" file="tests/test_sticker.py" line="315" name="test_bot_methods_1_png" time="1.001"/>
  <testcase classname="tests.test_sticker.TestStickerSet" file="tests/test_sticker.py" line="333" name="test_bot_methods_1_tgs" time="1.535"/>
  <testcase classname="tests.test_sticker.TestStickerSet" file="tests/test_sticker.py" line="343" name="test_sticker_set_to_dict" time="0.068"/>
  <testcase classname="tests.test_sticker.TestStickerSet" file="tests/test_sticker.py" line="353" name="test_bot_methods_2_png" time="0.086"/>
  <testcase classname="tests.test_sticker.TestStickerSet" file="tests/test_sticker.py" line="359" name="test_bot_methods_2_tgs" time="0.077"/>
  <testcase classname="tests.test_sticker.TestStickerSet" file="tests/test_sticker.py" line="365" name="test_bot_methods_3_png" time="1.151"/>
  <testcase classname="tests.test_sticker.TestStickerSet" file="tests/test_sticker.py" line="373" name="test_bot_methods_3_tgs" time="2.455"/>
  <testcase classname="tests.test_sticker.TestStickerSet" file="tests/test_sticker.py" line="386" name="test_bot_methods_4_png" time="1.114"/>
  <testcase classname="tests.test_sticker.TestStickerSet" file="tests/test_sticker.py" line="393" name="test_bot_methods_4_tgs" time="1.095"/>
  <testcase classname="tests.test_sticker.TestStickerSet" file="tests/test_sticker.py" line="400" name="test_get_file_instance_method" time="0.046"/>
  <testcase classname="tests.test_sticker.TestStickerSet" file="tests/test_sticker.py" line="407" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_sticker.TestMaskPosition" file="tests/test_sticker.py" line="444" name="test_mask_position_de_json" time="0.001"/>
  <testcase classname="tests.test_sticker.TestMaskPosition" file="tests/test_sticker.py" line="458" name="test_mask_position_to_dict" time="0.001"/>
  <testcase classname="tests.test_sticker.TestMaskPosition" file="tests/test_sticker.py" line="467" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_stringcommandhandler.TestStringCommandHandler" file="tests/test_stringcommandhandler.py" line="109" name="test_basic" time="0.001"/>
  <testcase classname="tests.test_stringcommandhandler.TestStringCommandHandler" file="tests/test_stringcommandhandler.py" line="125" name="test_pass_args" time="0.001"/>
  <testcase classname="tests.test_stringcommandhandler.TestStringCommandHandler" file="tests/test_stringcommandhandler.py" line="136" name="test_pass_job_or_update_queue" time="0.001"/>
  <testcase classname="tests.test_stringcommandhandler.TestStringCommandHandler" file="tests/test_stringcommandhandler.py" line="161" name="test_other_update_types[message]" time="0.001"/>
  <testcase classname="tests.test_stringcommandhandler.TestStringCommandHandler" file="tests/test_stringcommandhandler.py" line="161" name="test_other_update_types[edited_message]" time="0.001"/>
  <testcase classname="tests.test_stringcommandhandler.TestStringCommandHandler" file="tests/test_stringcommandhandler.py" line="161" name="test_other_update_types[callback_query]" time="0.001"/>
  <testcase classname="tests.test_stringcommandhandler.TestStringCommandHandler" file="tests/test_stringcommandhandler.py" line="161" name="test_other_update_types[channel_post]" time="0.001"/>
  <testcase classname="tests.test_stringcommandhandler.TestStringCommandHandler" file="tests/test_stringcommandhandler.py" line="161" name="test_other_update_types[edited_channel_post]" time="0.001"/>
  <testcase classname="tests.test_stringcommandhandler.TestStringCommandHandler" file="tests/test_stringcommandhandler.py" line="161" name="test_other_update_types[inline_query]" time="0.001"/>
  <testcase classname="tests.test_stringcommandhandler.TestStringCommandHandler" file="tests/test_stringcommandhandler.py" line="161" name="test_other_update_types[chosen_inline_result]" time="0.001"/>
  <testcase classname="tests.test_stringcommandhandler.TestStringCommandHandler" file="tests/test_stringcommandhandler.py" line="161" name="test_other_update_types[shipping_query]" time="0.001"/>
  <testcase classname="tests.test_stringcommandhandler.TestStringCommandHandler" file="tests/test_stringcommandhandler.py" line="161" name="test_other_update_types[pre_checkout_query]" time="0.001"/>
  <testcase classname="tests.test_stringcommandhandler.TestStringCommandHandler" file="tests/test_stringcommandhandler.py" line="161" name="test_other_update_types[callback_query_without_message]" time="0.001"/>
  <testcase classname="tests.test_stringcommandhandler.TestStringCommandHandler" file="tests/test_stringcommandhandler.py" line="165" name="test_context" time="0.001"/>
  <testcase classname="tests.test_stringcommandhandler.TestStringCommandHandler" file="tests/test_stringcommandhandler.py" line="172" name="test_context_args" time="0.001"/>
  <testcase classname="tests.test_stringregexhandler.TestStringRegexHandler" file="tests/test_stringregexhandler.py" line="109" name="test_basic" time="0.001"/>
  <testcase classname="tests.test_stringregexhandler.TestStringRegexHandler" file="tests/test_stringregexhandler.py" line="119" name="test_with_passing_group_dict" time="0.001"/>
  <testcase classname="tests.test_stringregexhandler.TestStringRegexHandler" file="tests/test_stringregexhandler.py" line="138" name="test_pass_job_or_update_queue" time="0.001"/>
  <testcase classname="tests.test_stringregexhandler.TestStringRegexHandler" file="tests/test_stringregexhandler.py" line="163" name="test_other_update_types[message]" time="0.001"/>
  <testcase classname="tests.test_stringregexhandler.TestStringRegexHandler" file="tests/test_stringregexhandler.py" line="163" name="test_other_update_types[edited_message]" time="0.001"/>
  <testcase classname="tests.test_stringregexhandler.TestStringRegexHandler" file="tests/test_stringregexhandler.py" line="163" name="test_other_update_types[callback_query]" time="0.001"/>
  <testcase classname="tests.test_stringregexhandler.TestStringRegexHandler" file="tests/test_stringregexhandler.py" line="163" name="test_other_update_types[channel_post]" time="0.001"/>
  <testcase classname="tests.test_stringregexhandler.TestStringRegexHandler" file="tests/test_stringregexhandler.py" line="163" name="test_other_update_types[edited_channel_post]" time="0.001"/>
  <testcase classname="tests.test_stringregexhandler.TestStringRegexHandler" file="tests/test_stringregexhandler.py" line="163" name="test_other_update_types[inline_query]" time="0.001"/>
  <testcase classname="tests.test_stringregexhandler.TestStringRegexHandler" file="tests/test_stringregexhandler.py" line="163" name="test_other_update_types[chosen_inline_result]" time="0.001"/>
  <testcase classname="tests.test_stringregexhandler.TestStringRegexHandler" file="tests/test_stringregexhandler.py" line="163" name="test_other_update_types[shipping_query]" time="0.001"/>
  <testcase classname="tests.test_stringregexhandler.TestStringRegexHandler" file="tests/test_stringregexhandler.py" line="163" name="test_other_update_types[pre_checkout_query]" time="0.001"/>
  <testcase classname="tests.test_stringregexhandler.TestStringRegexHandler" file="tests/test_stringregexhandler.py" line="163" name="test_other_update_types[callback_query_without_message]" time="0.001"/>
  <testcase classname="tests.test_stringregexhandler.TestStringRegexHandler" file="tests/test_stringregexhandler.py" line="167" name="test_context" time="0.001"/>
  <testcase classname="tests.test_stringregexhandler.TestStringRegexHandler" file="tests/test_stringregexhandler.py" line="174" name="test_context_pattern" time="0.001"/>
  <testcase classname="tests.test_successfulpayment.TestSuccessfulPayment" file="tests/test_successfulpayment.py" line="46" name="test_de_json" time="0.000"/>
  <testcase classname="tests.test_successfulpayment.TestSuccessfulPayment" file="tests/test_successfulpayment.py" line="65" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_successfulpayment.TestSuccessfulPayment" file="tests/test_successfulpayment.py" line="84" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_telegramobject.TestTelegramObject" file="tests/test_telegramobject.py" line="32" name="test_to_json_native" time="0.001"/>
  <testcase classname="tests.test_telegramobject.TestTelegramObject" file="tests/test_telegramobject.py" line="55" name="test_to_json_ujson" time="0.000">
    <skipped message="ujson not installed" type="pytest.skip">tests/test_telegramobject.py:55: ujson not installed</skipped>
  </testcase>
  <testcase classname="tests.test_telegramobject.TestTelegramObject" file="tests/test_telegramobject.py" line="77" name="test_to_dict_private_attribute" time="0.000"/>
  <testcase classname="tests.test_telegramobject.TestTelegramObject" file="tests/test_telegramobject.py" line="86" name="test_meaningless_comparison" time="0.000"/>
  <testcase classname="tests.test_telegramobject.TestTelegramObject" file="tests/test_telegramobject.py" line="99" name="test_meaningful_comparison" time="0.000"/>
  <testcase classname="tests.test_typehandler.TestTypeHandler" file="tests/test_typehandler.py" line="57" name="test_basic" time="0.001"/>
  <testcase classname="tests.test_typehandler.TestTypeHandler" file="tests/test_typehandler.py" line="66" name="test_strict" time="0.000"/>
  <testcase classname="tests.test_typehandler.TestTypeHandler" file="tests/test_typehandler.py" line="72" name="test_pass_job_or_update_queue" time="0.001"/>
  <testcase classname="tests.test_typehandler.TestTypeHandler" file="tests/test_typehandler.py" line="97" name="test_context" time="0.001"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="78" name="test_de_json[message]" time="0.001"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="78" name="test_de_json[edited_message]" time="0.001"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="78" name="test_de_json[callback_query]" time="0.001"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="78" name="test_de_json[channel_post]" time="0.001"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="78" name="test_de_json[edited_channel_post]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="78" name="test_de_json[inline_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="78" name="test_de_json[chosen_inline_result]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="78" name="test_de_json[shipping_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="78" name="test_de_json[pre_checkout_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="78" name="test_de_json[poll]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="78" name="test_de_json[poll_answer]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="78" name="test_de_json[callback_query_without_message]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="95" name="test_update_de_json_empty" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="100" name="test_to_dict[message]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="100" name="test_to_dict[edited_message]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="100" name="test_to_dict[callback_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="100" name="test_to_dict[channel_post]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="100" name="test_to_dict[edited_channel_post]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="100" name="test_to_dict[inline_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="100" name="test_to_dict[chosen_inline_result]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="100" name="test_to_dict[shipping_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="100" name="test_to_dict[pre_checkout_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="100" name="test_to_dict[poll]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="100" name="test_to_dict[poll_answer]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="100" name="test_to_dict[callback_query_without_message]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="109" name="test_effective_chat[message]" time="0.001"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="109" name="test_effective_chat[edited_message]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="109" name="test_effective_chat[callback_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="109" name="test_effective_chat[channel_post]" time="0.001"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="109" name="test_effective_chat[edited_channel_post]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="109" name="test_effective_chat[inline_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="109" name="test_effective_chat[chosen_inline_result]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="109" name="test_effective_chat[shipping_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="109" name="test_effective_chat[pre_checkout_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="109" name="test_effective_chat[poll]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="109" name="test_effective_chat[poll_answer]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="109" name="test_effective_chat[callback_query_without_message]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="125" name="test_effective_user[message]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="125" name="test_effective_user[edited_message]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="125" name="test_effective_user[callback_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="125" name="test_effective_user[channel_post]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="125" name="test_effective_user[edited_channel_post]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="125" name="test_effective_user[inline_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="125" name="test_effective_user[chosen_inline_result]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="125" name="test_effective_user[shipping_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="125" name="test_effective_user[pre_checkout_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="125" name="test_effective_user[poll]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="125" name="test_effective_user[poll_answer]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="125" name="test_effective_user[callback_query_without_message]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="137" name="test_effective_message[message]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="137" name="test_effective_message[edited_message]" time="0.001"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="137" name="test_effective_message[callback_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="137" name="test_effective_message[channel_post]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="137" name="test_effective_message[edited_channel_post]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="137" name="test_effective_message[inline_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="137" name="test_effective_message[chosen_inline_result]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="137" name="test_effective_message[shipping_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="137" name="test_effective_message[pre_checkout_query]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="137" name="test_effective_message[poll]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="137" name="test_effective_message[poll_answer]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="137" name="test_effective_message[callback_query_without_message]" time="0.000"/>
  <testcase classname="tests.test_update.TestUpdate" file="tests/test_update.py" line="153" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="91" name="test_get_updates_normal_err[TelegramError]" time="1.104"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="91" name="test_get_updates_normal_err[Unauthorized]" time="1.102"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="113" name="test_get_updates_bailout_err" time="2.054">
    <system-out>['Scheduler started',
 'Looking for jobs to run',
 'No jobs; waiting until a job is added',
 'Bot:579694714:dispatcher - started',
 'Bot:579694714:updater - started',
 'Updater thread started (polling)',
 'Start network loop retry bootstrap del webhook',
 'Entering: delete_webhook',
 'Waiting for Dispatcher and polling to start',
 'Dispatcher started',
 'https://api.telegram.org:443 "POST '
 '/bot579694714:AAHRLL5zBVy4Blx2jRFKe1HlfnXCg08WuLY/deleteWebhook HTTP/1.1" '
 '200 68',
 'True',
 'Exiting: delete_webhook',
 'Bootstrap done',
 'Start network loop retry getting Updates',
 'Invalid token; aborting',
 'unhandled exception in Bot:579694714:updater',
 'stopping due to exception in another thread',
 'Dispatcher thread stopped',
 'Bot:579694714:dispatcher - ended']
</system-out>
    <system-err>Exception in thread Bot:579694714:updater:
Traceback (most recent call last):
  File "/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", line 926, in _bootstrap_inner
    self.run()
  File "/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", line 870, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/guillaume.haben/Documents/Work/projects/pythonDataset/projects/python-telegram-bot/telegram/ext/updater.py", line 236, in _thread_wrapper
    target(*args, **kwargs)
  File "/Users/guillaume.haben/Documents/Work/projects/pythonDataset/projects/python-telegram-bot/telegram/ext/updater.py", line 442, in _start_polling
    polling_action_cb, polling_onerr_cb, 'getting Updates', poll_interval
  File "/Users/guillaume.haben/Documents/Work/projects/pythonDataset/projects/python-telegram-bot/telegram/ext/updater.py", line 476, in _network_loop_retry
    raise pex
  File "/Users/guillaume.haben/Documents/Work/projects/pythonDataset/projects/python-telegram-bot/telegram/ext/updater.py", line 465, in _network_loop_retry
    if not action_cb():
  File "/Users/guillaume.haben/Documents/Work/projects/pythonDataset/projects/python-telegram-bot/telegram/ext/updater.py", line 420, in polling_action_cb
    allowed_updates=allowed_updates,
  File "/Users/guillaume.haben/Documents/Work/projects/pythonDataset/projects/python-telegram-bot/tests/test_updater.py", line 118, in test
    raise error
telegram.error.InvalidToken: Invalid token

</system-err>
  </testcase>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="140" name="test_get_updates_retries[RetryAfter]" time="2.108"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="140" name="test_get_updates_retries[TimedOut]" time="2.190"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="165" name="test_webhook" time="1.266"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="206" name="test_start_webhook_no_warning_or_error_logs" time="1.043"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="220" name="test_start_webhook_ensure_event_loop" time="0.000">
    <skipped message="Workaround only relevant on windows with py3.8+" type="pytest.skip">tests/test_updater.py:220: Workaround only relevant on windows with py3.8+</skipped>
  </testcase>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="255" name="test_start_webhook_force_event_loop_false" time="0.000">
    <skipped message="Workaround only relevant on windows with py3.8+" type="pytest.skip">tests/test_updater.py:255: Workaround only relevant on windows with py3.8+</skipped>
  </testcase>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="280" name="test_start_webhook_force_event_loop_true" time="0.000">
    <skipped message="Workaround only relevant on windows with py3.8+" type="pytest.skip">tests/test_updater.py:280: Workaround only relevant on windows with py3.8+</skipped>
  </testcase>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="315" name="test_webhook_ssl" time="0.001"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="337" name="test_webhook_no_ssl" time="1.265"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="358" name="test_bootstrap_retries_success[TelegramError]" time="2.516"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="373" name="test_bootstrap_retries_error[TelegramError]" time="1.009"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="373" name="test_bootstrap_retries_error[Unauthorized]" time="0.002"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="373" name="test_bootstrap_retries_error[InvalidToken]" time="0.001"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="392" name="test_bootstrap_clean_updates" time="1.035"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="428" name="test_webhook_invalid_posts" time="0.221"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="505" name="test_idle" time="10.626"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="525" name="test_user_signal" time="10.651"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="541" name="test_create_bot" time="0.001"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="545" name="test_mutual_exclude_token_bot" time="0.001"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="550" name="test_no_token_or_bot_or_dispatcher" time="0.001"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="554" name="test_mutual_exclude_bot_private_key" time="0.001"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="559" name="test_mutual_exclude_bot_dispatcher" time="0.001"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="565" name="test_mutual_exclude_persistence_dispatcher" time="0.001"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="571" name="test_mutual_exclude_workers_dispatcher" time="0.001"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="576" name="test_mutual_exclude_use_context_dispatcher" time="0.001"/>
  <testcase classname="tests.test_updater.TestUpdater" file="tests/test_updater.py" line="582" name="test_defaults_warning" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="66" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="79" name="test_de_json_without_username" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="94" name="test_de_json_without_username_and_last_name" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="110" name="test_name" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="119" name="test_full_name" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="124" name="test_link" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="129" name="test_anonymous_admin" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="134" name="test_service_chat" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="139" name="test_get_profile_photos" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="146" name="test_instance_method_send_message" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="153" name="test_instance_method_send_photo" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="160" name="test_instance_method_send_media_group" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="167" name="test_instance_method_send_audio" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="174" name="test_instance_method_send_chat_action" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="181" name="test_instance_method_send_contact" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="188" name="test_instance_method_send_dice" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="195" name="test_instance_method_send_document" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="202" name="test_instance_method_send_game" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="209" name="test_instance_method_send_invoice" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="216" name="test_instance_method_send_location" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="223" name="test_instance_method_send_sticker" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="230" name="test_instance_method_send_video" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="237" name="test_instance_method_send_venue" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="244" name="test_instance_method_send_video_note" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="251" name="test_instance_method_send_voice" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="258" name="test_instance_method_send_animation" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="265" name="test_instance_method_send_poll" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="272" name="test_mention_html" time="0.000"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="281" name="test_mention_markdown" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="290" name="test_mention_markdown_v2" time="0.001"/>
  <testcase classname="tests.test_user.TestUser" file="tests/test_user.py" line="304" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_userprofilephotos.TestUserProfilePhotos" file="tests/test_userprofilephotos.py" line="34" name="test_de_json" time="0.000"/>
  <testcase classname="tests.test_userprofilephotos.TestUserProfilePhotos" file="tests/test_userprofilephotos.py" line="40" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_userprofilephotos.TestUserProfilePhotos" file="tests/test_userprofilephotos.py" line="48" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_venue.TestVenue" file="tests/test_venue.py" line="42" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_venue.TestVenue" file="tests/test_venue.py" line="58" name="test_send_with_venue" time="0.001"/>
  <testcase classname="tests.test_venue.TestVenue" file="tests/test_venue.py" line="73" name="test_send_venue_without_required" time="0.001"/>
  <testcase classname="tests.test_venue.TestVenue" file="tests/test_venue.py" line="77" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_venue.TestVenue" file="tests/test_venue.py" line="87" name="test_equality" time="0.000"/>
  <testcase classname="tests.test_video.TestVideo" file="tests/test_video.py" line="58" name="test_creation" time="0.389"/>
  <testcase classname="tests.test_video.TestVideo" file="tests/test_video.py" line="72" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_video.TestVideo" file="tests/test_video.py" line="79" name="test_send_all_args" time="0.320"/>
  <testcase classname="tests.test_video.TestVideo" file="tests/test_video.py" line="111" name="test_get_and_download" time="0.345"/>
  <testcase classname="tests.test_video.TestVideo" file="tests/test_video.py" line="125" name="test_send_mp4_file_url" time="0.064"/>
  <testcase classname="tests.test_video.TestVideo" file="tests/test_video.py" line="151" name="test_resend" time="0.057"/>
  <testcase classname="tests.test_video.TestVideo" file="tests/test_video.py" line="158" name="test_send_with_video" time="0.001"/>
  <testcase classname="tests.test_video.TestVideo" file="tests/test_video.py" line="166" name="test_send_video_default_parse_mode_1[default_bot0]" time="0.085"/>
  <testcase classname="tests.test_video.TestVideo" file="tests/test_video.py" line="177" name="test_send_video_default_parse_mode_2[default_bot0]" time="0.053"/>
  <testcase classname="tests.test_video.TestVideo" file="tests/test_video.py" line="189" name="test_send_video_default_parse_mode_3[default_bot0]" time="0.060"/>
  <testcase classname="tests.test_video.TestVideo" file="tests/test_video.py" line="201" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_video.TestVideo" file="tests/test_video.py" line="221" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_video.TestVideo" file="tests/test_video.py" line="233" name="test_error_send_empty_file" time="0.025"/>
  <testcase classname="tests.test_video.TestVideo" file="tests/test_video.py" line="239" name="test_error_send_empty_file_id" time="0.023"/>
  <testcase classname="tests.test_video.TestVideo" file="tests/test_video.py" line="245" name="test_error_without_required_args" time="0.001"/>
  <testcase classname="tests.test_video.TestVideo" file="tests/test_video.py" line="249" name="test_get_file_instance_method" time="0.028"/>
  <testcase classname="tests.test_video.TestVideo" file="tests/test_video.py" line="256" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_videonote.TestVideoNote" file="tests/test_videonote.py" line="52" name="test_creation" time="0.378"/>
  <testcase classname="tests.test_videonote.TestVideoNote" file="tests/test_videonote.py" line="66" name="test_expected_values" time="0.001"/>
  <testcase classname="tests.test_videonote.TestVideoNote" file="tests/test_videonote.py" line="71" name="test_send_all_args" time="0.213"/>
  <testcase classname="tests.test_videonote.TestVideoNote" file="tests/test_videonote.py" line="96" name="test_get_and_download" time="0.178"/>
  <testcase classname="tests.test_videonote.TestVideoNote" file="tests/test_videonote.py" line="110" name="test_resend" time="0.055"/>
  <testcase classname="tests.test_videonote.TestVideoNote" file="tests/test_videonote.py" line="117" name="test_send_with_video_note" time="0.001"/>
  <testcase classname="tests.test_videonote.TestVideoNote" file="tests/test_videonote.py" line="125" name="test_de_json" time="0.000"/>
  <testcase classname="tests.test_videonote.TestVideoNote" file="tests/test_videonote.py" line="141" name="test_to_dict" time="0.000"/>
  <testcase classname="tests.test_videonote.TestVideoNote" file="tests/test_videonote.py" line="151" name="test_error_send_empty_file" time="0.024"/>
  <testcase classname="tests.test_videonote.TestVideoNote" file="tests/test_videonote.py" line="157" name="test_error_send_empty_file_id" time="0.023"/>
  <testcase classname="tests.test_videonote.TestVideoNote" file="tests/test_videonote.py" line="163" name="test_error_without_required_args" time="0.001"/>
  <testcase classname="tests.test_videonote.TestVideoNote" file="tests/test_videonote.py" line="167" name="test_get_file_instance_method" time="0.025"/>
  <testcase classname="tests.test_videonote.TestVideoNote" file="tests/test_videonote.py" line="174" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_voice.TestVoice" file="tests/test_voice.py" line="51" name="test_creation" time="0.089"/>
  <testcase classname="tests.test_voice.TestVoice" file="tests/test_voice.py" line="59" name="test_expected_values" time="0.000"/>
  <testcase classname="tests.test_voice.TestVoice" file="tests/test_voice.py" line="64" name="test_send_all_args" time="0.098"/>
  <testcase classname="tests.test_voice.TestVoice" file="tests/test_voice.py" line="86" name="test_get_and_download" time="0.068"/>
  <testcase classname="tests.test_voice.TestVoice" file="tests/test_voice.py" line="100" name="test_send_ogg_url_file" time="0.056"/>
  <testcase classname="tests.test_voice.TestVoice" file="tests/test_voice.py" line="114" name="test_resend" time="0.053"/>
  <testcase classname="tests.test_voice.TestVoice" file="tests/test_voice.py" line="121" name="test_send_with_voice" time="0.002"/>
  <testcase classname="tests.test_voice.TestVoice" file="tests/test_voice.py" line="129" name="test_send_voice_default_parse_mode_1[default_bot0]" time="0.057"/>
  <testcase classname="tests.test_voice.TestVoice" file="tests/test_voice.py" line="140" name="test_send_voice_default_parse_mode_2[default_bot0]" time="0.056"/>
  <testcase classname="tests.test_voice.TestVoice" file="tests/test_voice.py" line="152" name="test_send_voice_default_parse_mode_3[default_bot0]" time="0.079"/>
  <testcase classname="tests.test_voice.TestVoice" file="tests/test_voice.py" line="164" name="test_de_json" time="0.001"/>
  <testcase classname="tests.test_voice.TestVoice" file="tests/test_voice.py" line="181" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_voice.TestVoice" file="tests/test_voice.py" line="191" name="test_error_send_empty_file" time="0.028"/>
  <testcase classname="tests.test_voice.TestVoice" file="tests/test_voice.py" line="197" name="test_error_send_empty_file_id" time="0.023"/>
  <testcase classname="tests.test_voice.TestVoice" file="tests/test_voice.py" line="203" name="test_error_without_required_args" time="0.001"/>
  <testcase classname="tests.test_voice.TestVoice" file="tests/test_voice.py" line="207" name="test_get_file_instance_method" time="0.026"/>
  <testcase classname="tests.test_voice.TestVoice" file="tests/test_voice.py" line="214" name="test_equality" time="0.001"/>
  <testcase classname="tests.test_webhookinfo.TestWebhookInfo" file="tests/test_webhookinfo.py" line="45" name="test_to_dict" time="0.001"/>
  <testcase classname="tests.test_webhookinfo.TestWebhookInfo" file="tests/test_webhookinfo.py" line="55" name="test_equality" time="1.189"/>
</testsuite>
