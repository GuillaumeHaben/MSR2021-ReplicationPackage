[
    {
        "functionName": "test_lookup",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test Product Lookup.\n\n        Tests that a product lookup for a kindle returns results and that the\n        main methods are working.\n        \"\"\"\nproduct = self.amazon.lookup(ItemId='B00ZV9PXP2')\nassert_true('Kindle' in product.title)\nassert_equals(product.ean, '0848719083774')\nassert_equals(product.large_image_url,\n    'https://images-na.ssl-images-amazon.com/images/I/51hrdzXLUHL.jpg')\nassert_equals(product.get_attribute('Publisher'), 'Amazon')\nassert_equals(product.get_attributes(['ItemDimensions.Width',\n    'ItemDimensions.Height']), {'ItemDimensions.Width': '450',\n    'ItemDimensions.Height': '36'})\nassert_true(len(product.browse_nodes) > 0)\nassert_true(product.price_and_currency[0] is not None)\nassert_true(product.price_and_currency[1] is not None)\nassert_equals(product.browse_nodes[0].id, 2642129011)\nassert_equals(product.browse_nodes[0].name, 'eBook Readers')\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_3": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_4": "\"\"\"List of images for a response.\n        When using lookup with RespnoseGroup 'Images', you'll get a\n        list of images. Parse them so they are returned in an easily\n        used list format.\n\n        :return:\n            A list of `ObjectifiedElement` images\n        \"\"\"\ntry:\n    images = [image for image in self._safe_get_element('ImageSets.ImageSet')]\nexcept TypeError:\n    images = []\nreturn images\nproperty",
        "CUT_5": "\"\"\"List of images for a response.\n        When using lookup with RespnoseGroup 'Images', you'll get a\n        list of images. Parse them so they are returned in an easily\n        used list format.\n\n        :return:\n            A list of `ObjectifiedElement` images\n        \"\"\"\ntry:\n    images = [image for image in self._safe_get_element('ImageSets.ImageSet')]\nexcept TypeError:\n    images = []\nreturn images\nproperty"
    },
    {
        "functionName": "test_lookup_nonexistent_asin",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test Product Lookup with a nonexistent ASIN.\n\n        Tests that a product lookup for a nonexistent ASIN raises AsinNotFound.\n        \"\"\"\nassert_raises(AsinNotFound, self.amazon.lookup, ItemId='ABCD1234')\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"ASIN (Amazon ID)\n\n        :return:\n            ASIN (string).\n        \"\"\"\nreturn self._safe_get_element_text('ASIN')\nproperty",
        "CUT_3": "\"\"\"ASIN (Amazon ID)\n\n        :return:\n            ASIN (string).\n        \"\"\"\nreturn self._safe_get_element_text('ASIN')\nproperty",
        "CUT_4": "return self._safe_get_element_text('ASIN')\nproperty",
        "CUT_5": "return self._safe_get_element_text('ASIN')\nproperty"
    },
    {
        "functionName": "test_bulk_lookup",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test Baulk Product Lookup.\n\n        Tests that a bulk product lookup request returns multiple results.\n        \"\"\"\nasins = [TEST_ASIN, 'B00BWYQ9YE', 'B00BWYRF7E', 'B00D2KJDXA']\nproducts = self.amazon.lookup(ItemId=','.join(asins))\nassert_equals(len(products), len(asins))\nfor i, product in enumerate(products):\n    assert_equals(asins[i], product.asin)\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Lookup Amazon Products in bulk.\n\n        Returns all products matching requested ASINs, ignoring invalid\n        entries.\n\n        :return:\n            A list of  :class:`~.AmazonProduct` instances.\n        \"\"\"\nresponse = self.api.ItemLookup(ResponseGroup=ResponseGroup, **kwargs)\nroot = objectify.fromstring(response)\nif not hasattr(root.Items, 'Item'):\n    return []\nreturn list(AmazonProduct(item, self.aws_associate_tag, self, region=self.\n    region) for item in root.Items.Item)\n",
        "CUT_3": "\"\"\"Lookup Amazon Products in bulk.\n\n        Returns all products matching requested ASINs, ignoring invalid\n        entries.\n\n        :return:\n            A list of  :class:`~.AmazonProduct` instances.\n        \"\"\"\nresponse = self.api.ItemLookup(ResponseGroup=ResponseGroup, **kwargs)\nroot = objectify.fromstring(response)\nif not hasattr(root.Items, 'Item'):\n    return []\nreturn list(AmazonProduct(item, self.aws_associate_tag, self, region=self.\n    region) for item in root.Items.Item)\n",
        "CUT_4": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_5": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty"
    },
    {
        "functionName": "test_lookup_bulk",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test Bulk Product Lookup.\n\n        Tests that a bulk product lookup request returns multiple results.\n        \"\"\"\nasins = [TEST_ASIN, 'B00BWYQ9YE', 'B00BWYRF7E', 'B00D2KJDXA']\nproducts = self.amazon.lookup_bulk(ItemId=','.join(asins))\nassert_equals(len(products), len(asins))\nfor i, product in enumerate(products):\n    assert_equals(asins[i], product.asin)\n",
        "CUT_1": "\"\"\"Lookup Amazon Products in bulk.\n\n        Returns all products matching requested ASINs, ignoring invalid\n        entries.\n\n        :return:\n            A list of  :class:`~.AmazonProduct` instances.\n        \"\"\"\nresponse = self.api.ItemLookup(ResponseGroup=ResponseGroup, **kwargs)\nroot = objectify.fromstring(response)\nif not hasattr(root.Items, 'Item'):\n    return []\nreturn list(AmazonProduct(item, self.aws_associate_tag, self, region=self.\n    region) for item in root.Items.Item)\n",
        "CUT_2": "\"\"\"Lookup Amazon Products in bulk.\n\n        Returns all products matching requested ASINs, ignoring invalid\n        entries.\n\n        :return:\n            A list of  :class:`~.AmazonProduct` instances.\n        \"\"\"\nresponse = self.api.ItemLookup(ResponseGroup=ResponseGroup, **kwargs)\nroot = objectify.fromstring(response)\nif not hasattr(root.Items, 'Item'):\n    return []\nreturn list(AmazonProduct(item, self.aws_associate_tag, self, region=self.\n    region) for item in root.Items.Item)\n",
        "CUT_3": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_4": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_5": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty"
    },
    {
        "functionName": "test_lookup_bulk_empty",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test Bulk Product Lookup With No Results.\n\n        Tests that a bulk product lookup request with no results\n        returns an empty list.\n        \"\"\"\nasins = ['not-an-asin', 'als-not-an-asin']\nproducts = self.amazon.lookup_bulk(ItemId=','.join(asins))\nassert_equals(type(products), list)\nassert_equals(len(products), 0)\n",
        "CUT_1": "\"\"\"Lookup Amazon Products in bulk.\n\n        Returns all products matching requested ASINs, ignoring invalid\n        entries.\n\n        :return:\n            A list of  :class:`~.AmazonProduct` instances.\n        \"\"\"\nresponse = self.api.ItemLookup(ResponseGroup=ResponseGroup, **kwargs)\nroot = objectify.fromstring(response)\nif not hasattr(root.Items, 'Item'):\n    return []\nreturn list(AmazonProduct(item, self.aws_associate_tag, self, region=self.\n    region) for item in root.Items.Item)\n",
        "CUT_2": "\"\"\"Lookup Amazon Products in bulk.\n\n        Returns all products matching requested ASINs, ignoring invalid\n        entries.\n\n        :return:\n            A list of  :class:`~.AmazonProduct` instances.\n        \"\"\"\nresponse = self.api.ItemLookup(ResponseGroup=ResponseGroup, **kwargs)\nroot = objectify.fromstring(response)\nif not hasattr(root.Items, 'Item'):\n    return []\nreturn list(AmazonProduct(item, self.aws_associate_tag, self, region=self.\n    region) for item in root.Items.Item)\n",
        "CUT_3": "\"\"\"ASIN (Amazon ID)\n\n        :return:\n            ASIN (string).\n        \"\"\"\nreturn self._safe_get_element_text('ASIN')\nproperty",
        "CUT_4": "\"\"\"ASIN (Amazon ID)\n\n        :return:\n            ASIN (string).\n        \"\"\"\nreturn self._safe_get_element_text('ASIN')\nproperty",
        "CUT_5": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n"
    },
    {
        "functionName": "test_search",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test Product Search.\n\n        Tests that a product search is working (by testing that results are\n        returned). And that each result has a title attribute. The test\n        fails if no results where returned.\n        \"\"\"\nproducts = self.amazon.search(Keywords='kindle', SearchIndex='All')\nfor product in products:\n    assert_true(hasattr(product, 'title'))\n    break\nelse:\n    assert_true(False, 'No search results returned.')\n",
        "CUT_1": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_2": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_3": "\"\"\"Title.\n\n        :return:\n            Title (string)\n        \"\"\"\nreturn self._safe_get_element_text('ItemAttributes.Title')\nproperty",
        "CUT_4": "\"\"\"Title.\n\n        :return:\n            Title (string)\n        \"\"\"\nreturn self._safe_get_element_text('ItemAttributes.Title')\nproperty",
        "CUT_5": "return self._safe_get_element_text('Title')\nproperty"
    },
    {
        "functionName": "test_search_n",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test Product Search N.\n\n        Tests that a product search n is working by testing that N results are\n        returned.\n        \"\"\"\nproducts = self.amazon.search_n(1, Keywords='kindle', SearchIndex='All')\nassert_equals(len(products), 1)\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Lookup Amazon Products in bulk.\n\n        Returns all products matching requested ASINs, ignoring invalid\n        entries.\n\n        :return:\n            A list of  :class:`~.AmazonProduct` instances.\n        \"\"\"\nresponse = self.api.ItemLookup(ResponseGroup=ResponseGroup, **kwargs)\nroot = objectify.fromstring(response)\nif not hasattr(root.Items, 'Item'):\n    return []\nreturn list(AmazonProduct(item, self.aws_associate_tag, self, region=self.\n    region) for item in root.Items.Item)\n",
        "CUT_3": "\"\"\"Lookup Amazon Products in bulk.\n\n        Returns all products matching requested ASINs, ignoring invalid\n        entries.\n\n        :return:\n            A list of  :class:`~.AmazonProduct` instances.\n        \"\"\"\nresponse = self.api.ItemLookup(ResponseGroup=ResponseGroup, **kwargs)\nroot = objectify.fromstring(response)\nif not hasattr(root.Items, 'Item'):\n    return []\nreturn list(AmazonProduct(item, self.aws_associate_tag, self, region=self.\n    region) for item in root.Items.Item)\n",
        "CUT_4": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_5": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty"
    },
    {
        "functionName": "test_search_iterate_pages",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "products = self.amazon.search(Keywords='internet of things oreilly',\n    SearchIndex='Books')\nassert_false(products.is_last_page)\nfor product in products:\n    pass\nassert_true(products.is_last_page)\n",
        "CUT_1": "\"\"\"Lookup Amazon Products in bulk.\n\n        Returns all products matching requested ASINs, ignoring invalid\n        entries.\n\n        :return:\n            A list of  :class:`~.AmazonProduct` instances.\n        \"\"\"\nresponse = self.api.ItemLookup(ResponseGroup=ResponseGroup, **kwargs)\nroot = objectify.fromstring(response)\nif not hasattr(root.Items, 'Item'):\n    return []\nreturn list(AmazonProduct(item, self.aws_associate_tag, self, region=self.\n    region) for item in root.Items.Item)\n",
        "CUT_2": "\"\"\"Lookup Amazon Products in bulk.\n\n        Returns all products matching requested ASINs, ignoring invalid\n        entries.\n\n        :return:\n            A list of  :class:`~.AmazonProduct` instances.\n        \"\"\"\nresponse = self.api.ItemLookup(ResponseGroup=ResponseGroup, **kwargs)\nroot = objectify.fromstring(response)\nif not hasattr(root.Items, 'Item'):\n    return []\nreturn list(AmazonProduct(item, self.aws_associate_tag, self, region=self.\n    region) for item in root.Items.Item)\n",
        "CUT_3": "\"\"\"Initialise\n\n        Initialise a search\n\n        :param api:\n            An instance of :class:`~.bottlenose.Amazon`.\n        :param aws_associate_tag:\n            An string representing an Amazon Associates tag.\n        \"\"\"\nself.kwargs = kwargs\nself.current_page = 0\nself.is_last_page = False\nself.api = api\nself.aws_associate_tag = aws_associate_tag\n",
        "CUT_4": "\"\"\"Initialise\n\n        Initialise a search\n\n        :param api:\n            An instance of :class:`~.bottlenose.Amazon`.\n        :param aws_associate_tag:\n            An string representing an Amazon Associates tag.\n        \"\"\"\nself.kwargs = kwargs\nself.current_page = 0\nself.is_last_page = False\nself.api = api\nself.aws_associate_tag = aws_associate_tag\n",
        "CUT_5": "\"\"\"Iterate Pages.\n\n        A generator which iterates over all pages.\n        Keep in mind that Amazon limits the number of pages it makes available.\n\n        :return:\n            Yields lxml root elements.\n        \"\"\"\ntry:\n    while not self.is_last_page:\n        self.current_page += 1\n        yield self._query(ItemPage=self.current_page, **self.kwargs)\nexcept NoMorePages:\n    pass\n"
    },
    {
        "functionName": "test_search_no_results",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test Product Search with no results.\n\n        Tests that a product search with that returns no results throws a\n        SearchException.\n        \"\"\"\nproducts = self.amazon.search(Title='no-such-thing-on-amazon', SearchIndex=\n    'Automotive')\nassert_raises(SearchException, next, (x for x in products))\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Search and return first N results..\n\n        :param n:\n            An integer specifying the number of results to return.\n        :return:\n            A list of :class:`~.AmazonProduct`.\n        \"\"\"\nregion = kwargs.get('region', self.region)\nkwargs.update({'region': region})\nitems = AmazonSearch(self.api, self.aws_associate_tag, **kwargs)\nreturn list(islice(items, n))\n",
        "CUT_3": "\"\"\"Search and return first N results..\n\n        :param n:\n            An integer specifying the number of results to return.\n        :return:\n            A list of :class:`~.AmazonProduct`.\n        \"\"\"\nregion = kwargs.get('region', self.region)\nkwargs.update({'region': region})\nitems = AmazonSearch(self.api, self.aws_associate_tag, **kwargs)\nreturn list(islice(items, n))\n",
        "CUT_4": "\"\"\"\n        :param cart_item_id: access item by CartItemId\n        :return: AmazonCartItem\n        \"\"\"\nfor item in self:\n    if item.cart_item_id == cart_item_id:\n        return item\nraise KeyError('no item found with CartItemId: {0}'.format(cart_item_id))\n",
        "CUT_5": "\"\"\"\n        :param cart_item_id: access item by CartItemId\n        :return: AmazonCartItem\n        \"\"\"\nfor item in self:\n    if item.cart_item_id == cart_item_id:\n        return item\nraise KeyError('no item found with CartItemId: {0}'.format(cart_item_id))\n"
    },
    {
        "functionName": "test_amazon_api_defaults_to_US",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 0,
        "isTest": true,
        "Body": "\"\"\"Test Amazon API defaults to the US store.\"\"\"\namazon = AmazonAPI(_AMAZON_ACCESS_KEY, _AMAZON_SECRET_KEY, _AMAZON_ASSOC_TAG)\nassert_equals(amazon.api.Region, 'US')\n",
        "CUT_1": "self.amazon = AmazonAPI(_AMAZON_ACCESS_KEY, _AMAZON_SECRET_KEY,\n    _AMAZON_ASSOC_TAG, CacheReader=cache_reader, CacheWriter=cache_writer,\n    MaxQPS=0.5)\n",
        "CUT_2": "\"\"\"Set Up.\n\n        Initialize the Amazon API wrapper. The following values:\n\n        * AMAZON_ACCESS_KEY\n        * AMAZON_SECRET_KEY\n        * AMAZON_ASSOC_TAG\n\n        Are imported from a custom file named: 'test_settings.py'\n        \"\"\"\nself.amazon = AmazonAPI(_AMAZON_ACCESS_KEY, _AMAZON_SECRET_KEY,\n    _AMAZON_ASSOC_TAG, CacheReader=cache_reader, CacheWriter=cache_writer,\n    MaxQPS=0.5)\n",
        "CUT_3": "\"\"\"Initialize an Amazon API Proxy.\n\n        kwargs values are passed directly to Bottlenose. Check the Bottlenose\n        API for valid values (some are provided below).\n        For legacy support, the older 'region' value is still supported.\n        Code should be updated to use the Bottlenose 'Region' value\n        instead.\n\n        :param aws_key:\n            A string representing an AWS authentication key.\n        :param aws_secret:\n            A string representing an AWS authentication secret.\n        :param aws_associate_tag:\n            A string representing an AWS associate tag.\n\n        Important Bottlenose arguments:\n        :param Region:\n            ccTLD you want to search for products on (e.g. 'UK'\n            for amazon.co.uk).\n            See keys of bottlenose.api.SERVICE_DOMAINS for options, which were\n            CA, CN, DE, ES, FR, IT, JP, UK, US at the time of writing.\n            Must be uppercase. Default is 'US' (amazon.com).\n        :param MaxQPS:\n            Optional maximum queries per second. If we've made an API call\n            on this object more recently that 1/MaxQPS, we'll wait\n            before making the call. Useful for making batches of queries.\n            You generally want to set this a little lower than the\n            max (so 0.9, not 1.0).\n            Amazon limits the number of calls per hour, so for long running\n            tasks this should be set to 0.9 to ensure you don't hit the\n            maximum.\n            Defaults to None (unlimited).\n        :param Timeout:\n            Optional timeout for queries.\n            Defaults to None.\n        :param CacheReader:\n            Called before attempting to make an API call.\n            A function that takes a single argument, the URL that\n            would be passed to the API, minus auth information,\n            and returns a cached version of the (unparsed) response,\n            or None.\n            Defaults to None.\n        :param CacheWriter:\n            Called after a successful API call. A function that\n            takes two arguments, the same URL passed to\n            CacheReader, and the (unparsed) API response.\n            Defaults to None.\n        \"\"\"\nif 'region' in kwargs:\n    kwargs['Region'] = kwargs['region']\n    del kwargs['region']\nif 'Version' not in kwargs:\n    kwargs['Version'] = '2013-08-01'\nself.api = bottlenose.Amazon(aws_key, aws_secret, aws_associate_tag, **kwargs)\nself.aws_associate_tag = aws_associate_tag\nself.region = kwargs.get('Region', 'US')\n",
        "CUT_4": "\"\"\"Initialize an Amazon API Proxy.\n\n        kwargs values are passed directly to Bottlenose. Check the Bottlenose\n        API for valid values (some are provided below).\n        For legacy support, the older 'region' value is still supported.\n        Code should be updated to use the Bottlenose 'Region' value\n        instead.\n\n        :param aws_key:\n            A string representing an AWS authentication key.\n        :param aws_secret:\n            A string representing an AWS authentication secret.\n        :param aws_associate_tag:\n            A string representing an AWS associate tag.\n\n        Important Bottlenose arguments:\n        :param Region:\n            ccTLD you want to search for products on (e.g. 'UK'\n            for amazon.co.uk).\n            See keys of bottlenose.api.SERVICE_DOMAINS for options, which were\n            CA, CN, DE, ES, FR, IT, JP, UK, US at the time of writing.\n            Must be uppercase. Default is 'US' (amazon.com).\n        :param MaxQPS:\n            Optional maximum queries per second. If we've made an API call\n            on this object more recently that 1/MaxQPS, we'll wait\n            before making the call. Useful for making batches of queries.\n            You generally want to set this a little lower than the\n            max (so 0.9, not 1.0).\n            Amazon limits the number of calls per hour, so for long running\n            tasks this should be set to 0.9 to ensure you don't hit the\n            maximum.\n            Defaults to None (unlimited).\n        :param Timeout:\n            Optional timeout for queries.\n            Defaults to None.\n        :param CacheReader:\n            Called before attempting to make an API call.\n            A function that takes a single argument, the URL that\n            would be passed to the API, minus auth information,\n            and returns a cached version of the (unparsed) response,\n            or None.\n            Defaults to None.\n        :param CacheWriter:\n            Called after a successful API call. A function that\n            takes two arguments, the same URL passed to\n            CacheReader, and the (unparsed) API response.\n            Defaults to None.\n        \"\"\"\nif 'region' in kwargs:\n    kwargs['Region'] = kwargs['region']\n    del kwargs['region']\nif 'Version' not in kwargs:\n    kwargs['Version'] = '2013-08-01'\nself.api = bottlenose.Amazon(aws_key, aws_secret, aws_associate_tag, **kwargs)\nself.aws_associate_tag = aws_associate_tag\nself.region = kwargs.get('Region', 'US')\n",
        "CUT_5": "\"\"\"Initialize an Amazon Product Proxy.\n\n        :param item:\n            Lxml Item element.\n        \"\"\"\nsuper(AmazonProduct, self).__init__(item)\nself.aws_associate_tag = aws_associate_tag\nself.api = api\nself.parent = None\nself.region = kwargs.get('region', 'US')\n"
    },
    {
        "functionName": "test_search_amazon_uk",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test Poduct Search on Amazon UK.\n\n        Tests that a product search on Amazon UK is working and that the\n        currency of any of the returned products is GBP. The test fails if no\n        results were returned.\n        \"\"\"\namazon = AmazonAPI(_AMAZON_ACCESS_KEY, _AMAZON_SECRET_KEY,\n    _AMAZON_ASSOC_TAG, region='UK')\nassert_equals(amazon.api.Region, 'UK', 'Region has not been set to UK')\nproducts = amazon.search(Keywords='Kindle', SearchIndex='All')\ncurrencies = [product.price_and_currency[1] for product in products]\nassert_true(len(currencies), 'No products found')\nis_gbp = 'GBP' in currencies\nassert_true(is_gbp, 'Currency is not GBP, cannot be Amazon UK, though')\n",
        "CUT_1": "\"\"\"Initialize an Amazon API Proxy.\n\n        kwargs values are passed directly to Bottlenose. Check the Bottlenose\n        API for valid values (some are provided below).\n        For legacy support, the older 'region' value is still supported.\n        Code should be updated to use the Bottlenose 'Region' value\n        instead.\n\n        :param aws_key:\n            A string representing an AWS authentication key.\n        :param aws_secret:\n            A string representing an AWS authentication secret.\n        :param aws_associate_tag:\n            A string representing an AWS associate tag.\n\n        Important Bottlenose arguments:\n        :param Region:\n            ccTLD you want to search for products on (e.g. 'UK'\n            for amazon.co.uk).\n            See keys of bottlenose.api.SERVICE_DOMAINS for options, which were\n            CA, CN, DE, ES, FR, IT, JP, UK, US at the time of writing.\n            Must be uppercase. Default is 'US' (amazon.com).\n        :param MaxQPS:\n            Optional maximum queries per second. If we've made an API call\n            on this object more recently that 1/MaxQPS, we'll wait\n            before making the call. Useful for making batches of queries.\n            You generally want to set this a little lower than the\n            max (so 0.9, not 1.0).\n            Amazon limits the number of calls per hour, so for long running\n            tasks this should be set to 0.9 to ensure you don't hit the\n            maximum.\n            Defaults to None (unlimited).\n        :param Timeout:\n            Optional timeout for queries.\n            Defaults to None.\n        :param CacheReader:\n            Called before attempting to make an API call.\n            A function that takes a single argument, the URL that\n            would be passed to the API, minus auth information,\n            and returns a cached version of the (unparsed) response,\n            or None.\n            Defaults to None.\n        :param CacheWriter:\n            Called after a successful API call. A function that\n            takes two arguments, the same URL passed to\n            CacheReader, and the (unparsed) API response.\n            Defaults to None.\n        \"\"\"\nif 'region' in kwargs:\n    kwargs['Region'] = kwargs['region']\n    del kwargs['region']\nif 'Version' not in kwargs:\n    kwargs['Version'] = '2013-08-01'\nself.api = bottlenose.Amazon(aws_key, aws_secret, aws_associate_tag, **kwargs)\nself.aws_associate_tag = aws_associate_tag\nself.region = kwargs.get('Region', 'US')\n",
        "CUT_2": "\"\"\"Initialize an Amazon API Proxy.\n\n        kwargs values are passed directly to Bottlenose. Check the Bottlenose\n        API for valid values (some are provided below).\n        For legacy support, the older 'region' value is still supported.\n        Code should be updated to use the Bottlenose 'Region' value\n        instead.\n\n        :param aws_key:\n            A string representing an AWS authentication key.\n        :param aws_secret:\n            A string representing an AWS authentication secret.\n        :param aws_associate_tag:\n            A string representing an AWS associate tag.\n\n        Important Bottlenose arguments:\n        :param Region:\n            ccTLD you want to search for products on (e.g. 'UK'\n            for amazon.co.uk).\n            See keys of bottlenose.api.SERVICE_DOMAINS for options, which were\n            CA, CN, DE, ES, FR, IT, JP, UK, US at the time of writing.\n            Must be uppercase. Default is 'US' (amazon.com).\n        :param MaxQPS:\n            Optional maximum queries per second. If we've made an API call\n            on this object more recently that 1/MaxQPS, we'll wait\n            before making the call. Useful for making batches of queries.\n            You generally want to set this a little lower than the\n            max (so 0.9, not 1.0).\n            Amazon limits the number of calls per hour, so for long running\n            tasks this should be set to 0.9 to ensure you don't hit the\n            maximum.\n            Defaults to None (unlimited).\n        :param Timeout:\n            Optional timeout for queries.\n            Defaults to None.\n        :param CacheReader:\n            Called before attempting to make an API call.\n            A function that takes a single argument, the URL that\n            would be passed to the API, minus auth information,\n            and returns a cached version of the (unparsed) response,\n            or None.\n            Defaults to None.\n        :param CacheWriter:\n            Called after a successful API call. A function that\n            takes two arguments, the same URL passed to\n            CacheReader, and the (unparsed) API response.\n            Defaults to None.\n        \"\"\"\nif 'region' in kwargs:\n    kwargs['Region'] = kwargs['region']\n    del kwargs['region']\nif 'Version' not in kwargs:\n    kwargs['Version'] = '2013-08-01'\nself.api = bottlenose.Amazon(aws_key, aws_secret, aws_associate_tag, **kwargs)\nself.aws_associate_tag = aws_associate_tag\nself.region = kwargs.get('Region', 'US')\n",
        "CUT_3": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_4": "\"\"\"Search and return first N results..\n\n        :param n:\n            An integer specifying the number of results to return.\n        :return:\n            A list of :class:`~.AmazonProduct`.\n        \"\"\"\nregion = kwargs.get('region', self.region)\nkwargs.update({'region': region})\nitems = AmazonSearch(self.api, self.aws_associate_tag, **kwargs)\nreturn list(islice(items, n))\n",
        "CUT_5": "\"\"\"Search and return first N results..\n\n        :param n:\n            An integer specifying the number of results to return.\n        :return:\n            A list of :class:`~.AmazonProduct`.\n        \"\"\"\nregion = kwargs.get('region', self.region)\nkwargs.update({'region': region})\nitems = AmazonSearch(self.api, self.aws_associate_tag, **kwargs)\nreturn list(islice(items, n))\n"
    },
    {
        "functionName": "test_similarity_lookup",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test Similarity Lookup.\n\n        Tests that a similarity lookup for a kindle returns 10 results.\n        \"\"\"\nproducts = self.amazon.similarity_lookup(ItemId=TEST_ASIN)\nassert_true(len(products) > 5)\n",
        "CUT_1": "\"\"\"Lookup Amazon Products in bulk.\n\n        Returns all products matching requested ASINs, ignoring invalid\n        entries.\n\n        :return:\n            A list of  :class:`~.AmazonProduct` instances.\n        \"\"\"\nresponse = self.api.ItemLookup(ResponseGroup=ResponseGroup, **kwargs)\nroot = objectify.fromstring(response)\nif not hasattr(root.Items, 'Item'):\n    return []\nreturn list(AmazonProduct(item, self.aws_associate_tag, self, region=self.\n    region) for item in root.Items.Item)\n",
        "CUT_2": "\"\"\"Lookup Amazon Products in bulk.\n\n        Returns all products matching requested ASINs, ignoring invalid\n        entries.\n\n        :return:\n            A list of  :class:`~.AmazonProduct` instances.\n        \"\"\"\nresponse = self.api.ItemLookup(ResponseGroup=ResponseGroup, **kwargs)\nroot = objectify.fromstring(response)\nif not hasattr(root.Items, 'Item'):\n    return []\nreturn list(AmazonProduct(item, self.aws_associate_tag, self, region=self.\n    region) for item in root.Items.Item)\n",
        "CUT_3": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_4": "\"\"\"Similarty Lookup.\n\n        Returns up to ten products that are similar to all items\n        specified in the request.\n\n        Example:\n            >>> api.similarity_lookup(ItemId='B002L3XLBO,B000LQTBKI')\n        \"\"\"\nresponse = self.api.SimilarityLookup(ResponseGroup=ResponseGroup, **kwargs)\nroot = objectify.fromstring(response)\nif root.Items.Request.IsValid == 'False':\n    code = root.Items.Request.Errors.Error.Code\n    msg = root.Items.Request.Errors.Error.Message\n    raise SimilartyLookupException(\n        \"Amazon Similarty Lookup Error: '{0}', '{1}'\".format(code, msg))\nreturn [AmazonProduct(item, self.aws_associate_tag, self.api, region=self.\n    region) for item in getattr(root.Items, 'Item', [])]\n",
        "CUT_5": "\"\"\"Similarty Lookup.\n\n        Returns up to ten products that are similar to all items\n        specified in the request.\n\n        Example:\n            >>> api.similarity_lookup(ItemId='B002L3XLBO,B000LQTBKI')\n        \"\"\"\nresponse = self.api.SimilarityLookup(ResponseGroup=ResponseGroup, **kwargs)\nroot = objectify.fromstring(response)\nif root.Items.Request.IsValid == 'False':\n    code = root.Items.Request.Errors.Error.Code\n    msg = root.Items.Request.Errors.Error.Message\n    raise SimilartyLookupException(\n        \"Amazon Similarty Lookup Error: '{0}', '{1}'\".format(code, msg))\nreturn [AmazonProduct(item, self.aws_associate_tag, self.api, region=self.\n    region) for item in getattr(root.Items, 'Item', [])]\n"
    },
    {
        "functionName": "test_product_attributes",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test Product Attributes.\n\n        Tests that all product that are supposed to be accessible are.\n        \"\"\"\nproduct = self.amazon.lookup(ItemId=TEST_ASIN)\nfor attribute in PRODUCT_ATTRIBUTES:\n    getattr(product, attribute)\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Get Attribute Details\n\n        Gets XML attributes of the product attribute. These usually contain\n        details about the product attributes such as units.\n\n        :param name:\n            Attribute name (string)\n        :return:\n            A name/value dictionary.\n        \"\"\"\nreturn self._safe_get_element('ItemAttributes.{0}'.format(name)).attrib\n",
        "CUT_3": "\"\"\"Get Attribute Details\n\n        Gets XML attributes of the product attribute. These usually contain\n        details about the product attributes such as units.\n\n        :param name:\n            Attribute name (string)\n        :return:\n            A name/value dictionary.\n        \"\"\"\nreturn self._safe_get_element('ItemAttributes.{0}'.format(name)).attrib\n",
        "CUT_4": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_5": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty"
    },
    {
        "functionName": "test_browse_node_lookup",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test Browse Node Lookup.\n\n        Test that a lookup by Brose Node ID returns appropriate node.\n        \"\"\"\nbnid = 2642129011\nbn = self.amazon.browse_node_lookup(BrowseNodeId=bnid)[0]\nassert_equals(bn.id, bnid)\nassert_equals(bn.name, 'eBook Readers')\nassert_equals(bn.is_category_root, False)\n",
        "CUT_1": "\"\"\"A list of this browse node's ancestors in the browse node tree.\n\n        :return:\n            List of :class:`~.AmazonBrowseNode` objects.\n        \"\"\"\nancestors = []\nnode = self.ancestor\nwhile node is not None:\n    ancestors.append(node)\n    node = node.ancestor\nreturn ancestors\nproperty",
        "CUT_2": "\"\"\"A list of this browse node's ancestors in the browse node tree.\n\n        :return:\n            List of :class:`~.AmazonBrowseNode` objects.\n        \"\"\"\nancestors = []\nnode = self.ancestor\nwhile node is not None:\n    ancestors.append(node)\n    node = node.ancestor\nreturn ancestors\nproperty",
        "CUT_3": "\"\"\"Browse Node Lookup.\n\n        Returns the specified browse node's name, children, and ancestors.\n        Example:\n            >>> api.browse_node_lookup(BrowseNodeId='163357')\n        \"\"\"\nresponse = self.api.BrowseNodeLookup(ResponseGroup=ResponseGroup, **kwargs)\nroot = objectify.fromstring(response)\nif root.BrowseNodes.Request.IsValid == 'False':\n    code = root.BrowseNodes.Request.Errors.Error.Code\n    msg = root.BrowseNodes.Request.Errors.Error.Message\n    raise BrowseNodeLookupException(\n        \"Amazon BrowseNode Lookup Error: '{0}', '{1}'\".format(code, msg))\nreturn [AmazonBrowseNode(node.BrowseNode) for node in root.BrowseNodes]\n",
        "CUT_4": "\"\"\"Browse Node Lookup.\n\n        Returns the specified browse node's name, children, and ancestors.\n        Example:\n            >>> api.browse_node_lookup(BrowseNodeId='163357')\n        \"\"\"\nresponse = self.api.BrowseNodeLookup(ResponseGroup=ResponseGroup, **kwargs)\nroot = objectify.fromstring(response)\nif root.BrowseNodes.Request.IsValid == 'False':\n    code = root.BrowseNodes.Request.Errors.Error.Code\n    msg = root.BrowseNodes.Request.Errors.Error.Message\n    raise BrowseNodeLookupException(\n        \"Amazon BrowseNode Lookup Error: '{0}', '{1}'\".format(code, msg))\nreturn [AmazonBrowseNode(node.BrowseNode) for node in root.BrowseNodes]\n",
        "CUT_5": "\"\"\"Browse Node ID.\n\n        A positive integer that uniquely identifies a parent product category.\n\n        :return:\n            ID (integer)\n        \"\"\"\nif hasattr(self.parsed_response, 'BrowseNodeId'):\n    return int(self.parsed_response['BrowseNodeId'])\nreturn None\nproperty"
    },
    {
        "functionName": "test_obscure_date",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test Obscure Date Formats\n\n        Test a product with an obscure date format\n        \"\"\"\nproduct = self.amazon.lookup(ItemId='0933635869')\nassert_equals(product.publication_date.year, 1992)\nassert_equals(product.publication_date.month, 5)\nassert_true(isinstance(product.publication_date, datetime.date))\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Release date .\n\n        :return:\n            Release date (datetime.date)\n        \"\"\"\nreturn self._safe_get_element_date('ItemAttributes.ReleaseDate')\nproperty",
        "CUT_3": "\"\"\"Release date .\n\n        :return:\n            Release date (datetime.date)\n        \"\"\"\nreturn self._safe_get_element_date('ItemAttributes.ReleaseDate')\nproperty",
        "CUT_4": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_5": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty"
    },
    {
        "functionName": "test_single_creator",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test a product with a single creator\n        \"\"\"\nproduct = self.amazon.lookup(ItemId='B00005NZJA')\ncreators = dict(product.creators)\nassert_equals(creators['Jonathan Davis'], 'Narrator')\nassert_equals(len(creators.values()), 2)\n",
        "CUT_1": "\"\"\"Creators.\n\n        Creators are not the authors. These are usually editors, translators,\n        narrators, etc.\n\n        :return:\n            Returns a list of creators where each is a tuple containing:\n\n                1. The creators name (string).\n                2. The creators role (string).\n\n        \"\"\"\nresult = []\ncreators = self._safe_get_element('ItemAttributes.Creator')\nif creators is not None:\n    for creator in creators:\n        role = creator.attrib['Role'] if 'Role' in creator.attrib else None\n        result.append((creator.text, role))\nreturn result\nproperty",
        "CUT_2": "\"\"\"Creators.\n\n        Creators are not the authors. These are usually editors, translators,\n        narrators, etc.\n\n        :return:\n            Returns a list of creators where each is a tuple containing:\n\n                1. The creators name (string).\n                2. The creators role (string).\n\n        \"\"\"\nresult = []\ncreators = self._safe_get_element('ItemAttributes.Creator')\nif creators is not None:\n    for creator in creators:\n        role = creator.attrib['Role'] if 'Role' in creator.attrib else None\n        result.append((creator.text, role))\nreturn result\nproperty",
        "CUT_3": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_4": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_5": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty"
    },
    {
        "functionName": "test_multiple_creators",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test a product with multiple creators\n        \"\"\"\nproduct = self.amazon.lookup(ItemId='B007V8RQC4')\ncreators = dict(product.creators)\nassert_equals(creators['John Gregory Betancourt'], 'Editor')\nassert_equals(creators['Colin Azariah-Kribbs'], 'Editor')\nassert_equals(len(creators.values()), 2)\n",
        "CUT_1": "\"\"\"Creators.\n\n        Creators are not the authors. These are usually editors, translators,\n        narrators, etc.\n\n        :return:\n            Returns a list of creators where each is a tuple containing:\n\n                1. The creators name (string).\n                2. The creators role (string).\n\n        \"\"\"\nresult = []\ncreators = self._safe_get_element('ItemAttributes.Creator')\nif creators is not None:\n    for creator in creators:\n        role = creator.attrib['Role'] if 'Role' in creator.attrib else None\n        result.append((creator.text, role))\nreturn result\nproperty",
        "CUT_2": "\"\"\"Creators.\n\n        Creators are not the authors. These are usually editors, translators,\n        narrators, etc.\n\n        :return:\n            Returns a list of creators where each is a tuple containing:\n\n                1. The creators name (string).\n                2. The creators role (string).\n\n        \"\"\"\nresult = []\ncreators = self._safe_get_element('ItemAttributes.Creator')\nif creators is not None:\n    for creator in creators:\n        role = creator.attrib['Role'] if 'Role' in creator.attrib else None\n        result.append((creator.text, role))\nreturn result\nproperty",
        "CUT_3": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_4": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_5": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty"
    },
    {
        "functionName": "test_no_creators",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test a product with no creators\n        \"\"\"\nproduct = self.amazon.lookup(ItemId='8420658537')\nassert_false(product.creators)\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Creators.\n\n        Creators are not the authors. These are usually editors, translators,\n        narrators, etc.\n\n        :return:\n            Returns a list of creators where each is a tuple containing:\n\n                1. The creators name (string).\n                2. The creators role (string).\n\n        \"\"\"\nresult = []\ncreators = self._safe_get_element('ItemAttributes.Creator')\nif creators is not None:\n    for creator in creators:\n        role = creator.attrib['Role'] if 'Role' in creator.attrib else None\n        result.append((creator.text, role))\nreturn result\nproperty",
        "CUT_3": "\"\"\"Creators.\n\n        Creators are not the authors. These are usually editors, translators,\n        narrators, etc.\n\n        :return:\n            Returns a list of creators where each is a tuple containing:\n\n                1. The creators name (string).\n                2. The creators role (string).\n\n        \"\"\"\nresult = []\ncreators = self._safe_get_element('ItemAttributes.Creator')\nif creators is not None:\n    for creator in creators:\n        role = creator.attrib['Role'] if 'Role' in creator.attrib else None\n        result.append((creator.text, role))\nreturn result\nproperty",
        "CUT_4": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_5": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty"
    },
    {
        "functionName": "test_single_editorial_review",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "product = self.amazon.lookup(ItemId='1930846258')\nexpected = 'In the title piece, Alan Turing'\nassert_equals(product.editorial_reviews[0][:len(expected)], expected)\nassert_equals(product.editorial_review, product.editorial_reviews[0])\nassert_equals(len(product.editorial_reviews), 1)\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_3": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_4": "\"\"\"Get Attribute Details\n\n        Gets XML attributes of the product attribute. These usually contain\n        details about the product attributes such as units.\n\n        :param name:\n            Attribute name (string)\n        :return:\n            A name/value dictionary.\n        \"\"\"\nreturn self._safe_get_element('ItemAttributes.{0}'.format(name)).attrib\n",
        "CUT_5": "\"\"\"Get Attribute Details\n\n        Gets XML attributes of the product attribute. These usually contain\n        details about the product attributes such as units.\n\n        :param name:\n            Attribute name (string)\n        :return:\n            A name/value dictionary.\n        \"\"\"\nreturn self._safe_get_element('ItemAttributes.{0}'.format(name)).attrib\n"
    },
    {
        "functionName": "test_multiple_editorial_reviews",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "product = self.amazon.lookup(ItemId='B01HQA6EOC')\nexpected = '<p>Introducing an instant classic\u2014master storyteller'\nassert_equals(product.editorial_reviews[0][:len(expected)], expected)\nexpected = '<strong>An Amazon Best Book of February 2017:</strong>'\nassert_equals(product.editorial_reviews[1][:len(expected)], expected)\nexpected = '<p>Introducing an instant classic\u2014master storyteller'\nassert_equals(product.editorial_reviews[2][:len(expected)], expected)\nassert_equals(len(product.editorial_reviews), 3)\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "return len(self._safe_get_element('Cart.CartItems.CartItem'))\n",
        "CUT_3": "return len(self._safe_get_element('Cart.CartItems.CartItem'))\n",
        "CUT_4": "\"\"\"Initialize an Amazon Product Proxy.\n\n        :param item:\n            Lxml Item element.\n        \"\"\"\nsuper(AmazonProduct, self).__init__(item)\nself.aws_associate_tag = aws_associate_tag\nself.api = api\nself.parent = None\nself.region = kwargs.get('region', 'US')\n",
        "CUT_5": "\"\"\"Initialize an Amazon Product Proxy.\n\n        :param item:\n            Lxml Item element.\n        \"\"\"\nsuper(AmazonProduct, self).__init__(item)\nself.aws_associate_tag = aws_associate_tag\nself.api = api\nself.parent = None\nself.region = kwargs.get('region', 'US')\n"
    },
    {
        "functionName": "test_languages_english",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test Language Data\n\n        Test an English product\n        \"\"\"\nproduct = self.amazon.lookup(ItemId='1930846258')\nassert_true('english' in product.languages)\nassert_equals(len(product.languages), 1)\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Languages.\n\n        Returns a set of languages in lower-case.\n\n        :return:\n            Returns a set of languages in lower-case (strings).\n        \"\"\"\nresult = set()\nlanguages = self._safe_get_element('ItemAttributes.Languages')\nif languages is not None:\n    for language in languages.iterchildren():\n        text = self._safe_get_element_text('Name', language)\n        if text:\n            result.add(text.lower())\nreturn result\nproperty",
        "CUT_3": "\"\"\"Languages.\n\n        Returns a set of languages in lower-case.\n\n        :return:\n            Returns a set of languages in lower-case (strings).\n        \"\"\"\nresult = set()\nlanguages = self._safe_get_element('ItemAttributes.Languages')\nif languages is not None:\n    for language in languages.iterchildren():\n        text = self._safe_get_element_text('Name', language)\n        if text:\n            result.add(text.lower())\nreturn result\nproperty",
        "CUT_4": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_5": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty"
    },
    {
        "functionName": "test_languages_spanish",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test Language Data\n\n        Test an English product\n        \"\"\"\nproduct = self.amazon.lookup(ItemId='8420658537')\nassert_true('spanish' in product.languages)\nassert_equals(len(product.languages), 1)\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Languages.\n\n        Returns a set of languages in lower-case.\n\n        :return:\n            Returns a set of languages in lower-case (strings).\n        \"\"\"\nresult = set()\nlanguages = self._safe_get_element('ItemAttributes.Languages')\nif languages is not None:\n    for language in languages.iterchildren():\n        text = self._safe_get_element_text('Name', language)\n        if text:\n            result.add(text.lower())\nreturn result\nproperty",
        "CUT_3": "\"\"\"Languages.\n\n        Returns a set of languages in lower-case.\n\n        :return:\n            Returns a set of languages in lower-case (strings).\n        \"\"\"\nresult = set()\nlanguages = self._safe_get_element('ItemAttributes.Languages')\nif languages is not None:\n    for language in languages.iterchildren():\n        text = self._safe_get_element_text('Name', language)\n        if text:\n            result.add(text.lower())\nreturn result\nproperty",
        "CUT_4": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_5": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty"
    },
    {
        "functionName": "test_region",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 0,
        "isTest": true,
        "Body": "amazon = AmazonAPI(_AMAZON_ACCESS_KEY, _AMAZON_SECRET_KEY, _AMAZON_ASSOC_TAG)\nassert_equals(amazon.region, 'US')\namazon = AmazonAPI(_AMAZON_ACCESS_KEY, _AMAZON_SECRET_KEY,\n    _AMAZON_ASSOC_TAG, region='UK')\nassert_equals(amazon.region, 'UK')\namazon = AmazonAPI(_AMAZON_ACCESS_KEY, _AMAZON_SECRET_KEY,\n    _AMAZON_ASSOC_TAG, Region='UK')\nassert_equals(amazon.region, 'UK')\n",
        "CUT_1": "self.amazon = AmazonAPI(_AMAZON_ACCESS_KEY, _AMAZON_SECRET_KEY,\n    _AMAZON_ASSOC_TAG, CacheReader=cache_reader, CacheWriter=cache_writer,\n    MaxQPS=0.5)\n",
        "CUT_2": "\"\"\"Set Up.\n\n        Initialize the Amazon API wrapper. The following values:\n\n        * AMAZON_ACCESS_KEY\n        * AMAZON_SECRET_KEY\n        * AMAZON_ASSOC_TAG\n\n        Are imported from a custom file named: 'test_settings.py'\n        \"\"\"\nself.amazon = AmazonAPI(_AMAZON_ACCESS_KEY, _AMAZON_SECRET_KEY,\n    _AMAZON_ASSOC_TAG, CacheReader=cache_reader, CacheWriter=cache_writer,\n    MaxQPS=0.5)\n",
        "CUT_3": "\"\"\"Search.\n\n        :return:\n            An :class:`~.AmazonSearch` iterable.\n        \"\"\"\nregion = kwargs.get('region', self.region)\nkwargs.update({'region': region})\nreturn AmazonSearch(self.api, self.aws_associate_tag, **kwargs)\n",
        "CUT_4": "\"\"\"Search.\n\n        :return:\n            An :class:`~.AmazonSearch` iterable.\n        \"\"\"\nregion = kwargs.get('region', self.region)\nkwargs.update({'region': region})\nreturn AmazonSearch(self.api, self.aws_associate_tag, **kwargs)\n",
        "CUT_5": "\"\"\"Search and return first N results..\n\n        :param n:\n            An integer specifying the number of results to return.\n        :return:\n            A list of :class:`~.AmazonProduct`.\n        \"\"\"\nregion = kwargs.get('region', self.region)\nkwargs.update({'region': region})\nitems = AmazonSearch(self.api, self.aws_associate_tag, **kwargs)\nreturn list(islice(items, n))\n"
    },
    {
        "functionName": "test_is_adult",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "product = self.amazon.lookup(ItemId='B01E7P9LEE')\nassert_true(product.is_adult is not None)\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Initialize an Amazon Product Proxy.\n\n        :param item:\n            Lxml Item element.\n        \"\"\"\nsuper(AmazonProduct, self).__init__(item)\nself.aws_associate_tag = aws_associate_tag\nself.api = api\nself.parent = None\nself.region = kwargs.get('region', 'US')\n",
        "CUT_3": "\"\"\"Initialize an Amazon Product Proxy.\n\n        :param item:\n            Lxml Item element.\n        \"\"\"\nsuper(AmazonProduct, self).__init__(item)\nself.aws_associate_tag = aws_associate_tag\nself.api = api\nself.parent = None\nself.region = kwargs.get('region', 'US')\n",
        "CUT_4": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_5": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty"
    },
    {
        "functionName": "test_product_group",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "product = self.amazon.lookup(ItemId='B01LXM0S25')\nassert_equals(product.product_group, 'DVD')\nproduct = self.amazon.lookup(ItemId='B01NBTSVDN')\nassert_equals(product.product_group, 'Digital Music Album')\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_3": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_4": "\"\"\"Get Parent.\n\n        Fetch parent product if it exists.\n        Use `parent_asin` to check if a parent exist before fetching.\n\n        :return:\n            An instance of :class:`~.AmazonProduct` representing the\n            parent product.\n        \"\"\"\nif not self.parent:\n    parent = self._safe_get_element('ParentASIN')\n    if parent:\n        self.parent = self.api.lookup(ItemId=parent)\nreturn self.parent\n",
        "CUT_5": "\"\"\"Get Parent.\n\n        Fetch parent product if it exists.\n        Use `parent_asin` to check if a parent exist before fetching.\n\n        :return:\n            An instance of :class:`~.AmazonProduct` representing the\n            parent product.\n        \"\"\"\nif not self.parent:\n    parent = self._safe_get_element('ParentASIN')\n    if parent:\n        self.parent = self.api.lookup(ItemId=parent)\nreturn self.parent\n"
    },
    {
        "functionName": "test_product_type_name",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "product = self.amazon.lookup(ItemId='B01NBTSVDN')\nassert_equals(product.product_type_name, 'DOWNLOADABLE_MUSIC_ALBUM')\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_3": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_4": "\"\"\"Get Parent.\n\n        Fetch parent product if it exists.\n        Use `parent_asin` to check if a parent exist before fetching.\n\n        :return:\n            An instance of :class:`~.AmazonProduct` representing the\n            parent product.\n        \"\"\"\nif not self.parent:\n    parent = self._safe_get_element('ParentASIN')\n    if parent:\n        self.parent = self.api.lookup(ItemId=parent)\nreturn self.parent\n",
        "CUT_5": "\"\"\"Get Parent.\n\n        Fetch parent product if it exists.\n        Use `parent_asin` to check if a parent exist before fetching.\n\n        :return:\n            An instance of :class:`~.AmazonProduct` representing the\n            parent product.\n        \"\"\"\nif not self.parent:\n    parent = self._safe_get_element('ParentASIN')\n    if parent:\n        self.parent = self.api.lookup(ItemId=parent)\nreturn self.parent\n"
    },
    {
        "functionName": "test_formatted_price",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "product = self.amazon.lookup(ItemId='B01NBTSVDN')\nassert_equals(product.formatted_price, '$12.49')\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_3": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_4": "\"\"\"Get Parent.\n\n        Fetch parent product if it exists.\n        Use `parent_asin` to check if a parent exist before fetching.\n\n        :return:\n            An instance of :class:`~.AmazonProduct` representing the\n            parent product.\n        \"\"\"\nif not self.parent:\n    parent = self._safe_get_element('ParentASIN')\n    if parent:\n        self.parent = self.api.lookup(ItemId=parent)\nreturn self.parent\n",
        "CUT_5": "\"\"\"Get Parent.\n\n        Fetch parent product if it exists.\n        Use `parent_asin` to check if a parent exist before fetching.\n\n        :return:\n            An instance of :class:`~.AmazonProduct` representing the\n            parent product.\n        \"\"\"\nif not self.parent:\n    parent = self._safe_get_element('ParentASIN')\n    if parent:\n        self.parent = self.api.lookup(ItemId=parent)\nreturn self.parent\n"
    },
    {
        "functionName": "test_price_and_currency",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "product = self.amazon.lookup(ItemId='B01NBTSVDN')\nprice, currency = product.price_and_currency\nassert_equals(price, Decimal('12.49'))\nassert_equals(currency, 'USD')\n",
        "CUT_1": "\"\"\"List Price.\n\n        :return:\n            A tuple containing:\n\n                1. Decimal representation of price.\n                2. ISO Currency code (string).\n        \"\"\"\nprice = self._safe_get_element_text('ItemAttributes.ListPrice.Amount')\ncurrency = self._safe_get_element_text('ItemAttributes.ListPrice.CurrencyCode')\nif price:\n    dprice = Decimal(price) / 100 if 'JP' not in self.region else Decimal(price\n        )\n    return dprice, currency\nelse:\n    return None, None\nproperty",
        "CUT_2": "\"\"\"List Price.\n\n        :return:\n            A tuple containing:\n\n                1. Decimal representation of price.\n                2. ISO Currency code (string).\n        \"\"\"\nprice = self._safe_get_element_text('ItemAttributes.ListPrice.Amount')\ncurrency = self._safe_get_element_text('ItemAttributes.ListPrice.CurrencyCode')\nif price:\n    dprice = Decimal(price) / 100 if 'JP' not in self.region else Decimal(price\n        )\n    return dprice, currency\nelse:\n    return None, None\nproperty",
        "CUT_3": "\"\"\"Get Offer Price and Currency.\n\n        Return price according to the following process:\n\n        * If product has a sale return Sales Price, otherwise,\n        * Return Price, otherwise,\n        * Return lowest offer price, otherwise,\n        * Return None.\n\n        :return:\n            A tuple containing:\n\n                1. Decimal representation of price.\n                2. ISO Currency code (string).\n        \"\"\"\nprice = self._safe_get_element_text(\n    'Offers.Offer.OfferListing.SalePrice.Amount')\nif price:\n    currency = self._safe_get_element_text(\n        'Offers.Offer.OfferListing.SalePrice.CurrencyCode')\nelse:\n    price = self._safe_get_element_text(\n        'Offers.Offer.OfferListing.Price.Amount')\n    if price:\n        currency = self._safe_get_element_text(\n            'Offers.Offer.OfferListing.Price.CurrencyCode')\n    else:\n        price = self._safe_get_element_text(\n            'OfferSummary.LowestNewPrice.Amount')\n        currency = self._safe_get_element_text(\n            'OfferSummary.LowestNewPrice.CurrencyCode')\nif price:\n    dprice = Decimal(price) / 100 if 'JP' not in self.region else Decimal(price\n        )\n    return dprice, currency\nelse:\n    return None, None\nproperty",
        "CUT_4": "\"\"\"Get Offer Price and Currency.\n\n        Return price according to the following process:\n\n        * If product has a sale return Sales Price, otherwise,\n        * Return Price, otherwise,\n        * Return lowest offer price, otherwise,\n        * Return None.\n\n        :return:\n            A tuple containing:\n\n                1. Decimal representation of price.\n                2. ISO Currency code (string).\n        \"\"\"\nprice = self._safe_get_element_text(\n    'Offers.Offer.OfferListing.SalePrice.Amount')\nif price:\n    currency = self._safe_get_element_text(\n        'Offers.Offer.OfferListing.SalePrice.CurrencyCode')\nelse:\n    price = self._safe_get_element_text(\n        'Offers.Offer.OfferListing.Price.Amount')\n    if price:\n        currency = self._safe_get_element_text(\n            'Offers.Offer.OfferListing.Price.CurrencyCode')\n    else:\n        price = self._safe_get_element_text(\n            'OfferSummary.LowestNewPrice.Amount')\n        currency = self._safe_get_element_text(\n            'OfferSummary.LowestNewPrice.CurrencyCode')\nif price:\n    dprice = Decimal(price) / 100 if 'JP' not in self.region else Decimal(price\n        )\n    return dprice, currency\nelse:\n    return None, None\nproperty",
        "CUT_5": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n"
    },
    {
        "functionName": "test_list_price",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "product = self.amazon.lookup(ItemId='B01NBTSVDN')\nprice, currency = product.list_price\nassert_equals(price, Decimal('12.49'))\nassert_equals(currency, 'USD')\n",
        "CUT_1": "\"\"\"List Price.\n\n        :return:\n            A tuple containing:\n\n                1. Decimal representation of price.\n                2. ISO Currency code (string).\n        \"\"\"\nprice = self._safe_get_element_text('ItemAttributes.ListPrice.Amount')\ncurrency = self._safe_get_element_text('ItemAttributes.ListPrice.CurrencyCode')\nif price:\n    dprice = Decimal(price) / 100 if 'JP' not in self.region else Decimal(price\n        )\n    return dprice, currency\nelse:\n    return None, None\nproperty",
        "CUT_2": "\"\"\"List Price.\n\n        :return:\n            A tuple containing:\n\n                1. Decimal representation of price.\n                2. ISO Currency code (string).\n        \"\"\"\nprice = self._safe_get_element_text('ItemAttributes.ListPrice.Amount')\ncurrency = self._safe_get_element_text('ItemAttributes.ListPrice.CurrencyCode')\nif price:\n    dprice = Decimal(price) / 100 if 'JP' not in self.region else Decimal(price\n        )\n    return dprice, currency\nelse:\n    return None, None\nproperty",
        "CUT_3": "\"\"\"Get Offer Price and Currency.\n\n        Return price according to the following process:\n\n        * If product has a sale return Sales Price, otherwise,\n        * Return Price, otherwise,\n        * Return lowest offer price, otherwise,\n        * Return None.\n\n        :return:\n            A tuple containing:\n\n                1. Decimal representation of price.\n                2. ISO Currency code (string).\n        \"\"\"\nprice = self._safe_get_element_text(\n    'Offers.Offer.OfferListing.SalePrice.Amount')\nif price:\n    currency = self._safe_get_element_text(\n        'Offers.Offer.OfferListing.SalePrice.CurrencyCode')\nelse:\n    price = self._safe_get_element_text(\n        'Offers.Offer.OfferListing.Price.Amount')\n    if price:\n        currency = self._safe_get_element_text(\n            'Offers.Offer.OfferListing.Price.CurrencyCode')\n    else:\n        price = self._safe_get_element_text(\n            'OfferSummary.LowestNewPrice.Amount')\n        currency = self._safe_get_element_text(\n            'OfferSummary.LowestNewPrice.CurrencyCode')\nif price:\n    dprice = Decimal(price) / 100 if 'JP' not in self.region else Decimal(price\n        )\n    return dprice, currency\nelse:\n    return None, None\nproperty",
        "CUT_4": "\"\"\"Get Offer Price and Currency.\n\n        Return price according to the following process:\n\n        * If product has a sale return Sales Price, otherwise,\n        * Return Price, otherwise,\n        * Return lowest offer price, otherwise,\n        * Return None.\n\n        :return:\n            A tuple containing:\n\n                1. Decimal representation of price.\n                2. ISO Currency code (string).\n        \"\"\"\nprice = self._safe_get_element_text(\n    'Offers.Offer.OfferListing.SalePrice.Amount')\nif price:\n    currency = self._safe_get_element_text(\n        'Offers.Offer.OfferListing.SalePrice.CurrencyCode')\nelse:\n    price = self._safe_get_element_text(\n        'Offers.Offer.OfferListing.Price.Amount')\n    if price:\n        currency = self._safe_get_element_text(\n            'Offers.Offer.OfferListing.Price.CurrencyCode')\n    else:\n        price = self._safe_get_element_text(\n            'OfferSummary.LowestNewPrice.Amount')\n        currency = self._safe_get_element_text(\n            'OfferSummary.LowestNewPrice.CurrencyCode')\nif price:\n    dprice = Decimal(price) / 100 if 'JP' not in self.region else Decimal(price\n        )\n    return dprice, currency\nelse:\n    return None, None\nproperty",
        "CUT_5": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n"
    },
    {
        "functionName": "test_running_time",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "product = self.amazon.lookup(ItemId='B01NBTSVDN')\nassert_equals(product.running_time, '3567')\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_3": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_4": "\"\"\"Get Parent.\n\n        Fetch parent product if it exists.\n        Use `parent_asin` to check if a parent exist before fetching.\n\n        :return:\n            An instance of :class:`~.AmazonProduct` representing the\n            parent product.\n        \"\"\"\nif not self.parent:\n    parent = self._safe_get_element('ParentASIN')\n    if parent:\n        self.parent = self.api.lookup(ItemId=parent)\nreturn self.parent\n",
        "CUT_5": "\"\"\"Get Parent.\n\n        Fetch parent product if it exists.\n        Use `parent_asin` to check if a parent exist before fetching.\n\n        :return:\n            An instance of :class:`~.AmazonProduct` representing the\n            parent product.\n        \"\"\"\nif not self.parent:\n    parent = self._safe_get_element('ParentASIN')\n    if parent:\n        self.parent = self.api.lookup(ItemId=parent)\nreturn self.parent\n"
    },
    {
        "functionName": "test_studio",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "product = self.amazon.lookup(ItemId='B01NBTSVDN')\nassert_equals(product.studio, 'Atlantic Records UK')\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Studio.\n\n        :return:\n            Studio (string)\n        \"\"\"\nreturn self._safe_get_element_text('ItemAttributes.Studio')\nproperty",
        "CUT_3": "\"\"\"Studio.\n\n        :return:\n            Studio (string)\n        \"\"\"\nreturn self._safe_get_element_text('ItemAttributes.Studio')\nproperty",
        "CUT_4": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_5": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty"
    },
    {
        "functionName": "test_is_preorder",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "product = self.amazon.lookup(ItemId='B01NBTSVDN')\nassert_equals(product.is_preorder, None)\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Initialize an Amazon Product Proxy.\n\n        :param item:\n            Lxml Item element.\n        \"\"\"\nsuper(AmazonProduct, self).__init__(item)\nself.aws_associate_tag = aws_associate_tag\nself.api = api\nself.parent = None\nself.region = kwargs.get('region', 'US')\n",
        "CUT_3": "\"\"\"Initialize an Amazon Product Proxy.\n\n        :param item:\n            Lxml Item element.\n        \"\"\"\nsuper(AmazonProduct, self).__init__(item)\nself.aws_associate_tag = aws_associate_tag\nself.api = api\nself.parent = None\nself.region = kwargs.get('region', 'US')\n",
        "CUT_4": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_5": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty"
    },
    {
        "functionName": "test_detail_page_url",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "product = self.amazon.lookup(ItemId='B01NBTSVDN')\nassert_true(product.detail_page_url.startswith(\n    'https://www.amazon.com/%C3%B7-Deluxe-Ed-Sheeran/dp/B01NBTSVDN'))\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Initialize an Amazon Product Proxy.\n\n        :param item:\n            Lxml Item element.\n        \"\"\"\nsuper(AmazonProduct, self).__init__(item)\nself.aws_associate_tag = aws_associate_tag\nself.api = api\nself.parent = None\nself.region = kwargs.get('region', 'US')\n",
        "CUT_3": "\"\"\"Initialize an Amazon Product Proxy.\n\n        :param item:\n            Lxml Item element.\n        \"\"\"\nsuper(AmazonProduct, self).__init__(item)\nself.aws_associate_tag = aws_associate_tag\nself.api = api\nself.parent = None\nself.region = kwargs.get('region', 'US')\n",
        "CUT_4": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_5": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty"
    },
    {
        "functionName": "test_availability",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nassert_equals(product.availability, 'Usually ships in 24 hours')\nproduct = self.amazon.lookup(ItemId='1491914254')\nassert_equals(product.availability, 'Not yet published')\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Availability\n\n        :return:\n            Availability (string).\n        \"\"\"\nreturn self._safe_get_element_text('Offers.Offer.OfferListing.Availability')\nproperty",
        "CUT_3": "\"\"\"Availability\n\n        :return:\n            Availability (string).\n        \"\"\"\nreturn self._safe_get_element_text('Offers.Offer.OfferListing.Availability')\nproperty",
        "CUT_4": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_5": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty"
    },
    {
        "functionName": "test_availability_type",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nassert_equals(product.availability_type, 'now')\nproduct = self.amazon.lookup(ItemId='1491914254')\nassert_equals(product.availability_type, 'now')\nproduct = self.amazon.lookup(ItemId='B00ZV9PXP2')\nassert_equals(product.availability_type, 'now')\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_3": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_4": "\"\"\"Get Parent.\n\n        Fetch parent product if it exists.\n        Use `parent_asin` to check if a parent exist before fetching.\n\n        :return:\n            An instance of :class:`~.AmazonProduct` representing the\n            parent product.\n        \"\"\"\nif not self.parent:\n    parent = self._safe_get_element('ParentASIN')\n    if parent:\n        self.parent = self.api.lookup(ItemId=parent)\nreturn self.parent\n",
        "CUT_5": "\"\"\"Get Parent.\n\n        Fetch parent product if it exists.\n        Use `parent_asin` to check if a parent exist before fetching.\n\n        :return:\n            An instance of :class:`~.AmazonProduct` representing the\n            parent product.\n        \"\"\"\nif not self.parent:\n    parent = self._safe_get_element('ParentASIN')\n    if parent:\n        self.parent = self.api.lookup(ItemId=parent)\nreturn self.parent\n"
    },
    {
        "functionName": "test_availability_min_max_hours",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nassert_equals(product.availability_min_hours, '0')\nassert_equals(product.availability_max_hours, '0')\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_3": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_4": "\"\"\"Get Parent.\n\n        Fetch parent product if it exists.\n        Use `parent_asin` to check if a parent exist before fetching.\n\n        :return:\n            An instance of :class:`~.AmazonProduct` representing the\n            parent product.\n        \"\"\"\nif not self.parent:\n    parent = self._safe_get_element('ParentASIN')\n    if parent:\n        self.parent = self.api.lookup(ItemId=parent)\nreturn self.parent\n",
        "CUT_5": "\"\"\"Get Parent.\n\n        Fetch parent product if it exists.\n        Use `parent_asin` to check if a parent exist before fetching.\n\n        :return:\n            An instance of :class:`~.AmazonProduct` representing the\n            parent product.\n        \"\"\"\nif not self.parent:\n    parent = self._safe_get_element('ParentASIN')\n    if parent:\n        self.parent = self.api.lookup(ItemId=parent)\nreturn self.parent\n"
    },
    {
        "functionName": "test_kwargs",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 0,
        "isTest": true,
        "Body": "amazon = AmazonAPI(_AMAZON_ACCESS_KEY, _AMAZON_SECRET_KEY,\n    _AMAZON_ASSOC_TAG, MaxQPS=0.7)\n",
        "CUT_1": "self.amazon = AmazonAPI(_AMAZON_ACCESS_KEY, _AMAZON_SECRET_KEY,\n    _AMAZON_ASSOC_TAG, CacheReader=cache_reader, CacheWriter=cache_writer,\n    MaxQPS=0.5)\n",
        "CUT_2": "\"\"\"Set Up.\n\n        Initialize the Amazon API wrapper. The following values:\n\n        * AMAZON_ACCESS_KEY\n        * AMAZON_SECRET_KEY\n        * AMAZON_ASSOC_TAG\n\n        Are imported from a custom file named: 'test_settings.py'\n        \"\"\"\nself.amazon = AmazonAPI(_AMAZON_ACCESS_KEY, _AMAZON_SECRET_KEY,\n    _AMAZON_ASSOC_TAG, CacheReader=cache_reader, CacheWriter=cache_writer,\n    MaxQPS=0.5)\n",
        "CUT_3": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_4": "\"\"\"Initialise\n\n        Initialise a search\n\n        :param api:\n            An instance of :class:`~.bottlenose.Amazon`.\n        :param aws_associate_tag:\n            An string representing an Amazon Associates tag.\n        \"\"\"\nself.kwargs = kwargs\nself.current_page = 0\nself.is_last_page = False\nself.api = api\nself.aws_associate_tag = aws_associate_tag\n",
        "CUT_5": "\"\"\"Initialise\n\n        Initialise a search\n\n        :param api:\n            An instance of :class:`~.bottlenose.Amazon`.\n        :param aws_associate_tag:\n            An string representing an Amazon Associates tag.\n        \"\"\"\nself.kwargs = kwargs\nself.current_page = 0\nself.is_last_page = False\nself.api = api\nself.aws_associate_tag = aws_associate_tag\n"
    },
    {
        "functionName": "test_images",
        "className": "TestAmazonApi",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 1,
        "isTest": true,
        "Body": "\"\"\"Test images property\n\n        Test that the images property has a value when using the\n        Images ResponseGroup\n        \"\"\"\nproduct = self.amazon.lookup(ResponseGroup='Images', ItemId='B00TSVVNQC')\nassert_equals(type(product.images), list)\nassert_equals(len(product.images), 7)\n",
        "CUT_1": "\"\"\"List of images for a response.\n        When using lookup with RespnoseGroup 'Images', you'll get a\n        list of images. Parse them so they are returned in an easily\n        used list format.\n\n        :return:\n            A list of `ObjectifiedElement` images\n        \"\"\"\ntry:\n    images = [image for image in self._safe_get_element('ImageSets.ImageSet')]\nexcept TypeError:\n    images = []\nreturn images\nproperty",
        "CUT_2": "\"\"\"List of images for a response.\n        When using lookup with RespnoseGroup 'Images', you'll get a\n        list of images. Parse them so they are returned in an easily\n        used list format.\n\n        :return:\n            A list of `ObjectifiedElement` images\n        \"\"\"\ntry:\n    images = [image for image in self._safe_get_element('ImageSets.ImageSet')]\nexcept TypeError:\n    images = []\nreturn images\nproperty",
        "CUT_3": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_4": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty",
        "CUT_5": "\"\"\"Parent ASIN.\n\n        Can be used to test if product has a parent.\n\n        :return:\n            Parent ASIN if product has a parent.\n        \"\"\"\nreturn self._safe_get_element('ParentASIN')\nproperty"
    },
    {
        "functionName": "test_cart_clear_required_params",
        "className": "TestAmazonCart",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 0,
        "isTest": true,
        "Body": "assert_raises(CartException, self.amazon.cart_clear, None, None)\nassert_raises(CartException, self.amazon.cart_clear, 'NotNone', None)\nassert_raises(CartException, self.amazon.cart_clear, None, 'NotNone')\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "return CACHE.get(url, None)\n",
        "CUT_3": "\"\"\"Initialize an Amazon Product Proxy.\n\n        :param item:\n            Lxml Item element.\n        \"\"\"\nsuper(AmazonProduct, self).__init__(item)\nself.aws_associate_tag = aws_associate_tag\nself.api = api\nself.parent = None\nself.region = kwargs.get('region', 'US')\n",
        "CUT_4": "\"\"\"Initialize an Amazon Product Proxy.\n\n        :param item:\n            Lxml Item element.\n        \"\"\"\nsuper(AmazonProduct, self).__init__(item)\nself.aws_associate_tag = aws_associate_tag\nself.api = api\nself.parent = None\nself.region = kwargs.get('region', 'US')\n",
        "CUT_5": "\"\"\"Safe Get Element.\n\n        Get a child element of root (multiple levels deep) failing silently\n        if any descendant does not exist.\n\n        :param root:\n            Lxml element.\n        :param path:\n            String path (i.e. 'Items.Item.Offers.Offer').\n        :return:\n            Element or None.\n        \"\"\"\nelements = path.split('.')\nparent = root if root is not None else self.parsed_response\nfor element in elements[:-1]:\n    parent = getattr(parent, element, None)\n    if parent is None:\n        return None\nreturn getattr(parent, elements[-1], None)\n"
    },
    {
        "functionName": "test_cart_create_single_item",
        "className": "TestAmazonCart",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 0,
        "isTest": true,
        "Body": "cart = self.build_cart_object()\nassert_equals(len(cart), 1)\n",
        "CUT_1": "return len(self._safe_get_element('Cart.CartItems.CartItem'))\n",
        "CUT_2": "return len(self._safe_get_element('Cart.CartItems.CartItem'))\n",
        "CUT_3": "return self._safe_get_element_text('Cart.CartId')\nproperty",
        "CUT_4": "return self._safe_get_element_text('Cart.HMAC')\nproperty",
        "CUT_5": "return self._safe_get_element_text('Cart.CartId')\nproperty"
    },
    {
        "functionName": "test_cart_create_multiple_item",
        "className": "TestAmazonCart",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 0,
        "isTest": true,
        "Body": "product1 = self.amazon.lookup(ItemId='B00ZV9PXP2')\nproduct2 = self.amazon.lookup(ItemId=TEST_ASIN)\nasins = [product1.asin, product2.asin]\ncart = self.amazon.cart_create([{'offer_id': product1._safe_get_element(\n    'Offers.Offer.OfferListing.OfferListingId'), 'quantity': 1}, {\n    'offer_id': product2._safe_get_element(\n    'Offers.Offer.OfferListing.OfferListingId'), 'quantity': 1}])\nassert_equals(len(cart), 2)\nfor item in cart:\n    assert_true(item.asin in asins)\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "\"\"\"ASIN (Amazon ID)\n\n        :return:\n            ASIN (string).\n        \"\"\"\nreturn self._safe_get_element_text('ASIN')\nproperty",
        "CUT_3": "\"\"\"ASIN (Amazon ID)\n\n        :return:\n            ASIN (string).\n        \"\"\"\nreturn self._safe_get_element_text('ASIN')\nproperty",
        "CUT_4": "\"\"\"Offer ID\n\n        :return:\n            Offer ID (string).\n        \"\"\"\nreturn self._safe_get_element('Offers.Offer.OfferListing.OfferListingId')\nproperty",
        "CUT_5": "\"\"\"Offer ID\n\n        :return:\n            Offer ID (string).\n        \"\"\"\nreturn self._safe_get_element('Offers.Offer.OfferListing.OfferListingId')\nproperty"
    },
    {
        "functionName": "test_cart_clear",
        "className": "TestAmazonCart",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 0,
        "isTest": true,
        "Body": "cart = self.build_cart_object()\nnew_cart = self.amazon.cart_clear(cart.cart_id, cart.hmac)\nassert_true(new_cart._safe_get_element('Cart.Request.IsValid'))\n",
        "CUT_1": "return self._safe_get_element_text('Cart.HMAC')\nproperty",
        "CUT_2": "return self._safe_get_element_text('Cart.HMAC')\nproperty",
        "CUT_3": "\"\"\"CartClear. Removes all items from cart\n        :param CartId: Id of cart\n        :param HMAC: HMAC of cart. Do not use url encoded\n        :return: An :class:`~.AmazonCart`.\n        \"\"\"\nif not CartId or not HMAC:\n    raise CartException('CartId required for CartClear call')\nresponse = self.api.CartClear(CartId=CartId, HMAC=HMAC, **kwargs)\nroot = objectify.fromstring(response)\nnew_cart = AmazonCart(root)\nself._check_for_cart_error(new_cart)\nreturn new_cart\n",
        "CUT_4": "\"\"\"CartClear. Removes all items from cart\n        :param CartId: Id of cart\n        :param HMAC: HMAC of cart. Do not use url encoded\n        :return: An :class:`~.AmazonCart`.\n        \"\"\"\nif not CartId or not HMAC:\n    raise CartException('CartId required for CartClear call')\nresponse = self.api.CartClear(CartId=CartId, HMAC=HMAC, **kwargs)\nroot = objectify.fromstring(response)\nnew_cart = AmazonCart(root)\nself._check_for_cart_error(new_cart)\nreturn new_cart\n",
        "CUT_5": "return self._safe_get_element_text('Cart.CartId')\nproperty"
    },
    {
        "functionName": "test_cart_clear_wrong_hmac",
        "className": "TestAmazonCart",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 0,
        "isTest": true,
        "Body": "cart = self.build_cart_object()\nhmac = cart.url_encoded_hmac + '%3d'\nassert_raises(CartInfoMismatchException, self.amazon.cart_clear, cart.\n    cart_id, hmac)\n",
        "CUT_1": "return self._safe_get_element_text('Cart.HMAC')\nproperty",
        "CUT_2": "return self._safe_get_element_text('Cart.HMAC')\nproperty",
        "CUT_3": "\"\"\"CartGet fetches existing cart\n        :param CartId: see CartCreate\n        :param HMAC: see CartCreate\n        :return: An :class:`~.AmazonCart`.\n        \"\"\"\nif not CartId or not HMAC:\n    raise CartException('CartId required for CartGet call')\nresponse = self.api.CartGet(CartId=CartId, HMAC=HMAC, **kwargs)\nroot = objectify.fromstring(response)\ncart = AmazonCart(root)\nself._check_for_cart_error(cart)\nreturn cart\n",
        "CUT_4": "\"\"\"CartGet fetches existing cart\n        :param CartId: see CartCreate\n        :param HMAC: see CartCreate\n        :return: An :class:`~.AmazonCart`.\n        \"\"\"\nif not CartId or not HMAC:\n    raise CartException('CartId required for CartGet call')\nresponse = self.api.CartGet(CartId=CartId, HMAC=HMAC, **kwargs)\nroot = objectify.fromstring(response)\ncart = AmazonCart(root)\nself._check_for_cart_error(cart)\nreturn cart\n",
        "CUT_5": "\"\"\"CartClear. Removes all items from cart\n        :param CartId: Id of cart\n        :param HMAC: HMAC of cart. Do not use url encoded\n        :return: An :class:`~.AmazonCart`.\n        \"\"\"\nif not CartId or not HMAC:\n    raise CartException('CartId required for CartClear call')\nresponse = self.api.CartClear(CartId=CartId, HMAC=HMAC, **kwargs)\nroot = objectify.fromstring(response)\nnew_cart = AmazonCart(root)\nself._check_for_cart_error(new_cart)\nreturn new_cart\n"
    },
    {
        "functionName": "test_cart_attributes",
        "className": "TestAmazonCart",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 0,
        "isTest": true,
        "Body": "cart = self.build_cart_object()\nfor attribute in CART_ATTRIBUTES:\n    getattr(cart, attribute)\n",
        "CUT_1": "\"\"\"Get Attribute\n\n        Get an attribute (child elements of 'ItemAttributes') value.\n\n        :param name:\n            Attribute name (string)\n        :return:\n            Attribute value (string) or None if not found.\n        \"\"\"\nreturn self._safe_get_element_text('ItemAttributes.{0}'.format(name))\n",
        "CUT_2": "\"\"\"Get Attribute\n\n        Get an attribute (child elements of 'ItemAttributes') value.\n\n        :param name:\n            Attribute name (string)\n        :return:\n            Attribute value (string) or None if not found.\n        \"\"\"\nreturn self._safe_get_element_text('ItemAttributes.{0}'.format(name))\n",
        "CUT_3": "\"\"\"Get Attribute Details\n\n        Gets XML attributes of the product attribute. These usually contain\n        details about the product attributes such as units.\n\n        :param name:\n            Attribute name (string)\n        :return:\n            A name/value dictionary.\n        \"\"\"\nreturn self._safe_get_element('ItemAttributes.{0}'.format(name)).attrib\n",
        "CUT_4": "\"\"\"Get Attribute Details\n\n        Gets XML attributes of the product attribute. These usually contain\n        details about the product attributes such as units.\n\n        :param name:\n            Attribute name (string)\n        :return:\n            A name/value dictionary.\n        \"\"\"\nreturn self._safe_get_element('ItemAttributes.{0}'.format(name)).attrib\n",
        "CUT_5": "return self._safe_get_element_text('Cart.HMAC')\nproperty"
    },
    {
        "functionName": "test_cart_item_attributes",
        "className": "TestAmazonCart",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 0,
        "isTest": true,
        "Body": "cart = self.build_cart_object()\nfor item in cart:\n    for attribute in CART_ITEM_ATTRIBUTES:\n        getattr(item, attribute)\n",
        "CUT_1": "\"\"\"Get Attribute\n\n        Get an attribute (child elements of 'ItemAttributes') value.\n\n        :param name:\n            Attribute name (string)\n        :return:\n            Attribute value (string) or None if not found.\n        \"\"\"\nreturn self._safe_get_element_text('ItemAttributes.{0}'.format(name))\n",
        "CUT_2": "\"\"\"Get Attribute\n\n        Get an attribute (child elements of 'ItemAttributes') value.\n\n        :param name:\n            Attribute name (string)\n        :return:\n            Attribute value (string) or None if not found.\n        \"\"\"\nreturn self._safe_get_element_text('ItemAttributes.{0}'.format(name))\n",
        "CUT_3": "\"\"\"Iterate.\n\n        A generator which iterate over all paginated results\n        returning :class:`~.AmazonProduct` for each item.\n\n        :return:\n            Yields a :class:`~.AmazonProduct` for each result item.\n        \"\"\"\nfor page in self.iterate_pages():\n    for item in getattr(page.Items, 'Item', []):\n        yield AmazonProduct(item, self.aws_associate_tag, self.api, **self.\n            kwargs)\n",
        "CUT_4": "\"\"\"Iterate.\n\n        A generator which iterate over all paginated results\n        returning :class:`~.AmazonProduct` for each item.\n\n        :return:\n            Yields a :class:`~.AmazonProduct` for each result item.\n        \"\"\"\nfor page in self.iterate_pages():\n    for item in getattr(page.Items, 'Item', []):\n        yield AmazonProduct(item, self.aws_associate_tag, self.api, **self.\n            kwargs)\n",
        "CUT_5": "items = self._safe_get_element('Cart.CartItems.CartItem')\nif items is not None:\n    for item in items:\n        yield AmazonCartItem(item)\n"
    },
    {
        "functionName": "test_cart_get",
        "className": "TestAmazonCart",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 0,
        "isTest": true,
        "Body": "cache_clear()\ncart = self.build_cart_object()\nfetched_cart = self.amazon.cart_get(cart.cart_id, cart.hmac)\nassert_equals(fetched_cart.cart_id, cart.cart_id)\nassert_equals(len(fetched_cart), len(cart))\n",
        "CUT_1": "return self._safe_get_element_text('Cart.HMAC')\nproperty",
        "CUT_2": "return self._safe_get_element_text('Cart.HMAC')\nproperty",
        "CUT_3": "return self._safe_get_element_text('Cart.CartId')\nproperty",
        "CUT_4": "return self._safe_get_element_text('Cart.CartId')\nproperty",
        "CUT_5": "return len(self._safe_get_element('Cart.CartItems.CartItem'))\n"
    },
    {
        "functionName": "test_cart_get_wrong_hmac",
        "className": "TestAmazonCart",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 0,
        "isTest": true,
        "Body": "cache_clear()\ncart = self.build_cart_object()\nassert_raises(CartInfoMismatchException, self.amazon.cart_get, cart.cart_id,\n    cart.hmac + '%3d')\n",
        "CUT_1": "return self._safe_get_element_text('Cart.HMAC')\nproperty",
        "CUT_2": "return self._safe_get_element_text('Cart.HMAC')\nproperty",
        "CUT_3": "return self._safe_get_element_text('Cart.CartId')\nproperty",
        "CUT_4": "return self._safe_get_element_text('Cart.CartId')\nproperty",
        "CUT_5": "return self._safe_get_element_text('Cart.URLEncodedHMAC')\nproperty"
    },
    {
        "functionName": "test_cart_add",
        "className": "TestAmazonCart",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 0,
        "isTest": true,
        "Body": "cart = self.build_cart_object()\nproduct = self.amazon.lookup(ItemId=TEST_ASIN)\nitem = {'offer_id': product._safe_get_element(\n    'Offers.Offer.OfferListing.OfferListingId'), 'quantity': 1}\nnew_cart = self.amazon.cart_add(item, cart.cart_id, cart.hmac)\nassert_true(len(new_cart) > len(cart))\n",
        "CUT_1": "product = self.amazon.lookup(ItemId='B00ZV9PXP2')\nreturn self.amazon.cart_create({'offer_id': product.offer_id, 'quantity': 1})\n",
        "CUT_2": "return self._safe_get_element_text('Cart.HMAC')\nproperty",
        "CUT_3": "return self._safe_get_element_text('Cart.HMAC')\nproperty",
        "CUT_4": "\"\"\"CartAdd.\n        :param items:\n            A dictionary containing the items to be added to the cart.\n            Or a list containing these dictionaries.\n            It is not possible to create an empty cart!\n            example: [{'offer_id': 'rt2ofih3f389nwiuhf8934z87o3f4h',\n            'quantity': 1}]\n        :param CartId: Id of Cart\n        :param HMAC: HMAC of Cart, see CartCreate for more info\n        :return:\n            An :class:`~.AmazonCart`.\n        \"\"\"\nif not CartId or not HMAC:\n    raise CartException('CartId and HMAC required for CartAdd call')\nif isinstance(items, dict):\n    items = [items]\nif len(items) > 10:\n    raise CartException(\"You can't add more than 10 items at once\")\noffer_id_key_template = 'Item.{0}.OfferListingId'\nquantity_key_template = 'Item.{0}.Quantity'\nfor i, item in enumerate(items):\n    kwargs[offer_id_key_template.format(i)] = item['offer_id']\n    kwargs[quantity_key_template.format(i)] = item['quantity']\nresponse = self.api.CartAdd(CartId=CartId, HMAC=HMAC, **kwargs)\nroot = objectify.fromstring(response)\nnew_cart = AmazonCart(root)\nself._check_for_cart_error(new_cart)\nreturn new_cart\n",
        "CUT_5": "\"\"\"CartAdd.\n        :param items:\n            A dictionary containing the items to be added to the cart.\n            Or a list containing these dictionaries.\n            It is not possible to create an empty cart!\n            example: [{'offer_id': 'rt2ofih3f389nwiuhf8934z87o3f4h',\n            'quantity': 1}]\n        :param CartId: Id of Cart\n        :param HMAC: HMAC of Cart, see CartCreate for more info\n        :return:\n            An :class:`~.AmazonCart`.\n        \"\"\"\nif not CartId or not HMAC:\n    raise CartException('CartId and HMAC required for CartAdd call')\nif isinstance(items, dict):\n    items = [items]\nif len(items) > 10:\n    raise CartException(\"You can't add more than 10 items at once\")\noffer_id_key_template = 'Item.{0}.OfferListingId'\nquantity_key_template = 'Item.{0}.Quantity'\nfor i, item in enumerate(items):\n    kwargs[offer_id_key_template.format(i)] = item['offer_id']\n    kwargs[quantity_key_template.format(i)] = item['quantity']\nresponse = self.api.CartAdd(CartId=CartId, HMAC=HMAC, **kwargs)\nroot = objectify.fromstring(response)\nnew_cart = AmazonCart(root)\nself._check_for_cart_error(new_cart)\nreturn new_cart\n"
    },
    {
        "functionName": "test_cart_modify",
        "className": "TestAmazonCart",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 0,
        "isTest": true,
        "Body": "cart = self.build_cart_object()\ncart_item_id = None\nfor item in cart:\n    cart_item_id = item.cart_item_id\nitem = {'cart_item_id': cart_item_id, 'quantity': 3}\nnew_cart = self.amazon.cart_modify(item, cart.cart_id, cart.hmac)\nassert_equals(new_cart[cart_item_id].quantity, '3')\n",
        "CUT_1": "\"\"\"\n        :param cart_item_id: access item by CartItemId\n        :return: AmazonCartItem\n        \"\"\"\nfor item in self:\n    if item.cart_item_id == cart_item_id:\n        return item\nraise KeyError('no item found with CartItemId: {0}'.format(cart_item_id))\n",
        "CUT_2": "\"\"\"\n        :param cart_item_id: access item by CartItemId\n        :return: AmazonCartItem\n        \"\"\"\nfor item in self:\n    if item.cart_item_id == cart_item_id:\n        return item\nraise KeyError('no item found with CartItemId: {0}'.format(cart_item_id))\n",
        "CUT_3": "\"\"\"CartAdd.\n        :param items:\n            A dictionary containing the items to be added to the cart.\n            Or a list containing these dictionaries.\n            example: [{'cart_item_id': 'rt2ofih3f389nwiuhf8934z87o3f4h',\n            'quantity': 1}]\n        :param CartId: Id of Cart\n        :param HMAC: HMAC of Cart, see CartCreate for more info\n        :return:\n            An :class:`~.AmazonCart`.\n        \"\"\"\nif not CartId or not HMAC:\n    raise CartException('CartId required for CartModify call')\nif isinstance(items, dict):\n    items = [items]\nif len(items) > 10:\n    raise CartException(\"You can't add more than 10 items at once\")\ncart_item_id_key_template = 'Item.{0}.CartItemId'\nquantity_key_template = 'Item.{0}.Quantity'\nfor i, item in enumerate(items):\n    kwargs[cart_item_id_key_template.format(i)] = item['cart_item_id']\n    kwargs[quantity_key_template.format(i)] = item['quantity']\nresponse = self.api.CartModify(CartId=CartId, HMAC=HMAC, **kwargs)\nroot = objectify.fromstring(response)\nnew_cart = AmazonCart(root)\nself._check_for_cart_error(new_cart)\nreturn new_cart\n",
        "CUT_4": "\"\"\"CartAdd.\n        :param items:\n            A dictionary containing the items to be added to the cart.\n            Or a list containing these dictionaries.\n            example: [{'cart_item_id': 'rt2ofih3f389nwiuhf8934z87o3f4h',\n            'quantity': 1}]\n        :param CartId: Id of Cart\n        :param HMAC: HMAC of Cart, see CartCreate for more info\n        :return:\n            An :class:`~.AmazonCart`.\n        \"\"\"\nif not CartId or not HMAC:\n    raise CartException('CartId required for CartModify call')\nif isinstance(items, dict):\n    items = [items]\nif len(items) > 10:\n    raise CartException(\"You can't add more than 10 items at once\")\ncart_item_id_key_template = 'Item.{0}.CartItemId'\nquantity_key_template = 'Item.{0}.Quantity'\nfor i, item in enumerate(items):\n    kwargs[cart_item_id_key_template.format(i)] = item['cart_item_id']\n    kwargs[quantity_key_template.format(i)] = item['quantity']\nresponse = self.api.CartModify(CartId=CartId, HMAC=HMAC, **kwargs)\nroot = objectify.fromstring(response)\nnew_cart = AmazonCart(root)\nself._check_for_cart_error(new_cart)\nreturn new_cart\n",
        "CUT_5": "\"\"\"CartAdd.\n        :param items:\n            A dictionary containing the items to be added to the cart.\n            Or a list containing these dictionaries.\n            It is not possible to create an empty cart!\n            example: [{'offer_id': 'rt2ofih3f389nwiuhf8934z87o3f4h',\n            'quantity': 1}]\n        :param CartId: Id of Cart\n        :param HMAC: HMAC of Cart, see CartCreate for more info\n        :return:\n            An :class:`~.AmazonCart`.\n        \"\"\"\nif not CartId or not HMAC:\n    raise CartException('CartId and HMAC required for CartAdd call')\nif isinstance(items, dict):\n    items = [items]\nif len(items) > 10:\n    raise CartException(\"You can't add more than 10 items at once\")\noffer_id_key_template = 'Item.{0}.OfferListingId'\nquantity_key_template = 'Item.{0}.Quantity'\nfor i, item in enumerate(items):\n    kwargs[offer_id_key_template.format(i)] = item['offer_id']\n    kwargs[quantity_key_template.format(i)] = item['quantity']\nresponse = self.api.CartAdd(CartId=CartId, HMAC=HMAC, **kwargs)\nroot = objectify.fromstring(response)\nnew_cart = AmazonCart(root)\nself._check_for_cart_error(new_cart)\nreturn new_cart\n"
    },
    {
        "functionName": "test_cart_delete",
        "className": "TestAmazonCart",
        "fileName": "/tests.py",
        "projectName": "python-amazon-simple-product-api",
        "Label": 0,
        "isTest": true,
        "Body": "cart = self.build_cart_object()\ncart_item_id = None\nfor item in cart:\n    cart_item_id = item.cart_item_id\nitem = {'cart_item_id': cart_item_id, 'quantity': 0}\nnew_cart = self.amazon.cart_modify(item, cart.cart_id, cart.hmac)\nassert_raises(KeyError, new_cart.__getitem__, cart_item_id)\n",
        "CUT_1": "\"\"\"\n        :param cart_item_id: access item by CartItemId\n        :return: AmazonCartItem\n        \"\"\"\nfor item in self:\n    if item.cart_item_id == cart_item_id:\n        return item\nraise KeyError('no item found with CartItemId: {0}'.format(cart_item_id))\n",
        "CUT_2": "\"\"\"\n        :param cart_item_id: access item by CartItemId\n        :return: AmazonCartItem\n        \"\"\"\nfor item in self:\n    if item.cart_item_id == cart_item_id:\n        return item\nraise KeyError('no item found with CartItemId: {0}'.format(cart_item_id))\n",
        "CUT_3": "\"\"\"CartAdd.\n        :param items:\n            A dictionary containing the items to be added to the cart.\n            Or a list containing these dictionaries.\n            example: [{'cart_item_id': 'rt2ofih3f389nwiuhf8934z87o3f4h',\n            'quantity': 1}]\n        :param CartId: Id of Cart\n        :param HMAC: HMAC of Cart, see CartCreate for more info\n        :return:\n            An :class:`~.AmazonCart`.\n        \"\"\"\nif not CartId or not HMAC:\n    raise CartException('CartId required for CartModify call')\nif isinstance(items, dict):\n    items = [items]\nif len(items) > 10:\n    raise CartException(\"You can't add more than 10 items at once\")\ncart_item_id_key_template = 'Item.{0}.CartItemId'\nquantity_key_template = 'Item.{0}.Quantity'\nfor i, item in enumerate(items):\n    kwargs[cart_item_id_key_template.format(i)] = item['cart_item_id']\n    kwargs[quantity_key_template.format(i)] = item['quantity']\nresponse = self.api.CartModify(CartId=CartId, HMAC=HMAC, **kwargs)\nroot = objectify.fromstring(response)\nnew_cart = AmazonCart(root)\nself._check_for_cart_error(new_cart)\nreturn new_cart\n",
        "CUT_4": "\"\"\"CartAdd.\n        :param items:\n            A dictionary containing the items to be added to the cart.\n            Or a list containing these dictionaries.\n            example: [{'cart_item_id': 'rt2ofih3f389nwiuhf8934z87o3f4h',\n            'quantity': 1}]\n        :param CartId: Id of Cart\n        :param HMAC: HMAC of Cart, see CartCreate for more info\n        :return:\n            An :class:`~.AmazonCart`.\n        \"\"\"\nif not CartId or not HMAC:\n    raise CartException('CartId required for CartModify call')\nif isinstance(items, dict):\n    items = [items]\nif len(items) > 10:\n    raise CartException(\"You can't add more than 10 items at once\")\ncart_item_id_key_template = 'Item.{0}.CartItemId'\nquantity_key_template = 'Item.{0}.Quantity'\nfor i, item in enumerate(items):\n    kwargs[cart_item_id_key_template.format(i)] = item['cart_item_id']\n    kwargs[quantity_key_template.format(i)] = item['quantity']\nresponse = self.api.CartModify(CartId=CartId, HMAC=HMAC, **kwargs)\nroot = objectify.fromstring(response)\nnew_cart = AmazonCart(root)\nself._check_for_cart_error(new_cart)\nreturn new_cart\n",
        "CUT_5": "return self._safe_get_element_text('Cart.HMAC')\nproperty"
    }
]